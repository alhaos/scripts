USE [master]
GO
/****** Object:  Database [LincolnDiagnosticsLIS]    Script Date: 14.04.2021 13:43:51 ******/
CREATE DATABASE [LincolnDiagnosticsLIS]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'LabHealth', FILENAME = N'D:\SQL\SE\MSSQL\Data\LincolnDiagnosticsLIS.mdf' , SIZE = 13237248KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
 LOG ON 
( NAME = N'LabHealth_log', FILENAME = N'D:\SQL\SE\MSSQL\Data\LincolnDiagnosticsLIS_log.ldf' , SIZE = 424128KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
 WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET COMPATIBILITY_LEVEL = 100
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [LincolnDiagnosticsLIS].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET ARITHABORT OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET AUTO_CLOSE ON 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET  DISABLE_BROKER 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET  MULTI_USER 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET DB_CHAINING OFF 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET QUERY_STORE = OFF
GO
USE [LincolnDiagnosticsLIS]
GO
/****** Object:  User [labhealth]    Script Date: 14.04.2021 13:43:54 ******/
CREATE USER [labhealth] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [dbro]    Script Date: 14.04.2021 13:43:54 ******/
CREATE USER [dbro] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_datareader] ADD MEMBER [dbro]
GO
/****** Object:  UserDefinedTableType [dbo].[dtNJList]    Script Date: 14.04.2021 13:43:55 ******/
CREATE TYPE [dbo].[dtNJList] AS TABLE(
	[Accession] [varchar](20) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[MOTests]    Script Date: 14.04.2021 13:43:55 ******/
CREATE TYPE [dbo].[MOTests] AS TABLE(
	[rTestCode] [varchar](100) NOT NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[OrderedResultedTestsType]    Script Date: 14.04.2021 13:43:55 ******/
CREATE TYPE [dbo].[OrderedResultedTestsType] AS TABLE(
	[OrderedTest] [varchar](20) NULL,
	[ResultedTest] [varchar](20) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[RackType]    Script Date: 14.04.2021 13:43:55 ******/
CREATE TYPE [dbo].[RackType] AS TABLE(
	[RowID] [tinyint] NOT NULL,
	[ColumnID] [tinyint] NOT NULL,
	[ColumnValue] [varchar](100) NULL,
	PRIMARY KEY CLUSTERED 
(
	[RowID] ASC,
	[ColumnID] ASC
)WITH (IGNORE_DUP_KEY = OFF)
)
GO
/****** Object:  UserDefinedTableType [dbo].[ResultedTestsType]    Script Date: 14.04.2021 13:43:55 ******/
CREATE TYPE [dbo].[ResultedTestsType] AS TABLE(
	[id] [int] NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[PerformedTest] [varchar](100) NOT NULL,
	[ResultTest] [varchar](100) NOT NULL,
	[Worksheet] [varchar](100) NULL,
	[LOINCcode] [varchar](100) NULL,
	[Organism] [varchar](100) NULL,
	[SensitivitiesXML] [xml] NULL,
	[Result] [varchar](100) NULL,
	[ResultFlag] [varchar](max) NULL,
	[NormalRange] [varchar](200) NULL,
	[Units] [varchar](100) NULL,
	[CorrectionsXML] [xml] NULL,
	[CallStatus] [varchar](50) NULL,
	[ResultComment] [varchar](max) NULL,
	[Status] [varchar](50) NULL,
	[EnteredBy] [varchar](100) NULL,
	[EntryDate] [datetime] NULL,
	[SiteID] [varchar](50) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[Outcome] [varchar](1) NULL,
	[Version] [int] NULL,
	[ReportAs] [varchar](100) NULL,
	[InternalComment] [varchar](1000) NULL,
	[ApprovedDate] [datetime] NULL,
	[AutoManualFlag] [bit] NULL,
	[QSSReleasedID] [varchar](20) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[Type4]    Script Date: 14.04.2021 13:43:55 ******/
CREATE TYPE [dbo].[Type4] AS TABLE(
	[aText] [varchar](100) NULL,
	[aLongText] [varchar](4000) NULL,
	[aDate] [datetime] NULL,
	[aNumber] [int] NULL
)
GO
/****** Object:  UserDefinedFunction [dbo].[B_GetAdjustmentDate]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create FUNCTION [dbo].[B_GetAdjustmentDate](@Accession varchar(100)) RETURNS datetime

AS
BEGIN
	DECLARE @AdjustmentDate as datetime
	
	SELECT @AdjustmentDate = MAX(QSSCreatedDate) 
	FROM tblPayment 
	WHERE Accession = @Accession 
	and AdjustmentAmt <> 0.00 
	
	RETURN  @AdjustmentDate
END

GO
/****** Object:  UserDefinedFunction [dbo].[B_GetAdjustmentDate_byPaymentDate]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[B_GetAdjustmentDate_byPaymentDate](@Accession varchar(100), @StartDate DateTime, @EndDate DateTime) RETURNS datetime

AS
BEGIN
       DECLARE @AdjustmentDate as datetime
       
       SELECT @AdjustmentDate = MAX(QSSCreatedDate) 
       FROM tblPayment 
       WHERE Accession = @Accession 
       and AdjustmentAmt <> 0.00 
       and QSSCreatedDate between @StartDate and @EndDate
       
       RETURN  @AdjustmentDate
END





GO
/****** Object:  UserDefinedFunction [dbo].[B_GetAdjustmentsTotal]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create FUNCTION [dbo].[B_GetAdjustmentsTotal](@Accession varchar(100)) RETURNS decimal(18, 2)

AS
BEGIN
	DECLARE @AdjutmentsTotal as decimal(18, 2)
	SELECT @AdjutmentsTotal = isnull(sum(AdjustmentAmt), 0.00) from tblPayment where Accession = @Accession
	RETURN  @AdjutmentsTotal
END

GO
/****** Object:  UserDefinedFunction [dbo].[B_GetAdjustmentsTotal_byPaymentDate]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[B_GetAdjustmentsTotal_byPaymentDate](@Accession varchar(100), @StartDate DateTime, @EndDate DateTime) RETURNS decimal(18, 2)

AS
BEGIN
       DECLARE @AdjutmentsTotal as decimal(18, 2)
       SELECT @AdjutmentsTotal = isnull(sum(AdjustmentAmt), 0.00) 
       from tblPayment 
       where Accession = @Accession
       and QSSCreatedDate between @StartDate and @EndDate
       RETURN  @AdjutmentsTotal
END


GO
/****** Object:  UserDefinedFunction [dbo].[B_GetAdjustmentsTotal_byPtRespFlag]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[B_GetAdjustmentsTotal_byPtRespFlag](@Accession varchar(100), @ptRespFlag as bit,
	@CPTCode varchar(100)) RETURNS decimal(18, 2)

AS
BEGIN
       DECLARE @AdjustmentsTotal as decimal(18, 2)
       SELECT @AdjustmentsTotal = isnull(sum(AdjustmentAmt), 0.00) 
       from tblPayment 
       where Accession = @Accession
       and isnull(ptRespFlag, 0) = @ptRespFlag
	   and CPTCode = isnull(@CPTCode, CPTCode)
       RETURN  @AdjustmentsTotal
END
GO
/****** Object:  UserDefinedFunction [dbo].[B_GetAgingDaysBilling]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create FUNCTION [dbo].[B_GetAgingDaysBilling](@Accession varchar(100)) RETURNS int

AS
BEGIN
	DECLARE @AgingDaysBilling as int
	
	SELECT @AgingDaysBilling = DATEDIFF(DAY, min(QSSUpdateDate), GetDate())
	FROM tblBill 
	WHERE Accession = @Accession 
	
	RETURN  @AgingDaysBilling
END

GO
/****** Object:  UserDefinedFunction [dbo].[B_GetAgingDaysDOS]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create FUNCTION [dbo].[B_GetAgingDaysDOS](@Accession varchar(100)) RETURNS int

AS
BEGIN
	DECLARE @AgingDaysDOS as int
	
	SELECT @AgingDaysDOS = DATEDIFF(DAY, ReceiveDate, GetDate())
	FROM tblBillAccessions 
	WHERE Accession = @Accession 
	
	RETURN  @AgingDaysDOS
END

GO
/****** Object:  UserDefinedFunction [dbo].[B_GetAmountBilledTotal]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[B_GetAmountBilledTotal](@Accession varchar(100)) RETURNS decimal(18, 2)

AS
BEGIN
	DECLARE @AmountBilledTotal as decimal(18, 2)
	SELECT @AmountBilledTotal = SUM(TotalFeeAmt) FROM tblBill WHERE Accession = @Accession and substring([Status], 1, 4) = 'BILL'
	RETURN  @AmountBilledTotal
END

GO
/****** Object:  UserDefinedFunction [dbo].[B_GetAmountExpTotal]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[B_GetAmountExpTotal](@Accession varchar(100)) RETURNS decimal(18, 2)

AS
BEGIN
       DECLARE @AmountExpTotal as decimal(18, 2)
       SELECT @AmountExpTotal = SUM(ExpAmt) FROM tblBill WHERE Accession = @Accession and substring([Status], 1, 4) = 'BILL'
       RETURN  @AmountExpTotal
END
GO
/****** Object:  UserDefinedFunction [dbo].[B_GetCPTBalance]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[B_GetCPTBalance](@Accession varchar(100), @CPT_code varchar(100), @OrderedTestCode varchar(100), @Modifier varchar(100), @GroupFlag bit) RETURNS decimal(18, 2)

AS
BEGIN
       DECLARE @totalCPTFee as decimal(18, 2)
       DECLARE @totalCPTPaymentAmt as decimal(18, 2)
       DECLARE @totalCPTAdjustedAmt as decimal(18, 2)
       DECLARE @ReturnCPTBalance as decimal(18, 2)
       --DECLARE @Units as int

       --SELECT @Units = Units from tblBill where Accession = @Accession and CPTcode = @CPT_code and OrderedTestCode = @OrderedTestCode and Modifier = @Modifier and GroupFlag = @GroupFlag
       SELECT @totalCPTFee = sum(TotalFeeAmt) from tblBill where Accession = @Accession and CPTcode = @CPT_code and OrderedTestCode = @OrderedTestCode and Modifier = @Modifier and GroupFlag = @GroupFlag
       SELECT @totalCPTPaymentAmt = isnull(sum(PaymentAmt), 0) from tblPayment where Accession = @Accession and OrderedTest = @OrderedTestCode and CPTcode = @CPT_code and Modifier = @Modifier and GroupFlag = @GroupFlag
       SELECT @totalCPTAdjustedAmt = isnull(sum(AdjustmentAmt), 0) from tblPayment where Accession = @Accession and OrderedTest = @OrderedTestCode and CPTcode = @CPT_code and Modifier = @Modifier and GroupFlag = @GroupFlag
       
       SELECT @ReturnCPTBalance = (@totalCPTFee - @totalCPTPaymentAmt - @totalCPTAdjustedAmt)
       RETURN  @ReturnCPTBalance

	  
END
GO
/****** Object:  UserDefinedFunction [dbo].[B_GetCPTPaidAmt]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create FUNCTION [dbo].[B_GetCPTPaidAmt](@Accession varchar(100), @CPT_code varchar(100), @OrderedTestCode varchar(100), @Modifier varchar(100), @GroupFlag bit) RETURNS decimal(18, 2)  
  
AS  
BEGIN  
         
       DECLARE @totalCPTPaymentAmt as decimal(18, 2)  
      SELECT @totalCPTPaymentAmt = isnull(sum(PaymentAmt), 0) from tblPayment where Accession = @Accession and OrderedTest = @OrderedTestCode and CPTcode = @CPT_code and Modifier = @Modifier and GroupFlag = @GroupFlag  
         
       RETURN  @totalCPTPaymentAmt  
  
  
END  
  
  
GO
/****** Object:  UserDefinedFunction [dbo].[B_GetPaymentDate]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create FUNCTION [dbo].[B_GetPaymentDate](@Accession varchar(100)) RETURNS datetime

AS
BEGIN
	DECLARE @PaymentDate as datetime
	
	SELECT @PaymentDate = MAX(QSSCreatedDate) 
	FROM tblPayment 
	WHERE Accession = @Accession 
	and PaymentAmt <> 0.00 
	
	RETURN  @PaymentDate
END

GO
/****** Object:  UserDefinedFunction [dbo].[B_GetPaymentDate_byPaymentDate]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[B_GetPaymentDate_byPaymentDate](@Accession varchar(100), @StartDate DateTime, @EndDate DateTime) RETURNS datetime

AS
BEGIN
       DECLARE @PaymentDate as datetime
       
       SELECT @PaymentDate = MAX(QSSCreatedDate) 
       FROM tblPayment 
       WHERE Accession = @Accession 
       and PaymentAmt <> 0.00 
       and QSSCreatedDate between @StartDate and @EndDate
       
       RETURN  @PaymentDate
END


GO
/****** Object:  UserDefinedFunction [dbo].[B_GetPaymentsTotal]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create FUNCTION [dbo].[B_GetPaymentsTotal](@Accession varchar(100)) RETURNS decimal(18, 2)

AS
BEGIN
	DECLARE @PaymentsTotal as decimal(18, 2)
	SELECT @PaymentsTotal = isnull(sum(PaymentAmt), 0.00) from tblPayment where Accession = @Accession
	RETURN  @PaymentsTotal
END

GO
/****** Object:  UserDefinedFunction [dbo].[B_GetPaymentsTotal_byPaymentDate]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[B_GetPaymentsTotal_byPaymentDate](@Accession varchar(100), @StartDate DateTime, @EndDate DateTime) RETURNS decimal(18, 2)

AS
BEGIN
       DECLARE @PaymentsTotal as decimal(18, 2)
       SELECT @PaymentsTotal = isnull(sum(PaymentAmt), 0.00) 
       from tblPayment 
       where Accession = @Accession
       and QSSCreatedDate between @StartDate and @EndDate
       RETURN  @PaymentsTotal
END





GO
/****** Object:  UserDefinedFunction [dbo].[B_GetPaymentsTotal_byPtRespFlag]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[B_GetPaymentsTotal_byPtRespFlag](@Accession varchar(100), @ptRespFlag as bit,
	@CPTCode varchar(100)) RETURNS decimal(18, 2)

AS
BEGIN
       DECLARE @PaymentsTotal as decimal(18, 2)
       SELECT @PaymentsTotal = isnull(sum(PaymentAmt), 0.00) 
       from tblPayment 
       where Accession = @Accession
       and isnull(ptRespFlag, 0) = @ptRespFlag
	   and CPTCode = isnull(@CPTCode, CPTCode)
       RETURN  @PaymentsTotal
END
GO
/****** Object:  UserDefinedFunction [dbo].[B_GetRemarkDescription]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




create FUNCTION [dbo].[B_GetRemarkDescription](@Accession varchar(100), @CPT_Code varchar(100), @Modifier varchar(100), @CheckNumber varchar(100)) RETURNS  varchar(MAX)

AS
BEGIN
	DECLARE @RemarkDescription as varchar(MAX)
	
	Select @RemarkDescription = 
	COALESCE(@RemarkDescription + '| ', '') + '(' + r.RemarkCode + ') ' + rd.RemarkDescription
	from tblBillingRemitRemarks r
	left outer join tblBillingRemitRemarkDefinitions rd
	on rd.RemarkCode = r.RemarkCode
	where r.Accession = @Accession
	and r.CPT_Code = @CPT_Code
	and r.Modifier = @Modifier
	and r.CheckNumber = @CheckNumber

	--select @RemarkDescription
	RETURN  @RemarkDescription
END

GO
/****** Object:  UserDefinedFunction [dbo].[B_GetSpecimenCode]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[B_GetSpecimenCode](@Accession varchar(100)) RETURNS  varchar(20)          
          
AS          
BEGIN          
 DECLARE @SpecimenType as varchar(20)          
           
 SELECT @SpecimenType = SpecimenDataXML.value('(/QSSLISOrderRecord/specimencodes/specimencode/@description)[1]', 'varchar(max)')          
 FROM tblAccessions           
 WHERE Accession = @Accession           
           
 RETURN  @SpecimenType          
END     

GO
/****** Object:  UserDefinedFunction [dbo].[B_GetSpecimenType]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[B_GetSpecimenType](@Accession varchar(100)) RETURNS  varchar(20)

AS
BEGIN
	DECLARE @SpecimenType as varchar(20)
	
	SELECT @SpecimenType = SpecimenDataXML.value('(/QSSLISOrderRecord/specimencodes/specimencode/@description)[1]', 'varchar(max)')
	FROM tblAccessions 
	WHERE Accession = @Accession 
	
	RETURN  @SpecimenType
END

GO
/****** Object:  UserDefinedFunction [dbo].[B_GetSpecimenType1]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create FUNCTION [dbo].[B_GetSpecimenType1](@Accession varchar(100)) RETURNS  varchar(20)

AS
BEGIN
	DECLARE @SpecimenType as varchar(20)
	
	SELECT @SpecimenType = SpecimenDataXML.value('(/QSSLISOrderRecord/specimencodes/specimencode/@description)[1]', 'varchar(max)')
	FROM tblAccessions 
	WHERE Accession = @Accession 
	
	RETURN  @SpecimenType
END



GO
/****** Object:  UserDefinedFunction [dbo].[B_GetTotalBillBalance]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[B_GetTotalBillBalance](@Accession varchar(100)) RETURNS decimal(18, 2)

AS
BEGIN

	DECLARE @totalFee as decimal(18, 2)
	DECLARE @totalPaymentAmt as decimal(18, 2)
	DECLARE @totalAdjustedAmt as decimal(18, 2)
	DECLARE @ReturnTotalBalance as decimal(18, 2)

	SELECT @totalFee = SUM(totalfeeamt) FROM tblBill WHERE accession = @Accession and substring([Status], 1, 4) = 'BILL'
	SELECT @totalPaymentAmt = isnull(sum(PaymentAmt), 0) FROM tblPayment WHERE Accession = @Accession
	SELECT @totalAdjustedAmt = isnull(sum(AdjustmentAmt), 0) FROM tblPayment WHERE Accession = @Accession
	
	SELECT @ReturnTotalBalance = (@totalFee - @totalPaymentAmt - @totalAdjustedAmt)
	RETURN  @ReturnTotalBalance



   --DECLARE @id INTEGER

   --set @id= (select TOP(1) id From tbl where col=@parm)

   --RETURN @id
END



GO
/****** Object:  UserDefinedFunction [dbo].[B_GetTotalBillBalance_tblAccessionsFinancials]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[B_GetTotalBillBalance_tblAccessionsFinancials](@Accession varchar(100)) RETURNS decimal(18, 2)

AS
BEGIN

	Return (Select AccessionCurrentBalance from tblAccessionsFinancials where Accession = @Accession)

END

GO
/****** Object:  UserDefinedFunction [dbo].[B_GetTotalBillBalancePerClient]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[B_GetTotalBillBalancePerClient](@ClientCode varchar(100)) RETURNS decimal(18, 2)

AS
BEGIN

	DECLARE @totalFee as decimal(18, 2)
	DECLARE @totalPaymentAmt as decimal(18, 2)
	DECLARE @totalAdjustedAmt as decimal(18, 2)
	DECLARE @ReturnTotalBalance as decimal(18, 2)

	SELECT @totalFee = SUM(totalfeeamt) FROM tblBill b
	INNER JOIN tblBillAccessions ba
	ON ba.Accession = b.Accession
	WHERE ba.ClientCode = @ClientCode and [Status] = 'BILL'

	SELECT @totalPaymentAmt = isnull(sum(PaymentAmt), 0) 
	FROM tblPayment p 
	INNER JOIN tblBillAccessions ba
	ON ba.Accession = p.Accession
	WHERE ba.ClientCode = @ClientCode

	SELECT @totalAdjustedAmt = isnull(sum(AdjustmentAmt), 0) 
	FROM tblPayment p 
	INNER JOIN tblBillAccessions ba
	ON ba.Accession = p.Accession
	WHERE ba.ClientCode = @ClientCode
	
	SELECT @ReturnTotalBalance = (@totalFee - @totalPaymentAmt - @totalAdjustedAmt)
	RETURN  @ReturnTotalBalance


END
GO
/****** Object:  UserDefinedFunction [dbo].[B_PaidAmount]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create FUNCTION [dbo].[B_PaidAmount](@Accession varchar(100)) RETURNS decimal(18, 2)

AS
BEGIN
	DECLARE @PaidAmount as decimal(18, 2)
	
	SELECT @PaidAmount = isnull(CONVERT(varchar(10), CONVERT(money, sum(PaymentAmt))), 0.00) from tblPayment where Accession = @Accession
	
	RETURN  @PaidAmount
END
GO
/****** Object:  UserDefinedFunction [dbo].[F_GetResultStatus]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[F_GetResultStatus](@Accession varchar(100)) RETURNS  varchar(20)

AS
BEGIN
	DECLARE @ResultStatus as varchar(20)
	DECLARE @AccessionStatus as varchar(20)
      
	SELECT @ResultStatus = CASE  
		WHEN EXISTS (SELECT rt.Status   
			FROM dbo.tblResultedTests rt (nolock)  
			WHERE rt.Accession = @Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold')) THEN 'Pending'  
		When Exists (Select rt.Status From dbo.tblResultedTests rt where rt.Accession = @Accession and rt.Status = 'Final') then 'Final'
		When Exists (Select rt.Status From dbo.tblResultedTests rt where rt.Accession = @Accession and rt.Status = 'Cancelled') then 'Cancelled'
		Else 'No Status'
	END
	--Default AccessionStatus to above answer first
	Set @AccessionStatus = @ResultStatus  
    IF (@ResultStatus = 'Final' or @ResultStatus = 'Cancelled') 
	Begin
		DECLARE @ApprovedResultStatus varchar(20)
		Select @ApprovedResultStatus = CASE
			WHEN EXISTS (SELECT ApprovedDate from dbo.tblResultedTests where (ApprovedDate is null or ApprovedDate = '') and Accession = @Accession) Then 'UnApproved'
			Else 'Approved'
		END
		Select @AccessionStatus = CASE When (@ResultStatus = 'Final' or @ResultStatus = 'Cancelled') and @ApprovedResultStatus = 'Approved' THEN 'Final/Approved'
		Else @ResultStatus
		END
	End
	
	RETURN  @AccessionStatus
END

GO
/****** Object:  UserDefinedFunction [dbo].[getInterface]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[getInterface](@id int)      
RETURNS varchar(50)       
AS       
BEGIN      
    DECLARE @interface varchar(50);      
      SELECT @interface =Interface  FROM tblEMRInterfaces  where id=@id    
    RETURN @interface;      
END
GO
/****** Object:  UserDefinedFunction [dbo].[GetResultStatus]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create FUNCTION [dbo].[GetResultStatus](@Accession varchar(100)) RETURNS  varchar(20)

AS
BEGIN
	DECLARE @rtStatus as varchar(20)
	SELECT @rtStatus = CASE WHEN EXISTS
                          (SELECT     rt.Status
                            FROM          dbo.tblResultedTests rt(nolock)
                            WHERE      rt.Accession = @Accession AND (rt.Status = 'Pending' OR
                                                   rt.Status = 'Hold')) THEN 'Pending' ELSE 'Final' END
	RETURN @rtStatus

END
GO
/****** Object:  UserDefinedFunction [dbo].[MO_GetAccessionMailoutOrderedTestMatch]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
create FUNCTION [dbo].[MO_GetAccessionMailoutOrderedTestMatch](@Accession varchar(100), @MailoutLabCode varchar(100)) RETURNS bit  
  
AS  
BEGIN  
 DECLARE @MOTests AS MOTests   
 DECLARE @isMatch bit  
 DECLARE @TestsFromtblMailoutOrders varchar(max)  
 DECLARE @TestsFromtblMailoutOrdersORDERED varchar(max)  
 DECLARE @TestsGeneratedWithFunctionInOrder varchar(max)  
 Select @TestsFromtblMailoutOrders = MailoutOrderSetCode from tblMailoutOrders where MOAccession = @Accession and MailoutLabCode = @MailoutLabCode  
 Select @TestsGeneratedWithFunctionInOrder = dbo.MO_GetAccessionMailoutOrderedTestsByMOLab(@Accession, @MailoutLabCode)  
   
 --********************TO ORDER THE CURRENTLY SAVED AND MAYBE NOT ORDERD TESTCODES:  
 DECLARE   @StartPos smallint  
  , @EndPos smallint  
  , @CurVal varchar(20)  
  , @FieldList varchar(2000)  
  , @PTestsList varchar(500)  
  , @iPos smallint  
  
 BEGIN  
  Set @FieldList =''  
  Set @FieldList = @TestsFromtblMailoutOrders + '|'  
  Set @StartPos = 1  
  Set @EndPos = 1  
   -- Start the looping operation  
  While @EndPos > 0  
     Begin  
     Set @EndPos = CharIndex('|', @FieldList, @StartPos)  
     If @EndPos > 0  
     Begin  
     Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))  
     -- Add current row to TempTable  
     Insert @MOTests (rTestCode) Values (@CurVal)  
     Set @StartPos = @EndPos + 1  
     End  
     End  
  end  
  
 set @TestsFromtblMailoutOrdersORDERED =( Select  rTestCode + '|' AS 'data()'   
 from @MOTests  
 order by rTestCode  
 FOR XML PATH(''))  
  
 set @TestsFromtblMailoutOrdersORDERED=REPLACE(@TestsFromtblMailoutOrdersORDERED,'| ','|')  
 if @TestsFromtblMailoutOrdersORDERED <>''  
  begin  
  set @TestsFromtblMailoutOrdersORDERED = left(@TestsFromtblMailoutOrdersORDERED, Len(@TestsFromtblMailoutOrdersORDERED) - 1)  
  end  
   
 if @TestsFromtblMailoutOrdersORDERED = @TestsGeneratedWithFunctionInOrder  
 begin  
  SET @isMatch = 'True'  
  --print 'BINGO'  
 end  
 else  
 begin  
  SET @isMatch = 'False'  
 end  
 RETURN @isMatch  
  
  
END  
  
  
  
  
  
GO
/****** Object:  UserDefinedFunction [dbo].[MO_GetAccessionMailoutOrderedTestsByMOLab]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[MO_GetAccessionMailoutOrderedTestsByMOLab](@Accession varchar(100), @MailoutLabCode varchar(100)) RETURNS varchar(max)

AS
BEGIN
	
		DECLARE @MailoutOrderTests varchar(max) = ''

	----GETS LIS ORDER TEST CODES
	--set @MailoutOrderTests =( Select distinct  ot.OrderedTest + '|' AS 'data()' 
	--from tblOrderedTests ot
	--inner join tblPerformedTestsDefinitions ptd
	--on ot.PerformedTest = ptd.PerformedTest
	--and ptd.MailoutFlag = 'M'
	--where ot.Accession = @Accession
	--and ptd.PerformedBy = @MailoutLabCode
	--FOR XML PATH(''))
	--set @MailoutOrderTests=REPLACE(@MailoutOrderTests,'| ','|')
	--if @MailoutOrderTests <>''
	--	begin
	--	set @MailoutOrderTests = left(@MailoutOrderTests, Len(@MailoutOrderTests) - 1)
	--	end

	----GETS MAILOUT LAB TRANLATION PERFORMED TEST CODES
	set @MailoutOrderTests =( Select distinct  mot.MailoutTestCode + '|' AS 'data()' 
	from tblMailoutTestCodes mot
	inner join tblPerformedTestsDefinitions ptd
	on mot.TestCode = ptd.PerformedTest
	and ptd.MailoutFlag = 'M'
	inner join tblOrderedTests ot
	on ot.PerformedTest = ptd.PerformedTest
	where ot.Accession = @Accession
	and ptd.Mailoutlab = @MailoutLabCode

	FOR XML PATH(''))
	
	set @MailoutOrderTests=REPLACE(@MailoutOrderTests,'| ','|')
	if @MailoutOrderTests <>''
		begin
		set @MailoutOrderTests = left(@MailoutOrderTests, Len(@MailoutOrderTests) - 1)
		end
		
	RETURN  @MailoutOrderTests
END





GO
/****** Object:  UserDefinedFunction [dbo].[udf_GetDataForTestResult]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION [dbo].[udf_GetDataForTestResult]
(
	@Accession varchar(100),
    @TestCode varchar(100),
    @Result varchar(100)
)
RETURNS @ResultData TABLE 
(
	AlphaDecodeFlag varchar(10) null,
	Sex varchar(20) null,
	PatientAge integer null,
	UseCutoffLimit bit null,
	UseRangeLimits bit null,
	TestVersion int null,
	MedicationData varchar(Max) null,
	MedicationsDataXML XML null,
	MedicationDataIndirect varchar(1000) null,
	NormalRange varchar(200) null,
	UseAlpha bit null,
	AutoReleaseFlag bit null,
	DecodedFlagRequired bit null,
	CutoffLowLimit varchar(100) null,
	CutoffHighLimit varchar(100) null,
	CutoffHoldLimit varchar(100) null,
	ReportNormalRangeLow varchar(100) null,
	ReportNormalRangeHigh varchar(100) null,
	DynamicLowLimit varchar(100) null,
	DynamicHighLimit varchar(100) null,
	ReportAs varchar(100) null,
	LowReportAs varchar(100) null,
	TestCode varchar(20) null,
	Version integer null, 
	LowLimit varchar(100) null,
	HighLimit varchar(100) null,
	Range_NormalLow varchar(100) null,
	Range_NormalHigh varchar(100) null,
	Range_CriticalLow varchar(100) null,
	Range_CriticalHigh varchar(100) null,
	AutoReleaseLowLimit varchar(100) null,
	AutoReleaseHighLimit varchar(100) null,
	DisplayResultAs varchar(100) null,
	Range_DynamicLow varchar(100) null,
	Range_DynamicLowReportAs varchar(100) null,
	Range_DynamicHigh varchar(100) null,
	Range_DynamicHighReportAs varchar(100) null,
	Range_MinAge decimal(11,5) null,
	Range_MaxAge decimal(11,5) null,
	Decimals varchar(100) null,
	AlphaDecodeFlagInstrument varchar(20) null,
	AlphaDecode varchar(20) null
)
AS
BEGIN
	Declare @Age as int, @Gender varchar(10);

	Select  @Age = DATEDIFF(year,pat.ptDateOfBirth, getDate()), @Gender = ptSex 
	from tblPatient pat (nolock)
	INNER JOIN tblAccessions acc (nolock)
	ON pat.PatientId = acc.PatientID
	Where acc.Accession = @Accession
	IF EXISTS (SELECT 1 FROM tblResultedTestsParams a
		JOIN tblResultedTests b ON a.ResultedTest = b.ResultTest AND a.[Version] = b.[Version]
		WHERE Accession = @Accession AND ResultTest = @TestCode AND Sex = @Gender AND @Age BETWEEN MinAge and MaxAge)

	Insert into @ResultData
	SELECT     ISNULL((SELECT Flag FROM tblResultedTestDecodes WHERE TestCode = @TestCode AND decode = @Result),'') AS 'AlphaDecodeFlag', 
                    @Gender Sex, @Age PatientAge,
                    tblResultedTestsDefinitions.UseCutoffLimit, 
					tblResultedTestsDefinitions.UseRangeLimits, tblResultedTests.Version AS TestVersion, 
                    tblResultedTestsDefinitions.MedicationData, a.MedicationsDataXML, tblResultedTestsDefinitions.MedicationDataIndirect, tblResultedTests.NormalRange, 
                    tblResultedTestsDefinitions.UseAlpha, tblResultedTestsDefinitions.AutoReleaseFlag, 
					tblResultedTestsDefinitions.DecodedFlagRequired, tblResultedTestsDefinitions.CutoffLowLimit, 
                    tblResultedTestsDefinitions.CutoffHighLimit, tblResultedTestsDefinitions.CutoffHoldLimit, 
					tblResultedTestsDefinitions.ReportNormalRangeLow, tblResultedTestsDefinitions.ReportNormalRangeHigh, 
                    tblResultedTestsDefinitions.DynamicLowLimit, tblResultedTestsDefinitions.DynamicHighLimit, tblResultedTestsDefinitions.ReportAs, 
					tblResultedTestsDefinitions.LowReportAs, tblResultedTestsDefinitions.TestCode, tblResultedTestsDefinitions.Version AS [Version], 
					tblResultedTestsParams.LowLimit, tblResultedTestsParams.HighLimit , tblResultedTestsParams.NormalLowLimit AS 'Range_NormalLow', 
                    tblResultedTestsParams.NormalHighLimit AS 'Range_NormalHigh', tblResultedTestsParams.CriticalLowLimit AS 'Range_CriticalLow', 
                    tblResultedTestsParams.CriticalHighLimit AS 'Range_CriticalHigh', tblResultedTestsParams.AutoReleaseLowLimit, 
                    tblResultedTestsParams.AutoReleaseHighLimit, tblResultedTestsParams.DisplayResultAs, 
                    tblResultedTestsParams.DynamicLow AS Range_DynamicLow, tblResultedTestsParams.DynamicLowReportAs AS Range_DynamicLowReportAs, 
                    tblResultedTestsParams.DynamicHigh AS Range_DynamicHigh, tblResultedTestsParams.DynamicHighReportAs AS Range_DynamicHighReportAs, 
				tblResultedTestsParams.MinAge AS 'Range_MinAge', tblResultedTestsParams.MaxAge AS 'Range_MaxAge', tblResultedTestsDefinitions.Decimals,
				 CASE WHEN EXISTS  
                          (SELECT     Flag  
                            FROM          tblResultedTestDecodes rt1(nolock)  
                            WHERE      rt1.TestCode = @TestCode AND rt1.Flag <> '' AND (rt1.decode = @Result or rt1.Code=@Result)) THEN 'True' ELSE 'False' END AS 'AlphaDecodeFlagInstrument',   
				        (SELECT  top 1    Flag  
                       FROM       tblResultedTestDecodes rt1(nolock)  
                       WHERE      rt1.TestCode = @TestCode AND rt1.Flag <> '' AND (rt1.decode = @Result or rt1.Code=@Result))  AS 'AlphaDecode'
	
	FROM         tblResultedTestsDefinitions INNER JOIN
					tblAccessions AS a WITH (nolock) ON @Accession = a.Accession INNER JOIN
					tblPatient ON a.PatientID = tblPatient.PatientId INNER JOIN
					tblResultedTestsParams ON tblResultedTestsDefinitions.TestCode = tblResultedTestsParams.ResultedTest AND 
					tblResultedTestsDefinitions.Version = tblResultedTestsParams.Version AND @Gender = tblResultedTestsParams.Sex FULL OUTER JOIN
					tblResultedTests ON tblResultedTestsDefinitions.Version = tblResultedTests.Version AND a.Accession = tblResultedTests.Accession
	WHERE     (@TestCode = tblResultedTestsDefinitions.TestCode) AND (tblResultedTests.ResultTest = @TestCode) and @Age BETWEEN tblResultedTestsParams.MinAge and CAST(REPLACE(tblResultedTestsParams.MaxAge, '0.00000', '999.00000') AS DECIMAL (11, 5))
ELSE
	Insert into @ResultData
    SELECT     ISNULL((SELECT Flag FROM tblResultedTestDecodes WHERE TestCode = @TestCode AND decode = @Result),'') AS 'AlphaDecodeFlag', 
	            @Gender Sex, @Age PatientAge,            
                tblResultedTestsDefinitions.UseCutoffLimit, tblResultedTestsDefinitions.UseRangeLimits, tblResultedTests.Version AS TestVersion,   
                tblResultedTestsDefinitions.MedicationData, a.MedicationsDataXML, tblResultedTestsDefinitions.MedicationDataIndirect, tblResultedTests.NormalRange,   
                tblResultedTestsDefinitions.UseAlpha, tblResultedTestsDefinitions.AutoReleaseFlag, tblResultedTestsDefinitions.DecodedFlagRequired, tblResultedTestsDefinitions.CutoffLowLimit,   
                tblResultedTestsDefinitions.CutoffHighLimit, tblResultedTestsDefinitions.CutoffHoldLimit, 
				tblResultedTestsDefinitions.ReportNormalRangeLow, tblResultedTestsDefinitions.ReportNormalRangeHigh,   
                tblResultedTestsDefinitions.DynamicLowLimit, tblResultedTestsDefinitions.DynamicHighLimit, tblResultedTestsDefinitions.ReportAs, tblResultedTestsDefinitions.LowReportAs,   
                tblResultedTestsDefinitions.TestCode, tblResultedTestsDefinitions.[Version] AS [Version], 
				'' LowLimit, '' HighLimit , '' 'Range_NormalLow', '' 'Range_NormalHigh', '' 'Range_CriticalLow',
                '' 'Range_CriticalHigh', '' 'AutoReleaseLowLimit', '' 'AutoReleaseHighLimit', '' DisplayResultAs,   
                '' Range_DynamicLow, '' Range_DynamicLowReportAs, '' Range_DynamicHigh, '' Range_DynamicHighReportAs,   
                0.0 'Range_MinAge', 0.0 'Range_MaxAge', tblResultedTestsDefinitions.Decimals,
				 CASE WHEN EXISTS  
                          (SELECT     Flag  
                            FROM          tblResultedTestDecodes rt1(nolock)  
                            WHERE      rt1.TestCode = @TestCode AND rt1.Flag <> '' AND (rt1.decode = @Result or rt1.Code=@Result)) THEN 'True' ELSE 'False' END AS 'AlphaDecodeFlagInstrument',   
				        (SELECT  top 1    Flag  
                       FROM       tblResultedTestDecodes rt1(nolock)  
                       WHERE      rt1.TestCode = @TestCode AND rt1.Flag <> '' AND (rt1.decode = @Result or rt1.Code=@Result))  AS 'AlphaDecode'
					  
	FROM         tblResultedTestsDefinitions INNER JOIN  
							tblAccessions AS a WITH (nolock) ON @Accession = a.Accession FULL OUTER JOIN  
							tblResultedTests ON tblResultedTestsDefinitions.Version = tblResultedTests.Version AND a.Accession = tblResultedTests.Accession  
							  
	WHERE     (@TestCode = tblResultedTestsDefinitions.TestCode) AND (tblResultedTests.ResultTest = @TestCode);
    
	
	RETURN 
END

GO
/****** Object:  UserDefinedFunction [dbo].[udf_GetResultedTestDecodes]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Paul Antompietri
-- Create date: 5/21/2020
-- Description:	Originally spGetResultedTestDecodes; same code with addition of rtd.AutoReleaseFlag
-- =============================================
CREATE FUNCTION [dbo].[udf_GetResultedTestDecodes]
(
    @TestCode varchar(100)  
)
RETURNS @ResultData TABLE 
(
	TestCode varchar(100) null,
	Code varchar(20) null,
	Decode varchar(100) null,
	Flag varchar(20) null,
	DecodedFlagRequired bit null,
	AutoReleaseFlag bit null
)
AS
BEGIN
	
	Insert into @ResultData
	SELECT rt.TestCode,  rtd.Code, rtd.Decode, rtd.Flag, DecodedFlagRequired, rtd.AutoReleaseFlag
		FROM dbo.tblResultedTestsDefinitions  rt (NOLOCK)
		LEFT JOIN dbo.tblResultedTestDecodes rtd (NOLOCK)
		ON rt. TestCode = rtd.TestCode
		INNER JOIN  tblResultCodeVersions ON rt.TestCode = tblResultCodeVersions.TestCode AND 
        rt.Version = tblResultCodeVersions.CurrentVersion
	WHERE rt.TestCode = @TestCode

	RETURN 
END

GO
/****** Object:  UserDefinedFunction [dbo].[udf_GetTestInfo]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[udf_GetTestInfo] (@OrderID varchar(100), @Instrument varchar(100))            
RETURNS @retTable Table          
(          
 TestCode varchar(100),          
 Mean varchar(100),          
 Deviation varchar(100)          
)          
AS            
BEGIN           
         
 --Get pipe delimited strings        
 DECLARE @Codes varchar(max)        
 DECLARE @Avgs varchar(max)        
 DECLARE @Devs varchar(max)        
         
 SELECT @Codes = TestCodes,        
  @Avgs = Average,        
  @Devs = Deviation        
 FROM tblControlOrders        
 WHERE OrderID = @OrderID        
 AND InstrumentCode = @Instrument        
         
         
 --Generate table out of pipe deimited strings        
 DECLARE @RowCount int          
 DECLARE @i int = 0          
 SET @RowCount = LEN(@Codes) - LEN(REPLACE(@Codes, '|', ''))          
           
 WHILE(@i <= @RowCount)          
 BEGIN          
  INSERT INTO @retTable          
  SELECT  LEFT(@Codes,CHARINDEX('|',@Codes+'|',0)-1) As TestCode,          
    LEFT(@Avgs,CHARINDEX('|',@Avgs+'|',0)-1) As Mean,          
    LEFT(@Devs, CHARINDEX('|', @Devs+'|',0)-1) As Deviation          
            
  SET @Codes = STUFF(@Codes,1,CHARINDEX('|',@Codes,0),'')          
  SET @Avgs = STUFF(@Avgs,1,CHARINDEX('|',@Avgs,0),'')          
  SET @Devs = STUFF(@Devs,1,CHARINDEX('|',@Devs,0),'')          
            
  SET @i = @i + 1          
 END          
 RETURN           
END
GO
/****** Object:  UserDefinedFunction [dbo].[udf_TestCodeInfo]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[udf_TestCodeInfo] (@Codes varchar(max), @Avgs varchar(max), @Devs varchar(max))  
RETURNS @retTable Table
(
      TestCode varchar(100),
      Mean float,
      Deviation float
)
AS  
BEGIN 
      DECLARE @RowCount int
      DECLARE @i int = 0
      SET @RowCount = LEN(@Codes) - LEN(REPLACE(@Codes, '|', ''))
      
      WHILE(@i <= @RowCount)
      BEGIN
            INSERT INTO @retTable
            SELECT      LEFT(@Codes,CHARINDEX('|',@Codes+'|',0)-1) As TestCode,
                        LEFT(@Avgs,CHARINDEX('|',@Avgs+'|',0)-1) As Mean,
                        LEFT(@Devs, CHARINDEX('|', @Devs+'|',0)-1) As Deviation
            
            SET @Codes = STUFF(@Codes,1,CHARINDEX('|',@Codes,0),'')
            SET @Avgs = STUFF(@Avgs,1,CHARINDEX('|',@Avgs,0),'')
            SET @Devs = STUFF(@Devs,1,CHARINDEX('|',@Devs,0),'')
            
            SET @i = @i + 1
      END
      RETURN 
END
GO
/****** Object:  Table [dbo].[tblAccessionInsuranceInfo]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAccessionInsuranceInfo](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[PrimaryInsuranceID] [varchar](100) NULL,
	[PrimaryPatRelationtoIns] [varchar](20) NULL,
	[PrimaryPolicy] [varchar](50) NULL,
	[PrimaryLastName] [varchar](50) NULL,
	[PrimaryFirstName] [varchar](50) NULL,
	[PrimaryMiddleName] [varchar](50) NULL,
	[PrimaryAddress1] [varchar](100) NULL,
	[PrimaryAddress2] [varchar](100) NULL,
	[PrimaryCity] [varchar](100) NULL,
	[PrimaryState] [varchar](2) NULL,
	[PrimaryZip] [varchar](20) NULL,
	[PrimaryHomePhone] [varchar](50) NULL,
	[PrimaryWorkPhone] [varchar](50) NULL,
	[PrimaryCellPhone] [varchar](50) NULL,
	[PrimaryEmail] [varchar](200) NULL,
	[PrimaryFax] [varchar](50) NULL,
	[PrimaryDateOfBirth] [datetime] NULL,
	[PrimarySex] [varchar](20) NULL,
	[PrimarySSN] [varchar](20) NULL,
	[PrimaryGroup] [varchar](100) NULL,
	[PrimaryPlan] [varchar](100) NULL,
	[PrimaryCopay] [varchar](100) NULL,
	[PrimaryEmployer] [varchar](100) NULL,
	[SecondaryInsuranceID] [varchar](100) NULL,
	[SecondaryPatRelationtoIns] [varchar](20) NULL,
	[SecondaryPolicy] [varchar](50) NULL,
	[SecondaryLastName] [varchar](50) NULL,
	[SecondaryFirstName] [varchar](50) NULL,
	[SecondaryMiddleName] [varchar](50) NULL,
	[SecondaryAddress1] [varchar](100) NULL,
	[SecondaryAddress2] [varchar](100) NULL,
	[SecondaryCity] [varchar](100) NULL,
	[SecondaryState] [varchar](2) NULL,
	[SecondaryZip] [varchar](20) NULL,
	[SecondaryHomePhone] [varchar](50) NULL,
	[SecondaryWorkPhone] [varchar](50) NULL,
	[SecondaryCellPhone] [varchar](50) NULL,
	[SecondaryEmail] [varchar](200) NULL,
	[SecondaryFax] [varchar](50) NULL,
	[SecondaryDateOfBirth] [datetime] NULL,
	[SecondarySex] [varchar](20) NULL,
	[SecondarySSN] [varchar](20) NULL,
	[SecondaryGroup] [varchar](100) NULL,
	[SecondaryPlan] [varchar](100) NULL,
	[SecondaryCopay] [varchar](100) NULL,
	[SecondaryEmployer] [varchar](100) NULL,
 CONSTRAINT [pk_tblAccessionsBillingInfo] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblPayment]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPayment](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[BTcode] [varchar](100) NOT NULL,
	[OrderedTest] [varchar](100) NOT NULL,
	[CPTcode] [varchar](100) NOT NULL,
	[EntryDate] [datetime] NOT NULL,
	[PaymentAmt] [decimal](18, 2) NULL,
	[AdjustmentAmt] [decimal](18, 2) NULL,
	[AdjustmentReason] [varchar](150) NULL,
	[CheckNumber] [varchar](100) NULL,
	[CheckDate] [date] NULL,
	[CCtype] [varchar](100) NULL,
	[CCnumber] [varchar](100) NULL,
	[CCsercurity] [varchar](100) NULL,
	[CCexpiry] [varchar](100) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[Modifier] [varchar](100) NOT NULL,
	[GroupFlag] [bit] NOT NULL,
	[Payer] [varchar](200) NULL,
	[FeeDescription] [varchar](200) NULL,
	[TotalFeeAmt] [decimal](18, 2) NULL,
	[ExpAmt] [decimal](18, 2) NULL,
	[ptRespFlag] [bit] NULL,
 CONSTRAINT [PK_tblPayment_1] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC,
	[BTcode] ASC,
	[OrderedTest] ASC,
	[CPTcode] ASC,
	[EntryDate] ASC,
	[Modifier] ASC,
	[GroupFlag] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblPhysicians]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPhysicians](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[PhysicianCode] [varchar](20) NOT NULL,
	[FirstName] [varchar](100) NULL,
	[MiddleName] [varchar](100) NULL,
	[LastName] [varchar](100) NULL,
	[FullName] [varchar](150) NULL,
	[NPI] [varchar](100) NULL,
	[License] [varchar](100) NULL,
	[UPIN] [varchar](100) NULL,
	[MedicareNumber] [varchar](100) NULL,
	[MedicaidNumber] [varchar](100) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[SeriesName] [varchar](20) NULL,
	[iDocAvailable] [bit] NULL,
	[NeedsSync] [bit] NULL,
	[LastSyncDate] [datetime] NULL,
 CONSTRAINT [PK_tblPhysicians] PRIMARY KEY CLUSTERED 
(
	[PhysicianCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblMissingInformation]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMissingInformation](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](50) NOT NULL,
	[ClientCode] [varchar](50) NOT NULL,
	[ClientName] [varchar](max) NOT NULL,
	[pFirstName] [varchar](50) NOT NULL,
	[pLastName] [varchar](50) NOT NULL,
	[entryDate] [date] NOT NULL,
	[Reason] [varchar](max) NOT NULL,
	[setting] [varchar](50) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblPatient]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPatient](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [varchar](50) NOT NULL,
	[EntryDate] [datetime] NOT NULL,
	[ptLastName] [varchar](50) NOT NULL,
	[ptFirstName] [varchar](50) NOT NULL,
	[ptMiddleName] [varchar](50) NULL,
	[ptNameSuffix] [varchar](20) NULL,
	[ptDateOfBirth] [datetime] NULL,
	[ptSex] [varchar](20) NULL,
	[ptSSN] [varchar](20) NULL,
	[ptAddress1] [varchar](100) NULL,
	[ptAddress2] [varchar](100) NULL,
	[ptCity] [varchar](100) NULL,
	[ptState] [varchar](2) NULL,
	[ptZip] [varchar](20) NULL,
	[btLastName] [varchar](50) NULL,
	[btFirstName] [varchar](50) NULL,
	[btMiddleName] [varchar](50) NULL,
	[btNameSuffix] [varchar](20) NULL,
	[btAddress1] [varchar](100) NULL,
	[btAddress2] [varchar](100) NULL,
	[btCity] [varchar](100) NULL,
	[btState] [varchar](2) NULL,
	[btZip] [varchar](20) NULL,
	[btDateOfBirth] [datetime] NULL,
	[btSex] [varchar](20) NULL,
	[btSSN] [varchar](20) NULL,
	[PTContactHomePhone] [varchar](20) NULL,
	[PTContactWorkPhone] [varchar](20) NULL,
	[PTContactCellPhone] [varchar](20) NULL,
	[PTContactEmail] [varchar](200) NULL,
	[PTContactFax] [varchar](50) NULL,
	[BTContactHomePhone] [varchar](20) NULL,
	[BTContactWorkPhone] [varchar](20) NULL,
	[BTContactCellPhone] [varchar](20) NULL,
	[BTContactEmail] [varchar](200) NULL,
	[BTContactFax] [varchar](20) NULL,
	[PrimaryInsuranceID] [varchar](20) NULL,
	[PrimaryPatRelationtoIns] [varchar](20) NULL,
	[PrimaryInsuredID] [varchar](20) NULL,
	[SecondaryInsuranceID] [varchar](20) NULL,
	[SecondaryPatRelationtoIns] [varchar](20) NULL,
	[SecondaryInsuredID] [varchar](20) NULL,
	[TertiaryInsuranceID] [varchar](20) NULL,
	[TertiaryPatRelationtoIns] [varchar](20) NULL,
	[TertiaryInsuredID] [varchar](20) NULL,
	[SignatureOnFile] [bit] NULL,
	[SiteID] [varchar](20) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[ClientCode] [varchar](50) NULL,
	[WorkRelatedInjuryDate] [datetime] NULL,
	[AutoRelatedInjuryDate] [datetime] NULL,
 CONSTRAINT [PK_tblPatients] PRIMARY KEY CLUSTERED 
(
	[PatientId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillAccessions]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillAccessions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[PatientID] [varchar](100) NOT NULL,
	[ClientCode] [varchar](50) NOT NULL,
	[PhysicianCode] [varchar](100) NOT NULL,
	[CollectionDate] [datetime] NULL,
	[OrderDate] [datetime] NULL,
	[ReceiveDate] [datetime] NULL,
	[DateCreated] [datetime] NULL,
	[FinalReportDate] [datetime] NULL,
	[OrderType] [varchar](50) NOT NULL,
	[OrderedTests] [varchar](max) NULL,
	[MedicationsDataXML] [xml] NULL,
	[DiagnosisDataXML] [xml] NULL,
	[SpecimenDataXML] [xml] NULL,
	[AdjusterName] [varchar](200) NULL,
	[EmployerName] [varchar](200) NULL,
	[School] [varchar](100) NULL,
	[InternalComment] [varchar](300) NULL,
	[ReportComment] [varchar](300) NULL,
	[ProblemSpec] [bit] NULL,
	[CurrentBillType] [varchar](20) NULL,
	[CurrentBillTo] [varchar](20) NULL,
	[BillingMessage] [varchar](500) NULL,
	[ManualSuspension] [bit] NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[CoPayPostCash] [decimal](18, 2) NULL,
	[Mileage] [int] NULL,
	[ClientBillAccession] [varchar](100) NULL,
	[InjuryType] [varchar](10) NULL,
	[State] [varchar](3) NULL,
	[SymptomAccidentDate] [datetime] NULL,
	[AccessionStatus] [varchar](100) NULL,
	[CorrectedClaim] [varchar](10) NULL,
	[CorrectedClaimReferenceNumber] [varchar](200) NULL,
 CONSTRAINT [pk_tblBillAccessions] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblInsuredInfo]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblInsuredInfo](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[InsuredID] [varchar](50) NOT NULL,
	[FirstName] [varchar](50) NULL,
	[MiddleName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[InsuranceID] [varchar](20) NULL,
	[Address1] [varchar](100) NULL,
	[Address2] [varchar](100) NULL,
	[City] [varchar](100) NULL,
	[State] [varchar](100) NULL,
	[Zip] [varchar](100) NULL,
	[HomePhone] [varchar](50) NULL,
	[WorkPhone] [varchar](50) NULL,
	[CellPhone] [varchar](50) NULL,
	[Email] [varchar](200) NULL,
	[Fax] [varchar](50) NULL,
	[DateOfBirth] [datetime] NULL,
	[Sex] [varchar](20) NULL,
	[SSN] [varchar](20) NULL,
	[Policy] [varchar](100) NULL,
	[Group] [varchar](100) NULL,
	[Plan] [varchar](100) NULL,
	[Copay] [varchar](100) NULL,
	[Employer] [varchar](100) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[WorkRelatedInjuryDate] [datetime] NULL,
	[AutoRelatedInjuryDate] [datetime] NULL,
 CONSTRAINT [PK_tblInsuredInfo] PRIMARY KEY CLUSTERED 
(
	[InsuredID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblInsuranceCompanies]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblInsuranceCompanies](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[InsuranceCode] [varchar](20) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[Address] [varchar](100) NULL,
	[Address2] [varchar](100) NULL,
	[City] [varchar](100) NULL,
	[State] [varchar](100) NULL,
	[Zip] [varchar](20) NULL,
	[Telephone] [varchar](20) NULL,
	[Attention] [varchar](100) NULL,
	[ContactName] [varchar](100) NULL,
	[ContactPhone] [varchar](20) NULL,
	[DiagnosisRequired] [int] NULL,
	[FormRequired] [int] NULL,
	[SubmitDays] [varchar](20) NULL,
	[Note1] [varchar](100) NULL,
	[Note2] [varchar](100) NULL,
	[LaborpCode] [varchar](20) NULL,
	[NEICNumber] [varchar](20) NULL,
	[ProviderNumber] [varchar](20) NULL,
	[InsuranceType] [varchar](100) NULL,
	[PendingWriteOff] [int] NULL,
	[ExpectedAMT] [varchar](20) NULL,
	[LabLink] [varchar](100) NULL,
	[HCFABills] [int] NULL,
	[ClaimType] [varchar](3) NULL,
	[BillType] [varchar](100) NULL,
	[HCFA23] [varchar](100) NULL,
	[HCFA23Override] [varchar](200) NULL,
	[HCFA24i] [varchar](100) NULL,
	[HCFA24iOverride] [varchar](200) NULL,
	[HCFA24j] [varchar](100) NULL,
	[HCFA24jOverride] [varchar](200) NULL,
	[HCFA33] [varchar](100) NULL,
	[HCFA33Override] [varchar](200) NULL,
	[HCFA33a] [varchar](100) NULL,
	[HCFA33aOverride] [varchar](200) NULL,
	[HCFA33b] [varchar](100) NULL,
	[HCFA33bOverride] [varchar](200) NULL,
 CONSTRAINT [PK_tblInsuranceCompanies_1] PRIMARY KEY CLUSTERED 
(
	[InsuranceCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblClients]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblClients](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ClientCode] [varchar](20) NOT NULL,
	[ClientName] [varchar](100) NOT NULL,
	[Address] [varchar](100) NULL,
	[Address2] [varchar](100) NULL,
	[City] [varchar](100) NULL,
	[State] [varchar](2) NULL,
	[Zip] [varchar](15) NULL,
	[Telephone] [varchar](20) NULL,
	[ActiveFlag] [bit] NULL,
	[DisplayInSearch] [bit] NULL,
	[EntryDate] [datetime] NULL,
	[Comment] [varchar](max) NULL,
	[OrderType] [varchar](100) NULL,
	[BillToCode] [varchar](20) NULL,
	[AccContact] [varchar](100) NULL,
	[AccPhone] [varchar](20) NULL,
	[BillingStatus] [varchar](100) NULL,
	[ClientBillSort] [varchar](100) NULL,
	[StatementNotes] [varchar](max) NULL,
	[SalesmanCode] [varchar](20) NULL,
	[RouteCode] [varchar](20) NULL,
	[ReportCopies] [varchar](20) NULL,
	[PrintReportStatus] [varchar](100) NULL,
	[FaxReportStatus] [varchar](100) NULL,
	[ReportToWeb] [bit] NULL,
	[ReportText] [varchar](100) NULL,
	[PrintOnAccession] [bit] NULL,
	[FreezeList] [varchar](100) NULL,
	[FaxTimes] [varchar](max) NULL,
	[Interface] [varchar](50) NULL,
	[ReportFormat] [int] NULL,
	[Territory] [varchar](100) NULL,
	[Specialty] [varchar](100) NULL,
	[Service] [varchar](100) NULL,
	[SeriesNumber] [varchar](50) NULL,
	[iDocAvailable] [bit] NULL,
	[NeedsSync] [bit] NULL,
	[LastSyncDate] [datetime] NULL,
	[CumulativeReport] [bit] NULL,
 CONSTRAINT [PK_tblClients] PRIMARY KEY CLUSTERED 
(
	[ClientCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBill]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBill](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[BTcode] [varchar](100) NOT NULL,
	[CPTcode] [varchar](100) NOT NULL,
	[OrderedTestCode] [varchar](100) NOT NULL,
	[NextBillDate] [datetime] NULL,
	[FeeDescription] [varchar](200) NOT NULL,
	[TotalFeeAmt] [decimal](18, 2) NULL,
	[Units] [int] NULL,
	[ExpAmt] [decimal](18, 2) NULL,
	[Modifier] [varchar](100) NOT NULL,
	[Location] [varchar](100) NULL,
	[Status] [varchar](100) NULL,
	[DiscountPercentage] [varchar](100) NULL,
	[FeeType] [varchar](100) NULL,
	[ICD9code] [varchar](max) NULL,
	[BillableFlag] [bit] NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[GroupFlag] [bit] NOT NULL,
	[ptRespFlag] [bit] NULL,
 CONSTRAINT [PK_tblBill] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC,
	[BTcode] ASC,
	[CPTcode] ASC,
	[OrderedTestCode] ASC,
	[Modifier] ASC,
	[GroupFlag] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblArchiveReviewAccession]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblArchiveReviewAccession](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ArchivedDate] [datetime] NULL,
	[QSSLastUpdatedByID] [varchar](20) NULL,
	[QssCreatedDate] [datetime] NOT NULL,
	[QSSFinalizedDate] [datetime] NULL,
	[QSSFinalizedByID] [varchar](20) NULL,
 CONSTRAINT [pk_tblArchiveReviewAccession] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[WorkFile_Report_View]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[WorkFile_Report_View]
AS
SELECT DISTINCT 
                      a.Accession, p.ptLastName + ', ' + p.ptFirstName AS PatientName, CONVERT(varchar, p.ptDateOfBirth, 101) AS BirthDate, b.BTcode AS BillType, 
                      CASE WHEN a.CurrentBillTo = 'Primary' THEN COALESCE(NULLIF(aii.PrimaryInsuranceID, ''), p.PrimaryInsuranceID) ELSE COALESCE(NULLIF(aii.SecondaryInsuranceID, ''), p.SecondaryInsuranceID) END AS Ins_Code, ISNULL(i.Name, '') AS InsuranceName, 
                      ii.Policy AS Policy_Number, a.ClientCode, c.ClientName, phy.FullName + '(' + a.PhysicianCode + ')' AS RequestingPhysician, CONVERT(varchar, a.CollectionDate, 101) 
                      AS ServiceDate, (CASE WHEN a.CollectionDate > DATEADD(d, - 30, getdate()) THEN 
                          ((SELECT     (SUM(TotalFeeAmt)) * (CAST(isnull(NULLIF(i.ExpectedAMT, ''), '100') AS DECIMAL(9, 2)) / 100)
                              FROM         tblBill
                              WHERE     Accession = a.Accession AND [Status] = 'BILL') -
                          (SELECT     isnull(SUM(PaymentAmt), 0)
                            FROM          tblPayment
                            WHERE      Accession = a.Accession) -
                          (SELECT     isnull(SUM(AdjustmentAmt), 0)
                            FROM          tblPayment
                            WHERE      Accession = a.Accession)) ELSE 0 END) AS UptoThirtyDays, (CASE WHEN a.CollectionDate BETWEEN DATEADD(d, - 60, getdate()) AND DATEADD(d, - 30, 
                      getdate()) THEN
                          ((SELECT     (SUM(TotalFeeAmt)) * (CAST(isnull(NULLIF(i.ExpectedAMT, ''), '100') AS DECIMAL(9, 2)) / 100)
                              FROM         tblBill
                              WHERE     Accession = a.Accession AND [Status] = 'BILL') -
                          (SELECT     isnull(SUM(PaymentAmt), 0)
                            FROM          tblPayment
                            WHERE      Accession = a.Accession) -
                          (SELECT     isnull(SUM(AdjustmentAmt), 0)
                            FROM          tblPayment
                            WHERE      Accession = a.Accession)) ELSE 0 END) AS ThirtyOneToSixtyDays, (CASE WHEN a.CollectionDate BETWEEN DATEADD(d, - 90, getdate()) AND DATEADD(d, 
                      - 60, getdate()) THEN
                          ((SELECT     (SUM(TotalFeeAmt)) * (CAST(isnull(NULLIF(i.ExpectedAMT, ''), '100') AS DECIMAL(9, 2)) / 100)
                              FROM         tblBill
                              WHERE     Accession = a.Accession AND [Status] = 'BILL') -
                          (SELECT     isnull(SUM(PaymentAmt), 0)
                            FROM          tblPayment
                            WHERE      Accession = a.Accession) -
                          (SELECT     isnull(SUM(AdjustmentAmt), 0)
                            FROM          tblPayment
                            WHERE      Accession = a.Accession)) ELSE 0 END) AS SiztyOneToNintyDays, (CASE WHEN a.CollectionDate < DATEADD(d, - 90, getdate()) THEN
                          ((SELECT     (SUM(TotalFeeAmt)) * (CAST(isnull(NULLIF(i.ExpectedAMT, ''), '100') AS DECIMAL(9, 2)) / 100)
                              FROM         tblBill
                              WHERE     Accession = a.Accession AND [Status] = 'BILL') -
                          (SELECT     isnull(SUM(PaymentAmt), 0)
                            FROM          tblPayment
                            WHERE      Accession = a.Accession) -
                          (SELECT     isnull(SUM(AdjustmentAmt), 0)
                            FROM          tblPayment
                            WHERE      Accession = a.Accession)) ELSE 0 END) AS OverNintyDays--,
                            --u.UserName + ' ' + u.UserLastName as Biller,
                            --u.UserID as BillerCode, 
                           -- CONVERT(varchar, a.FollowUpDate, 101) AS FollowupDate 
FROM         dbo.tblBillAccessions AS a INNER JOIN
                      dbo.tblPatient AS p ON a.PatientID = p.PatientId 
                       LEFT OUTER JOIN tblAccessionInsuranceInfo AS aii 
                      on aii.Accession = a.Accession
                      LEFT OUTER JOIN
                      dbo.tblInsuranceCompanies AS i ON 
                      i.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' THEN COALESCE(NULLIF(aii.PrimaryInsuranceID, ''), p.PrimaryInsuranceID) ELSE COALESCE(NULLIF(aii.SecondaryInsuranceID, ''), p.SecondaryInsuranceID) END INNER JOIN
                      dbo.tblInsuredInfo AS ii ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END INNER JOIN
                      dbo.tblClients AS c ON c.ClientCode = a.ClientCode INNER JOIN
                      dbo.tblPhysicians AS phy ON phy.PhysicianCode = a.PhysicianCode INNER JOIN
                      dbo.tblBill AS b ON a.Accession = b.Accession AND a.CurrentBillType = b.BTcode INNER JOIN
                      dbo.tblArchiveReviewAccession AS r ON a.Accession = r.Accession
                      --LEFT OUTER JOIN dbo.tblUsersID u ON u.UserID = c.BillerCode 
WHERE     (b.Status = 'BILL') AND (a.Accession NOT IN
                          (SELECT     Accession
                            FROM          dbo.tblMissingInformation
                            WHERE      (Accession = a.Accession))) AND (dbo.B_GetTotalBillBalance(a.Accession) <> 0)















GO
/****** Object:  Table [dbo].[tblBillAudit]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillAudit](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Date] [datetime] NOT NULL,
	[WebUserID] [varchar](50) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[Note] [varchar](max) NOT NULL,
	[NoteType] [varchar](20) NULL,
 CONSTRAINT [PK_tblBillAudit] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[AR_Report_View]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[AR_Report_View]      
AS      
SELECT DISTINCT       
                      a.Accession,       
                      p.ptLastName + ', ' + p.ptFirstName AS PatientName,       
                      CONVERT(varchar, p.ptDateOfBirth, 101) AS BirthDate,       
                      --b.BTcode AS BillType,       
                      a.CurrentBillType as BillType,      
                      CASE WHEN a.CurrentBillTo = 'Primary' THEN COALESCE(NULLIF(aii.PrimaryInsuranceID, ''), p.PrimaryInsuranceID) ELSE COALESCE(NULLIF(aii.SecondaryInsuranceID, ''), p.SecondaryInsuranceID) END AS Ins_Code,       
                      ISNULL(i.Name, '') AS InsuranceName,       
                      CASE WHEN a.CurrentBillTo = 'Primary' THEN COALESCE(NULLIF(aii.PrimaryPolicy, ''), ii.Policy) ELSE COALESCE(NULLIF(aii.SecondaryPolicy, ''), ii.Policy) END AS Policy_Number,       
                      a.ClientCode,       
                      c.ClientName,       
                      phy.FullName + '(' + a.PhysicianCode + ')' AS RequestingPhysician,       
                      CONVERT(varchar, a.ReceiveDate, 101) AS ServiceDate,       
                      (CASE WHEN a.ReceiveDate > DATEADD(d, - 30, getdate()) THEN      
                          ((SELECT     (SUM(TotalFeeAmt )) * (CAST(isnull(NULLIF(i.ExpectedAMT, ''), '100') AS DECIMAL(9, 2)) / 100)      
                              FROM         tblBill      
                              WHERE     Accession = a.Accession AND [Status] = 'BILL') -      
                          (SELECT     isnull(SUM(PaymentAmt), 0)      
                            FROM          tblPayment      
                            WHERE      Accession = a.Accession) -      
                          (SELECT     isnull(SUM(AdjustmentAmt), 0)      
                            FROM          tblPayment      
                            WHERE      Accession = a.Accession)) ELSE 0 END) AS UptoThirtyDays, (CASE WHEN a.ReceiveDate BETWEEN DATEADD(d, - 60, getdate()) AND DATEADD(d, - 30,       
                      getdate()) THEN      
                          ((SELECT     (SUM(TotalFeeAmt )) * (CAST(isnull(NULLIF(i.ExpectedAMT, ''), '100') AS DECIMAL(9, 2)) / 100)      
                              FROM         tblBill      
                              WHERE     Accession = a.Accession AND [Status] = 'BILL') -      
                          (SELECT     isnull(SUM(PaymentAmt), 0)      
                            FROM          tblPayment      
                            WHERE      Accession = a.Accession) -      
                          (SELECT     isnull(SUM(AdjustmentAmt), 0)      
                            FROM          tblPayment      
                            WHERE      Accession = a.Accession)) ELSE 0 END) AS ThirtyOneToSixtyDays, (CASE WHEN a.ReceiveDate BETWEEN DATEADD(d, - 90, getdate()) AND DATEADD(d, - 60,       
                      getdate()) THEN      
                          ((SELECT     (SUM(TotalFeeAmt )) * (CAST(isnull(NULLIF(i.ExpectedAMT, ''), '100') AS DECIMAL(9, 2)) / 100)      
                              FROM         tblBill      
                              WHERE     Accession = a.Accession AND [Status] = 'BILL') -      
                          (SELECT     isnull(SUM(PaymentAmt), 0)      
                            FROM          tblPayment      
                            WHERE      Accession = a.Accession) -      
                          (SELECT     isnull(SUM(AdjustmentAmt), 0)      
                            FROM          tblPayment      
                            WHERE      Accession = a.Accession)) ELSE 0 END) AS SiztyOneToNintyDays, (CASE WHEN a.ReceiveDate < DATEADD(d, - 90,       
                       getdate()) THEN      
                          ((SELECT     (SUM(TotalFeeAmt )) * (CAST(isnull(NULLIF(i.ExpectedAMT, ''), '100') AS DECIMAL(9, 2)) / 100)      
                              FROM         tblBill      
                              WHERE     Accession = a.Accession AND [Status] = 'BILL') -      
                          (SELECT     isnull(SUM(PaymentAmt), 0)      
               FROM          tblPayment      
                            WHERE      Accession = a.Accession) -      
                          (SELECT     isnull(SUM(AdjustmentAmt), 0)      
                            FROM          tblPayment      
                            WHERE      Accession = a.Accession)) ELSE 0 END) AS OverNintyDays ,    
           
         (select  CONVERT(varchar,max(date), 101) from tblBillAudit ba where ba.notetype in ('HCFA', 'ElectronicClaim', 'PatientBill') and ba.Accession=a.Accession group by Accession) as BilledDate    
   , dbo.B_GetAmountBilledTotal(a.Accession) TotalCharge,  dbo.B_GetTotalBillBalance(a.Accession) TotalBalance,  dbo.B_PaidAmount(a.Accession) TotalPayment  
FROM      tblBillAccessions AS a       
       INNER JOIN tblPatient AS p       
       ON a.PatientID = p.PatientId      
                      LEFT OUTER JOIN tblAccessionInsuranceInfo AS aii       
                      on aii.Accession = a.Accession      
                      LEFT OUTER JOIN tblInsuranceCompanies AS i       
                      ON i.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' THEN COALESCE(NULLIF(aii.PrimaryInsuranceID, ''), p.PrimaryInsuranceID) ELSE COALESCE(NULLIF(aii.SecondaryInsuranceID, ''), p.SecondaryInsuranceID) END       
                      INNER JOIN tblInsuredInfo AS ii       
                      ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END       
                      INNER JOIN tblClients AS c       
                      ON c.ClientCode = a.ClientCode       
                      INNER JOIN tblPhysicians AS phy       
                      ON phy.PhysicianCode = a.PhysicianCode       
                      INNER JOIN tblBill AS b       
                      ON a.Accession = b.Accession       
                      AND a.CurrentBillType = b.BTcode       
                      INNER JOIN tblArchiveReviewAccession AS r       
                      ON a.Accession = r.Accession      
WHERE      (b.Status = 'BILL')       
      AND (a.Accession NOT IN      
                          (SELECT     Accession      
                            FROM          tblMissingInformation      
                            WHERE      (Accession = a.Accession)))       
                            AND (dbo.B_GetTotalBillBalance(a.Accession) <> 0)      
      
      
      
      
      
      
      
      
      
      
      
--SELECT DISTINCT       
--                      a.Accession, p.ptLastName + ', ' + p.ptFirstName AS PatientName, CONVERT(varchar, p.ptDateOfBirth, 101) AS BirthDate, b.BTcode AS BillType,       
--                      CASE WHEN a.CurrentBillTo = 'Primary' THEN p.PrimaryInsuranceID ELSE p.SecondaryInsuranceID END AS Ins_Code, ISNULL(i.Name, '') AS InsuranceName,       
--                      ii.Policy AS Policy_Number, a.ClientCode, c.ClientName, phy.FullName + '(' + a.PhysicianCode + ')' AS RequestingPhysician, CONVERT(varchar, a.ReceiveDate, 101)       
--                      AS ServiceDate, (CASE WHEN a.ReceiveDate > DATEADD(d, - 30, getdate()) THEN      
--                          ((SELECT     (SUM(TotalFeeAmt * Units)) * (CAST(isnull(NULLIF(i.ExpectedAMT, ''), '100') AS DECIMAL(9, 2)) / 100)      
--                              FROM         tblBill      
--                              WHERE     Accession = a.Accession AND [Status] = 'BILL') -      
--                          (SELECT     isnull(SUM(PaymentAmt), 0)      
--                            FROM          tblPayment      
--                            WHERE      Accession = a.Accession) -      
--                          (SELECT     isnull(SUM(AdjustmentAmt), 0)      
--                            FROM          tblPayment      
--                            WHERE      Accession = a.Accession)) ELSE 0 END) AS UptoThirtyDays, (CASE WHEN a.ReceiveDate BETWEEN DATEADD(d, - 60, getdate()) AND DATEADD(d, - 30,       
--                      getdate()) THEN      
--                          ((SELECT     (SUM(TotalFeeAmt * Units)) * (CAST(isnull(NULLIF(i.ExpectedAMT, ''), '100') AS DECIMAL(9, 2)) / 100)      
--                              FROM         tblBill      
--                              WHERE     Accession = a.Accession AND [Status] = 'BILL') -      
--                          (SELECT     isnull(SUM(PaymentAmt), 0)      
--                            FROM          tblPayment      
--                            WHERE      Accession = a.Accession) -      
--                          (SELECT     isnull(SUM(AdjustmentAmt), 0)      
--                            FROM          tblPayment      
--                            WHERE      Accession = a.Accession)) ELSE 0 END) AS ThirtyOneToSixtyDays, (CASE WHEN a.ReceiveDate BETWEEN DATEADD(d, - 90, getdate()) AND DATEADD(d,       
--                      - 60, getdate()) THEN      
--                          ((SELECT     (SUM(TotalFeeAmt * Units)) * (CAST(isnull(NULLIF(i.ExpectedAMT, ''), '100') AS DECIMAL(9, 2)) / 100)      
--                              FROM         tblBill      
--                              WHERE     Accession = a.Accession AND [Status] = 'BILL') -      
--                          (SELECT     isnull(SUM(PaymentAmt), 0)      
--                            FROM          tblPayment      
--                            WHERE      Accession = a.Accession) -      
--                          (SELECT     isnull(SUM(AdjustmentAmt), 0)      
--                            FROM          tblPayment      
--                            WHERE      Accession = a.Accession)) ELSE 0 END) AS SiztyOneToNintyDays, (CASE WHEN a.ReceiveDate < DATEADD(d, - 90, getdate()) THEN      
--                          ((SELECT     (SUM(TotalFeeAmt * Units)) * (CAST(isnull(NULLIF(i.ExpectedAMT, ''), '100') AS DECIMAL(9, 2)) / 100)      
--                              FROM         tblBill      
--                              WHERE     Accession = a.Accession AND [Status] = 'BILL') -      
--                          (SELECT     isnull(SUM(PaymentAmt), 0)      
--                            FROM          tblPayment      
--                            WHERE      Accession = a.Accession) -      
--                          (SELECT     isnull(SUM(AdjustmentAmt), 0)      
--                            FROM          tblPayment      
--                            WHERE      Accession = a.Accession)) ELSE 0 END) AS OverNintyDays      
--FROM         tblBillAccessions AS a INNER JOIN      
--                      tblPatient AS p ON a.PatientID = p.PatientId LEFT OUTER JOIN      
--                      tblInsuranceCompanies AS i ON       
--                      i.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' THEN p.PrimaryInsuranceID ELSE p.SecondaryInsuranceID END INNER JOIN      
--                      tblInsuredInfo AS ii ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END INNER JOIN      
--                      tblClients AS c ON c.ClientCode = a.ClientCode INNER JOIN      
--                      tblPhysicians AS phy ON phy.PhysicianCode = a.PhysicianCode INNER JOIN      
--                      tblBill AS b ON a.Accession = b.Accession AND a.CurrentBillType = b.BTcode INNER JOIN      
--                      tblArchiveReviewAccession AS r ON a.Accession = r.Accession      
--WHERE     (b.Status = 'BILL') AND (a.Accession NOT IN      
--                          (SELECT     Accession      
--                            FROM          tblMissingInformation      
--                            WHERE      (Accession = a.Accession))) AND (dbo.B_GetTotalBillBalance(a.Accession) <> 0)      
      
      
GO
/****** Object:  Table [dbo].[tblOrderedTestsDefinitions]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblOrderedTestsDefinitions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderedTest] [varchar](20) NOT NULL,
	[Description] [varchar](100) NULL,
	[PerformedTestCode] [varchar](max) NULL,
	[ActiveFlag] [bit] NULL,
	[InSearchFlag] [bit] NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[ReportFlag] [bit] NULL,
	[InstrumentCode] [varchar](200) NULL,
	[UTI] [bit] NULL,
	[iDocAvailable] [bit] NULL,
	[NeedsSync] [bit] NULL,
	[LastSyncDate] [datetime] NULL,
 CONSTRAINT [PK_tblOrderedTestsDefinitions] PRIMARY KEY CLUSTERED 
(
	[OrderedTest] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblReleasedForReview]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblReleasedForReview](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NOT NULL,
	[ClientName] [varchar](100) NULL,
	[PhysicianCode] [varchar](20) NULL,
	[PhysicianName] [varchar](100) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[CollectionDate] [datetime] NULL,
	[Status] [varchar](20) NULL,
	[DateOfBirth] [datetime] NULL,
	[Sex] [varchar](1) NULL,
	[PreAccession] [varchar](50) NULL,
	[ReleaseDate] [datetime] NULL,
	[ReleasedBy] [varchar](20) NULL,
	[Interface] [varchar](50) NOT NULL,
 CONSTRAINT [pk_tblReleasedForReview] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC,
	[ClientCode] ASC,
	[Interface] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblOrderedTests]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblOrderedTests](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[OrderedTest] [varchar](100) NOT NULL,
	[PerformedTest] [varchar](100) NOT NULL,
	[Source] [varchar](50) NULL,
	[TestComment] [varchar](200) NULL,
	[CallNote] [varchar](500) NULL,
	[BillStatus] [varchar](20) NULL,
	[SiteID] [varchar](50) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[GroupFlag] [bit] NULL,
 CONSTRAINT [pk_tblOrderedTests] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC,
	[OrderedTest] ASC,
	[PerformedTest] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAccessions]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAccessions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[PatientID] [varchar](100) NOT NULL,
	[PreAccession] [varchar](50) NOT NULL,
	[ClientCode] [varchar](50) NOT NULL,
	[PhysicianCode] [varchar](100) NOT NULL,
	[CollectionDate] [datetime] NOT NULL,
	[OrderDate] [datetime] NULL,
	[ReceiveDate] [datetime] NULL,
	[DateCreated] [datetime] NULL,
	[FinalReportDate] [datetime] NULL,
	[OrderType] [varchar](50) NOT NULL,
	[OrderedTests] [varchar](max) NULL,
	[MedicationsDataXML] [xml] NULL,
	[DiagnosisDataXML] [xml] NULL,
	[SpecimenDataXML] [xml] NULL,
	[PrimaryInsuranceID] [varchar](100) NULL,
	[PrimaryPatRelationtoIns] [varchar](20) NULL,
	[PrimaryInsuredID] [varchar](100) NULL,
	[SecondaryInsuranceID] [varchar](100) NULL,
	[SecondaryPatRelationtoIns] [varchar](20) NULL,
	[SecondaryInsuredID] [varchar](100) NULL,
	[TertiaryInsuranceID] [varchar](100) NULL,
	[TertiaryPatRelationtoIns] [varchar](20) NULL,
	[TertiaryInsuredID] [varchar](100) NULL,
	[PatientStatus] [varchar](20) NULL,
	[ConditionRelatedTo] [varchar](100) NULL,
	[AdjusterName] [varchar](200) NULL,
	[EmployerName] [varchar](200) NULL,
	[School] [varchar](100) NULL,
	[SymptomAccidentDate] [datetime] NULL,
	[SimilarSameDate] [datetime] NULL,
	[InternalComment] [varchar](300) NULL,
	[ReportComment] [varchar](300) NULL,
	[ProblemSpec] [bit] NULL,
	[CurrentBillType] [varchar](20) NULL,
	[CurrentBillTo] [varchar](20) NULL,
	[BillingMessage] [varchar](500) NULL,
	[ManualSuspension] [bit] NULL,
	[SiteID] [varchar](50) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[POCTests] [varchar](max) NULL,
	[POCResults] [varchar](max) NULL,
	[LabReportImage] [varbinary](max) NULL,
	[ConfirmAllTests] [bit] NULL,
	[ConfirmAllMeds] [bit] NULL,
	[SubmittedSex] [varchar](20) NULL,
	[SubmittedDOB] [date] NULL,
	[ConfirmConsistancy] [bit] NULL,
	[PlateID] [varchar](100) NULL,
	[WellPosition] [varchar](100) NULL,
	[MailoutDate] [datetime] NULL,
	[ShippedDate] [datetime] NULL,
	[CoPayPostCash] [decimal](18, 2) NULL,
	[AddScannedPaperWork] [bit] NOT NULL,
	[SpecimenSource] [varchar](500) NULL,
	[LMP] [date] NULL,
	[LMPVolume] [varchar](100) NULL,
	[Fasting] [bit] NULL,
	[Breastfeeding] [bit] NULL,
	[Pregnant] [bit] NULL,
	[RecurrentCandida] [bit] NULL,
	[RecurrentTrich] [bit] NULL,
	[RecurrentBV] [bit] NULL,
	[QuantumReceivedDate] [datetime] NULL,
	[QuantumRequestedDate] [datetime] NULL,
	[QuantumBatchID] [varchar](500) NULL,
	[ReportImportDate] [datetime] NULL,
	[ExternalComments] [varchar](max) NULL,
	[ProblemComments] [varchar](max) NULL,
	[PatientUpdated] [bit] NULL,
 CONSTRAINT [pk_tblAccessions] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vPatientListReport]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vPatientListReport]
AS
SELECT DISTINCT 
                      tblAccessions.Accession, tblPatient.ptLastName + ', ' + tblPatient.ptFirstName AS PatientName, tblPatient.PatientId, 
                      CONVERT(VARCHAR(10), tblPatient.ptDateOfBirth, 110) AS DOB, tblPatient.ptAddress1, tblPatient.ptCity, tblPatient.ptAddress2, 
                      tblPatient.ptState, tblPatient.ptZip, tblPatient.PTContactHomePhone, tblAccessions.ClientCode, 
                      tblClients.ClientName, tblPhysicians.FullName AS PhysicianName, tblAccessions.PreAccession AS Requisition, 
                      tblInsuranceCompanies.Name AS InsuranceName, tblInsuranceCompanies.InsuranceCode AS PrimaryInsuranceID, '' AS Policy, 
                      tblAccessions.CollectionDate, tblAccessions.ReceiveDate, tblReleasedForReview.ReleaseDate, 
                      tblOrderedTests.OrderedTest AS TestCode, tblOrderedTestsDefinitions.Description AS TestName, '' AS Status
FROM         tblOrderedTests INNER JOIN
                      tblAccessions INNER JOIN
                      tblPatient ON tblAccessions.PatientID = tblPatient.PatientId INNER JOIN
                      tblClients ON tblAccessions.ClientCode = tblClients.ClientCode INNER JOIN
                      tblPhysicians ON tblAccessions.PhysicianCode = tblPhysicians.PhysicianCode ON tblOrderedTests.Accession = tblAccessions.Accession INNER JOIN
                      tblOrderedTestsDefinitions ON tblOrderedTests.OrderedTest = tblOrderedTestsDefinitions.OrderedTest LEFT OUTER JOIN
                      tblAccessionInsuranceInfo on tblAccessions.Accession = tblAccessionInsuranceInfo.Accession LEFT OUTER JOIN
                      tblInsuranceCompanies ON COALESCE(tblAccessionInsuranceInfo.PrimaryInsuranceID, tblPatient.PrimaryInsuranceID) = tblInsuranceCompanies.InsuranceCode LEFT OUTER JOIN
                      --tblInsuranceCompanies ON tblPatient.PrimaryInsuranceID = tblInsuranceCompanies.InsuranceCode LEFT OUTER JOIN
                      tblReleasedForReview ON tblAccessions.Accession = tblReleasedForReview.Accession

GO
/****** Object:  Table [dbo].[tblResultedTests]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblResultedTests](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[PerformedTest] [varchar](100) NOT NULL,
	[ResultTest] [varchar](100) NOT NULL,
	[Worksheet] [varchar](100) NULL,
	[LOINCcode] [varchar](100) NULL,
	[Organism] [varchar](100) NULL,
	[SensitivitiesXML] [xml] NULL,
	[Result] [varchar](100) NULL,
	[ResultFlag] [varchar](max) NULL,
	[NormalRange] [varchar](200) NULL,
	[Units] [varchar](100) NULL,
	[CorrectionsXML] [xml] NULL,
	[CallStatus] [varchar](50) NULL,
	[ResultComment] [varchar](max) NULL,
	[Status] [varchar](50) NULL,
	[EnteredBy] [varchar](100) NULL,
	[EntryDate] [datetime] NULL,
	[SiteID] [varchar](50) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[Outcome] [varchar](1) NULL,
	[Version] [int] NULL,
	[ReportAs] [varchar](100) NULL,
	[InternalComment] [varchar](1000) NULL,
	[ApprovedDate] [datetime] NULL,
	[AutoManualFlag] [bit] NULL,
	[QSSReleasedID] [varchar](20) NULL,
 CONSTRAINT [pk_tblResultedTests] PRIMARY KEY CLUSTERED 
(
	[id] ASC,
	[Accession] ASC,
	[PerformedTest] ASC,
	[ResultTest] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblResultedTestsDefinitions]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblResultedTestsDefinitions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[TestCode] [varchar](20) NOT NULL,
	[InternalName] [varchar](100) NULL,
	[ExternalName] [varchar](100) NULL,
	[Worksheet] [varchar](100) NULL,
	[Department] [varchar](100) NULL,
	[DefaultValue] [varchar](100) NULL,
	[NullFlag] [bit] NULL,
	[ReviewFlag] [bit] NULL,
	[Decimals] [varchar](100) NULL,
	[Units] [varchar](100) NULL,
	[Comment] [varchar](max) NULL,
	[SuppressFlag] [bit] NULL,
	[SecureFlag] [bit] NULL,
	[LOINCcode] [varchar](100) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[ConsistentCommentCode] [varchar](max) NULL,
	[InconsistentCommentCode] [varchar](max) NULL,
	[CutoffLowLimit] [varchar](100) NULL,
	[CutoffHighLimit] [varchar](100) NULL,
	[DynamicLowLimit] [varchar](100) NULL,
	[DynamicHighLimit] [varchar](100) NULL,
	[ReportNormalRangeLow] [varchar](100) NULL,
	[ReportNormalRangeHigh] [varchar](100) NULL,
	[ReportAs] [varchar](100) NULL,
	[ExpectedWindow] [varchar](max) NULL,
	[UseAlpha] [bit] NULL,
	[AutoReleaseFlag] [bit] NULL,
	[DecodedFlagRequired] [bit] NULL,
	[MedicationData] [varchar](max) NULL,
	[Calculation] [varchar](max) NULL,
	[ReflexHighValue] [varchar](50) NULL,
	[ReflexLowTestCode] [varchar](50) NULL,
	[ReflexHighTestCode] [varchar](50) NULL,
	[ReflexLowValue] [varchar](50) NULL,
	[UseRangeLimits] [bit] NULL,
	[alphaNormal] [varchar](500) NULL,
	[UseCutoffLimit] [bit] NULL,
	[MedicationDataIndirect] [varchar](1000) NULL,
	[AbnormalCommentCode] [varchar](max) NULL,
	[Version] [int] NOT NULL,
	[LowReportAs] [varchar](100) NULL,
	[ReflexInconsistentTestCode] [varchar](50) NULL,
	[ReflexConsistentTestCode] [varchar](50) NULL,
	[Formula] [varchar](200) NULL,
	[ReportAlphaRange] [varchar](200) NULL,
	[CutoffHoldLimit] [varchar](100) NULL,
 CONSTRAINT [PK_tblResultedTestsDefinitions] PRIMARY KEY CLUSTERED 
(
	[TestCode] ASC,
	[Version] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vCriticalValues]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vCriticalValues]
AS
SELECT a.Accession,
 'ResultTestsList' = 
    STUFF((SELECT '|' +CAST( InternalName as varchar(50))
	FROM         tblResultedTests b INNER JOIN
						  tblResultedTestsDefinitions ON b.ResultTest = tblResultedTestsDefinitions.TestCode AND 
						  b.Version = tblResultedTestsDefinitions.Version 
	WHERE b.Accession = a.Accession and b.ResultFlag = 'Critical High' AND Result <> ''				  
          FOR XML PATH('')), 1, 1, '') ,
'ResultValuesList' = 
    STUFF((SELECT '|' +CAST( Result as varchar(50)) + ' ' + ResultFlag
	FROM         tblResultedTests b INNER JOIN
						  tblResultedTestsDefinitions ON b.ResultTest = tblResultedTestsDefinitions.TestCode AND 
						  b.Version = tblResultedTestsDefinitions.Version 
	WHERE b.Accession = a.Accession and b.ResultFlag = 'Critical High' AND Result <> ''
          FOR XML PATH('')), 1, 1, ''),
'NormalRange' = 
    STUFF((SELECT '|' +CAST( NormalRange as varchar(50)) 
	FROM         tblResultedTests b INNER JOIN
						  tblResultedTestsDefinitions ON b.ResultTest = tblResultedTestsDefinitions.TestCode AND 
						  b.Version = tblResultedTestsDefinitions.Version 
	WHERE b.Accession = a.Accession and b.ResultFlag = 'Critical High' AND Result <> ''
          FOR XML PATH('')), 1, 1, '')          
          
FROM tblResultedtests a
Where  ResultFlag = 'Critical High' AND Result <> ''
GROUP BY a.Accession

GO
/****** Object:  View [dbo].[vAbnormalValues]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vAbnormalValues]
AS
SELECT     a.Accession, 'ResultTestsList' = STUFF
                          ((SELECT     '|' + CAST(InternalName AS varchar(50))
                              FROM         tblResultedTests b INNER JOIN
                                                    tblResultedTestsDefinitions ON b.ResultTest = tblResultedTestsDefinitions.TestCode AND b.Version = tblResultedTestsDefinitions.Version
                              WHERE     b.Accession = a.Accession AND b.ResultFlag IN ('Low', 'High', 'Positive') FOR XML PATH('')), 1, 1, ''), 
                           'ResultValuesList' = STUFF
                          ((SELECT     '|' + CAST(Result AS varchar(50)) + ' ' + ResultFlag
                              FROM         tblResultedTests b INNER JOIN
                                                    tblResultedTestsDefinitions ON b.ResultTest = tblResultedTestsDefinitions.TestCode AND b.Version = tblResultedTestsDefinitions.Version
                              WHERE     b.Accession = a.Accession AND b.ResultFlag IN ('Low', 'High', 'Positive') FOR XML PATH('')), 1, 1, ''),
                              
							'NormalRange' = 
								STUFF((SELECT '|' +CAST( NormalRange as varchar(50)) 
								FROM         tblResultedTests b INNER JOIN
													  tblResultedTestsDefinitions ON b.ResultTest = tblResultedTestsDefinitions.TestCode AND 
													  b.Version = tblResultedTestsDefinitions.Version 
								WHERE b.Accession = a.Accession and  b.ResultFlag IN ('Low', 'High', 'Positive')
									  FOR XML PATH('')), 1, 1, '')             
							                              
                              
FROM         tblResultedtests a
WHERE     ResultFlag IN ('Low', 'High', 'Positive') AND Result <> ''
GROUP BY a.Accession

GO
/****** Object:  Table [dbo].[tblMailoutOrders]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMailoutOrders](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[MailoutLabCode] [varchar](20) NOT NULL,
	[MOAccession] [varchar](100) NOT NULL,
	[PatientID] [varchar](100) NOT NULL,
	[MailoutOrderSetCode] [varchar](max) NULL,
	[OrderSetCode] [varchar](780) NOT NULL,
	[SentBatchID] [varchar](200) NULL,
	[Status] [varchar](10) NULL,
	[MailoutComment] [varchar](500) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vAccessionProgress]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vAccessionProgress]
AS
SELECT     Accession, AccessionDate, TestingDate, ReleasedDate, Status, BilledDate, HasMailout, CASE WHEN TestingDate IS NOT NULL AND HasMailOut IS NULL AND 
                      Status <> 'Final' THEN 'In-Lab' WHEN TestingDate IS NOT NULL AND HasMailOut IS NOT NULL AND Status <> 'Final' THEN 'Mail-Out' WHEN Status = 'Final' AND 
                      ReleasedDate IS NULL AND BilledDate IS NULL THEN 'Final' WHEN ReleasedDate IS NOT NULL AND BilledDate IS NULL 
                      THEN 'Sent To Billing' WHEN BilledDate IS NOT NULL AND dbo.B_GetTotalBillBalance(Accession) > 0 THEN 'Billed' WHEN BilledDate IS NOT NULL AND 
                      dbo.B_GetTotalBillBalance(Accession) <= 0 THEN 'Paid' ELSE 'Accessioned' END AS Progress
FROM         (SELECT     a.Accession, a.DateCreated AS AccessionDate, a.MailoutDate AS TestingDate, dbo.tblArchiveReviewAccession.ArchivedDate AS ReleasedDate, 
                                              CASE WHEN EXISTS
                                                  (SELECT     rt.Status
                                                    FROM          dbo.tblResultedTests rt(nolock)
                                                    WHERE      rt.Accession = a.Accession AND (rt.Status = 'Pending' OR
                                                                           rt.Status = 'Hold')) THEN 'Pending' ELSE 'Final' END AS Status, dbo.tblBillAccessions.DateCreated AS BilledDate, 
                                              dbo.tblMailoutOrders.MOAccession AS HasMailout
                       FROM          dbo.tblAccessions AS a LEFT OUTER JOIN
                                              dbo.tblArchiveReviewAccession ON a.Accession = dbo.tblArchiveReviewAccession.Accession LEFT OUTER JOIN
                                              dbo.tblMailoutOrders ON a.Accession = dbo.tblMailoutOrders.MOAccession LEFT OUTER JOIN
                                              dbo.tblBillAccessions ON a.Accession = dbo.tblBillAccessions.Accession) AS A_1
GO
/****** Object:  View [dbo].[vAccessionOTNames]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create VIEW [dbo].[vAccessionOTNames]
AS
select a.Accession,  

'TestsNameOrdered' = 
				ISNULL(STUFF((SELECT ', ' + CAST( ISNULL(description, '') as varchar(100)) 
				FROM         tblOrderedTests b INNER JOIN
									  tblorderedtestsdefinitions ON b.OrderedTest = tblorderedtestsdefinitions.OrderedTest 
				WHERE b.Accession = a.Accession 
					  FOR XML PATH('')), 1, 1, '') , '') 	

	from tblAccessions a
	

GO
/****** Object:  View [dbo].[vResultTestValueListing]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vResultTestValueListing]
AS
SELECT Accession,
 'ResultTestsList' = 
    STUFF((SELECT '|' +CAST( ResultTest as varchar(50))
           FROM tblResultedtests b 
           WHERE b.Accession = a.Accession 
          FOR XML PATH('')), 1, 2, '') ,
'ResultValuesList' = 
    STUFF((SELECT '|' +CAST( Result as varchar(50))
           FROM tblResultedtests b 
           WHERE b.Accession = a.Accession 
          FOR XML PATH('')), 1, 2, '')                  
          
          
FROM tblResultedtests a
GROUP BY Accession
GO
/****** Object:  Table [dbo].[tblThreadAudit]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblThreadAudit](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[PageName] [varchar](100) NULL,
	[ThreadName] [varchar](100) NULL,
	[ThreadStart] [datetime] NULL,
	[ThreadEnd] [datetime] NULL,
	[Accession] [varchar](50) NULL,
	[QSSUpdateID] [varchar](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblArchiveReviewAccessionHistory]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblArchiveReviewAccessionHistory](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ArchivedDate] [datetime] NULL,
	[QSSLastUpdatedByID] [varchar](20) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vThreadLogging]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vThreadLogging]      
AS      
select ar.Accession, ArchivedDate, QSSUpdateId, PageName, ThreadStart, ThreadEnd 
from tblArchiveReviewAccessionHistory ar
  inner join tblThreadAudit ta
  on ar.ArchivedDate between ta.ThreadStart and ta.ThreadEnd
  and ta.ThreadName like '%AutoRelease%'
  and ta.ThreadEnd <> '1900-01-01 00:00:00'
 
GO
/****** Object:  UserDefinedFunction [dbo].[SplitString]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




Create function [dbo].[SplitString] (
  @String    varchar(8000),
  @Delimiter char(1) = ',') returns table as
  return(
    with splitpositions(startposition, endposition) as(
      select 
        startposition = 1, 
        endposition = charindex(@Delimiter, @String + @Delimiter)
      union all
      select 
        startposition = endposition + 1, 
        endposition = charindex(@Delimiter, @String + @Delimiter, endposition + 1) 
      from 
        splitpositions   
      where 
        charindex(@Delimiter, @String + @Delimiter, endposition + 1) <> 0)
    
    select 
      substring(@String, startposition, endposition - startposition) Value
    from 
      splitpositions)



GO
/****** Object:  UserDefinedFunction [dbo].[TrimChars]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE

FUNCTION [dbo].[TrimChars](@OriginalString NVARCHAR(4000), @CharsToTrim NVARCHAR(50))
RETURNS TABLE
WITH SCHEMABINDING
AS RETURN
WITH cte AS
(
  SELECT PATINDEX(N'%[^' + @CharsToTrim + N']%', @OriginalString) AS [FirstChar],
         PATINDEX(N'%[^' + @CharsToTrim + N']%', REVERSE(@OriginalString)) AS [LastChar],
        LEN(@OriginalString + N'~') - 1 AS [ActualLength]
)
SELECT cte.[ActualLength],
       [FirstChar],
       ((cte.[ActualLength] - [LastChar]) + 1) AS [LastChar],
       SUBSTRING(@OriginalString, [FirstChar],
                 ((cte.[ActualLength] - [LastChar]) - [FirstChar] + 2)) AS [FixedString]
FROM   cte;
GO
/****** Object:  Table [dbo].[_manualSuspensionTranslate]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_manualSuspensionTranslate](
	[Current] [varchar](max) NOT NULL,
	[DDReason] [varchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[_tblStaging]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[_tblStaging](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[InstName] [varchar](200) NOT NULL,
	[InstMod] [varchar](200) NOT NULL,
	[InstrumentCode] [varchar](200) NOT NULL,
	[ResultTest] [varchar](100) NOT NULL,
	[Abbr] [varchar](100) NOT NULL,
	[Type] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MedicationO]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MedicationO](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[MedicationCode] [varchar](50) NOT NULL,
	[Description] [varchar](200) NOT NULL,
	[GenericName] [varchar](500) NULL,
	[ReflexCode] [varchar](200) NULL,
	[ReflexDesc] [varchar](200) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MedicationU]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MedicationU](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[MedicationCode] [varchar](50) NOT NULL,
	[Description] [varchar](200) NOT NULL,
	[GenericName] [varchar](500) NULL,
	[ReflexCode] [varchar](200) NULL,
	[ReflexDesc] [varchar](200) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StagingTable]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StagingTable](
	[Accession] [varchar](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tbl9to10Conversion]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tbl9to10Conversion](
	[ICD9Code] [varchar](max) NULL,
	[ICD10Code] [varchar](10) NULL,
	[ICD10Description] [varchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAccessionBillingStatus]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAccessionBillingStatus](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[AccessionBillingStatus] [varchar](10) NOT NULL,
 CONSTRAINT [pk_tblAccessionBillingStatus] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAccessionMOResultsMSHDate]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAccessionMOResultsMSHDate](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[LatestMSHDate] [varchar](20) NOT NULL,
 CONSTRAINT [PK_tblAccessionMOResultsMSHDate] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAccessionNotes]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAccessionNotes](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[Notes] [varchar](max) NOT NULL,
	[DateCreated] [datetime] NULL,
 CONSTRAINT [pk_tblAccessionNotes] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAccessionPrefix]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAccessionPrefix](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Prefix] [varchar](10) NOT NULL,
 CONSTRAINT [pk_tblAccessionPrefix] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAccessionsClients]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAccessionsClients](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NOT NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
 CONSTRAINT [pk_tblAccessionsClients] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC,
	[ClientCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAccessionsFinancials]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAccessionsFinancials](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[AccessionCurrentTotalFee] [decimal](18, 2) NULL,
	[AccessionCurrentTotalPaid] [decimal](18, 2) NULL,
	[AccessionCurrentTotalAdjusted] [decimal](18, 2) NULL,
	[AccessionCurrentBalance] [decimal](18, 2) NULL,
	[QSSUpdatedDate] [datetime] NULL,
	[AccessionCurrentExpectedAmt] [decimal](18, 2) NULL,
 CONSTRAINT [pk_tblAccessionsFinacials] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAccessionTransactionAudit]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAccessionTransactionAudit](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[CreatedBy] [varchar](100) NOT NULL,
	[Action] [varchar](max) NOT NULL,
 CONSTRAINT [pk_tblAccessionTransactionAudit] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAntibiotics]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAntibiotics](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Description] [varchar](100) NOT NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
 CONSTRAINT [pk_tblAntibiotics] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAR_Report_Summation_Table]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAR_Report_Summation_Table](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[PatientName] [varchar](102) NOT NULL,
	[BirthDate] [varchar](30) NULL,
	[BillType] [varchar](100) NOT NULL,
	[Ins_Code] [varchar](20) NULL,
	[InsuranceName] [varchar](100) NOT NULL,
	[Policy_Number] [varchar](100) NULL,
	[ClientCode] [varchar](50) NOT NULL,
	[ClientName] [varchar](100) NOT NULL,
	[RequestingPhysician] [varchar](252) NULL,
	[ServiceDate] [varchar](30) NOT NULL,
	[UpToThirtyDays] [decimal](38, 2) NULL,
	[ThirtyOneToSixtyDays] [decimal](38, 2) NULL,
	[SiztyOneToNintyDays] [decimal](38, 2) NULL,
	[OverNintyDays] [decimal](38, 2) NULL,
	[BilledDate] [varchar](30) NULL,
	[TotalCharge] [decimal](38, 2) NULL,
	[TotalPayment] [decimal](38, 2) NULL,
	[TotalBalance] [decimal](38, 2) NULL,
 CONSTRAINT [PK_AR_Report_Summation_Table] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAR_UpdatedDate]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAR_UpdatedDate](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[UpdateDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblArchiveCOVIDNJDOH]    Script Date: 14.04.2021 13:43:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblArchiveCOVIDNJDOH](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](20) NULL,
	[Reported] [bit] NOT NULL,
	[ReportedDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAuditAccessions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAuditAccessions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[PatientID] [varchar](100) NOT NULL,
	[PreAccession] [varchar](50) NOT NULL,
	[ClientCode] [varchar](50) NOT NULL,
	[PhysicianCode] [varchar](100) NOT NULL,
	[CollectionDate] [datetime] NOT NULL,
	[OrderDate] [datetime] NULL,
	[ReceiveDate] [datetime] NULL,
	[DateCreated] [datetime] NULL,
	[FinalReportDate] [datetime] NULL,
	[OrderType] [varchar](50) NOT NULL,
	[OrderedTests] [varchar](max) NULL,
	[MedicationsDataXML] [xml] NULL,
	[DiagnosisDataXML] [xml] NULL,
	[SpecimenDataXML] [xml] NULL,
	[PrimaryInsuranceID] [varchar](100) NULL,
	[PrimaryPatRelationtoIns] [varchar](20) NULL,
	[PrimaryInsuredID] [varchar](100) NULL,
	[SecondaryInsuranceID] [varchar](100) NULL,
	[SecondaryPatRelationtoIns] [varchar](20) NULL,
	[SecondaryInsuredID] [varchar](100) NULL,
	[TertiaryInsuranceID] [varchar](100) NULL,
	[TertiaryPatRelationtoIns] [varchar](20) NULL,
	[TertiaryInsuredID] [varchar](100) NULL,
	[PatientStatus] [varchar](20) NULL,
	[ConditionRelatedTo] [varchar](100) NULL,
	[AdjusterName] [varchar](200) NULL,
	[EmployerName] [varchar](200) NULL,
	[School] [varchar](100) NULL,
	[SymptomAccidentDate] [datetime] NULL,
	[SimilarSameDate] [datetime] NULL,
	[InternalComment] [varchar](300) NULL,
	[ReportComment] [varchar](300) NULL,
	[ProblemSpec] [bit] NULL,
	[CurrentBillType] [varchar](20) NULL,
	[CurrentBillTo] [varchar](20) NULL,
	[BillingMessage] [varchar](500) NULL,
	[ManualSuspension] [bit] NULL,
	[SiteID] [varchar](50) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[AuditType] [char](1) NULL,
	[QSSVersion] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAuditCytologyCases]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAuditCytologyCases](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[CaseNumber] [varchar](100) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[TestCode] [varchar](100) NOT NULL,
	[Cytologist] [varchar](100) NULL,
	[Status] [varchar](100) NULL,
	[Signed] [bit] NOT NULL,
	[isAbnormal] [bit] NOT NULL,
	[StainsDataXML] [xml] NULL,
	[DiagnosisDataXML] [xml] NULL,
	[CPTDataXML] [xml] NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NOT NULL,
	[AuditType] [char](1) NOT NULL,
	[Notes] [varchar](200) NULL,
	[Jars] [varchar](10) NULL,
	[Cassettes] [varchar](10) NULL,
	[Sources] [varchar](10) NULL,
	[Slides] [varchar](10) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAuditDB]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAuditDB](
	[AuditDBName] [varchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAuditMicroTestAntibiotics]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAuditMicroTestAntibiotics](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[MicroTestOrganismID] [varchar](100) NOT NULL,
	[AntibioticName] [varchar](200) NULL,
	[Sensitivity] [varchar](200) NULL,
	[MICValue] [varchar](200) NULL,
	[Comment] [varchar](max) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[DateChanged] [datetime] NULL,
	[AuditType] [char](1) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAuditMicroTestOrganisms]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAuditMicroTestOrganisms](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[MicroTestID] [int] NOT NULL,
	[MicroTestOrganismID] [varchar](100) NOT NULL,
	[OrganismName] [varchar](200) NOT NULL,
	[ColonyCount] [varchar](200) NOT NULL,
	[GramStain] [varchar](200) NOT NULL,
	[Comment] [varchar](max) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[DateChanged] [datetime] NULL,
	[AuditType] [char](1) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAuditMicroTests]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAuditMicroTests](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[PatientID] [varchar](100) NOT NULL,
	[ClientCode] [varchar](50) NOT NULL,
	[PhysicianCode] [varchar](100) NOT NULL,
	[CollectionDate] [datetime] NOT NULL,
	[TestCode] [varchar](100) NULL,
	[TestDescription] [varchar](500) NULL,
	[SpecimenSource] [varchar](500) NULL,
	[Comment] [varchar](max) NULL,
	[Status] [varchar](100) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[DateChanged] [datetime] NOT NULL,
	[AuditType] [char](1) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAuditPathologyCases]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAuditPathologyCases](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[CaseNumber] [varchar](100) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[TestCode] [varchar](100) NOT NULL,
	[Pathologist] [varchar](100) NULL,
	[Status] [varchar](100) NULL,
	[Signed] [bit] NOT NULL,
	[isAbnormal] [bit] NOT NULL,
	[StainsDataXML] [xml] NULL,
	[DiagnosisDataXML] [xml] NULL,
	[CPTDataXML] [xml] NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NOT NULL,
	[AuditType] [char](1) NOT NULL,
	[Notes] [varchar](200) NULL,
	[Jars] [varchar](10) NULL,
	[Cassettes] [varchar](10) NULL,
	[Sources] [varchar](10) NULL,
	[Slides] [varchar](10) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAuditResultedTests]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAuditResultedTests](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[PerformedTest] [varchar](100) NULL,
	[ResultTest] [varchar](100) NOT NULL,
	[Worksheet] [varchar](100) NULL,
	[LOINCcode] [varchar](100) NULL,
	[Organism] [varchar](100) NULL,
	[SensitivitiesXML] [xml] NULL,
	[Result] [varchar](100) NULL,
	[ResultFlag] [varchar](max) NULL,
	[NormalRange] [varchar](200) NULL,
	[Units] [varchar](100) NULL,
	[CorrectionsXML] [xml] NULL,
	[CallStatus] [varchar](50) NULL,
	[ResultComment] [varchar](max) NULL,
	[Status] [varchar](50) NULL,
	[EnteredBy] [varchar](100) NULL,
	[EntryDate] [datetime] NULL,
	[SiteID] [varchar](50) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[Outcome] [varchar](1) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAutoEmail]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAutoEmail](
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAutoFax]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAutoFax](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[FaxName] [varchar](100) NOT NULL,
	[FaxNumber] [varchar](100) NULL,
	[ClientCode] [varchar](50) NULL,
 CONSTRAINT [pk_tblAutoFax] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblAutoRelease]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblAutoRelease](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NULL,
	[QSSCreatedDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillingECSBatchDetails]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillingECSBatchDetails](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[BatchID] [int] NOT NULL,
	[Accession] [varchar](100) NOT NULL,
 CONSTRAINT [pk_tblBillingECSBatchDetails] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillingECSBatchList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillingECSBatchList](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[BatchID] [int] NOT NULL,
	[DateCreated] [datetime] NULL,
	[ClearinghouseName] [varchar](200) NULL,
 CONSTRAINT [pk_tblBillingECSBatchList] PRIMARY KEY CLUSTERED 
(
	[id] ASC,
	[BatchID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillingGeneratedQueries]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillingGeneratedQueries](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[QueryName] [varchar](200) NOT NULL,
	[SQLstring] [varchar](max) NOT NULL,
	[DateUpdated] [datetime] NULL,
	[UpdatedBy] [varchar](50) NULL,
 CONSTRAINT [pk_tblBillingGeneratedQueries] PRIMARY KEY CLUSTERED 
(
	[id] ASC,
	[QueryName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillingInsuranceCPTCodeLookup]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillingInsuranceCPTCodeLookup](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[InsCPTCode] [varchar](10) NULL,
	[InsCPTDescription] [varchar](200) NULL,
	[CPTCode] [varchar](10) NULL,
	[ResultTest] [varchar](100) NULL,
	[InsuranceID] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillingNotifications]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillingNotifications](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accession] [varchar](100) NOT NULL,
	[firstname] [varchar](50) NULL,
	[lastname] [varchar](50) NULL,
	[client] [varchar](50) NULL,
	[orderedtest] [varchar](100) NULL,
	[notification] [varchar](max) NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillingRemitRemarkDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillingRemitRemarkDefinitions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[RemarkCode] [varchar](100) NOT NULL,
	[RemarkDescription] [varchar](max) NULL,
 CONSTRAINT [PK_tblBillingRemitRemarkDefinitions] PRIMARY KEY CLUSTERED 
(
	[RemarkCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillingRemitRemarks]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillingRemitRemarks](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[CheckNumber] [varchar](100) NOT NULL,
	[CPT_Code] [varchar](30) NOT NULL,
	[Modifier] [varchar](100) NULL,
	[RemarkCode] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillingRemittanceFiles]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillingRemittanceFiles](
	[FileName] [varchar](150) NOT NULL,
	[Status] [varchar](20) NOT NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
 CONSTRAINT [PK_tblBillingRemittanceFiles] PRIMARY KEY CLUSTERED 
(
	[FileName] ASC,
	[Status] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillingRoutes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillingRoutes](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Route] [varchar](100) NOT NULL,
 CONSTRAINT [pk_tblBillingRoutes] PRIMARY KEY CLUSTERED 
(
	[Route] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillingTempRemit]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillingTempRemit](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[FileName] [varchar](120) NOT NULL,
	[ptLastName] [varchar](100) NOT NULL,
	[ptFirstName] [varchar](100) NOT NULL,
	[CheckNumber] [varchar](100) NOT NULL,
	[CheckDate] [datetime] NOT NULL,
	[CPT_Code] [varchar](30) NOT NULL,
	[Units] [int] NULL,
	[CPT_Charge] [decimal](18, 2) NULL,
	[CPT_Paid] [decimal](18, 2) NULL,
	[AdjustmentCode] [varchar](20) NULL,
	[AdjustmentReason] [varchar](20) NULL,
	[AdjustmentAmount] [decimal](18, 2) NULL,
	[ICN] [varchar](100) NULL,
	[Payer] [varchar](100) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[Modifier] [varchar](100) NULL,
	[PayerClaimNumber] [varchar](200) NULL,
	[AllowedAmount] [decimal](18, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillingTempRemitArchive]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillingTempRemitArchive](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[FileName] [varchar](120) NOT NULL,
	[ptLastName] [varchar](100) NOT NULL,
	[ptFirstName] [varchar](100) NOT NULL,
	[CheckNumber] [varchar](100) NOT NULL,
	[CheckDate] [datetime] NOT NULL,
	[CPT_Code] [varchar](30) NOT NULL,
	[Units] [int] NULL,
	[CPT_Charge] [decimal](18, 2) NULL,
	[CPT_Paid] [decimal](18, 2) NULL,
	[AdjustmentCode] [varchar](20) NULL,
	[AdjustmentReason] [varchar](20) NULL,
	[AdjustmentAmount] [decimal](18, 2) NULL,
	[ICN] [varchar](100) NULL,
	[Payer] [varchar](100) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[ArchiveDate] [datetime] NULL,
	[Modifier] [varchar](100) NULL,
	[PayerClaimNumber] [varchar](200) NULL,
	[AllowedAmount] [decimal](18, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillMessages]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillMessages](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](100) NOT NULL,
	[Description] [varchar](400) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
 CONSTRAINT [PK_tblBillMessages] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblBillTypeDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblBillTypeDefinitions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[BTcode] [varchar](100) NOT NULL,
	[Description] [varchar](200) NULL,
	[ExpectedAmt] [varchar](100) NULL,
	[BillCycle] [int] NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[PrintFlag] [bit] NULL,
	[VisibleFlag] [bit] NULL,
	[BillHeaderText] [varchar](100) NULL,
	[ClaimFlag] [bit] NULL,
	[ClaimCode] [varchar](20) NULL,
	[InsuranceFlag] [bit] NULL,
 CONSTRAINT [pk_BillTypeDefinitions] PRIMARY KEY CLUSTERED 
(
	[BTcode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCalculationReference]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCalculationReference](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ParentCalculationID] [varchar](100) NOT NULL,
	[ChildCalculationID] [varchar](100) NOT NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
 CONSTRAINT [PK_tblCalculationReference] PRIMARY KEY CLUSTERED 
(
	[ParentCalculationID] ASC,
	[ChildCalculationID] ASC,
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCallSheet]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCallSheet](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accession] [varchar](50) NOT NULL,
	[lastname] [varchar](50) NULL,
	[firstname] [varchar](50) NULL,
	[clientcode] [varchar](50) NULL,
	[clientname] [varchar](50) NULL,
	[PhysicianCode] [varchar](50) NULL,
	[PhysicianName] [varchar](50) NULL,
	[DOB] [datetime] NULL,
	[SEX] [varchar](50) NULL,
	[CollectionDate] [datetime] NULL,
	[ServiceDate] [datetime] NULL,
	[Status] [varchar](50) NULL,
	[Notes] [varchar](max) NULL,
	[ActiveFlag] [bit] NULL,
 CONSTRAINT [PK_tblCallSheet_1] PRIMARY KEY CLUSTERED 
(
	[accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCallSheetDOH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCallSheetDOH](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accession] [varchar](50) NOT NULL,
	[lastname] [varchar](50) NULL,
	[firstname] [varchar](50) NULL,
	[clientcode] [varchar](50) NULL,
	[clientname] [varchar](50) NULL,
	[PhysicianCode] [varchar](50) NULL,
	[PhysicianName] [varchar](50) NULL,
	[DOB] [datetime] NULL,
	[SEX] [varchar](50) NULL,
	[CollectionDate] [datetime] NULL,
	[ServiceDate] [datetime] NULL,
	[Status] [varchar](50) NULL,
	[Notes] [varchar](max) NULL,
	[ActiveFlag] [bit] NULL,
 CONSTRAINT [PK_tblCallSheetDOH_1] PRIMARY KEY CLUSTERED 
(
	[accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCategory]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCategory](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Category] [varchar](50) NOT NULL,
	[order] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblClaimCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblClaimCodes](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ClaimCode] [varchar](20) NOT NULL,
	[Description] [varchar](100) NULL,
 CONSTRAINT [PK_tblClaimCodes] PRIMARY KEY CLUSTERED 
(
	[ClaimCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblClaimTypes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblClaimTypes](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ClaimType] [varchar](3) NOT NULL,
	[ClearinghouseName] [varchar](100) NULL,
 CONSTRAINT [PK_tblClaimTypes] PRIMARY KEY CLUSTERED 
(
	[ClaimType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblClientBillAsName]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblClientBillAsName](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ClientCode] [varchar](20) NOT NULL,
	[BillAsName] [varchar](100) NULL,
 CONSTRAINT [PK_tblClientBillAsName] PRIMARY KEY CLUSTERED 
(
	[ClientCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblClientBillDefinition]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblClientBillDefinition](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [varchar](50) NULL,
	[PhysicianCode] [varchar](50) NULL,
	[BillType] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblClientReportOptions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblClientReportOptions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ReportName] [varchar](100) NULL,
	[Description] [varchar](1000) NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblClientsEmails]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblClientsEmails](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ClientCode] [varchar](20) NOT NULL,
	[Email] [varchar](max) NOT NULL,
	[Description] [varchar](max) NULL,
	[ZipPassword] [varchar](max) NULL,
 CONSTRAINT [PK_tblClientsEmails] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblClientsFaxNumbers]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblClientsFaxNumbers](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ClientCode] [varchar](20) NOT NULL,
	[FaxNumber] [varchar](100) NOT NULL,
	[Description] [varchar](300) NULL,
 CONSTRAINT [PK_tblClientsFaxNumbers] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblClientsPhysicians]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblClientsPhysicians](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ClientCode] [varchar](20) NOT NULL,
	[PhysicianCode] [varchar](20) NOT NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
 CONSTRAINT [PK_tblClientsPhysicians] PRIMARY KEY CLUSTERED 
(
	[ClientCode] ASC,
	[PhysicianCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblClientsSalesman]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblClientsSalesman](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ClientCode] [varchar](20) NOT NULL,
	[SalesmanCode] [varchar](20) NOT NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[Commission] [decimal](5, 2) NULL,
 CONSTRAINT [PK_tblClientsSalesman] PRIMARY KEY CLUSTERED 
(
	[ClientCode] ASC,
	[SalesmanCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblClientWebUsers]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblClientWebUsers](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ClientCode] [varchar](20) NOT NULL,
	[WebUserID] [varchar](100) NOT NULL,
 CONSTRAINT [pk_tblClientWebUsers] PRIMARY KEY CLUSTERED 
(
	[ClientCode] ASC,
	[WebUserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCollectorBillTypeCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCollectorBillTypeCodes](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [varchar](20) NOT NULL,
	[BillTypeCode] [varchar](100) NOT NULL,
 CONSTRAINT [pk_tblCollectorBillTypeCodes] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[BillTypeCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCollectorDenialCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCollectorDenialCodes](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [varchar](20) NOT NULL,
	[DenialCode] [varchar](100) NOT NULL,
 CONSTRAINT [pk_tblCollectorDenialCodes] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[DenialCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCollectorInsuranceCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCollectorInsuranceCodes](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [varchar](20) NOT NULL,
	[InsuranceCode] [varchar](100) NOT NULL,
 CONSTRAINT [pk_tblCollectorInsuranceCodes] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[InsuranceCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblControlModules]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblControlModules](
	[ID] [varchar](50) NOT NULL,
	[ControlID] [varchar](20) NOT NULL,
	[Description] [varchar](200) NULL,
	[InstrumentCode] [varchar](20) NOT NULL,
	[LotNumber] [varchar](20) NOT NULL,
	[ExpirationDate] [date] NULL,
	[TestCodes] [varchar](max) NULL,
	[Status] [varchar](50) NOT NULL,
 CONSTRAINT [PK_tblControlModules_1] PRIMARY KEY CLUSTERED 
(
	[ID] ASC,
	[ControlID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblControlModulesExpired]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblControlModulesExpired](
	[ID] [varchar](50) NOT NULL,
	[ControlID] [varchar](20) NOT NULL,
	[Description] [varchar](100) NULL,
	[InstrumentCode] [varchar](20) NOT NULL,
	[LotNumber] [varchar](20) NOT NULL,
	[ExpirationDate] [date] NOT NULL,
	[TestCodes] [varchar](max) NULL,
	[Status] [varchar](50) NOT NULL,
 CONSTRAINT [PK_tblControlModulesExpired_1] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblControlOrders]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblControlOrders](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderID] [varchar](100) NOT NULL,
	[InstrumentCode] [varchar](100) NULL,
	[Description] [varchar](100) NULL,
	[TestCodes] [varchar](max) NULL,
	[Average] [varchar](max) NULL,
	[Deviation] [varchar](max) NULL,
	[ArchiveFlag] [bit] NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreateDateTime] [datetime] NULL,
	[LotNumber] [varchar](100) NULL,
 CONSTRAINT [PK_tblControlOrders] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uc_tblControlOrders] UNIQUE NONCLUSTERED 
(
	[OrderID] ASC,
	[InstrumentCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblControlOrdersArchive]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblControlOrdersArchive](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderID] [varchar](100) NOT NULL,
	[InstrumentCode] [varchar](100) NULL,
	[Description] [varchar](100) NULL,
	[TestCodes] [varchar](max) NULL,
	[Average] [varchar](max) NULL,
	[Deviation] [varchar](max) NULL,
	[ArchiveFlag] [bit] NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreateDateTime] [datetime] NULL,
	[Version] [int] NULL,
	[LotNumber] [varchar](100) NULL,
 CONSTRAINT [PK_tblQCControlsArchive] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uc_tblQCControlsArchive] UNIQUE NONCLUSTERED 
(
	[OrderID] ASC,
	[InstrumentCode] ASC,
	[Version] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblControlOrdersAudit]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblControlOrdersAudit](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderID] [varchar](100) NOT NULL,
	[InstrumentCode] [varchar](100) NOT NULL,
	[TestCode] [varchar](20) NOT NULL,
	[Average] [varchar](20) NULL,
	[Deviation] [varchar](20) NULL,
	[ArchiveFlag] [bit] NULL,
	[AuditUpdateBy] [varchar](20) NOT NULL,
	[AuditDateTime] [datetime] NOT NULL,
	[LotNumber] [varchar](100) NULL,
 CONSTRAINT [PK_tblControlOrdersAudit] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uc_tblControlOrdersAudit] UNIQUE NONCLUSTERED 
(
	[OrderID] ASC,
	[InstrumentCode] ASC,
	[TestCode] ASC,
	[AuditDateTime] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblControlResults]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblControlResults](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderID] [varchar](100) NOT NULL,
	[InstrumentCode] [varchar](100) NOT NULL,
	[TestCode] [varchar](100) NOT NULL,
	[Result] [varchar](100) NULL,
	[NormalRange] [varchar](200) NULL,
	[Average] [decimal](28, 4) NULL,
	[STDDeviation] [decimal](28, 4) NULL,
	[CalcDeviation] [decimal](28, 4) NULL,
	[GroupID] [varchar](50) NULL,
	[GraphFlag] [bit] NULL,
	[ReportFlag] [bit] NULL,
	[Comment] [varchar](200) NULL,
	[ResultDateTime] [datetime] NULL,
	[ReviewDateTime] [datetime] NULL,
	[ResultedBy] [varchar](20) NULL,
	[LotNumber] [varchar](100) NULL,
 CONSTRAINT [PK_tblControlResults] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uc_tblControlResults] UNIQUE NONCLUSTERED 
(
	[OrderID] ASC,
	[InstrumentCode] ASC,
	[TestCode] ASC,
	[GroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblControlResultsArchive]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblControlResultsArchive](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderID] [varchar](100) NOT NULL,
	[InstrumentCode] [varchar](100) NOT NULL,
	[TestCode] [varchar](100) NOT NULL,
	[Result] [varchar](100) NULL,
	[NormalRange] [varchar](200) NULL,
	[Average] [decimal](28, 4) NULL,
	[STDDeviation] [decimal](28, 4) NULL,
	[CalcDeviation] [decimal](28, 4) NULL,
	[GroupID] [varchar](50) NULL,
	[GraphFlag] [bit] NULL,
	[ReportFlag] [bit] NULL,
	[Comment] [varchar](200) NULL,
	[ResultDateTime] [datetime] NULL,
	[ResultedBy] [varchar](20) NULL,
	[ReviewDateTime] [datetime] NULL,
	[Version] [int] NULL,
	[LotNumber] [varchar](100) NULL,
 CONSTRAINT [PK_tblControlResultsArchive] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uc_tblControlResultsArchive] UNIQUE NONCLUSTERED 
(
	[OrderID] ASC,
	[InstrumentCode] ASC,
	[TestCode] ASC,
	[GroupID] ASC,
	[Version] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblControlResultsAudit]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblControlResultsAudit](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderID] [varchar](100) NOT NULL,
	[InstrumentCode] [varchar](100) NOT NULL,
	[TestCode] [varchar](100) NOT NULL,
	[Average] [decimal](28, 4) NULL,
	[STDDeviation] [decimal](28, 4) NULL,
	[GraphFlag] [bit] NULL,
	[ReportFlag] [bit] NULL,
	[Comment] [varchar](200) NULL,
	[groupID] [varchar](50) NULL,
	[ResultParameterUpdateComment] [varchar](200) NULL,
	[AuditDateTime] [datetime] NULL,
	[AuditUpdateBy] [varchar](20) NULL,
	[LotNumber] [varchar](100) NULL,
 CONSTRAINT [PK_tblQCResultAudit] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uc_tblControlResultsAudit] UNIQUE NONCLUSTERED 
(
	[OrderID] ASC,
	[InstrumentCode] ASC,
	[TestCode] ASC,
	[AuditDateTime] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCoriellLog]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCoriellLog](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[URL] [varchar](500) NULL,
	[JSONRequest] [varchar](max) NULL,
	[JSONResponse] [varchar](max) NULL,
	[Notes] [varchar](max) NULL,
	[ActionDate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCoriellTestTranslation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCoriellTestTranslation](
	[ResultTest] [varchar](max) NOT NULL,
	[CoriellTestName] [varchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCounter]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCounter](
	[CountName] [varchar](50) NOT NULL,
	[Counter] [int] NOT NULL,
	[CountPrefix] [varchar](50) NOT NULL,
	[Hashvalue] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCOVIDNJDOH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCOVIDNJDOH](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](20) NULL,
	[Reported] [bit] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCOVIDPatientEmailPortal]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCOVIDPatientEmailPortal](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](50) NOT NULL,
	[PatientID] [varchar](100) NOT NULL,
	[PatientLastName] [varchar](100) NOT NULL,
	[PatientFirstName] [varchar](100) NOT NULL,
	[DateOfBirth] [datetime] NOT NULL,
	[EmailAddress] [varchar](200) NULL,
	[PhoneNumber] [varchar](20) NULL,
	[CollectionDate] [datetime] NULL,
	[OrderDate] [datetime] NULL,
	[ReportDate] [datetime] NULL,
	[PDFGenerated] [bit] NULL,
	[EmailSent] [bit] NULL,
	[NeedSync] [bit] NULL,
	[LastSyncDate] [datetime] NULL,
 CONSTRAINT [PK_tblCOVIDPatientEmailPortal] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCOVIDTests]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCOVIDTests](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TestCode] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCPT]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCPT](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[CPTCODE] [varchar](50) NOT NULL,
	[ICD9CODES] [varchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCPTGroups]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCPTGroups](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[GroupName] [varchar](200) NOT NULL,
	[ResultCodes] [varchar](200) NOT NULL,
	[ResultDecription] [varchar](200) NOT NULL,
	[BillTypeCode] [varchar](5) NOT NULL,
	[GroupCPTCode] [varchar](100) NOT NULL,
	[QSSCreatedByID] [varchar](20) NOT NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[CheckAll] [bit] NULL,
	[Modifier] [varchar](20) NULL,
	[FeeAmt] [decimal](18, 2) NULL,
	[ExpPaymentAmt] [decimal](18, 2) NULL,
	[EffectiveDate] [datetime] NOT NULL,
 CONSTRAINT [PK_tblCPTGroups] PRIMARY KEY CLUSTERED 
(
	[ResultCodes] ASC,
	[BillTypeCode] ASC,
	[GroupCPTCode] ASC,
	[EffectiveDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCPTLookup]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCPTLookup](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[CPTCode] [varchar](100) NULL,
	[DiagnosisCode] [varchar](100) NULL,
 CONSTRAINT [pk_tblCPTLookup] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCPTScaleMaintance]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCPTScaleMaintance](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[InsuranceType] [varchar](50) NOT NULL,
	[CPTCode] [varchar](50) NOT NULL,
	[MaxUnits] [int] NULL,
	[ConvertToCode] [varchar](50) NOT NULL,
	[Description] [varchar](max) NULL,
	[MaxUnitsSent] [int] NULL,
	[Amount] [decimal](18, 2) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
 CONSTRAINT [PK_tblCPTScaleMaintance] PRIMARY KEY CLUSTERED 
(
	[InsuranceType] ASC,
	[CPTCode] ASC,
	[ConvertToCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCreatinineTest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCreatinineTest](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[TestCode] [varchar](50) NOT NULL,
	[DateCreated] [datetime] NULL,
 CONSTRAINT [pk_tblCreatinineTest] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCustomReports]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCustomReports](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ReportName] [varchar](100) NOT NULL,
	[ReportStoredProcedure] [varchar](100) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCytoHeadersForSource]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCytoHeadersForSource](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[SourceID] [int] NOT NULL,
	[HeadingCode] [varchar](20) NOT NULL,
	[Result] [varchar](max) NULL,
	[QSSCreatedDate] [datetime] NULL,
 CONSTRAINT [PK_tblCytoHeadersForSource] PRIMARY KEY CLUSTERED 
(
	[SourceID] ASC,
	[HeadingCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCytologists]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCytologists](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[PhysicianCode] [varchar](20) NOT NULL,
	[FirstName] [varchar](100) NULL,
	[MiddleName] [varchar](100) NULL,
	[LastName] [varchar](100) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[Physicianstatus] [bit] NULL,
 CONSTRAINT [PK_tblCytologists] PRIMARY KEY CLUSTERED 
(
	[PhysicianCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCytologyBilling]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCytologyBilling](
	[Accession] [varchar](50) NULL,
	[CytologyCase] [varchar](50) NULL,
	[PerformedTest] [varchar](50) NULL,
	[ResultTest] [varchar](50) NULL,
	[Units] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCytologyCases]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCytologyCases](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[CaseNumber] [varchar](100) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[TestCode] [varchar](100) NOT NULL,
	[Cytologist] [varchar](100) NULL,
	[Status] [varchar](100) NOT NULL,
	[Signed] [bit] NOT NULL,
	[isAbnormal] [bit] NOT NULL,
	[StainsDataXML] [xml] NULL,
	[DiagnosisDataXML] [xml] NULL,
	[CPTDataXML] [xml] NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NOT NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NOT NULL,
	[Notes] [varchar](200) NULL,
	[Jars] [varchar](10) NULL,
	[Cassettes] [varchar](10) NULL,
	[Sources] [varchar](10) NULL,
	[Abnormal] [varchar](20) NULL,
	[Slides] [varchar](10) NULL,
	[ClientCaseNumber] [varchar](100) NULL,
 CONSTRAINT [pk_tblCytologyCases] PRIMARY KEY CLUSTERED 
(
	[CaseNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCytologyCaseUpdates]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCytologyCaseUpdates](
	[CaseNumber] [varchar](100) NULL,
	[Accession] [varchar](100) NULL,
	[TestCode] [varchar](100) NULL,
	[UpdateType] [varchar](20) NULL,
	[Reason] [varchar](200) NULL,
	[Cytologist] [varchar](100) NULL,
	[SignedDateTime] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCytologySources]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCytologySources](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[SourceID] [int] NOT NULL,
	[CaseNumber] [varchar](100) NOT NULL,
	[Source] [varchar](200) NOT NULL,
	[QSSCreatedDate] [datetime] NOT NULL,
 CONSTRAINT [PK_tblCytologySources] PRIMARY KEY CLUSTERED 
(
	[CaseNumber] ASC,
	[Source] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCytoMicroScope]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCytoMicroScope](
	[MicroScopeID] [int] IDENTITY(1,1) NOT NULL,
	[MicroScopeName] [varchar](100) NULL,
	[MicroScopePath] [varchar](100) NULL,
 CONSTRAINT [PK_tblCytoMicroScope] PRIMARY KEY CLUSTERED 
(
	[MicroScopeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblCytoStains]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblCytoStains](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[StainID] [int] NOT NULL,
	[CaseNumber] [varchar](100) NOT NULL,
	[StainRequest] [varchar](500) NOT NULL,
	[RequestDate] [datetime] NULL,
	[RequestBy] [varchar](100) NULL,
	[FilledDate] [datetime] NULL,
	[FilledBy] [varchar](100) NULL,
 CONSTRAINT [PK_tblCytoStains] PRIMARY KEY CLUSTERED 
(
	[StainID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblDenialDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblDenialDefinitions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[DenialCode] [varchar](100) NOT NULL,
	[DenialDescription] [varchar](500) NULL,
	[DenialAction] [varchar](100) NULL,
	[BillType] [varchar](100) NULL,
	[MessageCode] [varchar](100) NULL,
 CONSTRAINT [PK_tblDenialDefinitions] PRIMARY KEY CLUSTERED 
(
	[DenialCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblDiagnosis]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblDiagnosis](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[DiagnosisCode] [varchar](20) NOT NULL,
	[Description] [varchar](max) NOT NULL,
	[SpecificityFlag] [bit] NULL,
	[Type] [varchar](5) NULL,
 CONSTRAINT [PK_tblDiagnosis_1] PRIMARY KEY CLUSTERED 
(
	[DiagnosisCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEClinicalPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEClinicalPatientID](
	[id] [int] IDENTITY(100,1) NOT NULL,
	[PatientIDEMR] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[PatientIDLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblEClinicalPatientID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicClaimSubmission]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicClaimSubmission](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ClaimSubmissionID] [varchar](50) NOT NULL,
	[ClaimSubmissionDescription] [varchar](150) NULL,
	[ISA_AuthorizationInfoQualifier] [varchar](2) NULL,
	[ISA_AuthorizationInfo] [varchar](10) NULL,
	[ISA_SecurityInfoQualifier] [varchar](2) NULL,
	[ISA_SecurityInfo] [varchar](10) NULL,
	[ISA_InterchangeIDQualifierS] [varchar](2) NULL,
	[ISA_InterchangeSenderID] [varchar](15) NULL,
	[ISA_InterchangeIDQualifierR] [varchar](2) NULL,
	[ISA_InterchangeReceiverID] [varchar](15) NULL,
	[ISA_InterchangeControlStandardsID] [varchar](1) NULL,
	[ISA_InterchangeControlVersionNumber] [varchar](5) NULL,
	[ISA_InterchangeControlNumber] [varchar](9) NULL,
	[ISA_AcknowledgementRequested] [varchar](1) NULL,
	[ISA_UsageIndicator] [varchar](1) NULL,
	[ISA_ComponenetElementSeparator] [varchar](1) NULL,
	[GS_FunctionalIdCode] [varchar](2) NULL,
	[GS_ApplicationSenderCode] [varchar](15) NULL,
	[GS_ApplicationReceiverCode] [varchar](15) NULL,
	[GS_GroupControlNumber] [varchar](9) NULL,
	[GS_ResponsibleAgencyCode] [varchar](2) NULL,
	[GS_VersionIDCode] [varchar](12) NULL,
	[ST_TransactionSetIdCode] [varchar](3) NULL,
	[ST_TransactionSetControlNumber] [varchar](9) NULL,
	[ST_ImplementationConventionReference] [varchar](35) NULL,
	[BHT_HierarchicalStructureCode] [varchar](4) NULL,
	[BHT_TransactionSetPurposeCode] [varchar](2) NULL,
	[BHT_OriginatorApplicationTransactionID] [varchar](50) NULL,
	[BHT_ClaimOrEncounterID] [varchar](2) NULL,
	[NM1S_EntityIdentifierCode] [varchar](3) NULL,
	[NM1S_EntityTypeQualifier] [varchar](1) NULL,
	[NM1S_SubmitterLastOrOrganizationName] [varchar](60) NULL,
	[NM1S_SubmitterFirstName] [varchar](35) NULL,
	[NM1S_SubmitterMiddleName] [varchar](25) NULL,
	[NM1S_NamePrefix] [varchar](10) NULL,
	[NM1S_NameSuffix] [varchar](10) NULL,
	[NM1S_IdentificationCodeQualifier] [varchar](2) NULL,
	[NM1S_SubmitterID] [varchar](80) NOT NULL,
	[NM1S_EntityRelationshipCode] [varchar](2) NULL,
	[NM1S_NameLastOrOrganizationName] [varchar](60) NULL,
	[PER_ContactFunctionCode] [varchar](2) NULL,
	[PER_SubmitterContactName] [varchar](60) NULL,
	[PER_CommunicationNumberQualifier] [varchar](2) NULL,
	[PER_CommunicationNumber] [varchar](256) NULL,
	[NM1R_EntityIdentifierCode] [varchar](3) NULL,
	[NM1R_EntityTypeQualifier] [varchar](1) NULL,
	[NM1R_ReceiverName] [varchar](60) NULL,
	[NM1R_NameFirst] [varchar](35) NULL,
	[NM1R_NameMiddle] [varchar](25) NULL,
	[NM1R_NamePrefix] [varchar](10) NULL,
	[NM1R_NameSuffix] [varchar](10) NULL,
	[NM1R_IdentificationCodeQualifier] [varchar](2) NULL,
	[NM1R_ReceiverPrimaryID] [varchar](80) NULL,
	[NM1R_EntityRelationshipCode] [varchar](2) NULL,
	[NM1R_NameLastOrOrganizationName] [varchar](60) NULL,
	[HL_HierarchicalIDNumber] [varchar](12) NULL,
	[HL_HierarchicalParentIDNumber] [varchar](12) NULL,
	[HL_HierarchicalLevelCode] [varchar](2) NULL,
	[HL_HierarchicalChildCode] [varchar](1) NULL,
	[PRV_ProviderCode] [varchar](3) NULL,
	[PRV_ReferenceIdentificationQualifier] [varchar](3) NULL,
	[PRV_ProviderTaxonomyCode] [varchar](50) NULL,
	[NM1B_EntityIdentifierCode] [varchar](3) NULL,
	[NM1B_EntityTypeQualifier] [varchar](1) NULL,
	[NM1B_BillingProviderLastOrOrganizationalName] [varchar](60) NULL,
	[NM1B_BillingProviderFirstName] [varchar](35) NULL,
	[NM1B_BillingProviderMiddleName] [varchar](25) NULL,
	[NM1B_NamePrefix] [varchar](10) NULL,
	[NM1B_BillingProviderNameSuffix] [varchar](10) NULL,
	[NM1B_IdentificationCodeQualifier] [varchar](2) NULL,
	[NM1B_BillingProviderID] [varchar](80) NULL,
	[NM1B_EntityRelationshipCode] [varchar](2) NULL,
	[NM1B_NameLastOrOrganizationName] [varchar](60) NULL,
	[N3_BillingProviderAddressLine] [varchar](55) NULL,
	[N3_BillingProviderAddressLine2] [varchar](55) NULL,
	[N4_BillingProviderCityName] [varchar](30) NULL,
	[N4_BillingProviderState] [varchar](2) NULL,
	[N4_BillingProviderZipCode] [varchar](15) NULL,
	[REF_ReferenceIdentificationQualifier] [varchar](3) NULL,
	[REF_BillingProviderAdditionalIdentifier] [varchar](50) NULL,
	[HLS_HierarchicalIDNumber] [varchar](12) NULL,
	[HLS_HierarchicalParentIDNumber] [varchar](12) NULL,
	[HLS_HierarchicalLevelCode] [varchar](2) NULL,
	[HLS_HierarchicalChildCode] [varchar](1) NULL,
	[SE_TransactionSegmentCount] [varchar](10) NULL,
	[SE_TransactionSetControlNumber] [varchar](9) NULL,
	[GE_NumberOfTransactionSetsIncluded] [varchar](6) NULL,
	[GE_GroupControlNumber] [varchar](9) NULL,
	[IEA_NumberOfIncludedFunctionalGroups] [varchar](5) NULL,
	[IEA_InterchangeControlNumber] [varchar](9) NULL,
	[BatchCounter] [int] NULL,
	[NM1AB_EntityIdentifierCode] [varchar](3) NULL,
	[NM1AB_EntityTypeQualifier] [varchar](1) NULL,
	[PRV_BillToProviderCode] [varchar](3) NULL,
	[PRV_BillToReferenceIdentificationQualifier] [varchar](3) NULL,
 CONSTRAINT [PK_tblElectronicClaimSubmission] PRIMARY KEY CLUSTERED 
(
	[ClaimSubmissionID] ASC,
	[NM1S_SubmitterID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicGeneratePDF]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicGeneratePDF](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicGeneratePDF] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicInterfaceAthena]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicInterfaceAthena](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicInterfaceAthena] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicInterfaceChangeHealthcare]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicInterfaceChangeHealthcare](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicInterfaceChangeHealthcare] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicInterfaceCureMD]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicInterfaceCureMD](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicInterfaceCureMD] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicInterfaceEClinical]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicInterfaceEClinical](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicInterfaceEClinical] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicInterfaceEHI]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicInterfaceEHI](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicInterfaceEHI] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicInterfaceElation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicInterfaceElation](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicInterfaceElation] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicInterfaceGADOH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicInterfaceGADOH](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicInterfaceGADOH] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicInterfaceMDLAND]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicInterfaceMDLAND](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicInterface] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicInterfaceMedGen]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicInterfaceMedGen](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicInterfaceMedGen] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicInterfaceNextGen]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicInterfaceNextGen](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicInterfaceNextGen] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicInterfaceNYSDOH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicInterfaceNYSDOH](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicInterfaceNYSDOH] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicInterfaceOptiMantra]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicInterfaceOptiMantra](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicInterfaceOptiMantra] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicInterfacePracticeFusion]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicInterfacePracticeFusion](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicInterfacePracticeFusion] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblElectronicReq]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblElectronicReq](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tblElectronicReq] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMRAthenaPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMRAthenaPatientID](
	[id] [int] IDENTITY(100,1) NOT NULL,
	[PatientIDEMR] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[PatientIDLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblEMRAthenaPatientID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMRChangeHealthcarePatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMRChangeHealthcarePatientID](
	[id] [int] IDENTITY(100,1) NOT NULL,
	[PatientIDEMR] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[PatientIDLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblEMRChangeHealthcarePatientID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMRCureMDPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMRCureMDPatientID](
	[id] [int] IDENTITY(100,1) NOT NULL,
	[PatientIDEMR] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[PatientIDLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblEMRCureMDPatientID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMREClinicalPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMREClinicalPatientID](
	[id] [int] IDENTITY(100,1) NOT NULL,
	[PatientIDEMR] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[PatientIDLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblEMREClinicalPatientID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMREHIPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMREHIPatientID](
	[id] [int] IDENTITY(100,1) NOT NULL,
	[PatientIDEMR] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[PatientIDLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblEMREHIPatientID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMRElationPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMRElationPatientID](
	[id] [int] IDENTITY(100,1) NOT NULL,
	[PatientIDEMR] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[PatientIDLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblEMRElationPatientID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMRInterfaces]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMRInterfaces](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Interface] [varchar](100) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Interface] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMRMDLANDPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMRMDLANDPatientID](
	[id] [int] IDENTITY(100,1) NOT NULL,
	[PatientIDEMR] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[PatientIDLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblEMRMDLANDPatientID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMRMedGenPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMRMedGenPatientID](
	[id] [int] IDENTITY(100,1) NOT NULL,
	[PatientIDEMR] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[PatientIDLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblEMRMedGenPatientID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMRNextGenPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMRNextGenPatientID](
	[id] [int] IDENTITY(100,1) NOT NULL,
	[PatientIDEMR] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[PatientIDLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblEMRNextGenPatientID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMROptiMantraPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMROptiMantraPatientID](
	[id] [int] IDENTITY(100,1) NOT NULL,
	[PatientIDEMR] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[PatientIDLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblEMROptiMantraPatientID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMROutputOrderedTestClientsList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMROutputOrderedTestClientsList](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ClientCode] [varchar](50) NULL,
 CONSTRAINT [PK_tblEMROutputOrderedTestClientsList] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMRPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMRPatientID](
	[id] [int] IDENTITY(100,1) NOT NULL,
	[PatientIDEMR] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[PatientIDLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblEMRPatientID2] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblEMRPracticeFusionPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblEMRPracticeFusionPatientID](
	[id] [int] IDENTITY(100,1) NOT NULL,
	[PatientIDEMR] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[PatientIDLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblEMRPracticeFusionPatientID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblErrorLog]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblErrorLog](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ErrorDate] [datetime] NULL,
	[WebUserID] [varchar](50) NULL,
	[ErrorSource] [varchar](200) NULL,
	[Accession] [varchar](100) NULL,
	[Note] [varchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblFeeDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblFeeDefinitions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderedTestCode] [varchar](100) NOT NULL,
	[BillTypeCode] [varchar](100) NOT NULL,
	[ClientCode] [varchar](100) NOT NULL,
	[CPTcode] [varchar](100) NOT NULL,
	[Description] [varchar](200) NULL,
	[FeeAmt] [decimal](18, 2) NULL,
	[ExpPaymentAmt] [decimal](18, 2) NULL,
	[Units] [int] NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[CPTCounter] [int] NOT NULL,
	[DiagnosisCode] [varchar](20) NULL,
	[Modifier] [varchar](20) NULL,
	[EffectiveDate] [datetime] NOT NULL,
 CONSTRAINT [PK_tblFeeDefinitions] PRIMARY KEY CLUSTERED 
(
	[OrderedTestCode] ASC,
	[BillTypeCode] ASC,
	[ClientCode] ASC,
	[CPTcode] ASC,
	[CPTCounter] ASC,
	[EffectiveDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblFeeTemp]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblFeeTemp](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderedTestCode] [varchar](100) NULL,
	[Description] [varchar](200) NULL,
	[BillTypeCode] [varchar](100) NULL,
	[CPTcode] [varchar](100) NULL,
	[FeeAmt] [decimal](18, 2) NULL,
	[ExpPaymentAmt] [decimal](18, 2) NULL,
	[Units] [int] NULL,
	[Modifier] [varchar](20) NULL,
	[EffectiveDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblHeadersForSource]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblHeadersForSource](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[SourceID] [int] NOT NULL,
	[HeadingCode] [varchar](20) NOT NULL,
	[Result] [varchar](max) NULL,
	[QSSCreatedDate] [datetime] NULL,
 CONSTRAINT [PK_tblHeadersForSource] PRIMARY KEY CLUSTERED 
(
	[SourceID] ASC,
	[HeadingCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblHeadings]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblHeadings](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[HeadingCode] [varchar](20) NOT NULL,
	[Heading] [varchar](100) NULL,
	[ReportOrder] [int] NULL,
 CONSTRAINT [PK_tblHeadings] PRIMARY KEY CLUSTERED 
(
	[HeadingCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblInstrumentAccessionQuery]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblInstrumentAccessionQuery](
	[Accession] [varchar](100) NOT NULL,
 CONSTRAINT [PK_tblInstrumentAccessionQuery] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblInstrumentAccessionQueryDXI]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblInstrumentAccessionQueryDXI](
	[Accession] [varchar](100) NOT NULL,
 CONSTRAINT [PK_tblInstrumentAccessionQueryDXI] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblInstrumentCentaurOrders]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblInstrumentCentaurOrders](
	[Accession] [varchar](100) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblInstrumentDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblInstrumentDefinitions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[InstrumentCode] [varchar](200) NOT NULL,
	[Description] [varchar](500) NOT NULL,
	[SerialNumber] [varchar](200) NULL,
	[InstallDate] [datetime] NULL,
	[PortNumber] [varchar](100) NULL,
	[LogonName] [varchar](100) NULL,
	[AutoFinalizeRes] [bit] NULL,
	[ReviewSentRes] [bit] NULL,
	[UpdateDailyRes] [bit] NULL,
 CONSTRAINT [PK_tblInstrumentDefinitions] PRIMARY KEY CLUSTERED 
(
	[InstrumentCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblinstrumentDXHOrderPanel]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblinstrumentDXHOrderPanel](
	[Test] [varchar](50) NOT NULL,
	[PanelName] [varchar](20) NULL,
 CONSTRAINT [PK_tblinstrumentDXHOrderPanel] PRIMARY KEY CLUSTERED 
(
	[Test] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblInstrumentDXITestOrderSent]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblInstrumentDXITestOrderSent](
	[Accession] [varchar](100) NOT NULL,
	[ResultTest] [varchar](100) NOT NULL,
 CONSTRAINT [PK_tblInstrumentDXITestOrderSent] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC,
	[ResultTest] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblInstrumentElements]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblInstrumentElements](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[InstrumentCode] [varchar](200) NOT NULL,
	[ResultTest] [varchar](100) NOT NULL,
	[InstrumentCD] [varchar](200) NULL,
	[Type] [varchar](100) NULL,
 CONSTRAINT [PK_tblInstrumentElements] PRIMARY KEY CLUSTERED 
(
	[InstrumentCode] ASC,
	[ResultTest] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblInstrumentTechAssignments]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblInstrumentTechAssignments](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[InstrumentCode] [varchar](200) NOT NULL,
	[Name] [varchar](200) NOT NULL,
	[AssignmentDate] [datetime] NOT NULL,
	[LogonName] [varchar](100) NULL,
 CONSTRAINT [PK_tblInstrumentTechAssignments] PRIMARY KEY CLUSTERED 
(
	[InstrumentCode] ASC,
	[Name] ASC,
	[AssignmentDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblinstrumentUnicelOrderPanel]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblinstrumentUnicelOrderPanel](
	[Test] [varchar](50) NOT NULL,
	[PanelName] [varchar](20) NULL,
 CONSTRAINT [PK_tblinstrumentUnicelOrderPanel] PRIMARY KEY CLUSTERED 
(
	[Test] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblInsurancePayor]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblInsurancePayor](
	[InsuranceCode] [varchar](50) NULL,
	[Name] [varchar](max) NULL,
	[ClaimType] [varchar](50) NULL,
	[PayorNo] [varchar](50) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tbliPowerDoc]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tbliPowerDoc](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[ClientCode] [varchar](20) NULL,
 CONSTRAINT [pk_tbliPowerDoc] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblLabAudit]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblLabAudit](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Date] [datetime] NOT NULL,
	[WebUserID] [varchar](50) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[Note] [varchar](max) NOT NULL,
	[NoteType] [varchar](10) NULL,
 CONSTRAINT [PK_tblLabAudit] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblLabCommentDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblLabCommentDefinitions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](100) NOT NULL,
	[Comment] [varchar](max) NULL,
 CONSTRAINT [PK_tblLabCommentDefinitions] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblLabDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblLabDefinitions](
	[id] [int] NOT NULL,
	[p_LabName] [varchar](100) NULL,
	[p_LabAdmin] [varchar](100) NULL,
	[p_LabAddress1] [varchar](100) NULL,
	[p_LabAddress2] [varchar](100) NULL,
	[p_LabCity] [varchar](100) NULL,
	[p_LabState] [varchar](20) NULL,
	[p_LabZip] [varchar](50) NULL,
	[p_LabPhone] [varchar](50) NULL,
	[p_LabMedicare] [varchar](50) NULL,
	[p_LabMedicaid] [varchar](50) NULL,
	[p_TaxpayerID] [varchar](50) NULL,
	[p_LabNPI] [varchar](50) NULL,
	[p_LabNameonForm] [varchar](100) NULL,
	[a_LabName] [varchar](100) NULL,
	[a_LabAdmin] [varchar](100) NULL,
	[a_LabAddress1] [varchar](100) NULL,
	[a_LabAddress2] [varchar](100) NULL,
	[a_LabCity] [varchar](100) NULL,
	[a_LabState] [varchar](20) NULL,
	[a_LabZip] [varchar](50) NULL,
	[a_LabPhone] [varchar](50) NULL,
	[a_LabMedicare] [varchar](50) NULL,
	[a_LabMedicaid] [varchar](50) NULL,
	[a_TaxpayerID] [varchar](50) NULL,
	[a_LabNPI] [varchar](50) NULL,
	[a_LabNameonForm] [varchar](100) NULL,
 CONSTRAINT [PK_tblLabDefinitions] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblLabGeneratedQueries]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblLabGeneratedQueries](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[QueryName] [varchar](200) NOT NULL,
	[SQLstring] [varchar](max) NOT NULL,
	[DateUpdated] [datetime] NULL,
	[UpdatedBy] [varchar](50) NULL,
 CONSTRAINT [pk_tblLabGeneratedQueries] PRIMARY KEY CLUSTERED 
(
	[id] ASC,
	[QueryName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblLabs]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblLabs](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[LabCode] [varchar](20) NOT NULL,
	[LabName] [varchar](100) NOT NULL,
	[LabAddress] [varchar](100) NULL,
	[LabCity] [varchar](100) NULL,
	[LabState] [varchar](20) NULL,
	[LabZip] [varchar](50) NULL,
	[LabPhone] [varchar](50) NULL,
	[LabEmail] [varchar](50) NULL,
	[LabFax] [varchar](50) NULL,
	[LabDirector] [varchar](150) NULL,
	[CLIAnumber] [varchar](50) NULL,
	[AccessionCounter] [int] NULL,
	[WebSiteMsg] [varchar](350) NULL,
	[NPINumber] [varchar](100) NULL,
	[LabNPInumber] [varchar](50) NULL,
	[LabTaxID] [varchar](50) NULL,
	[AssociateLabDirector] [varchar](150) NULL,
	[VersionDate] [datetime] NULL,
	[VersionNumber] [int] NOT NULL,
	[InHouse] [bit] NULL,
	[IDoc] [bit] NULL,
	[AutoFax] [bit] NULL,
	[ElectronicInterface] [bit] NULL,
	[LabHealth] [bit] NULL,
	[PathologyDirector] [varchar](150) NULL,
	[CytologyDirector] [varchar](150) NULL,
 CONSTRAINT [PK_tblLabs] PRIMARY KEY CLUSTERED 
(
	[LabCode] ASC,
	[VersionNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblMailoutClientSetup]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMailoutClientSetup](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[MailoutLabCode] [varchar](20) NOT NULL,
	[MailoutClientCode] [varchar](100) NOT NULL,
	[MailoutClientName] [varchar](100) NULL,
	[MailoutRefPhyCode] [varchar](100) NULL,
	[MailoutOrderSetCode] [varchar](100) NULL,
	[OrderSetCode] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblMailoutElements]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMailoutElements](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[MailoutLabCode] [varchar](20) NOT NULL,
	[ResultTest] [varchar](100) NOT NULL,
	[MailoutCD] [varchar](100) NULL,
	[Type] [varchar](100) NULL,
 CONSTRAINT [PK_tblMailoutElements] PRIMARY KEY CLUSTERED 
(
	[MailoutLabCode] ASC,
	[ResultTest] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblMailoutLabs]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMailoutLabs](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[LabCode] [varchar](100) NOT NULL,
	[Name] [varchar](200) NULL,
	[Address] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[City] [varchar](100) NULL,
	[State] [varchar](100) NULL,
	[Zip] [varchar](20) NULL,
	[LabPhone] [varchar](100) NULL,
	[LabContact] [varchar](100) NULL,
	[AccountPhone] [varchar](100) NULL,
	[AccountContact] [varchar](100) NULL,
	[RepPhone] [varchar](100) NULL,
	[RepContact] [varchar](100) NULL,
	[PickupTimes] [varchar](100) NULL,
	[ProviderID] [varchar](100) NULL,
	[ReportCode] [varchar](100) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[DisplayText] [varchar](100) NULL,
	[LabNPI] [varchar](20) NULL,
	[AccountNumber] [varchar](100) NULL,
 CONSTRAINT [pk_tblMailoutLabs] PRIMARY KEY CLUSTERED 
(
	[LabCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblMailoutTestCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMailoutTestCodes](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[MailoutLabCode] [varchar](20) NOT NULL,
	[TestCode] [varchar](100) NOT NULL,
	[MailoutTestCode] [varchar](100) NULL,
 CONSTRAINT [PK_tblMailoutTestCodes] PRIMARY KEY CLUSTERED 
(
	[MailoutLabCode] ASC,
	[TestCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblManualHoldReasons]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblManualHoldReasons](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Reason] [varchar](500) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblMedications]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMedications](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[MedicationCode] [varchar](50) NOT NULL,
	[Description] [varchar](200) NOT NULL,
	[GenericName] [varchar](500) NULL,
	[ReflexCode] [varchar](200) NULL,
	[ReflexDesc] [varchar](200) NULL,
	[Category] [varchar](10) NULL,
 CONSTRAINT [PK_tblMedicationsBIG_1] PRIMARY KEY CLUSTERED 
(
	[MedicationCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblMedicationSave]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMedicationSave](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[MedicationCode] [varchar](50) NOT NULL,
	[Description] [varchar](200) NOT NULL,
	[GenericName] [varchar](500) NULL,
	[ReflexCode] [varchar](200) NULL,
	[ReflexDesc] [varchar](200) NULL,
 CONSTRAINT [PK_tblMedications_1] PRIMARY KEY CLUSTERED 
(
	[MedicationCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblMicroScope]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMicroScope](
	[MicroScopeID] [int] IDENTITY(1,1) NOT NULL,
	[MicroScopeName] [varchar](100) NULL,
	[MicroScopePath] [varchar](100) NULL,
 CONSTRAINT [PK_tblMicroScope] PRIMARY KEY CLUSTERED 
(
	[MicroScopeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblMicroTestAntibiotics]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMicroTestAntibiotics](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[MicroTestOrganismID] [varchar](100) NOT NULL,
	[AntibioticName] [varchar](200) NULL,
	[Sensitivity] [varchar](200) NULL,
	[MICValue] [varchar](200) NULL,
	[Comment] [varchar](max) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
 CONSTRAINT [pk_tblMicroTestAntibiotics] PRIMARY KEY CLUSTERED 
(
	[id] ASC,
	[Accession] ASC,
	[MicroTestOrganismID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblMicroTestOrganisms]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMicroTestOrganisms](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[MicroTestID] [int] NOT NULL,
	[MicroTestOrganismID] [varchar](100) NOT NULL,
	[OrganismName] [varchar](200) NOT NULL,
	[ColonyCount] [varchar](200) NOT NULL,
	[GramStain] [varchar](200) NOT NULL,
	[Comment] [varchar](max) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
 CONSTRAINT [pk_tblMicroTestOrganisms] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC,
	[MicroTestID] ASC,
	[MicroTestOrganismID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblMicroTests]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMicroTests](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[PatientID] [varchar](100) NOT NULL,
	[ClientCode] [varchar](50) NOT NULL,
	[PhysicianCode] [varchar](100) NOT NULL,
	[CollectionDate] [datetime] NOT NULL,
	[TestCode] [varchar](100) NULL,
	[TestDescription] [varchar](500) NULL,
	[SpecimenSource] [varchar](500) NULL,
	[Comment] [varchar](max) NULL,
	[Status] [varchar](100) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
 CONSTRAINT [pk_tblMicroTests] PRIMARY KEY CLUSTERED 
(
	[id] ASC,
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblMissingInformationtype]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMissingInformationtype](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Reason] [varchar](max) NOT NULL,
	[ReportType] [varchar](50) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblMissingTransaltionCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMissingTransaltionCode](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[TestCode] [varchar](100) NOT NULL,
	[TestCodeName] [varchar](100) NOT NULL,
	[MailoutLabCode] [varchar](20) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblOrganisms]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblOrganisms](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Description] [varchar](100) NOT NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
 CONSTRAINT [pk_Organisms] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblPathologists]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPathologists](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[PhysicianCode] [varchar](20) NOT NULL,
	[FirstName] [varchar](100) NULL,
	[MiddleName] [varchar](100) NULL,
	[LastName] [varchar](100) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[Physicianstatus] [bit] NULL,
 CONSTRAINT [PK_tblPathologists] PRIMARY KEY CLUSTERED 
(
	[PhysicianCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblPathologyBilling]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPathologyBilling](
	[Accession] [varchar](50) NULL,
	[PathologyCase] [varchar](50) NULL,
	[PerformedTest] [varchar](50) NULL,
	[ResultTest] [varchar](50) NULL,
	[Units] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblPathologyCases]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPathologyCases](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[CaseNumber] [varchar](100) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[TestCode] [varchar](100) NOT NULL,
	[Pathologist] [varchar](100) NULL,
	[Status] [varchar](100) NOT NULL,
	[Signed] [bit] NOT NULL,
	[isAbnormal] [bit] NOT NULL,
	[StainsDataXML] [xml] NULL,
	[DiagnosisDataXML] [xml] NULL,
	[CPTDataXML] [xml] NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NOT NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NOT NULL,
	[Notes] [varchar](200) NULL,
	[Jars] [varchar](10) NULL,
	[Cassettes] [varchar](10) NULL,
	[Sources] [varchar](10) NULL,
	[Abnormal] [varchar](20) NULL,
	[Slides] [varchar](10) NULL,
	[ClientCaseNumber] [varchar](100) NULL,
 CONSTRAINT [pk_tblPathologyCases] PRIMARY KEY CLUSTERED 
(
	[CaseNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblPathologyCaseUpdates]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPathologyCaseUpdates](
	[CaseNumber] [varchar](100) NULL,
	[Accession] [varchar](100) NULL,
	[TestCode] [varchar](100) NULL,
	[UpdateType] [varchar](20) NULL,
	[Reason] [varchar](200) NULL,
	[Pathologist] [varchar](100) NULL,
	[SignedDateTime] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblPathologyResultTemplates]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPathologyResultTemplates](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Results] [varchar](max) NULL,
	[Code] [varchar](10) NULL,
	[Heading] [varchar](20) NULL,
	[Abnormal] [varchar](50) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblPathologySources]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPathologySources](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[SourceID] [int] NOT NULL,
	[CaseNumber] [varchar](100) NOT NULL,
	[Source] [varchar](200) NOT NULL,
	[QSSCreatedDate] [datetime] NOT NULL,
	[Cassettes] [varchar](100) NULL,
 CONSTRAINT [PK_tblPathologySources_1] PRIMARY KEY CLUSTERED 
(
	[CaseNumber] ASC,
	[Source] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblPathologyStains]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPathologyStains](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[StainID] [int] NOT NULL,
	[CaseNumber] [varchar](100) NOT NULL,
	[Source] [varchar](200) NOT NULL,
	[StainRequest] [varchar](100) NOT NULL,
	[QSSCreatedDate] [datetime] NOT NULL,
 CONSTRAINT [PK_tblPathologyStains_1] PRIMARY KEY CLUSTERED 
(
	[CaseNumber] ASC,
	[Source] ASC,
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblPendingOrders]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPendingOrders](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accession] [varchar](50) NOT NULL,
	[firstname] [varchar](50) NULL,
	[lastname] [varchar](50) NULL,
	[entrydate] [date] NULL,
	[client] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblPerformedTestsDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPerformedTestsDefinitions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[PerformedTest] [varchar](20) NOT NULL,
	[InternalDescription] [varchar](100) NULL,
	[ExternalDescription] [varchar](100) NULL,
	[ResultTestCode] [varchar](max) NULL,
	[PerformedBy] [varchar](100) NULL,
	[MailoutFlag] [varchar](100) NULL,
	[MailoutLab] [varchar](50) NULL,
	[RequiredSpeciments] [varchar](50) NULL,
	[RequiredVolume] [varchar](50) NULL,
	[Preservative] [varchar](100) NULL,
	[ShippingTemp] [varchar](100) NULL,
	[Instructions] [varchar](200) NULL,
	[Turnaround] [varchar](100) NULL,
	[AdditionalInfoScreen] [bit] NULL,
	[AdditionalInfoScreenTemplate] [varchar](200) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[MicrobioFlag] [bit] NULL,
	[InstrumentCode] [varchar](50) NULL,
	[PathologyFlag] [bit] NULL,
	[CytologyFlag] [bit] NULL,
	[ProstateFlag] [bit] NULL,
	[ToxicologyFlag] [bit] NULL,
	[Category] [varchar](50) NULL,
	[CategoryReportOrder] [decimal](6, 2) NULL,
	[PodiatryFlag] [bit] NULL,
 CONSTRAINT [PK_tblPerformedTestsDefinitions] PRIMARY KEY CLUSTERED 
(
	[PerformedTest] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblProcessHFusionBilling]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblProcessHFusionBilling](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](50) NOT NULL,
	[ProcessedDate] [datetime] NULL,
	[HasProcessed] [bit] NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
 CONSTRAINT [PK_tblProcessHFusionBilling] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblProgress]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblProgress](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ProgressCode] [varchar](25) NOT NULL,
	[Progress] [varchar](50) NOT NULL,
 CONSTRAINT [PK_tblProgress_1] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblQCComments]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblQCComments](
	[OrderID] [varchar](50) NOT NULL,
	[GroupNumber] [varchar](50) NOT NULL,
	[Comment] [varchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblQCControls]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblQCControls](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ControlID] [varchar](20) NOT NULL,
	[Lot] [varchar](100) NOT NULL,
	[InstrumentCode] [varchar](100) NULL,
	[Description] [varchar](100) NULL,
	[TestCodes] [varchar](max) NULL,
	[Average] [varchar](max) NULL,
	[Deviation] [varchar](max) NULL,
	[ExpirationDate] [datetime] NULL,
	[Status] [varchar](50) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[InstrumentCodes] [varchar](max) NULL,
 CONSTRAINT [PK_tblQCControls] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uc_tblQCControls] UNIQUE NONCLUSTERED 
(
	[ControlID] ASC,
	[Lot] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblQCOrderControls]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblQCOrderControls](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderID] [varchar](20) NOT NULL,
	[ControlID] [varchar](20) NOT NULL,
	[Lot] [varchar](100) NOT NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
 CONSTRAINT [PK_tblQCOrderControls] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uc_tblQCOrderControls] UNIQUE NONCLUSTERED 
(
	[OrderID] ASC,
	[ControlID] ASC,
	[Lot] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblQCOrders]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblQCOrders](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderID] [varchar](20) NOT NULL,
	[OrderDate] [datetime] NULL,
	[Status] [varchar](20) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
 CONSTRAINT [PK_tblQCOrder] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uc_tblQCOrders] UNIQUE NONCLUSTERED 
(
	[OrderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblQCResults]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblQCResults](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderID] [varchar](20) NOT NULL,
	[ControlID] [varchar](20) NOT NULL,
	[Lot] [varchar](100) NOT NULL,
	[TestCode] [varchar](100) NOT NULL,
	[ResultDate] [datetime] NULL,
	[Result] [varchar](100) NULL,
	[NormalRange] [varchar](200) NULL,
	[Average] [decimal](28, 4) NULL,
	[STDDeviation] [decimal](28, 4) NULL,
	[Status] [varchar](20) NULL,
	[Comment] [varchar](200) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
 CONSTRAINT [PK_tblQCResults] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uc_tblQCResults] UNIQUE NONCLUSTERED 
(
	[OrderID] ASC,
	[ControlID] ASC,
	[Lot] ASC,
	[TestCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblQCResultValues]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblQCResultValues](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[QCResultsID] [varchar](50) NOT NULL,
	[TestCode] [varchar](100) NOT NULL,
	[Result] [decimal](28, 4) NOT NULL,
	[ResultDate] [datetime] NULL,
	[Status] [varchar](20) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[QCGroupNumber] [varchar](50) NULL,
	[ResultComment] [varchar](max) NULL,
	[Result_AlphaNum] [varchar](max) NULL,
	[ResultAlphaFlag] [bit] NOT NULL,
 CONSTRAINT [PK_tblQCResultValues] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblRack]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblRack](
	[RackID] [varchar](50) NOT NULL,
	[CreatedBy] [varchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[SpecimenCode] [varchar](20) NULL,
	[TraySize] [varchar](20) NULL,
PRIMARY KEY CLUSTERED 
(
	[RackID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblRackValues]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblRackValues](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[RackID] [varchar](50) NOT NULL,
	[RowID] [tinyint] NOT NULL,
	[ColumnID] [tinyint] NOT NULL,
	[ColumnValue] [varchar](100) NULL,
	[UpdateVersion] [smallint] NULL,
	[UpdatedBy] [varchar](50) NULL,
	[UpdatedOn] [datetime] NULL,
 CONSTRAINT [pk_tblRackValues] PRIMARY KEY CLUSTERED 
(
	[RackID] ASC,
	[RowID] ASC,
	[ColumnID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblRackValuesAudit]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblRackValuesAudit](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[RackID] [varchar](50) NULL,
	[RowID] [tinyint] NULL,
	[ColumnID] [tinyint] NULL,
	[ColumnValue] [varchar](100) NULL,
	[UpdateVersion] [smallint] NULL,
	[UpdatedBy] [varchar](50) NULL,
	[UpdatedOn] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblReceivingPool]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblReceivingPool](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[PreAccession] [varchar](100) NOT NULL,
	[OrderDate] [datetime] NOT NULL,
	[CollectionDate] [datetime] NULL,
	[PatientID] [varchar](100) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[MiddleName] [varchar](50) NULL,
	[Address] [varchar](100) NULL,
	[City] [varchar](100) NULL,
	[State] [varchar](2) NULL,
	[Zip] [varchar](20) NULL,
	[Phone] [varchar](20) NULL,
	[Sex] [varchar](20) NULL,
	[DOB] [datetime] NULL,
	[ClinicalInfo] [varchar](200) NULL,
	[Fasting] [varchar](5) NULL,
	[SSN] [varchar](20) NULL,
	[ClientCode] [varchar](50) NOT NULL,
	[OrderedTests] [varchar](max) NULL,
	[DiagnosisCodes] [varchar](max) NULL,
	[MedicationCodes] [varchar](max) NULL,
	[MedicationDose] [varchar](max) NULL,
	[MedicationLastTaken] [varchar](max) NULL,
	[PhysicianCode] [varchar](100) NULL,
	[OrderType] [varchar](10) NULL,
	[BillTo] [varchar](20) NULL,
	[SpecimenReceived] [varchar](20) NULL,
	[WebUserID] [varchar](20) NULL,
	[PrimaryInuranceCode] [varchar](20) NULL,
	[PrimaryInuranceID] [varchar](20) NULL,
	[PrimaryInuranceFirstName] [varchar](50) NULL,
	[PrimaryInuranceLastName] [varchar](50) NULL,
	[PrimaryInuranceMiddleName] [varchar](50) NULL,
	[PrimaryInuranceAddress] [varchar](100) NULL,
	[PrimaryInuranceCity] [varchar](100) NULL,
	[PrimaryInuranceState] [varchar](2) NULL,
	[PrimaryInuranceZip] [varchar](20) NULL,
	[PrimaryInurancePhone] [varchar](20) NULL,
	[PrimaryInuranceSex] [varchar](20) NULL,
	[PrimaryInuranceDOB] [datetime] NULL,
	[PrimaryInuranceGroupNumber] [varchar](50) NULL,
	[PrimaryInuranceRelation] [varchar](20) NULL,
	[SecondaryInuranceCode] [varchar](20) NULL,
	[SecondaryInuranceID] [varchar](20) NULL,
	[SecondaryInuranceFirstName] [varchar](50) NULL,
	[SecondaryInuranceLastName] [varchar](50) NULL,
	[SecondaryInuranceMiddleName] [varchar](50) NULL,
	[SecondaryInuranceAddress] [varchar](100) NULL,
	[SecondaryInuranceCity] [varchar](100) NULL,
	[SecondaryInuranceState] [varchar](2) NULL,
	[SecondaryInuranceZip] [varchar](20) NULL,
	[SecondaryInurancePhone] [varchar](20) NULL,
	[SecondaryInuranceSex] [varchar](20) NULL,
	[SecondaryInuranceDOB] [datetime] NULL,
	[SecondaryInuranceGroupNumber] [varchar](50) NULL,
	[SecondaryInuranceRelation] [varchar](20) NULL,
	[MiscTests] [varchar](max) NULL,
	[MiscCodes] [varchar](max) NULL,
	[POCTests] [varchar](max) NULL,
	[POCResults] [varchar](max) NULL,
	[Interface] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[ConfirmAllTests] [bit] NULL,
	[ConfirmAllMeds] [bit] NULL,
	[ConfirmConsistancy] [bit] NULL,
	[Comments] [varchar](max) NULL,
 CONSTRAINT [pk_tblReceivingPool] PRIMARY KEY CLUSTERED 
(
	[PreAccession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblReceivingPoolArchive]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblReceivingPoolArchive](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[PreAccession] [varchar](100) NOT NULL,
	[OrderDate] [datetime] NOT NULL,
	[CollectionDate] [datetime] NULL,
	[PatientID] [varchar](100) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[MiddleName] [varchar](50) NULL,
	[Address] [varchar](100) NULL,
	[City] [varchar](100) NULL,
	[State] [varchar](2) NULL,
	[Zip] [varchar](20) NULL,
	[Phone] [varchar](20) NULL,
	[Sex] [varchar](20) NULL,
	[DOB] [datetime] NULL,
	[ClinicalInfo] [varchar](200) NULL,
	[Fasting] [varchar](5) NULL,
	[SSN] [varchar](20) NULL,
	[ClientCode] [varchar](50) NOT NULL,
	[OrderedTests] [varchar](max) NULL,
	[DiagnosisCodes] [varchar](max) NULL,
	[MedicationCodes] [varchar](max) NULL,
	[MedicationDose] [varchar](max) NULL,
	[MedicationLastTaken] [varchar](max) NULL,
	[PhysicianCode] [varchar](100) NULL,
	[OrderType] [varchar](10) NULL,
	[BillTo] [varchar](20) NULL,
	[SpecimenReceived] [varchar](20) NULL,
	[WebUserID] [varchar](20) NULL,
	[PrimaryInuranceCode] [varchar](20) NULL,
	[PrimaryInuranceID] [varchar](20) NULL,
	[PrimaryInuranceFirstName] [varchar](50) NULL,
	[PrimaryInuranceLastName] [varchar](50) NULL,
	[PrimaryInuranceMiddleName] [varchar](50) NULL,
	[PrimaryInuranceAddress] [varchar](100) NULL,
	[PrimaryInuranceCity] [varchar](100) NULL,
	[PrimaryInuranceState] [varchar](2) NULL,
	[PrimaryInuranceZip] [varchar](20) NULL,
	[PrimaryInurancePhone] [varchar](20) NULL,
	[PrimaryInuranceSex] [varchar](20) NULL,
	[PrimaryInuranceDOB] [datetime] NULL,
	[PrimaryInuranceGroupNumber] [varchar](50) NULL,
	[PrimaryInuranceRelation] [varchar](20) NULL,
	[SecondaryInuranceCode] [varchar](20) NULL,
	[SecondaryInuranceID] [varchar](20) NULL,
	[SecondaryInuranceFirstName] [varchar](50) NULL,
	[SecondaryInuranceLastName] [varchar](50) NULL,
	[SecondaryInuranceMiddleName] [varchar](50) NULL,
	[SecondaryInuranceAddress] [varchar](100) NULL,
	[SecondaryInuranceCity] [varchar](100) NULL,
	[SecondaryInuranceState] [varchar](2) NULL,
	[SecondaryInuranceZip] [varchar](20) NULL,
	[SecondaryInurancePhone] [varchar](20) NULL,
	[SecondaryInuranceSex] [varchar](20) NULL,
	[SecondaryInuranceDOB] [datetime] NULL,
	[SecondaryInuranceGroupNumber] [varchar](50) NULL,
	[SecondaryInuranceRelation] [varchar](20) NULL,
	[MiscTests] [varchar](max) NULL,
	[MiscCodes] [varchar](max) NULL,
	[POCTests] [varchar](max) NULL,
	[POCResults] [varchar](max) NULL,
	[Interface] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[ConfirmAllTests] [bit] NULL,
	[ConfirmAllMeds] [bit] NULL,
	[ConfirmConsistancy] [bit] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblReleaseCommentDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblReleaseCommentDefinitions](
	[Code] [varchar](100) NOT NULL,
	[Comment] [varchar](500) NULL,
PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblReportBySpecimen]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblReportBySpecimen](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[ClientCode] [varchar](20) NULL,
	[SpecimenCode] [varchar](25) NOT NULL,
	[Reporttype] [varchar](100) NOT NULL,
 CONSTRAINT [PK_tblReportBySpecimen] PRIMARY KEY CLUSTERED 
(
	[SpecimenCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblReportingOptions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblReportingOptions](
	[ClientCode] [varchar](20) NOT NULL,
	[InHouse] [int] NULL,
	[Remote] [int] NULL,
	[IDoc] [int] NULL,
	[AutoFax] [int] NULL,
	[ElectronicInterface] [int] NULL,
	[LabHealth] [int] NULL,
	[EmailInterface] [varchar](20) NULL,
 CONSTRAINT [PK_tblReportingOptions] PRIMARY KEY CLUSTERED 
(
	[ClientCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblReservedAccessionsPool]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblReservedAccessionsPool](
	[AccessionID] [varchar](100) NULL,
	[Printed] [bit] NULL,
	[PrintedDate] [datetime] NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblResultCodeVersions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblResultCodeVersions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[TestCode] [varchar](100) NOT NULL,
	[CurrentVersion] [int] NOT NULL,
	[QSSLastUpdateID] [varchar](20) NOT NULL,
	[QSSUpdateDate] [datetime] NOT NULL,
 CONSTRAINT [pk_tblResultCodeVersions] PRIMARY KEY CLUSTERED 
(
	[TestCode] ASC,
	[CurrentVersion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblResultedTestDecodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblResultedTestDecodes](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[TestCode] [varchar](20) NOT NULL,
	[Code] [varchar](20) NOT NULL,
	[Decode] [varchar](100) NULL,
	[Flag] [varchar](20) NULL,
	[ReflexTestCode] [varchar](100) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](100) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[AutoReleaseFlag] [bit] NULL,
 CONSTRAINT [pk_tblResultedTestDecodes] PRIMARY KEY CLUSTERED 
(
	[TestCode] ASC,
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblResultedTestsParams]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblResultedTestsParams](
	[id] [int] IDENTITY(400,1) NOT NULL,
	[ResultedTest] [varchar](20) NOT NULL,
	[Sex] [varchar](10) NOT NULL,
	[MinAge] [decimal](11, 5) NOT NULL,
	[MaxAge] [decimal](11, 5) NULL,
	[LowLimit] [varchar](100) NULL,
	[HighLimit] [varchar](100) NULL,
	[NormalLowLimit] [varchar](100) NULL,
	[LowFlag] [varchar](10) NULL,
	[NormalHighLimit] [varchar](100) NULL,
	[HighFlag] [varchar](10) NULL,
	[CriticalLowLimit] [varchar](100) NULL,
	[CriticalLowFlag] [varchar](10) NULL,
	[CriticalHighLimit] [varchar](100) NULL,
	[CriticalHighFlag] [varchar](10) NULL,
	[AutoReleaseLowLimit] [varchar](100) NULL,
	[ReviewLowFlag] [varchar](10) NULL,
	[AutoReleaseHighLimit] [varchar](100) NULL,
	[ReviewHighFlag] [varchar](10) NULL,
	[DisplayResultAs] [varchar](100) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[DynamicLow] [varchar](100) NULL,
	[DynamicLowReportAs] [varchar](100) NULL,
	[DynamicHigh] [varchar](100) NULL,
	[DynamicHighReportAs] [varchar](100) NULL,
	[Version] [int] NOT NULL,
	[LLAge] [int] NULL,
	[LLAgeUnit] [varchar](10) NULL,
	[HLAge] [int] NULL,
	[HLAgeUnit] [varchar](10) NULL,
 CONSTRAINT [PK_tblResultedTestsParams] PRIMARY KEY CLUSTERED 
(
	[id] ASC,
	[ResultedTest] ASC,
	[Version] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblResultTestforDOH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblResultTestforDOH](
	[ResultTest] [varchar](50) NOT NULL,
	[SpecimenType] [varchar](50) NULL,
 CONSTRAINT [PK_tblResultTestforDOH] PRIMARY KEY CLUSTERED 
(
	[ResultTest] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblResulttestTranslationMissingInformation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblResulttestTranslationMissingInformation](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](50) NOT NULL,
	[MailoutTestCode] [varchar](50) NOT NULL,
	[Reason] [varchar](max) NOT NULL,
	[entryDate] [date] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblReviewAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblReviewAccession](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[QSSLastUpdatedByID] [varchar](20) NULL,
	[QSSLastUpdatedDate] [datetime] NULL,
	[ReleaseFail] [bit] NULL,
	[ReleaseFailCounter] [tinyint] NULL,
 CONSTRAINT [pk_tblReviewAccession] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblReviewAccession170601]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblReviewAccession170601](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[QSSLastUpdatedByID] [varchar](20) NULL,
	[QSSLastUpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblRptRoutesDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblRptRoutesDefinitions](
	[RouteCode] [varchar](200) NOT NULL,
	[RouteName] [varchar](200) NULL,
	[PrinterName] [varchar](200) NULL,
	[InhouseRoute] [int] NULL,
	[ClientCodes] [varchar](max) NULL,
	[Contact] [varchar](200) NULL,
	[Address] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[City] [varchar](200) NULL,
	[State] [varchar](200) NULL,
	[Zip] [varchar](200) NULL,
	[Telephone] [varchar](200) NULL,
	[Ext] [varchar](200) NULL,
	[Notes] [varchar](200) NULL,
	[ActiveRoute] [int] NULL,
	[DialupNumber] [varchar](200) NULL,
	[Format] [varchar](200) NULL,
	[PaperType] [varchar](200) NULL,
	[PowerDoc] [int] NULL,
	[PrinterType] [varchar](200) NULL,
	[MailOutOverride] [int] NULL,
	[PrinterTimeOptions] [varchar](200) NULL,
	[Reprint] [int] NULL,
	[PrintTimes] [varchar](max) NULL,
	[PrintDays] [varchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[RouteCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblSalesman]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblSalesman](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[SalesmanCode] [varchar](20) NOT NULL,
	[SalesmanName] [varchar](100) NULL,
	[Territory] [varchar](100) NULL,
	[SalesGroup] [varchar](100) NULL,
	[Specialty] [varchar](100) NULL,
	[Service] [varchar](100) NULL,
	[isManager] [bit] NULL,
 CONSTRAINT [PK_tblSalesman] PRIMARY KEY CLUSTERED 
(
	[SalesmanCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblSalesPortalAccessions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblSalesPortalAccessions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
 CONSTRAINT [pk_tblSalesPortalAccessions] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblScannedReportsAudit]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblScannedReportsAudit](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](50) NOT NULL,
	[FileName] [varchar](200) NOT NULL,
	[Action] [varchar](10) NOT NULL,
	[QSSUserID] [varchar](20) NOT NULL,
	[LoginTimestamp] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblSpecimenPracticeFusionMapping]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblSpecimenPracticeFusionMapping](
	[SpecimenPF] [varchar](50) NOT NULL,
	[SpecimenLIS] [varchar](50) NULL,
 CONSTRAINT [PK_tblSpecimenPracticeFusionMapping] PRIMARY KEY CLUSTERED 
(
	[SpecimenPF] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblSpecimens]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblSpecimens](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[SpecimenCode] [varchar](25) NOT NULL,
	[Specimen] [varchar](50) NOT NULL,
 CONSTRAINT [PK_tblSpecimens_1] PRIMARY KEY CLUSTERED 
(
	[SpecimenCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblStainMaster]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblStainMaster](
	[StainID] [varchar](20) NULL,
	[StainDescription] [varchar](100) NULL,
	[isActive] [bit] NULL,
	[XCounter] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblStains]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblStains](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[StainID] [int] NOT NULL,
	[CaseNumber] [varchar](100) NOT NULL,
	[StainRequest] [varchar](500) NOT NULL,
	[RequestDate] [datetime] NULL,
	[RequestBy] [varchar](100) NULL,
	[FilledDate] [datetime] NULL,
	[FilledBy] [varchar](100) NULL,
 CONSTRAINT [PK_tblStains] PRIMARY KEY CLUSTERED 
(
	[StainID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblStates]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblStates](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[StateCode] [varchar](2) NOT NULL,
	[StateName] [varchar](100) NULL,
 CONSTRAINT [PK_tblStates] PRIMARY KEY CLUSTERED 
(
	[StateCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblStatus]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblStatus](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Statusname] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblSuspensionReason]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblSuspensionReason](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[BTCode] [varchar](50) NOT NULL,
	[PNM] [bit] NOT NULL,
	[PNMS] [varchar](10) NULL,
	[SM] [bit] NULL,
	[SMS] [varchar](10) NULL,
	[BTAM] [bit] NULL,
	[BTAMS] [varchar](10) NULL,
	[CLM] [bit] NULL,
	[CLMS] [varchar](10) NULL,
	[SSM] [bit] NULL,
	[SSMS] [varchar](10) NULL,
	[DCM] [bit] NULL,
	[DCMS] [varchar](10) NULL,
	[ICM] [bit] NULL,
	[ICMS] [varchar](10) NULL,
	[DOBM] [bit] NULL,
	[DOBMS] [varchar](10) NULL,
	[TFM] [bit] NULL,
	[TFMS] [varchar](10) NULL,
	[PCM] [bit] NULL,
	[PCMS] [varchar](10) NULL,
	[CCM] [bit] NULL,
	[CCMS] [varchar](10) NULL,
	[IPM] [bit] NULL,
	[IPMS] [varchar](10) NULL,
	[IMC] [varchar](50) NULL,
 CONSTRAINT [PK_tblSuspensionReason] PRIMARY KEY CLUSTERED 
(
	[BTCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblTempAccessions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblTempAccessions](
	[Accession] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblTempFeeDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblTempFeeDefinitions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderedTestCode] [varchar](100) NOT NULL,
	[BillTypeCode] [varchar](100) NOT NULL,
	[ClientCode] [varchar](100) NOT NULL,
	[CPTcode] [varchar](100) NOT NULL,
	[Description] [varchar](200) NULL,
	[FeeAmt] [decimal](18, 2) NULL,
	[ExpPaymentAmt] [decimal](18, 2) NULL,
	[Units] [int] NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[CPTCounter] [int] NOT NULL,
	[DiagnosisCode] [varchar](20) NULL,
	[Modifier] [varchar](20) NULL,
	[EffectiveDate] [datetime] NOT NULL,
 CONSTRAINT [PK_tblTempFeeDefinitions] PRIMARY KEY CLUSTERED 
(
	[OrderedTestCode] ASC,
	[BillTypeCode] ASC,
	[ClientCode] ASC,
	[CPTcode] ASC,
	[CPTCounter] ASC,
	[EffectiveDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblTempFees]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblTempFees](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderedTestCode] [varchar](50) NULL,
	[BillTypeCode] [varchar](50) NULL,
	[ClientCode] [varchar](50) NULL,
	[CPTCode] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblTempMissingInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblTempMissingInfo](
	[Accession] [varchar](50) NULL,
	[Reason] [varchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblTempPatientIDs]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblTempPatientIDs](
	[ID] [varchar](50) NOT NULL,
	[PatientIDs] [varchar](max) NOT NULL,
 CONSTRAINT [PK_tblTempPatientIDs] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblTestCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblTestCodes](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[TestCode] [varchar](50) NOT NULL,
	[Description] [varchar](500) NOT NULL,
	[AKA] [varchar](500) NULL,
	[SubTests] [varchar](500) NULL,
 CONSTRAINT [PK_tblTestCodes] PRIMARY KEY CLUSTERED 
(
	[TestCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblTests]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblTests](
	[orderedtest] [varchar](50) NULL,
	[resultedtest] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblTestsReportOrder]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblTestsReportOrder](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[OrderNumber] [int] NOT NULL,
	[Header] [varchar](200) NOT NULL,
	[ResultCodes] [varchar](max) NOT NULL,
	[QSSCreatedByID] [varchar](20) NOT NULL,
	[QSSCreatedDate] [datetime] NULL,
	[Status] [varchar](20) NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[Section] [varchar](50) NULL,
 CONSTRAINT [pk_tblTestsReportOrder] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_tblTestsReportOrder_Header] UNIQUE NONCLUSTERED 
(
	[Header] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblTestsReportOrderNew]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblTestsReportOrderNew](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[PerformedTest] [varchar](20) NOT NULL,
	[ResultTestCode] [varchar](20) NOT NULL,
	[ReportOrder] [int] NULL,
	[Header] [varchar](50) NULL,
	[Section] [varchar](50) NULL,
 CONSTRAINT [pk_tblTestsReportOrderNew] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblUserLogins]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblUserLogins](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [varchar](20) NOT NULL,
	[LoginTimeStamp] [datetime] NOT NULL,
	[LogoutTimeStamp] [datetime] NULL,
	[IPAddress] [varchar](100) NULL,
	[AccessionNumber] [int] NULL,
	[PatientNumber] [int] NULL,
 CONSTRAINT [PK_tblUserLogins] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[LoginTimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblUserRoles]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblUserRoles](
	[RoleType] [varchar](50) NOT NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedBy] [varchar](20) NULL,
	[LastUpdatedDate] [datetime] NULL,
	[LastUpdatedBy] [varchar](20) NULL,
 CONSTRAINT [PK_tblUserRoles] PRIMARY KEY CLUSTERED 
(
	[RoleType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblUsers]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblUsers](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[LabCode] [varchar](20) NOT NULL,
	[ClientCode] [varchar](20) NOT NULL,
	[Password] [varchar](20) NOT NULL,
	[dtStamp] [datetime] NOT NULL,
	[AccessionPrefix] [varchar](50) NULL,
	[AccessionNumber] [int] NULL,
	[PatientPrefix] [varchar](50) NULL,
	[PatientNumber] [int] NULL,
	[ControlOrder] [int] NULL,
	[ClientsList] [varchar](500) NULL,
 CONSTRAINT [PK_tblUsers] PRIMARY KEY CLUSTERED 
(
	[LabCode] ASC,
	[ClientCode] ASC,
	[Password] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblUsersID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblUsersID](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [varchar](20) NOT NULL,
	[Password] [varchar](20) NOT NULL,
	[UserName] [varchar](100) NOT NULL,
	[UserLastName] [varchar](100) NULL,
	[ActiveFlag] [bit] NULL,
	[StartupForm] [varchar](100) NULL,
	[AdminFlag] [bit] NULL,
	[CanAddUsers] [bit] NULL,
	[ActiveClients] [varchar](400) NULL,
	[TempPassword] [varchar](100) NULL,
	[LoginCounter] [int] NULL,
	[DeactivatedDate] [datetime] NULL,
	[DeactivatedBy] [varchar](20) NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedBy] [varchar](20) NULL,
	[LastUpdatedDate] [datetime] NULL,
	[LastUpdatedBy] [varchar](20) NULL,
	[RoleType] [varchar](50) NULL,
	[isCollector] [bit] NULL,
	[MicroScopeName] [varchar](100) NULL,
	[CytoMicroscopeName] [varchar](100) NULL,
	[BillTypeDefault] [varchar](50) NULL,
 CONSTRAINT [PK_tblUsersID] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblWorkFile_Report_Summation_Table]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblWorkFile_Report_Summation_Table](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[PatientName] [varchar](102) NOT NULL,
	[BirthDate] [varchar](30) NULL,
	[BillType] [varchar](100) NOT NULL,
	[Ins_Code] [varchar](20) NULL,
	[InsuranceName] [varchar](100) NOT NULL,
	[Policy_Number] [varchar](100) NULL,
	[ClientCode] [varchar](50) NOT NULL,
	[ClientName] [varchar](100) NOT NULL,
	[RequestingPhysician] [varchar](252) NULL,
	[ServiceDate] [varchar](30) NOT NULL,
	[UpToThirtyDays] [decimal](38, 2) NULL,
	[ThirtyOneToSixtyDays] [decimal](38, 2) NULL,
	[SiztyOneToNintyDays] [decimal](38, 2) NULL,
	[OverNintyDays] [decimal](38, 2) NULL,
 CONSTRAINT [PK_WorkFile_Report_Summation_Table] PRIMARY KEY CLUSTERED 
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblWorkSheetsDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblWorkSheetsDefinitions](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[WKCode] [varchar](100) NOT NULL,
	[Description] [varchar](300) NULL,
	[Group] [varchar](100) NULL,
	[CupsPerTray] [varchar](100) NULL,
	[LastTray] [varchar](100) NULL,
	[LastCup] [varchar](100) NULL,
	[TraySerialNumber] [varchar](100) NULL,
	[Department] [varchar](100) NULL,
	[PrintGroup] [varchar](100) NULL,
	[TotalCount] [varchar](100) NULL,
	[LabelPrintGroup] [varchar](50) NULL,
	[TrayCupXREF] [varchar](100) NULL,
	[MailoutLab] [varchar](100) NULL,
	[Suffix] [varchar](50) NULL,
 CONSTRAINT [PK_tblWorkSheetsDefinitions] PRIMARY KEY CLUSTERED 
(
	[WKCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblZip]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblZip](
	[Zip] [nchar](10) NOT NULL,
	[City] [varchar](100) NULL,
	[State] [nchar](2) NULL,
 CONSTRAINT [PK_tblZip] PRIMARY KEY CLUSTERED 
(
	[Zip] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TempResult]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TempResult](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Accession] [varchar](100) NOT NULL,
	[PerformedTest] [varchar](100) NOT NULL,
	[ResultTest] [varchar](100) NOT NULL,
	[Worksheet] [varchar](100) NULL,
	[LOINCcode] [varchar](100) NULL,
	[Organism] [varchar](100) NULL,
	[SensitivitiesXML] [xml] NULL,
	[Result] [varchar](100) NULL,
	[ResultFlag] [varchar](max) NULL,
	[NormalRange] [varchar](200) NULL,
	[Units] [varchar](100) NULL,
	[CorrectionsXML] [xml] NULL,
	[CallStatus] [varchar](50) NULL,
	[ResultComment] [varchar](max) NULL,
	[Status] [varchar](50) NULL,
	[EnteredBy] [varchar](100) NULL,
	[EntryDate] [datetime] NULL,
	[SiteID] [varchar](50) NULL,
	[QSSCreatedByID] [varchar](20) NULL,
	[QSSCreatedDate] [datetime] NULL,
	[QSSLastUpdateID] [varchar](20) NULL,
	[QSSUpdateDate] [datetime] NULL,
	[QSSVersion] [int] NULL,
	[Outcome] [varchar](1) NULL,
	[Version] [int] NULL,
	[ReportAs] [varchar](100) NULL,
	[InternalComment] [varchar](1000) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Index [AccessionDates]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [AccessionDates] ON [dbo].[tblAccessions]
(
	[QSSUpdateDate] ASC
)
INCLUDE([Accession],[PatientID],[ClientCode],[PhysicianCode],[CollectionDate],[ReceiveDate],[CurrentBillType]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResultsInquiry_CollectionDate]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idx_ResultsInquiry_CollectionDate] ON [dbo].[tblAccessions]
(
	[CollectionDate] ASC
)
INCLUDE([Accession],[PatientID],[ClientCode],[PhysicianCode],[ReceiveDate]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResultsInquiry_ReceiveDate]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idx_ResultsInquiry_ReceiveDate] ON [dbo].[tblAccessions]
(
	[ReceiveDate] ASC
)
INCLUDE([Accession],[PatientID],[ClientCode],[PhysicianCode],[CollectionDate]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idxClientCode]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idxClientCode] ON [dbo].[tblAccessions]
(
	[ClientCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idxPatID]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idxPatID] ON [dbo].[tblAccessions]
(
	[PatientID] ASC,
	[OrderType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idxPreAccession]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idxPreAccession] ON [dbo].[tblAccessions]
(
	[PreAccession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_BillingInfo]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idx_BillingInfo] ON [dbo].[tblBill]
(
	[BTcode] ASC
)
INCLUDE([Accession],[CPTcode],[OrderedTestCode],[NextBillDate],[Modifier],[Status],[GroupFlag]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [ix_billCollectionDate]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [ix_billCollectionDate] ON [dbo].[tblBillAccessions]
(
	[CollectionDate] ASC
)
INCLUDE([Accession],[PatientID],[ClientCode],[PhysicianCode],[CurrentBillType],[CurrentBillTo],[QSSUpdateDate]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ClientBillAccession]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [IX_ClientBillAccession] ON [dbo].[tblBillAccessions]
(
	[ClientBillAccession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_Accession]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idx_Accession] ON [dbo].[tblBillingTempRemitArchive]
(
	[Accession] ASC,
	[CPT_Code] ASC,
	[Modifier] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_tblCPTLookup_id_DiagnosisCode]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idx_tblCPTLookup_id_DiagnosisCode] ON [dbo].[tblCPTLookup]
(
	[CPTCode] ASC
)
INCLUDE([id],[DiagnosisCode]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_tblLabDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [IX_tblLabDefinitions] ON [dbo].[tblLabDefinitions]
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_MOAccession]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idx_MOAccession] ON [dbo].[tblMailoutOrders]
(
	[MOAccession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idxDesc]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idxDesc] ON [dbo].[tblMedications]
(
	[Description] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_Accession]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idx_Accession] ON [dbo].[tblMissingInformation]
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [pk_ClientCode]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [pk_ClientCode] ON [dbo].[tblMissingInformation]
(
	[ClientCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [pk_ClientCode_EntryDate]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [pk_ClientCode_EntryDate] ON [dbo].[tblMissingInformation]
(
	[ClientCode] ASC,
	[entryDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idxDesc]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idxDesc] ON [dbo].[tblOrderedTestsDefinitions]
(
	[Description] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [paymentCPT]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [paymentCPT] ON [dbo].[tblPayment]
(
	[CPTcode] ASC
)
INCLUDE([Accession],[OrderedTest],[PaymentAmt],[QSSCreatedDate],[QSSUpdateDate]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [accn_restest_status]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [accn_restest_status] ON [dbo].[tblResultedTests]
(
	[Status] ASC
)
INCLUDE([Accession],[ResultTest]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [accn_worksheet]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [accn_worksheet] ON [dbo].[tblResultedTests]
(
	[Status] ASC
)
INCLUDE([Accession],[Worksheet]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_Accession_tblResultedTests]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idx_Accession_tblResultedTests] ON [dbo].[tblResultedTests]
(
	[Accession] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_tblResultedTests_Accession_ResultFlag]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [idx_tblResultedTests_Accession_ResultFlag] ON [dbo].[tblResultedTests]
(
	[Result] ASC
)
INCLUDE([Accession],[ResultFlag]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [ix_tblResulted_Accession_ResultTest]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [ix_tblResulted_Accession_ResultTest] ON [dbo].[tblResultedTests]
(
	[Accession] ASC,
	[ResultTest] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [ix_tblResulted_Accession_Status]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [ix_tblResulted_Accession_Status] ON [dbo].[tblResultedTests]
(
	[Accession] ASC,
	[Status] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [ix_tblResultedTests_ID_Accession_ResultedTest_PerformedTest]    Script Date: 14.04.2021 13:43:56 ******/
CREATE NONCLUSTERED INDEX [ix_tblResultedTests_ID_Accession_ResultedTest_PerformedTest] ON [dbo].[tblResultedTests]
(
	[id] ASC,
	[Accession] ASC,
	[PerformedTest] ASC,
	[ResultTest] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [dbo].[tblAccessions] ADD  CONSTRAINT [DF_tblAccessions_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[tblAccessions] ADD  DEFAULT ((0)) FOR [AddScannedPaperWork]
GO
ALTER TABLE [dbo].[tblArchiveReviewAccession] ADD  CONSTRAINT [DF_tblArchiveReviewAccession_QssCreatedDate]  DEFAULT (getdate()) FOR [QssCreatedDate]
GO
ALTER TABLE [dbo].[tblAuditAccessions] ADD  CONSTRAINT [DF_tblAuditAccessions_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[tblAuditCytologyCases] ADD  CONSTRAINT [DF_tblAuditCytologyCases_Signed]  DEFAULT ((0)) FOR [Signed]
GO
ALTER TABLE [dbo].[tblAuditCytologyCases] ADD  CONSTRAINT [DF_tblAuditCytologyCases_isAbnormal]  DEFAULT ((0)) FOR [isAbnormal]
GO
ALTER TABLE [dbo].[tblAuditCytologyCases] ADD  CONSTRAINT [DF_tblAuditCytologyCases_QSSCreatedDate]  DEFAULT (getdate()) FOR [QSSCreatedDate]
GO
ALTER TABLE [dbo].[tblAuditPathologyCases] ADD  CONSTRAINT [DF_tblAuditPathologyCases_Signed]  DEFAULT ((0)) FOR [Signed]
GO
ALTER TABLE [dbo].[tblAuditPathologyCases] ADD  CONSTRAINT [DF_tblAuditPathologyCases_isAbnormal]  DEFAULT ((0)) FOR [isAbnormal]
GO
ALTER TABLE [dbo].[tblAuditPathologyCases] ADD  CONSTRAINT [DF_tblAuditPathologyCases_QSSCreatedDate]  DEFAULT (getdate()) FOR [QSSCreatedDate]
GO
ALTER TABLE [dbo].[tblBill] ADD  DEFAULT ((0)) FOR [GroupFlag]
GO
ALTER TABLE [dbo].[tblBillAccessions] ADD  CONSTRAINT [DF_tblBillAccessions_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[tblBillTypeDefinitions] ADD  CONSTRAINT [DF_tblBillTypeDefinitions_PrintFlag]  DEFAULT ((0)) FOR [PrintFlag]
GO
ALTER TABLE [dbo].[tblBillTypeDefinitions] ADD  CONSTRAINT [DF_tblBillTypeDefinitions_VisibleFlag]  DEFAULT ((1)) FOR [VisibleFlag]
GO
ALTER TABLE [dbo].[tblClientsSalesman] ADD  CONSTRAINT [DF_tblClientsSalesman_QSSUpdateDate]  DEFAULT (getdate()) FOR [QSSUpdateDate]
GO
ALTER TABLE [dbo].[tblClientsSalesman] ADD  CONSTRAINT [DF_tblClientsSalesman_QSSVersion]  DEFAULT ((0)) FOR [QSSVersion]
GO
ALTER TABLE [dbo].[tblClientsSalesman] ADD  CONSTRAINT [DF_tblClientsSalesman_Commission]  DEFAULT ((0)) FOR [Commission]
GO
ALTER TABLE [dbo].[tblCOVIDNJDOH] ADD  CONSTRAINT [DF_tblCOVIDNJDOH_Reported]  DEFAULT ((0)) FOR [Reported]
GO
ALTER TABLE [dbo].[tblCytoHeadersForSource] ADD  CONSTRAINT [DF_tblCytoHeadersForSource_QSSCreatedDate]  DEFAULT (getdate()) FOR [QSSCreatedDate]
GO
ALTER TABLE [dbo].[tblCytologyCases] ADD  CONSTRAINT [DF_tblCytologyCases_Status]  DEFAULT ('Pending') FOR [Status]
GO
ALTER TABLE [dbo].[tblCytologyCases] ADD  CONSTRAINT [DF_tblCytologyCases_Signed]  DEFAULT ((0)) FOR [Signed]
GO
ALTER TABLE [dbo].[tblCytologyCases] ADD  CONSTRAINT [DF_tblCytologyCases_isAbnormal]  DEFAULT ((0)) FOR [isAbnormal]
GO
ALTER TABLE [dbo].[tblCytologyCases] ADD  CONSTRAINT [DF_tblCytologyCases_QSSCreatedDate]  DEFAULT (getdate()) FOR [QSSCreatedDate]
GO
ALTER TABLE [dbo].[tblCytologyCases] ADD  CONSTRAINT [DF_tblCytologyCases_QSSUpdateDate]  DEFAULT (getdate()) FOR [QSSUpdateDate]
GO
ALTER TABLE [dbo].[tblCytologySources] ADD  CONSTRAINT [DF_tblCytologySources_QSSCreatedDate]  DEFAULT (getdate()) FOR [QSSCreatedDate]
GO
ALTER TABLE [dbo].[tblHeadersForSource] ADD  CONSTRAINT [DF_tblHeadersForSource_QSSCreatedDate]  DEFAULT (getdate()) FOR [QSSCreatedDate]
GO
ALTER TABLE [dbo].[tblInsuranceCompanies] ADD  CONSTRAINT [DF_tblInsuranceCompanies_DisgnosisRequired]  DEFAULT ((0)) FOR [DiagnosisRequired]
GO
ALTER TABLE [dbo].[tblInsuranceCompanies] ADD  CONSTRAINT [DF_tblInsuranceCompanies_FormRequired]  DEFAULT ((0)) FOR [FormRequired]
GO
ALTER TABLE [dbo].[tblInsuranceCompanies] ADD  CONSTRAINT [DF_tblInsuranceCompanies_PendingWriteOff]  DEFAULT ((0)) FOR [PendingWriteOff]
GO
ALTER TABLE [dbo].[tblInsuranceCompanies] ADD  CONSTRAINT [DF_tblInsuranceCompanies_HCFABills]  DEFAULT ((0)) FOR [HCFABills]
GO
ALTER TABLE [dbo].[tblLabDefinitions] ADD  CONSTRAINT [DF_tblLabDefinitions_p_LabName]  DEFAULT ('') FOR [p_LabName]
GO
ALTER TABLE [dbo].[tblOrderedTests] ADD  DEFAULT ((0)) FOR [GroupFlag]
GO
ALTER TABLE [dbo].[tblOrderedTestsDefinitions] ADD  CONSTRAINT [DF_tblOrderedTestsDefinitions_ReportFlag]  DEFAULT ((0)) FOR [ReportFlag]
GO
ALTER TABLE [dbo].[tblPathologyCases] ADD  CONSTRAINT [DF_tblPathologyCases_Status]  DEFAULT ('Pending') FOR [Status]
GO
ALTER TABLE [dbo].[tblPathologyCases] ADD  CONSTRAINT [DF_tblPathologyCases_Signed]  DEFAULT ((0)) FOR [Signed]
GO
ALTER TABLE [dbo].[tblPathologyCases] ADD  CONSTRAINT [DF_tblPathologyCases_isAbnormal]  DEFAULT ((0)) FOR [isAbnormal]
GO
ALTER TABLE [dbo].[tblPathologyCases] ADD  CONSTRAINT [DF_tblPathologyCases_QSSCreatedDate]  DEFAULT (getdate()) FOR [QSSCreatedDate]
GO
ALTER TABLE [dbo].[tblPathologyCases] ADD  CONSTRAINT [DF_tblPathologyCases_QSSUpdateDate]  DEFAULT (getdate()) FOR [QSSUpdateDate]
GO
ALTER TABLE [dbo].[tblPathologySources] ADD  CONSTRAINT [DF_tblPathologySources_QSSCreatedDate]  DEFAULT (getdate()) FOR [QSSCreatedDate]
GO
ALTER TABLE [dbo].[tblPathologySources] ADD  CONSTRAINT [DF_tblPathologySources_Cassettes]  DEFAULT ((0)) FOR [Cassettes]
GO
ALTER TABLE [dbo].[tblPathologyStains] ADD  CONSTRAINT [DF_tblPathologyStains_QSSCreatedDate]  DEFAULT (getdate()) FOR [QSSCreatedDate]
GO
ALTER TABLE [dbo].[tblPatient] ADD  CONSTRAINT [DF_tblPatient_ptMiddleName]  DEFAULT ('') FOR [ptMiddleName]
GO
ALTER TABLE [dbo].[tblPatient] ADD  CONSTRAINT [DF_tblPatient_ptNameSuffix]  DEFAULT ('') FOR [ptNameSuffix]
GO
ALTER TABLE [dbo].[tblPatient] ADD  CONSTRAINT [DF_tblPatient_ptSex]  DEFAULT ('') FOR [ptSex]
GO
ALTER TABLE [dbo].[tblPatient] ADD  CONSTRAINT [DF_tblPatient_ptSSN]  DEFAULT ('') FOR [ptSSN]
GO
ALTER TABLE [dbo].[tblPatient] ADD  CONSTRAINT [DF_tblPatient_btMiddleName]  DEFAULT ('') FOR [btMiddleName]
GO
ALTER TABLE [dbo].[tblPatient] ADD  CONSTRAINT [DF_tblPatient_btNameSuffix]  DEFAULT ('') FOR [btNameSuffix]
GO
ALTER TABLE [dbo].[tblPatient] ADD  CONSTRAINT [DF_tblPatient_btSex]  DEFAULT ('') FOR [btSex]
GO
ALTER TABLE [dbo].[tblPatient] ADD  CONSTRAINT [DF_tblPatient_btSSN]  DEFAULT ('') FOR [btSSN]
GO
ALTER TABLE [dbo].[tblQCResultValues] ADD  CONSTRAINT [ResultAlphaFlag_Def]  DEFAULT ((0)) FOR [ResultAlphaFlag]
GO
ALTER TABLE [dbo].[tblResultedTestDecodes] ADD  CONSTRAINT [DF_tblResultedTestDecodes_AutoReleaseFlag]  DEFAULT ((0)) FOR [AutoReleaseFlag]
GO
ALTER TABLE [dbo].[tblResultedTestsDefinitions] ADD  CONSTRAINT [DF_tblResultedTestsDefinitions_MedicationDataIndirect]  DEFAULT ('') FOR [MedicationDataIndirect]
GO
ALTER TABLE [dbo].[tblResultedTestsDefinitions] ADD  CONSTRAINT [DF_tblResultedTestsDefinitions_Version]  DEFAULT ((0)) FOR [Version]
GO
ALTER TABLE [dbo].[tblResultedTestsParams] ADD  CONSTRAINT [DF_tblResultedTestsParams_HLAge]  DEFAULT ((999)) FOR [HLAge]
GO
ALTER TABLE [dbo].[tblResultedTestsParams] ADD  CONSTRAINT [DF_tblResultedTestsParams_HLAgeUnit]  DEFAULT ('Y') FOR [HLAgeUnit]
GO
ALTER TABLE [dbo].[tblReviewAccession] ADD  DEFAULT ((0)) FOR [ReleaseFail]
GO
ALTER TABLE [dbo].[tblScannedReportsAudit] ADD  CONSTRAINT [DF_tblScannedReportsAudit_LoginTimestamp]  DEFAULT (getdate()) FOR [LoginTimestamp]
GO
ALTER TABLE [dbo].[tblStainMaster] ADD  CONSTRAINT [DF_tblStainMaster_XCounter]  DEFAULT ((0)) FOR [XCounter]
GO
ALTER TABLE [dbo].[tblUsers] ADD  CONSTRAINT [DF_tblUsers_dtStamp]  DEFAULT (getdate()) FOR [dtStamp]
GO
ALTER TABLE [dbo].[tblQCOrderControls]  WITH CHECK ADD  CONSTRAINT [FK_QCOrder_ID] FOREIGN KEY([OrderID])
REFERENCES [dbo].[tblQCOrders] ([OrderID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[tblQCOrderControls] CHECK CONSTRAINT [FK_QCOrder_ID]
GO
ALTER TABLE [dbo].[tblQCOrderControls]  WITH CHECK ADD  CONSTRAINT [FK_QCOrder_QCLot] FOREIGN KEY([ControlID], [Lot])
REFERENCES [dbo].[tblQCControls] ([ControlID], [Lot])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[tblQCOrderControls] CHECK CONSTRAINT [FK_QCOrder_QCLot]
GO
/****** Object:  StoredProcedure [dbo].[DeleteInstrumentInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[DeleteInstrumentInfo]
	-- Add the parameters for the stored procedure here
	@InstrumentCode varchar(200)
    
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Delete from tblInstrumentElements where InstrumentCode =@InstrumentCode
    Delete from tblInstrumentDefinitions where InstrumentCode=@InstrumentCode
    
END
GO
/****** Object:  StoredProcedure [dbo].[FindMyData_String]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[FindMyData_String]
    @DataToFind NVARCHAR(4000),
    @ExactMatch BIT = 0
AS
SET NOCOUNT ON

DECLARE @Temp TABLE(RowId INT IDENTITY(1,1), SchemaName sysname, TableName sysname, ColumnName SysName, DataType VARCHAR(100), DataFound BIT)

    INSERT  INTO @Temp(TableName,SchemaName, ColumnName, DataType)
    SELECT  C.Table_Name,C.TABLE_SCHEMA, C.Column_Name, C.Data_Type
    FROM    Information_Schema.Columns AS C
            INNER Join Information_Schema.Tables AS T
                ON C.Table_Name = T.Table_Name
        AND C.TABLE_SCHEMA = T.TABLE_SCHEMA
    WHERE   Table_Type = 'Base Table'
            And Data_Type In ('ntext','text','nvarchar','nchar','varchar','char')


DECLARE @i INT
DECLARE @MAX INT
DECLARE @TableName sysname
DECLARE @ColumnName sysname
DECLARE @SchemaName sysname
DECLARE @SQL NVARCHAR(4000)
DECLARE @PARAMETERS NVARCHAR(4000)
DECLARE @DataExists BIT
DECLARE @SQLTemplate NVARCHAR(4000)

SELECT  @SQLTemplate = CASE WHEN @ExactMatch = 1
                            THEN 'If Exists(Select *
                                          From   ReplaceTableName
                                          Where  Convert(nVarChar(4000), [ReplaceColumnName])
                                                       = ''' + @DataToFind + '''
                                          )
                                     Set @DataExists = 1
                                 Else
                                     Set @DataExists = 0'
                            ELSE 'If Exists(Select *
                                          From   ReplaceTableName
                                          Where  Convert(nVarChar(4000), [ReplaceColumnName])
                                                       Like ''%' + @DataToFind + '%''
                                          )
                                     Set @DataExists = 1
                                 Else
                                     Set @DataExists = 0'
                            END,
        @PARAMETERS = '@DataExists Bit OUTPUT',
        @i = 1

SELECT @i = 1, @MAX = MAX(RowId)
FROM   @Temp

WHILE @i <= @MAX
    BEGIN
        SELECT  @SQL = REPLACE(REPLACE(@SQLTemplate, 'ReplaceTableName', QUOTENAME(SchemaName) + '.' + QUOTENAME(TableName)), 'ReplaceColumnName', ColumnName)
        FROM    @Temp
        WHERE   RowId = @i


        PRINT @SQL
        EXEC SP_EXECUTESQL @SQL, @PARAMETERS, @DataExists = @DataExists OUTPUT

        IF @DataExists =1
            UPDATE @Temp SET DataFound = 1 WHERE RowId = @i

        SET @i = @i + 1
    END

SELECT  SchemaName,TableName, ColumnName
FROM    @Temp
WHERE   DataFound = 1
GO
/****** Object:  StoredProcedure [dbo].[InsertInstrumentElements]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
CREATE PROCEDURE [dbo].[InsertInstrumentElements]    
 -- Add the parameters for the stored procedure here    
 @InstrumentCode varchar(200),    
 @ResultCode varchar(500),    
 @Type varchar(200),
 @InstrumentCD  varchar(200)  
     
AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;    
    
    -- Insert statements for procedure here    
  Insert into tblInstrumentElements(InstrumentCode,ResultTest,[Type],InstrumentCD) values(@InstrumentCode,@ResultCode,@Type,@InstrumentCD)    
END
GO
/****** Object:  StoredProcedure [dbo].[InsertUpdateInstrumentInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[InsertUpdateInstrumentInfo]  
 -- Add the parameters for the stored procedure here  
 @InstrumentCode varchar(200),  
 @Description varchar(500),  
 @SerialNumber varchar(200),  
 @InstallDate datetime,  
 @PortNumber varchar(100),  
 @LogonName varchar(100),  
 @AutoFinalizeRes bit,  
 @ReviewSentRes bit ,  
 @UpdateDailyRes bit  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
  
    -- Insert statements for procedure here  
 IF Exists(Select InstrumentCode from tblInstrumentDefinitions where InstrumentCode =@InstrumentCode)  
 Begin  
   Update tblInstrumentDefinitions set [Description]=@Description,SerialNumber=@SerialNumber,InstallDate=@InstallDate,  
   PortNumber=@PortNumber,LogonName=@LogonName,AutoFinalizeRes=@AutoFinalizeRes,ReviewSentRes=@ReviewSentRes,UpdateDailyRes=@UpdateDailyRes  
   Where InstrumentCode=@InstrumentCode  
 End  
 Else  
 Begin  
 Insert into tblInstrumentDefinitions values(@InstrumentCode,@Description,@SerialNumber,@InstallDate,  
   @PortNumber,@LogonName,@AutoFinalizeRes,@ReviewSentRes,@UpdateDailyRes)  
 End  
 Delete from tblInstrumentElements where InstrumentCode =@InstrumentCode  

END
GO
/****** Object:  StoredProcedure [dbo].[sp_GetCounterString]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_GetCounterString]       
AS      
BEGIN      
 SELECT TOP(1) HashValue  
 From tblCounter  
END

GO
/****** Object:  StoredProcedure [dbo].[sp_GetCustomReports]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
Create PROCEDURE [dbo].[sp_GetCustomReports]            
              
AS            
BEGIN            
 select * from tblcustomreports          
END 
GO
/****** Object:  StoredProcedure [dbo].[sp_GetOnManualHold2903]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_GetOnManualHold2903]       
AS      
BEGIN      
 select '' as 'A', p.ptFirstName as 'Patient First Name', substring(p.ptMiddleName, 1, 1) as 'Patient Middle Initial', p.ptLastName as 'Patient Last name',
convert(varchar(10), p.ptDateOfBirth, 101) as 'Patient DOB', '' as 'F', p.ptSSN as 'SSN#', p.ptSex as 'Patient Gender', mi.Accession as 'Patient accession number', p.ptAddress1 as 'Patient address line 1',
p.ptAddress2 as 'Patient address line 2', p.ptCity as 'Patient City', p.ptState as 'Patient State', p.ptZip as 'Patient Zip', '' as 'O', 
convert(varchar(10), a.CollectionDate, 101) as 'Date of Service',
'' as 'Q'
from tblaccessions a
inner join tblMissingInformation mi
on mi.Accession = a.Accession
inner join tblPatient p
on p.PatientId = a.PatientID
WHERE     (mi.Reason = 'On Manual Hold. 2903')


--Column A- keep empty
--Column B-Patient First name
--Column C-Patient Middle Initial
--Column D-Patient Last name
--Column E-Patient DOB
--Column F-keep empty
--Column G- SSN#
--Column H- Patient Gender
--Column I- Patient accession number
--Column J- Patient address line 1
--Column K- Patient address line 2
--Column L- Patient City
--Column M- Patient State
--Column N- Patient Zip
--Column O-keep empty
--Column P-Date of Service
--Column F-keep empty

END

GO
/****** Object:  StoredProcedure [dbo].[sp_GetOnManualHoldInvalidInsurance]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[sp_GetOnManualHoldInvalidInsurance]       
AS      
BEGIN    
  
 select 
--mi.reason,
'' as 'A', p.ptFirstName as 'Patient First Name', substring(p.ptMiddleName, 1, 1) as 'Patient Middle Initial', p.ptLastName as 'Patient Last name',
convert(varchar(10), p.ptDateOfBirth, 101) as 'Patient DOB', '' as 'F', p.ptSSN as 'SSN#', p.ptSex as 'Patient Gender', mi.Accession as 'Patient accession number', p.ptAddress1 as 'Patient address line 1',
p.ptAddress2 as 'Patient address line 2', p.ptCity as 'Patient City', p.ptState as 'Patient State', p.ptZip as 'Patient Zip', '' as 'O', 
convert(varchar(10), a.CollectionDate, 101) as 'Date of Service',
'' as 'Q'
from tblaccessions a
inner join tblMissingInformation mi
on mi.Accession = a.Accession
inner join tblPatient p
on p.PatientId = a.PatientID
WHERE     (mi.Reason like 'On Manual Hold%') and mi.Reason like ('%invalid insurance%')


--Column A- keep empty
--Column B-Patient First name
--Column C-Patient Middle Initial
--Column D-Patient Last name
--Column E-Patient DOB
--Column F-keep empty
--Column G- SSN#
--Column H- Patient Gender
--Column I- Patient accession number
--Column J- Patient address line 1
--Column K- Patient address line 2
--Column L- Patient City
--Column M- Patient State
--Column N- Patient Zip
--Column O-keep empty
--Column P-Date of Service
--Column F-keep empty

END

GO
/****** Object:  StoredProcedure [dbo].[sp_GetOnManualHoldNoInsurance]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[sp_GetOnManualHoldNoInsurance]       
AS      
BEGIN      
 select
--mi.reason,
 '' as 'A', p.ptFirstName as 'Patient First Name', substring(p.ptMiddleName, 1, 1) as 'Patient Middle Initial', p.ptLastName as 'Patient Last name',
convert(varchar(10), p.ptDateOfBirth, 101) as 'Patient DOB', '' as 'F', p.ptSSN as 'SSN#', p.ptSex as 'Patient Gender', mi.Accession as 'Patient accession number', p.ptAddress1 as 'Patient address line 1',
p.ptAddress2 as 'Patient address line 2', p.ptCity as 'Patient City', p.ptState as 'Patient State', p.ptZip as 'Patient Zip', '' as 'O', 
convert(varchar(10), a.CollectionDate, 101) as 'Date of Service',
'' as 'Q'
from tblaccessions a
inner join tblMissingInformation mi
on mi.Accession = a.Accession
inner join tblPatient p
on p.PatientId = a.PatientID
WHERE     (mi.Reason like 'On Manual Hold%') and mi.Reason like '%no insurance%' and mi.Reason not like '%no address%'


--Column A- keep empty
--Column B-Patient First name
--Column C-Patient Middle Initial
--Column D-Patient Last name
--Column E-Patient DOB
--Column F-keep empty
--Column G- SSN#
--Column H- Patient Gender
--Column I- Patient accession number
--Column J- Patient address line 1
--Column K- Patient address line 2
--Column L- Patient City
--Column M- Patient State
--Column N- Patient Zip
--Column O-keep empty
--Column P-Date of Service
--Column F-keep empty

END

GO
/****** Object:  StoredProcedure [dbo].[sp_GetOnManualHoldNoInsuranceNoAddress]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[sp_GetOnManualHoldNoInsuranceNoAddress]       
AS      
BEGIN      
 
select
--mi.reason,
 '' as 'A', p.ptFirstName as 'Patient First Name', substring(p.ptMiddleName, 1, 1) as 'Patient Middle Initial', p.ptLastName as 'Patient Last name',
convert(varchar(10), p.ptDateOfBirth, 101) as 'Patient DOB', '' as 'F', p.ptSSN as 'SSN#', p.ptSex as 'Patient Gender', mi.Accession as 'Patient accession number', p.ptAddress1 as 'Patient address line 1',
p.ptAddress2 as 'Patient address line 2', p.ptCity as 'Patient City', p.ptState as 'Patient State', p.ptZip as 'Patient Zip', '' as 'O', 
convert(varchar(10), a.CollectionDate, 101) as 'Date of Service',
'' as 'Q'
from tblaccessions a
inner join tblMissingInformation mi
on mi.Accession = a.Accession
inner join tblPatient p
on p.PatientId = a.PatientID
WHERE     (mi.Reason like 'On Manual Hold%') and mi.Reason like '%no insurance%'  and mi.Reason like '%no address%'


--Column A- keep empty
--Column B-Patient First name
--Column C-Patient Middle Initial
--Column D-Patient Last name
--Column E-Patient DOB
--Column F-keep empty
--Column G- SSN#
--Column H- Patient Gender
--Column I- Patient accession number
--Column J- Patient address line 1
--Column K- Patient address line 2
--Column L- Patient City
--Column M- Patient State
--Column N- Patient Zip
--Column O-keep empty
--Column P-Date of Service
--Column F-keep empty

END

GO
/****** Object:  StoredProcedure [dbo].[sp_GetTurnaroundReportByCollectionDate]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
Create PROCEDURE [dbo].[sp_GetTurnaroundReportByCollectionDate]            
              
AS            
BEGIN            
 
--TurnaroundReportByCollectionDate
select a.Accession, p.ptFirstName as 'Patient First Name', p.ptLastName as 'Patient Last name', convert(varchar(10), p.ptDateOfBirth, 101) as 'Patient DOB',  a.ClientCode, c.ClientName, otd.Description as 'Test Name',
DATEDIFF(hour, a.CollectionDate, ara.QSSFinalizedDate) as 'TAT'
from tblaccessions a
inner join tblArchiveReviewAccession ara
on ara.Accession = a.Accession
inner join tblclients c
on c.ClientCode = a.ClientCode
inner join tblPatient p
on p.PatientId = a.PatientID
inner join tblOrderedTests ot
on ot.Accession = a.Accession
inner join tblOrderedTestsDefinitions otd
on otd.OrderedTest = ot.OrderedTest
where ot.OrderedTest = 'LD074'
and a.CollectionDate > '2021-01-01 00:00:000'
and ara.QSSFinalizedDate is not null
order by a.Accession       
END 
GO
/****** Object:  StoredProcedure [dbo].[sp_GetTurnaroundReportByReceivedDate]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
Create PROCEDURE [dbo].[sp_GetTurnaroundReportByReceivedDate]            
              
AS            
BEGIN            
 select a.Accession, p.ptFirstName as 'Patient First Name', p.ptLastName as 'Patient Last name', convert(varchar(10), p.ptDateOfBirth, 101) as 'Patient DOB', a.ClientCode, c.ClientName, otd.Description as 'Test Name',
DATEDIFF(hour, a.ReceiveDate, ara.QSSFinalizedDate) as 'TAT'
from tblaccessions a
inner join tblArchiveReviewAccession ara
on ara.Accession = a.Accession
inner join tblclients c
on c.ClientCode = a.ClientCode
inner join tblPatient p
on p.PatientId = a.PatientID
inner join tblOrderedTests ot
on ot.Accession = a.Accession
inner join tblOrderedTestsDefinitions otd
on otd.OrderedTest = ot.OrderedTest
where ot.OrderedTest = 'LD074'
and a.ReceiveDate > '2021-01-01 00:00:000'
and ara.QSSFinalizedDate is not null
order by a.Accession        
END 
GO
/****** Object:  StoredProcedure [dbo].[sp_IndexRebuild]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[sp_IndexRebuild]
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	/**************************************************************
	!!!! Set @dbRebuild to the name of the database to rebuild !!!!
	**************************************************************/
	Declare @dbRebuild as varchar(100) = 'LincolnDiagnosticsLIS'

SELECT [DatabaseName]
    ,[ObjectId]
    ,[ObjectName]
    ,[IndexId]
	,si.Name
    ,[IndexDescription]
    ,CONVERT(DECIMAL(16, 1), (SUM([avg_record_size_in_bytes] * [record_count]) / (1024.0 * 1024))) AS [IndexSize(MB)]
	,page_count
    ,[lastupdated] AS [StatisticLastUpdated]
    ,[AvgFrag] into #tmpRebuild
FROM (
    SELECT DISTINCT DB_Name(Database_id) AS 'DatabaseName'
        ,OBJECT_ID AS ObjectId
        ,Object_Name(Object_id) AS ObjectName
        ,Index_ID AS IndexId
        ,Index_Type_Desc AS IndexDescription
        ,avg_record_size_in_bytes
        ,record_count
		,page_count
        ,STATS_DATE(object_id, index_id) AS 'lastupdated'
        ,CONVERT([varchar](512), round(Avg_Fragmentation_In_Percent, 3)) AS 'AvgFrag'
    FROM sys.dm_db_index_physical_stats(db_id(), NULL, NULL, NULL, 'detailed')
    WHERE OBJECT_ID IS NOT NULL
        AND Avg_Fragmentation_In_Percent > 9.99
		AND page_count > 999
        AND DB_Name(Database_id) = @dbRebuild
    ) T
	inner join sys.indexes si on si.object_id = T.ObjectId AND si.index_id = IndexId
	where si.[name] is not null and substring(si.[name], 1, 1) <> '<'
GROUP BY DatabaseName
    ,ObjectId
    ,ObjectName
    ,IndexId
	,si.name
    ,IndexDescription
	,page_count
    ,lastupdated
    ,AvgFrag
	order by [IndexSize(MB)] desc --, ObjectName desc

	--select * from #tmpRebuild

Declare @DbName as varchar(200),
		@IdxName as varchar(500),
		@IdxSize as decimal(16,1),
		@Frag as varchar(512),
		@nSql as nvarchar(4000)
DECLARE Rebuild_cur CURSOR READ_ONLY FOR 
SELECT  ObjectName, [Name], [IndexSize(MB)], AvgFrag
FROM #tmpRebuild
where [Name] is not null
--ORDER BY [IndexSize(MB)]
OPEN Rebuild_cur

FETCH NEXT FROM Rebuild_cur
INTO   @DbName, @IdxName, @IdxSize, @Frag

WHILE @@FETCH_STATUS = 0
BEGIN 
	set @nSql = 'Alter index ' + @IdxName + ' on ' + @DbName + ' Rebuild with (sort_in_tempdb = on) '
	--select @nSql
	exec sp_executesql @nSql
	FETCH NEXT FROM Rebuild_cur
	INTO   @DbName, @IdxName, @IdxSize, @Frag
END
CLOSE Rebuild_cur
DEALLOCATE Rebuild_cur
END

--redo statistics after everything is done
exec sp_updatestats 'resample'
GO
/****** Object:  StoredProcedure [dbo].[sp_SetCounterString]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[sp_SetCounterString]      
  @ID varchar(100)    
AS      
BEGIN      
 UPDATE tblCounter  
 set HashValue = @ID  
END      

GO
/****** Object:  StoredProcedure [dbo].[spAccessionHeaderInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- =============================================      
-- Update 11/12/2019 Hanane -Report comment instead of internal comment    
-- =============================================      
CREATE PROCEDURE [dbo].[spAccessionHeaderInfo]       
 @Accession varchar(50)      
AS      
BEGIN      
 select      
       
    a.Accession,a.PreAccession,a.CollectionDate, a.OrderDate ,a.ReceiveDate ,      
    a.FinalReportDate ,a.ordertype,a.ClientCode , c.ClientName,      
 c.Address,c.Address2,c.City ,c.State ,c.Zip,c.Telephone, a.PatientID,        
 p.ptFirstName as FirstName, p.ptLastName As LastName, p.ptSex as Sex, p.ptDateofBirth as DOB,       
 a.PhysicianCode,phs.FullName  as PhysName, MedicationsDataXML, SpecimenDataXML, DiagnosisDataXML, ara.ArchivedDate as ReleasedDate, a.OrderedTests, CurrentBillType,      
 'Status' = CASE      
            WHEN EXISTS (SELECT rt.Status       
        FROM dbo.tblResultedTests rt (nolock)      
           WHERE rt.Accession = @Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold')) THEN 'Pending'      
       ELSE 'Final'      
             END      
 ,a.AddScannedPaperWork  ,a.ExternalComments as ReportComment, a.Fasting, p.PTContactHomePhone ,  ara.QSSFinalizedDate as   FinalReleasedDate, c.CumulativeReport  
    from tblAccessions a (nolock)       
 inner join tblClients c (nolock)      
 on a.ClientCode = c.ClientCode      
       
 inner join tblPatient p (nolock)      
 on a.PatientID = p.PatientId      
       
 left join tblPhysicians phs (nolock)      
 on a.PhysicianCode = phs.PhysicianCode      
       
 LEFT OUTER JOIN dbo.tblArchiveReviewAccession ara (NOLOCK)      
   ON ara.Accession = @Accession      
       
 where a.Accession = @Accession      
       
       
END 
GO
/****** Object:  StoredProcedure [dbo].[spAccessionHeaderInfo_HL7]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spAccessionHeaderInfo_HL7]	
	@Accession varchar(50)
AS
BEGIN
	select
	
    a.Accession,a.PreAccession,a.CollectionDate, a.OrderDate ,a.ReceiveDate ,
    a.FinalReportDate ,a.ordertype,a.ClientCode , c.ClientName,
	c.Address,c.Address2,c.City ,c.State ,c.Zip,c.Telephone, a.PatientID, c.Interface,
	p.ptFirstName as FirstName, p.ptLastName As LastName, p.ptMiddleName As MiddleName, p.ptSex as Sex, p.ptDateofBirth as DOB, p.ptSSN,		
	p.ptAddress1 as ptAddress1, p.ptAddress2 as ptAddress2, p.ptCity as ptCity, p.ptState as ptState, p.ptZip as ptZip,
	p.PTContactHomePhone as ptTelephone,
	a.PhysicianCode, phs.FullName  as PhysName, phs.LastName as PhysicianLastName, phs.FirstName as PhysicianFirstName, phs.NPI as NPI,  MedicationsDataXML, 
	ara.ArchivedDate as ReleasedDate, a.QSSUpdateDate, a.ReportComment,
	ui.UserName + ' ' + ui.UserLastName as ReleasedBy,
	rt.EntryDate, a.SpecimenDataXML,
	'Status' = CASE
				        WHEN EXISTS (SELECT rt.Status 
							 FROM dbo.tblResultedTests rt (nolock)
						     WHERE rt.Accession = @Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold')) THEN 'Pending'
						 ELSE 'Final'
	            END
	
	
    from tblAccessions a (nolock) 
	inner join tblClients c (nolock)
	on a.ClientCode = c.ClientCode
	
	inner join tblPatient p (nolock)
	on a.PatientID = p.PatientId
	
	inner join tblPhysicians phs (nolock)
	on a.PhysicianCode = phs.PhysicianCode
	
	LEFT OUTER JOIN dbo.tblArchiveReviewAccession ara (NOLOCK)
	ON ara.Accession = @Accession
	
	inner join tblResultedTests rt (nolock)
	on ara.Accession = rt.Accession
		
	LEFT OUTER JOIN dbo.tblUsersID ui (NOLOCK)
	ON ui.UserID = ara.QSSLastUpdatedByID
			
	
	
	
	where a.Accession = @Accession
	
	
END






GO
/****** Object:  StoredProcedure [dbo].[spAccessionTransactionAudits]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
create PROCEDURE [dbo].[spAccessionTransactionAudits]    
 @Accession varchar(100),    
 @Action varchar(MAX),
 @CreatedBy varchar(100)
     
AS    
BEGIN    
 SET NOCOUNT ON;    
    
  Insert into tblAccessionTransactionAudit(Accession, [Action], DateCreated, CreatedBy)
  values(@Accession, @Action, getdate(), @CreatedBy)    
END
GO
/****** Object:  StoredProcedure [dbo].[spActivateDeactivateUserID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spActivateDeactivateUserID] 
@UserID varchar (20),
@DeactivatedBy varchar(20),
@ActiveFlag bit


AS
BEGIN
IF @ActiveFlag = 1 
BEGIN
UPDATE tblUsersID
SET 
    DeactivatedDate = NULL ,
    DeactivatedBy = '',
    LastUpdatedDate = GETDATE(),
    LastUpdatedBy =  @DeactivatedBy,
    ActiveFlag = 1
    WHERE UserID =  @UserID
    
    --log  the activity
	  --if @@ERROR = 0
	  --begin
		 -- exec spAddUserActivity 
		 -- @ClientCode = @ClientCode, 
		 -- @UserID  = @UserID, 
		 -- @Action = 'Activated User' , 
		 -- @Password = '' , 
		 -- @TempPassword = '' ,
		 -- @CreatedBy = @DeactivatedBy
	  --end

END
ELSE
BEGIN
UPDATE tblUsersID
SET 
    DeactivatedDate = GETDATE() ,
    DeactivatedBy = @DeactivatedBy,
    LastUpdatedDate = GETDATE(),
    LastUpdatedBy =  @DeactivatedBy,
    ActiveFlag = 0
    WHERE UserID =  @UserID

--log  the activity
	  --if @@ERROR = 0
	  --begin
		 -- exec spAddUserActivity 
		 -- @ClientCode = @ClientCode, 
		 -- @UserID  = @UserID, 
		 -- @Action = 'Deactivated User' , 
		 -- @Password = '' , 
		 -- @TempPassword = '' ,
		 -- @CreatedBy = @DeactivatedBy
	  --end

END


END
GO
/****** Object:  StoredProcedure [dbo].[spAddBillingAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spAddBillingAccession]  
 @Accession varchar(100),
 @ClientCode varchar(20),   
 @PatientId varchar(100) , 
 @PhysicianCode varchar(100) ,
 @ReceivedDate datetime = Null,
 @CollectionDate datetime = Null ,
 @OrderType varchar(10) , 
 @CurrentBillType  varchar(20) = NULL ,
 @CurrentBillTo varchar(20), 
 @BillingMessage varchar(100),
 @Notes varchar(500) ,
 @SpecimenDataXML xml,
 @TestCodeData varchar(max),
 @MedicationDataXML xml,
 @DiagnosisDataXML xml,
 @QSSCreatedByID varchar(20) = NULL ,
 @QSSLastUpdatedID varchar(20) ,
 @Mileage int = NULL,
 @ClientBillAccession varchar(100) = NULL,
 @SymptomAccidentDate datetime,
 @InjuryType varchar(10),
 @ManualSuspension as bit,
 @AccessionStatus as varchar(100) = NULL,
 @CorrectedClaim as varchar(10) = NULL,
 @CorrectedClaimReferenceNumber as varchar(200) = NULL,
 @ReturnCode int output
 

AS  
BEGIN  

SET @ReturnCode = 0

IF EXISTS( SELECT Accession from tblBillAccessions WHERE  Accession = @Accession)
 BEGIN

if @Mileage is null
begin
	Set @Mileage = (select Mileage from tblBillAccessions where Accession = @Accession)
end

  UPDATE tblBillAccessions
    SET 
		ClientCode     		= @ClientCode ,
		PatientID      		= @PatientID,
		PhysicianCode  		= @PhysicianCode,
		ReceiveDate    		= @ReceivedDate ,
	    CollectionDate 		= @CollectionDate ,
		OrderType      		= @OrderType ,
		CurrentBillType     = @CurrentBillType ,
		CurrentBillTo		= @CurrentBillTo,
		BillingMessage      = @BillingMessage ,
		InternalComment     = @Notes,
		SpecimenDataXML 	= @SpecimenDataXML , 
		OrderedTests  		= @TestCodeData ,
		MedicationsDataXML 	= @MedicationDataXML,
		DiagnosisDataXML	= @DiagnosisDataXML,
		QSSLastUpdateID 	= @QSSLastUpdatedID,
		QSSUpdateDate 		= getDate(),
		Mileage				= @Mileage,
		ClientBillAccession = @ClientBillAccession,
		SymptomAccidentDate = @SymptomAccidentDate,
		InjuryType			= @InjuryType,
		ManualSuspension	= @ManualSuspension,
		AccessionStatus     = @AccessionStatus,
		CorrectedClaim		= @CorrectedClaim,
		CorrectedClaimReferenceNumber	= @CorrectedClaimReferenceNumber
	WHERE Accession      = @Accession and
		  PatientId      = @PatientId

 	
  END
  ELSE
  BEGIN
	 INSERT INTO tblBillAccessions
		(Accession, ClientCode , PatientID,  PhysicianCode,  ReceiveDate , CollectionDate,  OrderType ,  CurrentBillType , CurrentBillTo,  
		BillingMessage, InternalComment, SpecimenDataXML , OrderedTests , MedicationsDataXML , DiagnosisDataXML , QSSCreatedByID , 
		QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, Mileage, ClientBillAccession, SymptomAccidentDate, InjuryType, ManualSuspension, AccessionStatus, CorrectedClaim, CorrectedClaimReferenceNumber)
		VALUES 
		(@Accession,  @ClientCode      , @PatientID, @PhysicianCode, @ReceivedDate , @CollectionDate, @OrderType , @CurrentBillType, @CurrentBillTo, 
		 @BillingMessage, @Notes    ,  @SpecimenDataXML , @TestCodeData , @MedicationDataXML, @DiagnosisDataXML, @QSSCreatedByID , 
		 getDate(), @QSSLastUpdatedID, getDate(), @Mileage, @ClientBillAccession, @SymptomAccidentDate, @InjuryType, @ManualSuspension, @AccessionStatus, @CorrectedClaim, @CorrectedClaimReferenceNumber)
	SET @ReturnCode = 0


END
END








GO
/****** Object:  StoredProcedure [dbo].[spAddControlModuleToOrders]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spAddControlModuleToOrders]
	@ControlOrderNumber as varchar(20),
	@ControlID as varchar(100),
	@LotNumber as varchar(100),	
	@UserID varchar(20),
	@Initialize bit = 0
	
		
AS
BEGIN
DECLARE 
  @TestCodes varchar(max)
, @Averages varchar(max)
, @Deviation varchar(max)
, @StartPos smallint
, @EndPos smallint
, @CurVal varchar(20)
, @FieldList varchar(max)
, @Code varchar(100)
, @Average decimal(6,2)
, @STDDeviation decimal(6,2)

CREATE TABLE #tmpTestCodes
(
    ID int IDENTITY
    ,Code varchar(20) 
)

CREATE TABLE #tmpAverages
(
    ID int IDENTITY
    ,Average decimal(6, 2)
)
CREATE TABLE #tmpSTDDeviation
(
    ID int IDENTITY
    ,Deviation decimal(6, 2)
)
CREATE TABLE #tmpResults
(
    ID int IDENTITY
    ,Code varchar(20) 
    ,Average decimal(6, 2)
    ,Deviation decimal(6, 2)
)
	IF @Initialize = 1
	

    IF NOT EXISTS (SELECT OrderID FROM tblQCOrderControls
                   WHERE OrderID = @ControlOrderNumber )
                   BEGIN
					   INSERT INTO tblQCOrderControls (OrderID, ControlID, Lot, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate)
					   VALUES ( @ControlOrderNumber, @ControlID, @LotNumber, @UserID, GETDATE(), @UserID, GETDATE() )
				   
				   SELECT @TestCodes = TestCodes , @Averages = Average, @Deviation = Deviation 
				   FROM tblQCControls (nolock)				   
				   WHERE ControlID = @ControlID
				   AND Lot =  @LotNumber
				   PRINT @TestCodes
				   PRINT @Averages
				   PRINT @Deviation
				   IF @TestCodes != ''
					   BEGIN
						Set @FieldList =''
						Set @FieldList = @TestCodes + '|'
						Set @StartPos = 1
						Set @EndPos = 1
						 -- Start the looping operation
						While @EndPos > 0
						   Begin
							  Set @EndPos = CharIndex('|', @FieldList, @StartPos)
							  If @EndPos > 0
								 Begin
									Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
									 
									-- Add current row to TempTable
									Insert #tmpTestCodes (Code) Values (@CurVal)
									Set @StartPos = @EndPos + 1
								 End

						 END
					   END
				       IF @Averages != ''
							   BEGIN
								Set @FieldList =''
								Set @FieldList = @Averages + '|'
								Set @StartPos = 1
								Set @EndPos = 1
								 -- Start the looping operation
								While @EndPos > 0
								   Begin
									  Set @EndPos = CharIndex('|', @FieldList, @StartPos)
									  If @EndPos > 0
										 Begin
											Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
											 
											-- Add current row to TempTable
											Insert #tmpAverages(Average) Values (@CurVal)
											Set @StartPos = @EndPos + 1
										 End

								 END
							   END
				        IF @Deviation != ''
							BEGIN
									Set @FieldList =''
									Set @FieldList = @Deviation + '|'
									Set @StartPos = 1
									Set @EndPos = 1
									 -- Start the looping operation
									While @EndPos > 0
									   Begin
										  Set @EndPos = CharIndex('|', @FieldList, @StartPos)
										  If @EndPos > 0
											 Begin
												Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))												 
												-- Add current row to TempTable
												Insert #tmpSTDDeviation(Deviation) Values (@CurVal)
												Set @StartPos = @EndPos + 1
											 End

									 END
							   END
						   END
                        IF @TestCodes != ''
                        BEGIN
                        INSERT INTO #tmpResults(Code, Average, Deviation)
                        SELECT Code, Average, Deviation
                        FROM #tmpTestCodes (nolock)
                        INNER JOIN #tmpAverages (nolock)
                        on #tmpTestCodes.ID = #tmpAverages.ID
                        INNER JOIN #tmpSTDDeviation (nolock)
                        ON  #tmpAverages.ID = #tmpSTDDeviation.ID
                        END
                        IF EXISTS (SELECT TOP 1 Code FROM #tmpTestCodes)
                           BEGIN
                             DECLARE RESULTTESTCODE_CURSOR CURSOR READ_ONLY FOR 
									SELECT  Code, Average, Deviation
									FROM #tmpResults
									ORDER BY Code 
									OPEN RESULTTESTCODE_CURSOR

									FETCH NEXT FROM RESULTTESTCODE_CURSOR
									INTO   @Code , @Average, @STDDeviation

									WHILE @@FETCH_STATUS = 0
									BEGIN 
									 IF NOT EXISTS ( SELECT OrderID FROM tblQCResults WHERE 
												OrderID = @ControlOrderNumber AND ControlID = @ControlID AND Lot = @LotNumber and TestCode = @Code)
										BEGIN	
												
										insert into tblQCResults
										(OrderID, ControlID,  Lot,  TestCode, Result, Average, NormalRange, STDDeviation, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion )
										values
										(@ControlOrderNumber, @ControlID, @LotNumber, @Code, '', @Average, Convert(Varchar(10), (@Average - (2 * @STDDeviation))) + '  -  ' + Convert(Varchar(10), (@Average + (2 * @STDDeviation))), @STDDeviation, @UserID, GETDATE(), @UserID,  GETDATE(), 0 )
										END
										FETCH NEXT FROM RESULTTESTCODE_CURSOR
										INTO    @Code , @Average, @STDDeviation
									END
									CLOSE RESULTTESTCODE_CURSOR
									DEALLOCATE RESULTTESTCODE_CURSOR
							END
                 
		END
GO
/****** Object:  StoredProcedure [dbo].[spAddMSHDate]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spAddMSHDate]

      @Accession varchar(100), 
	  @LatestMSHDate varchar(20)

AS

BEGIN
	IF  (SELECT COUNT(*) FROM tblAccessionMOResultsMSHDate WHERE Accession = @Accession) > 0
	BEGIN
		UPDATE tblAccessionMOResultsMSHDate SET LatestMSHDate = @LatestMSHDate WHERE Accession = @Accession
	END
	ELSE
	BEGIN
		INSERT INTO tblAccessionMOResultsMSHDate (Accession, LatestMSHDate)
		VALUES (@Accession, @LatestMSHDate)
	END

END




GO
/****** Object:  StoredProcedure [dbo].[spAddPatientOrders1]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
-- =============================================    
CREATE PROCEDURE [dbo].[spAddPatientOrders1]      
 @Accession varchar(50),    
 @ClientCode varchar(20),       
 @PatientId varchar(50) ,     
 @LastName varchar(100),    
 @FirstName varchar(100),    
 @MiddleName varchar(100),    
 @DateOfBirth date ,    
 @Sex varchar(20),    
 @PhysicianCode varchar(20) ,    
 @ReceivedDate datetime,    
 @CollectionDate datetime ,    
 @OrderType varchar(10) ,     
 @ProblemSpec bit ,     
 @CurrentBillType  varchar(20) = NULL ,    
 @InternalRequisitionNo  varchar(20) ,    
 @Notes varchar(500) ,    
 @SpecimenDataXML xml,    
 @TestCodeData varchar(max),    
 @MedicationDataXML xml,    
 @DiagnosisDataXML xml,    
 @QSSCreatedByID varchar(20) = NULL ,    
 @QSSLastUpdatedID varchar(20) ,    
 @QSSVersionNumber int ,    
 @POCTests varchar(max) = NULL,    
 @POCResults varchar(max) = NULL,    
 @ConfirmAllTests bit = NULL,    
 @ConfirmAllMeds bit = NULL,     
 @ConfirmConsistancy bit = NULL,      
 @MailoutDate datetime ,    
 @ShippedDate datetime ,    
 @SpecimenSource varchar(500) = NULL,    
 @LMP date,    
 @LMPVolume varchar(100) = NULL,    
 @Fasting bit,    
 @Breastfeeding bit = NULL,    
 @Pregnant bit = NULL,    
 @RecurrentCandida bit = NULL,    
 @RecurrentTrich bit = NULL,    
 @RecurrentBV bit = NULL,  
 @ExternalComments varchar(300), 
 @ProblemComments varchar(MAX),
 @PatientUpdated bit = 0,
 @Email varchar(200) = '',
 @ReturnCode int output    
     
    
AS      
BEGIN      
--Versioning Check    
DECLARE @VersionNumber int    
SET @ReturnCode = 0    
SELECT @VersionNumber = QSSVersion from tblAccessions WHERE  Accession = @Accession    
--PRINT @VersionNumber    
SET @VersionNumber = ISNULL(@VersionNumber, 0)    
IF @VersionNumber != @QSSVersionNumber    
 BEGIN    
 SET @ReturnCode = -1    
 RETURN    
  END    
IF EXISTS( SELECT QSSVersion from tblAccessions WHERE  Accession = @Accession)    
 BEGIN    
  SET @ReturnCode = @QSSVersionNumber + 1    
  UPDATE tblAccessions    
    SET     
  ClientCode       = @ClientCode ,    
  PatientID        = @PatientID,    
  PhysicianCode    = @PhysicianCode,    
  ReceiveDate      = @ReceivedDate ,    
     CollectionDate   = @CollectionDate ,    
  OrderType        = @OrderType ,    
  ProblemSpec      = @ProblemSpec ,    
  CurrentBillType     = @CurrentBillType ,    
  PreAccession        = @InternalRequisitionNo,      
  InternalComment     = @Notes,    
  SpecimenDataXML  = @SpecimenDataXML ,     
  OrderedTests    = @TestCodeData ,    
  MedicationsDataXML  = @MedicationDataXML,    
  DiagnosisDataXML = @DiagnosisDataXML,    
  QSSLastUpdateID  = @QSSLastUpdatedID,    
  QSSUpdateDate   = getDate() ,    
  QSSVersion    = QSSVersion + 1,    
  POCTests   = @POCTests,    
  POCResults   = @POCResults,    
  ConfirmAllTests  = @ConfirmAllTests,    
  ConfirmAllMeds  = @ConfirmAllMeds,    
  SubmittedSex  = @Sex,    
  SubmittedDOB        = @DateOfBirth,    
  ConfirmConsistancy  = @ConfirmConsistancy,    
  MailoutDate   = @MailoutDate,    
  ShippedDate   = @ShippedDate,    
  SpecimenSource  = @SpecimenSource,    
  LMP     = @LMP,    
  LMPVolume   = @LMPVolume,    
  Fasting    = @Fasting,    
  Breastfeeding = @Breastfeeding, Pregnant = @Pregnant, RecurrentCandida = @RecurrentCandida,     
  RecurrentTrich = @RecurrentTrich, RecurrentBV = @RecurrentBV ,ExternalComments=@ExternalComments , ProblemComments = @ProblemComments,
  PatientUpdated = @PatientUpdated
 WHERE Accession      = @Accession;    
    if @Email <> ''
	begin
		update tblPatient set ptcontactemail = @Email where PatientID = @PatientID
	end
    Exec spAuditAccession @Accession = @Accession , @QSSVersionNumber = @ReturnCode, @AuditType = 'U'    
      
  END    
  ELSE    
  BEGIN    
  INSERT INTO tblAccessions    
  (Accession, ClientCode , PatientID,  PhysicianCode,  ReceiveDate , CollectionDate,  OrderType , ProblemSpec, CurrentBillType , PreAccession ,      
  InternalComment, SpecimenDataXML , OrderedTests , MedicationsDataXML , DiagnosisDataXML , QSSCreatedByID , QSSCreatedDate, QSSLastUpdateID,     
  QSSUpdateDate, QSSVersion, POCTests,POCResults,ConfirmAllTests,ConfirmAllMeds,SubmittedSex,SubmittedDOB,ConfirmConsistancy, MailoutDate,     
  ShippedDate, SpecimenSource, LMP, LMPVolume, Fasting, Breastfeeding, Pregnant, RecurrentCandida, RecurrentTrich, RecurrentBV,ExternalComments,
  ProblemComments, PatientUpdated)    
  VALUES     
  (@Accession,  @ClientCode     , @PatientID, @PhysicianCode, @ReceivedDate , @CollectionDate, @OrderType , @ProblemSpec,@CurrentBillType, @InternalRequisitionNo,      
   @Notes    ,  @SpecimenDataXML , @TestCodeData , @MedicationDataXML, @DiagnosisDataXML, @QSSCreatedByID , getDate(), @QSSLastUpdatedID,    
   getDate(), 0,@POCTests,@POCResults,@ConfirmAllTests,@ConfirmAllMeds,@Sex,@DateOfBirth, @ConfirmConsistancy, @MailoutDate,     
   @ShippedDate, @SpecimenSource, @LMP, @LMPVolume, @Fasting, @Breastfeeding, @Pregnant, @RecurrentCandida, @RecurrentTrich, @RecurrentBV,@ExternalComments, 
   @ProblemComments, @PatientUpdated);  
    
  SET @ReturnCode = 0    
  Exec spAuditAccession @Accession = @Accession , @QSSVersionNumber = 0, @AuditType = 'A'    
     
 IF NOT EXISTS( SELECT PatientID from tblPatient WHERE  PatientId = @PatientId)    
  BEGIN    
  INSERT INTO tblPatient    
  (PatientId, EntryDate, ptLastName, ptFirstName, ptMiddleName ,ptDateOfBirth, ptSex, QSSCreatedByID , QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion, PTContactEmail )    
  VALUES     
  (@PatientId, GETDATE(), @LastName , @FirstName ,@MiddleName ,@DateOfBirth, @Sex,  @QSSCreatedByID , getDate(), @QSSLastUpdatedID, getDate(), 0 , @Email)    
 end    
 else    
 begin    
  Update tblPatient set ptLastName = @LastName, ptFirstName = @FirstName, ptMiddleName= @MiddleName  ,
  ptDateOfBirth = @DateOfBirth, ptSex = @Sex, QSSLastUpdateID = @QSSLastUpdatedID, QSSUpdateDate = GETDATE(), 
  QSSVersion = QSSVersion + 1    , PTContactEmail = @Email
  where patientid = @PatientId    
  END    
    
  END    
END
GO
/****** Object:  StoredProcedure [dbo].[spAddToAutoReleaseQueue]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Paul Antompietri
-- Create date: 3/19/2019
-- Description:	Save to tblAutoRelease; if testname included, do complete evaluation
--				of results to see if it falls into a range that is valid for auto release
--				and save to the queue if it is.
-- =============================================
CREATE PROCEDURE [dbo].[spAddToAutoReleaseQueue]
	@Accession varchar(100),
	@TestCode varchar(100),  
    @Result  varchar(100),
	@ReturnCode int output
AS
Set @ReturnCode = 0
BEGIN
	/** !!!!! below based on DataFunctions.AutoRelease !!!!! **/
	Select * into #tmpResultInfo from dbo.udf_GetDataForTestResult(@Accession, @TestCode, @Result) 
	Declare @UseAlpha bit
	Declare @AutoReleaseFlag bit
	Declare @AutoReleaseLowLimit varchar(100)
	Declare @AutoReleaseHighLimit varchar(100)
	Declare @blnAlphaMatch bit = 0

	DECLARE RESULTTESTCODE_CURSOR CURSOR FAST_FORWARD FOR 
	SELECT UseAlpha, AutoReleaseFlag, AutoReleaseLowLimit, AutoReleaseHighLimit
	FROM #tmpResultInfo
	OPEN RESULTTESTCODE_CURSOR

	FETCH NEXT FROM RESULTTESTCODE_CURSOR
	INTO @UseAlpha, @AutoReleaseFlag, @AutoReleaseLowLimit, @AutoReleaseHighLimit
	Print @UseAlpha
	Print @AutoReleaseFlag
	Print @AutoReleaseLowLimit
	Print @AutoReleaseHighLimit
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @AutoReleaseFlag = 1 begin 
			If isnull(@UseAlpha, 0) = 1 begin
				Select Decode, AutoReleaseFlag into #tmpDecodes from dbo.udf_GetResultedTestDecodes(@TestCode)
				Declare @Decode as varchar(100)
				Declare @DecodeAutoRelease as bit
				DECLARE DECODE_CURSOR CURSOR READ_ONLY FOR 
				Select Decode, AutoReleaseFlag from #tmpDecodes
				OPEN DECODE_CURSOR

				FETCH NEXT FROM DECODE_CURSOR
				INTO @Decode, @DecodeAutoRelease
				WHILE @@FETCH_STATUS = 0 
				BEGIN
					if @Result = @Decode and @ReturnCode = 0 begin
						--set blnAlphaMatch because if ANY decode matches, then we won't check the auto release limits in the next section
						set @blnAlphaMatch = 1
						if @DecodeAutoRelease = 1 Begin
							Insert into tblAutoRelease values(@Accession, getdate())
							Set @ReturnCode = 1
						End
					End
					FETCH NEXT FROM DECODE_CURSOR
					INTO @Decode, @DecodeAutoRelease
				END
				CLOSE DECODE_CURSOR
				DEALLOCATE DECODE_CURSOR
			end
			if @blnAlphaMatch = 0 begin
				if @AutoReleaseLowLimit <> '' and @AutoReleaseHighLimit <> '' begin
					--check that @Result is numeric (below only works for non-negative decimal numbers)
					if (@Result LIKE '%[0-9]%.%[0-9]%' OR @Result LIKE '.%[0-9]%' OR @Result LIKE '%[0-9]%.' OR @Result LIKE '%[0-9]%') 
				AND @Result NOT LIKE '%[^0-9.]%'
					Begin
						Declare @LowLimit decimal(11, 4) = Cast(isnull(@AutoReleaseLowLimit, 0) as decimal(11, 4))
						Declare @HiLimit decimal(11, 4) = Cast(isnull(@AutoReleaseHighLimit, 0) as decimal(11, 4))
						Declare @decResult decimal(11, 4) = Cast(@Result as decimal(11, 4))
						If (@LowLimit <> 0 Or @HiLimit <> 0)
						Begin
							If @decResult >= @LowLimit And @decResult <= @HiLimit Begin
								Insert into tblAutoRelease values(@Accession, getdate())
								Set @ReturnCode = 1
							End
						End
					End
				End
			End
		End
		FETCH NEXT FROM RESULTTESTCODE_CURSOR
		INTO @UseAlpha, @AutoReleaseFlag, @AutoReleaseLowLimit, @AutoReleaseHighLimit
	END
	CLOSE RESULTTESTCODE_CURSOR
	DEALLOCATE RESULTTESTCODE_CURSOR
	
END

GO
/****** Object:  StoredProcedure [dbo].[spAddToCallList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--=============================================
-- <1/24/2020><Gladson>customized critical flags for Client 1999 and 1575
-- <4/16/2020><Gladson>Add Abnormal results from test LD074 (2019 NOVEL CORONAVIRUS SARS-CoV-2 BY PCR) to critical call list
-- =============================================
CREATE PROCEDURE [dbo].[spAddToCallList] @id VARCHAR(50) 
AS 
  BEGIN 
      DECLARE @Accession VARCHAR(50) 
      DECLARE @OrderType VARCHAR(50) 
      DECLARE @ResultFlag VARCHAR(50) 
      DECLARE @status VARCHAR(50) 
      DECLARE @lastName VARCHAR(50) 
      DECLARE @firstName VARCHAR(50) 
      DECLARE @ClientCode VARCHAR(50) 
      DECLARE @ClientName VARCHAR(50) 
      DECLARE @PhysicanCode VARCHAR(50) 
      DECLARE @PhysicanName VARCHAR(50) 
      DECLARE @DOB AS DATETIME 
      DECLARE @Sex AS VARCHAR(50) 
      DECLARE @CollectionDate AS DATETIME 
      DECLARE @ServiceDate AS DATETIME 
      DECLARE @iCount AS INT, @TestName varchar(100);

      SELECT @OrderType = a.ordertype, 
             @Accession = a.accession, 
             @ClientCode = a.clientcode, 
             @PhysicanCode = a.physiciancode, 
             @ClientName = c.clientname, 
             @PhysicanName = phs.fullname, 
             @lastName = p.ptlastname, 
             @firstName = p.ptfirstname, 
             @DOB = p.ptdateofbirth, 
             @Sex = p.ptsex, 
             @CollectionDate = a.collectiondate, 
             @ServiceDate = a.receivedate, @TestName = ResultTest
      FROM   tblaccessions a (nolock) 
             INNER JOIN tblresultedtests rt (nolock) ON a.accession = rt.accession 
             INNER JOIN tblpatient p (nolock) ON a.patientid = p.patientid 
             INNER JOIN tblclients c (nolock) ON a.clientcode = c.clientcode 
             INNER JOIN tblphysicians phs (nolock) ON a.physiciancode = phs.physiciancode 
      WHERE  rt.id = @id;

      SELECT @ResultFlag = rt.resultflag 
      FROM   tblresultedtests rt (nolock) 
      WHERE  rt.id = @id;

      SELECT @status = CASE 
                         WHEN EXISTS (SELECT rt.status 
                                      FROM   dbo.tblresultedtests rt (nolock) 
                                      WHERE  rt.accession = @Accession 
                                             AND rt.status = 'Final') THEN 
                         'Final' 
                         ELSE 'Pending' 
                       END;

        SELECT @iCount = Count(@accession) 
        FROM   tblcallsheet 
        WHERE  accession = @accession;

        IF @iCount < 1 AND @status = 'Final'
        BEGIN 
			IF @ClientCode = '1575' OR @ClientCode = '1999'
            BEGIN
				IF @ResultFlag = 'C' OR @ResultFlag = 'Critical Low' OR @ResultFlag = 'Critical High'
				 OR @ResultFlag = 'High' OR @ResultFlag = 'HH' OR @ResultFlag = 'H' OR @ResultFlag = 'Low' OR @ResultFlag = 'LL' OR @ResultFlag = 'L'
				 OR @ResultFlag = 'Positive' OR @ResultFlag = 'Abnormal' OR @ResultFlag = 'A'
				BEGIN
					INSERT INTO tblcallsheet (accession, lastname, firstname, clientcode, clientname, physiciancode, physicianname, dob, sex,
					collectiondate, servicedate, status)
					VALUES (@accession, @lastname, @firstName, @ClientCode, @ClientName, @PhysicanCode, @PhysicanName, @DOB, @Sex, 
					@CollectionDate, @ServiceDate, @status);
                END
			END
			ELSE IF @ResultFlag = 'C' OR @ResultFlag = 'Critical Low' OR @ResultFlag = 'Critical High'
				INSERT INTO tblcallsheet (accession, lastname, firstname, clientcode, clientname, physiciancode, physicianname, dob, sex,
					collectiondate, servicedate, status)
					VALUES (@accession, @lastname, @firstName, @ClientCode, @ClientName, @PhysicanCode, @PhysicanName, @DOB, @Sex, 
					@CollectionDate, @ServiceDate, @status);
			ELSE IF (@Testname = 'SARS' OR @TestName = 'LD301') AND (@ResultFlag = 'A' OR @ResultFlag = 'Abnormal' OR @ResultFlag = 'Positive' OR @ResultFlag = 'P' OR @ResultFlag = 'Critical High' OR @ResultFlag = 'CH')	
				INSERT INTO tblcallsheet (accession, lastname, firstname, clientcode, clientname, physiciancode, physicianname, dob, sex,
					collectiondate, servicedate, status)
					VALUES (@accession, @lastname, @firstName, @ClientCode, @ClientName, @PhysicanCode, @PhysicanName, @DOB, @Sex, 
					@CollectionDate, @ServiceDate, @status);
        END
  END
GO
/****** Object:  StoredProcedure [dbo].[spAddToCallListDOH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
--=============================================    
-- <1/24/2020><Gladson><customized critical flags for Client 1999 and 1575    
-- =============================================    
CREATE PROCEDURE [dbo].[spAddToCallListDOH] @id VARCHAR(50)     
AS     
  BEGIN     
      DECLARE @Accession VARCHAR(50)     
      DECLARE @OrderType VARCHAR(50)     
      DECLARE @ResultFlag VARCHAR(50)     
      DECLARE @status VARCHAR(50)     
      DECLARE @lastName VARCHAR(50)     
      DECLARE @firstName VARCHAR(50)     
      DECLARE @ClientCode VARCHAR(50)     
      DECLARE @ClientName VARCHAR(50)     
      DECLARE @PhysicanCode VARCHAR(50)     
      DECLARE @PhysicanName VARCHAR(50)     
      DECLARE @DOB AS DATETIME     
      DECLARE @Sex AS VARCHAR(50)     
      DECLARE @CollectionDate AS DATETIME     
      DECLARE @ServiceDate AS DATETIME     
      DECLARE @iCount AS INT    
   declare @Resulttest as varchar(50)   
    
      SELECT @OrderType = a.ordertype,     
             @Accession = a.accession,     
             @ClientCode = a.clientcode,     
             @PhysicanCode = a.physiciancode,     
             @ClientName = c.clientname,     
             @PhysicanName = phs.fullname,     
             @lastName = p.ptlastname,     
             @firstName = p.ptfirstname,     
             @DOB = p.ptdateofbirth,     
             @Sex = p.ptsex,     
             @CollectionDate = a.collectiondate,     
             @ServiceDate = a.receivedate     
      FROM   tblaccessions a (nolock)     
             INNER JOIN tblresultedtests rt (nolock) ON a.accession = rt.accession     
             INNER JOIN tblpatient p (nolock) ON a.patientid = p.patientid     
             INNER JOIN tblclients c (nolock) ON a.clientcode = c.clientcode     
             INNER JOIN tblphysicians phs (nolock) ON a.physiciancode = phs.physiciancode     
      WHERE  rt.id = @id;    
    
      SELECT @ResultFlag = rt.resultflag     
      FROM   tblresultedtests rt (nolock)     
      WHERE  rt.id = @id;   
    SELECT @Resulttest = rt.ResultTest      
      FROM   tblresultedtests rt (nolock)     
      WHERE  rt.id = @id;     
    
      SELECT @status = CASE     
                         WHEN EXISTS (SELECT rt.status     
                                      FROM   dbo.tblresultedtests rt (nolock)     
                                      WHERE  rt.accession = @Accession     
                                             AND rt.status = 'Final') THEN     
                         'Final'     
                         ELSE 'Pending'     
                       END;    
    
        SELECT @iCount = Count(@accession)     
        FROM   [tblCallSheetDOH]     
        WHERE  accession = @accession;    
    
        IF @iCount < 1 AND @status = 'Final'    
        BEGIN     
 if @Resulttest='SARS' or @Resulttest='SRC'  or @Resulttest='COM1' or @Resulttest='COM2' 
    begin  
     INSERT INTO [tblCallSheetDOH]     
                                    (accession,     
                                        lastname,     
                                        firstname,     
                                        clientcode,     
                                        clientname,     
                                        physiciancode,     
                                        physicianname,     
                                        dob,     
                                        sex,     
                                        collectiondate,     
                                        servicedate,     
                                        status)     
                        VALUES     (@accession,     
                                    @lastname,     
                                    @firstName,     
                                    @ClientCode,     
                                    @ClientName,     
                                    @PhysicanCode,     
                                    @PhysicanName,     
                                    @DOB,     
                                    @Sex,     
         @CollectionDate,     
                                 @ServiceDate,     
                                    @status)     
                END    
   END    
    
 end  
GO
/****** Object:  StoredProcedure [dbo].[spAddToDiagnosticCodeFavorites]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Batch submitted through debugger: SQLQuery1.sql|7|0|C:\Documents and Settings\Administrator\Local Settings\Temp\~vsF0D.sql
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spAddToDiagnosticCodeFavorites] 
	-- Add the parameters for the stored procedure here
	@LabCode varchar(20),
	@ClientCode varchar(20),
	@PhysicianCode varchar(20),
	@DiagnosticCode varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

  declare @icount int
	select @icount = count(*) from tblDiagnosticCodesFavorites
		where LabCode = @LabCode
		and ClientCode = @ClientCode
		and RequestingPhysicianCode = @PhysicianCode
		

	if (@icount > 29)
		delete from tblDiagnosticCodesFavorites
			where id = 
			(select top 1 id from tblDiagnosticCodesFavorites
			where LabCode = @LabCode
			and ClientCode = @ClientCode
			and RequestingPhysicianCode = @PhysicianCode
			order by lastused asc)

	select @icount = count(*) from tblDiagnosticCodesFavorites
		where LabCode = @LabCode
		and ClientCode = @ClientCode
		and RequestingPhysicianCode = @PhysicianCode
		and DiagnosticCode = @DiagnosticCode

	if @icount > 0 
		update tblDiagnosticCodesFavorites
		set lastused = getdate()
		where LabCode = @LabCode
			and ClientCode = @ClientCode
			and RequestingPhysicianCode = @PhysicianCode
			and DiagnosticCode = @DiagnosticCode
	else
		insert into tblDiagnosticCodesFavorites
			(labcode, clientcode, RequestingPhysicianCode, DiagnosticCode, LastUsed)
			values
			(@labcode, @clientcode, @PhysicianCode, @DiagnosticCode, getdate())
END
GO
/****** Object:  StoredProcedure [dbo].[spAddToPatientEmailPortalQueue]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE PROCEDURE [dbo].[spAddToPatientEmailPortalQueue]        
        
AS        
        
BEGIN        
--truncate table tblCOVIDPatientEmailPortal
Insert into tblCOVIDPatientEmailPortal (Accession, PatientID, PatientLastName, PatientFirstName, DateOfBirth, EmailAddress, PhoneNumber, PDFGenerated, EmailSent, CollectionDate, OrderDate, ReportDate, NeedSync)
select distinct a.Accession, a.PatientID, pat.ptLastName, pat.ptFirstName, pat.ptDateOfBirth, pat.PTContactEmail, replace(replace(replace(replace(pat.PTContactCellPhone, ')', ''), '(', ''), '-', ''), ' ', ''), 'False', 'False', a.collectiondate, a.DateCreated, 
ara.QSSFinalizedDate, 'True'
from tblAccessions a
inner join tblArchiveReviewAccession ara
on ara.Accession = a.Accession
inner join tblPatient pat
on pat.PatientId = a.patientid
inner join tblResultedTests rt
on rt.Accession = a.accession
where ara.QSSFinalizedDate is not null
and rt.ResultTest in (select testcode from tblCOVIDTests)
and a.accession  not in (select Accession from tblCOVIDPatientEmailPortal)
and (pat.PTContactEmail <> '')-- or pat.PTContactCellPhone <> '')--phone texting wont work if we don't have the cell provider


 --IF EXISTS (select rt.Accession from tblResultedTests rt        
 ----inner join tblResultedTestsDefinitions rtd         
 ----on rtd.TestCode = rt.ResultTest and rtd.Version = rt.version        
 -- where rt.Accession = @Accession       
 -- and rt.ResultTest in (select testcode from tblCOVIDTests))      
 -- --and rtd.ExternalName like '%covid%')        
 -- BEGIN        
 --  DECLARE @PatientEmail as varchar(200) = ''        
 --  , @DOB as datetime = NULL         
 --  SELECT @PatientEmail = p.ptEmail, @DOB = p.ptDateOfBirth from tblpatient p inner join tblAccessions a on a.PatientID = p.PatientId        
 --  where a.Accession = @Accession        
 --  if @PatientEmail <> '' and @DOB is not null        
 --  BEGIN        
      
 --  --for testing:      
 -- -- set @PatientEmail = 'david@orion.healthcare'      
      
 --   if exists(select Accession from tblCOVIDPatientEmailPortal where Accession = @Accession)        
 --   BEGIN        
 --   UPDATE tblCOVIDPatientEmailPortal        
 --    SET EmailAddress = @PatientEmail        
 --   , DateOfBirth = @DOB         
 --   , RandomizedKey = NULL        
 --   , PDFGenerated  = 'False'        
 --   , EmailSent = 'False'        
 --   , NeedSync = 'True'        
 --   WHERE Accession = @Accession        
 --   END        
 --   ELSE        
 --   BEGIN        
 --   INSERT INTO tblCOVIDPatientEmailPortal([Accession], [DateOfBirth], [EmailAddress], [RandomizedKey], [PDFGenerated], [EmailSent], [NeedSync])        
 --   Values(@Accession, @DOB, @PatientEmail, NULL, 'False', 'False', 'True')        
 --   END        
 -- END        
 --END        
END           
	 
	 
GO
/****** Object:  StoredProcedure [dbo].[spAddToPatientEmailPortalQueueByAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE PROCEDURE [dbo].[spAddToPatientEmailPortalQueueByAccession]        
        @Accession varchar(100)
AS        
        
BEGIN        
 IF EXISTS (select rt.Accession 
 from tblResultedTests rt      
 inner join tblAccessions a
 on a.Accession = rt.Accession
 inner join tblPatient p
 on p.PatientId = a.PatientID      
 where a.Accession = @Accession     
 and ISNULL(p.PTContactEmail, '') <> ''      
 and rt.ResultTest in (select testcode from tblCOVIDTests))     
 BEGIN    

	declare @DOB datetime, @PatientID varchar(100), @PatientLastName varchar(100), @PatientFirstName varchar(100), @EmailAddress varchar(200), @PhoneNumber varchar(20), @CollctionDate datetime,
	@OrderDate datetime, @ReportDate datetime
	SELECT @CollctionDate = a.CollectionDate, @OrderDate = a.DateCreated, @ReportDate = ara.QSSFinalizedDate, @PhoneNumber = replace(replace(replace(replace(p.PTContactCellPhone, ')', ''), '(', ''), '-', ''), ' ', ''),
	@DOB = p.ptdateofbirth,
	@EmailAddress = p.PTContactEmail, 
	--@EmailAddress = 'izimet@labhealth.com',

	@PatientFirstName = p.ptFirstName, @PatientLastName = p.ptLastName, @PatientID = p.PatientId
	from tblAccessions a
	inner join tblPatient p
	on p.PatientId = a.PatientID
	inner join tblArchiveReviewAccession ara
	on ara.Accession = a.Accession
	where a.Accession = @Accession
	if exists(select accession from tblCOVIDPatientEmailPortal where Accession = @Accession)
	begin
		update tblCOVIDPatientEmailPortal
		SET EmailAddress = @EmailAddress, DateOfBirth = @DOB, PatientFirstName = @PatientFirstName, PatientLastName = @PatientLastName, PhoneNumber = @PhoneNumber, CollectionDate = @CollctionDate,
		PatientID = @PatientID, ReportDate = @ReportDate, NeedSync = 'True', PDFGenerated = 'False', EmailSent = NULL
		where Accession = @Accession
	end
	else
	begin
		Insert into tblCOVIDPatientEmailPortal ( Accession, PatientID, PatientLastName, PatientFirstName, DateOfBirth, EmailAddress, PhoneNumber, CollectionDate, 
		OrderDate, ReportDate, PDFGenerated, EmailSent, NeedSync)
		Values (@Accession, @PatientID, @PatientLastName, @PatientFirstName, @DOB, @EmailAddress, @PhoneNumber, @CollctionDate, 
		@OrderDate, @ReportDate, 'False', NULL, 'True')
	end
END
    
END           
GO
/****** Object:  StoredProcedure [dbo].[spAddToResultsReview]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spAddToResultsReview]
	@Accession as varchar(100),
	@QSSLastUpdatedByID as varchar(20)

AS
BEGIN

	declare @iCount as int
	
	select @iCount = count(Accession) from tblReviewAccession where Accession = @Accession
	
	if @iCount > 0
	begin
		update tblReviewAccession set Accession = @Accession, QSSLastUpdatedByID = @QSSLastUpdatedByID, QSSLastUpdatedDate=getdate()
		where Accession = @Accession
	end
	else
	begin
		insert into tblReviewAccession(Accession, QSSLastUpdatedByID, QSSLastUpdatedDate)
			values(@Accession, @QSSLastUpdatedByID, getdate())
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spAddToTestCodeFavorites]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spAddToTestCodeFavorites] 
	-- Add the parameters for the stored procedure here
	@LabCode varchar(20),
	@ClientCode varchar(20),
	@PhysicianCode varchar(20),
	@TestCode varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

  declare @icount int
	select @icount = count(*) from tblTestCodesFavorites
		where LabCode = @LabCode
		and ClientCode = @ClientCode
		and RequestingPhysicianCode = @PhysicianCode
		

	if (@icount > 29)
		delete from tblTestCodesFavorites
			where id = 
			(select top 1 id from tblTestCodesFavorites
			where LabCode = @LabCode
			and ClientCode = @ClientCode
			and RequestingPhysicianCode = @PhysicianCode
			order by lastused asc)

	select @icount = count(*) from tblTestCodesFavorites
		where LabCode = @LabCode
		and ClientCode = @ClientCode
		and RequestingPhysicianCode = @PhysicianCode
		and TestCode = @TestCode

	if @icount > 0 
		update tblTestCodesFavorites
		set lastused = getdate()
		where LabCode = @LabCode
			and ClientCode = @ClientCode
			and RequestingPhysicianCode = @PhysicianCode
			and TestCode = @TestCode
	else
		insert into tblTestCodesFavorites
			(labcode, clientcode, RequestingPhysicianCode, TestCode, LastUsed)
			values
			(@labcode, @clientcode, @PhysicianCode, @TestCode, getdate())
END
GO
/****** Object:  StoredProcedure [dbo].[spAddUnallocatedToBill]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spAddUnallocatedToBill] 	
	@Accession varchar(50),
	@BTCode varchar(100) = '',
	@CPTCode varchar(100) = 'Unallocated',   
	@QSSLastUpdatedID varchar(20)
AS
BEGIN

	Declare @NextBillDate datetime
	--Add Unallocated to tblBill if it's not already there
	IF NOT EXISTS (SELECT TOP 1 Accession from tblBill where Accession = @Accession and CPTCode = 'Unallocated')
	begin
		if @BTCode = ''
		begin
				select @BTCode = CurrentBillType from tblBillAccessions where Accession = @Accession
		end
		select @NextBillDate = NextBillDate from tblBill where Accession = @Accession and NextBillDate is not null
		INSERT INTO tblBill
		(Accession, BTCode, CPTCode, OrderedTestCode, NextBillDate, FeeDescription, TotalFeeAmt, Units, ExpAmt, Modifier, [Status], 
		DiscountPercentage, ICD9Code, BillableFlag, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion, GroupFlag)
		values
		(@Accession, @BTCode, @CPTCode, 'Unallocated', @NextBillDate, 'Unallocated', 0.00, 0, 0.00, '', 'BILL', 
		0, '', 'True', @QSSLastUpdatedID, GetDate(), @QSSLastUpdatedID, GetDate(), 0, 0)
	end

END
GO
/****** Object:  StoredProcedure [dbo].[spAddUserID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spAddUserID] 

@UserID varchar (20),
--@Password varchar(20),
@UserName varchar(100),
@UserLastName varchar(100),
@RoleType varchar(50),
@AdminFlag bit ,
@CanAddUsers bit ,
@TempPassword varchar(100),
@BillType varchar(50),
@CreatedBy varchar(20),
@LastUpdatedBy varchar(20)


AS
BEGIN


INSERT INTO tblUsersID( UserID, [Password], UserName,UserLastName, RoleType, TempPassword ,
 ActiveFlag, AdminFlag,CanAddUsers, BillTypeDefault, CreatedDate, CreatedBy, LastUpdatedDate, LastUpdatedBy)
VALUES (@UserID,'', @UserName,@UserLastName,@RoleType, @TempPassword ,
 1, @AdminFlag, @CanAddUsers, @BillType, GETDATE(), @CreatedBy,GETDATE(), @LastUpdatedBy)

	
 
	
END
GO
/****** Object:  StoredProcedure [dbo].[spAddUserLogin]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Batch submitted through debugger: SQLQuery6.sql|105|0|C:\Documents and Settings\Administrator\Local Settings\Temp\~vs18C9.sql
-- =============================================
-- Author:		<Author,,HF>
-- Create date: <Create 11/12/2010>
-- Description:	<Description Procedure to log user activity>
-- =============================================
CREATE PROCEDURE [dbo].[spAddUserLogin] 
	-- Add the parameters for the stored procedure here
	
	@UserID varchar(20),
	@IPAddress varchar(100),
	@LoginTimeStamp datetime, 
	@UserLoginTicket int output
AS
BEGIN
	
	SET NOCOUNT ON;
 
	
	INSERT into tblUserLogins
			( UserID, IPAddress, LoginTimeStamp)
	VALUES	( @UserID, @IPAddress, @LoginTimeStamp)
	
	SELECT @UserLoginTicket = SCOPE_IDENTITY() 
END
GO
/****** Object:  StoredProcedure [dbo].[spAdjustClientBillBalance]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spAdjustClientBillBalance]
	@Accession varchar(100),
	@BillAmount decimal(18,2)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	Update tblBill
	Set TotalFeeAmt = TotalFeeAmt - @BillAmount
	Where tblBill.Accession = @Accession
	
END
GO
/****** Object:  StoredProcedure [dbo].[spArchiveReceivingPool]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		IMZ
-- Create date: 01/27/2014
-- Description:	This procedure archives the clint orders from tblReceivingPool
-- =============================================
CREATE PROCEDURE [dbo].[spArchiveReceivingPool]
	@PreAccession as varchar(50)	
AS
BEGIN
SET NOCOUNT ON
INSERT INTO tblReceivingPoolArchive
  (				PreAccession,
				OrderDate,
                CollectionDate,
                PatientID,
                LastName,
                FirstName,
                MiddleName,
                Address,
                City,
                State,
                Zip,
                Phone,
                Sex,
                DOB,
                ClinicalInfo,
                Fasting,
                SSN,
                ClientCode,
                OrderedTests,
                DiagnosisCodes,
                MedicationCodes,
                MedicationDose,
                MedicationLastTaken,
                PhysicianCode,
                OrderType,
                BillTo,
                SpecimenReceived,
                WebUserID,
                PrimaryInuranceCode,
                PrimaryInuranceID,
                PrimaryInuranceFirstName,
                PrimaryInuranceLastName,
                PrimaryInuranceMiddleName,
                PrimaryInuranceAddress,
                PrimaryInuranceCity,
                PrimaryInuranceState,
                PrimaryInuranceZip,
                PrimaryInurancePhone,
                PrimaryInuranceSex,
                PrimaryInuranceDOB,
                PrimaryInuranceGroupNumber,
                PrimaryInuranceRelation,
                SecondaryInuranceCode,
                SecondaryInuranceID,
                SecondaryInuranceFirstName,
                SecondaryInuranceLastName,
                SecondaryInuranceMiddleName,
                SecondaryInuranceAddress,
                SecondaryInuranceCity,
                SecondaryInuranceState,
                SecondaryInuranceZip,
                SecondaryInurancePhone,
                SecondaryInuranceSex,
                SecondaryInuranceDOB,
                SecondaryInuranceGroupNumber,
                SecondaryInuranceRelation,
                MiscTests,
                MiscCodes,
                POCTests,
                POCResults,
                Interface,
                QSSUpdateDate,
                ConfirmAllTests,
                ConfirmAllMeds,
                ConfirmConsistancy
	)
    SELECT 
				PreAccession,
				OrderDate,
                CollectionDate,
                PatientID,
                LastName,
                FirstName,
                MiddleName,
                Address,
                City,
                State,
                Zip,
                Phone,
                Sex,
                DOB,
                ClinicalInfo,
                Fasting,
                SSN,
                ClientCode,
                OrderedTests,
                DiagnosisCodes,
                MedicationCodes,
                MedicationDose,
                MedicationLastTaken,
                PhysicianCode,
                OrderType,
                BillTo,
                SpecimenReceived,
                WebUserID,
                PrimaryInuranceCode,
                PrimaryInuranceID,
                PrimaryInuranceFirstName,
                PrimaryInuranceLastName,
                PrimaryInuranceMiddleName,
                PrimaryInuranceAddress,
                PrimaryInuranceCity,
                PrimaryInuranceState,
                PrimaryInuranceZip,
                PrimaryInurancePhone,
                PrimaryInuranceSex,
                PrimaryInuranceDOB,
                PrimaryInuranceGroupNumber,
                PrimaryInuranceRelation,
                SecondaryInuranceCode,
                SecondaryInuranceID,
                SecondaryInuranceFirstName,
                SecondaryInuranceLastName,
                SecondaryInuranceMiddleName,
                SecondaryInuranceAddress,
                SecondaryInuranceCity,
                SecondaryInuranceState,
                SecondaryInuranceZip,
                SecondaryInurancePhone,
                SecondaryInuranceSex,
                SecondaryInuranceDOB,
                SecondaryInuranceGroupNumber,
                SecondaryInuranceRelation,
                MiscTests,
                MiscCodes,
                POCTests,
                POCResults,
                Interface,
                QSSUpdateDate,
                ConfirmAllTests,
                ConfirmAllMeds,
                ConfirmConsistancy
	FROM tblReceivingPool 
	WHERE PreAccession = @PreAccession
	DELETE FROM tblReceivingPool WHERE PreAccession = @PreAccession
	END
GO
/****** Object:  StoredProcedure [dbo].[spArchiveReview]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--PA 5/21/2020 - added @blnNoDeleteReviewAccession for auto-release
--PA 5/28/2020 - revised @PendingCount to only look at ApprovedDate: finals not approved will also count
--PA 6/22/2020 - back to using the status for @PendingCount
CREATE PROCEDURE [dbo].[spArchiveReview]          
 -- Add the parameters for the stored procedure here          
 @Accession varchar(100),          
 @QSSLastUpdatedByID varchar(20),
 @blnNoDeleteReviewAccession bit          
         
 AS          
BEGIN          
 -- SET NOCOUNT ON added to prevent extra result sets from          
 -- interfering with SELECT statements.          
 SET NOCOUNT ON;          
   Declare @PendingCount integer  
   Declare @ExistFinalizeDate as datetime  
   Declare @NewFinalizeDate as datetime  
   Set @PendingCount=(select count(*) from tblresultedtests where accession=@Accession 
		and (status='pending' or status='hold'))--ApprovedDate is null)--(status='pending' or status='hold')  )
   set @ExistFinalizeDate = (select QSSFinalizedDate from tblArchiveReviewAccession  where accession=@Accession )              
   set @NewFinalizeDate=@ExistFinalizeDate  
  
 If @PendingCount=0  
  BEGIN   
   If @ExistFinalizeDate is null or @ExistFinalizeDate=''  
    BEGIN  
     SET @NewFinalizeDate=getDate()  
    END  
   ELSE  
    BEGIN  
     SET @NewFinalizeDate=@ExistFinalizeDate  
    END  
  End  
          
    -- Insert statements for procedure here          
 IF Exists(Select Accession from tblArchiveReviewAccession where Accession =@Accession)          
 Begin          
	IF @PendingCount = 0       
   Update tblArchiveReviewAccession   
   set   
		QSSFinalizedDate= @NewFinalizeDate,     
		QSSFinalizedByID=@QSSLastUpdatedByID            
		Where Accession=@Accession;
		
	--Insert into tblArchiveReviewAmendedAccessions([Accession],[ArchivedDate],[QSSLastUpdatedByID])   
	--	values(@Accession, GETDATE(), @QSSLastUpdatedByID);

 End          
 Else          
 Begin          
	IF @PendingCount = 0       
		Insert into tblArchiveReviewAccession(Accession,ArchivedDate,QSSLastUpdatedByID, QSSFinalizedDate, QSSFinalizedByID) 
		values( @Accession, GETDATE(), @QSSLastUpdatedByID, @NewFinalizeDate, @QSSLastUpdatedByID);
	ELSE
		Insert into tblArchiveReviewAccession(Accession,ArchivedDate,QSSLastUpdatedByID)  values(@Accession, GETDATE(), @QSSLastUpdatedByID);
  
	--Insert into tblArchiveReviewAmendedAccessions([Accession],[ArchivedDate],[QSSLastUpdatedByID])   values(@Accession, GETDATE(), @QSSLastUpdatedByID)  
 End        
 Insert into tblArchiveReviewAccessionHistory (Accession, ArchivedDate, QSSLastUpdatedByID)      
            values(@Accession, getdate(), @QSSLastUpdatedByID)       
 if @blnNoDeleteReviewAccession = 0 Delete from tblReviewAccession where Accession =@Accession          
        
		--For Patient Portal
		if @PendingCount = 0
		begin
			exec spAddToPatientEmailPortalQueueByAccession @Accession
		end

END 

GO
/****** Object:  StoredProcedure [dbo].[spArchiveTempRemitFile]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spArchiveTempRemitFile]
		
AS
BEGIN
INSERT INTO dbo.tblBillingTempRemitArchive
  (Accession, FileName, ptLastName, ptFirstName, CheckNumber, CheckDate, CPT_Code, Units, CPT_Charge, CPT_Paid, AdjustmentCode, AdjustmentReason,
  AdjustmentAmount, ICN, Payer, QSSCreatedByID, QSSCreatedDate, ArchiveDate, Modifier, PayerClaimNumber, AllowedAmount)
SELECT Accession, FileName, ptLastName, ptFirstName, CheckNumber, CheckDate, CPT_Code, Units, CPT_Charge, CPT_Paid, AdjustmentCode, AdjustmentReason,
  AdjustmentAmount, ICN, Payer, QSSCreatedByID, QSSCreatedDate, getdate(), Modifier, PayerClaimNumber, AllowedAmount
  FROM dbo.tblBillingTempRemit
 
 --Clear Table
 delete from tblBillingTempRemit
END



GO
/****** Object:  StoredProcedure [dbo].[spAuditAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		HF
-- Create date: 08/10/2013
-- Description:	This procedure audits every insert update, delete of an accession
-- =============================================
CREATE PROCEDURE [dbo].[spAuditAccession]
	@Accession as varchar(50),	
	@QSSVersionNumber as int  = NULL  ,
	@AuditType as char(1)

	
AS
BEGIN
SET NOCOUNT ON
INSERT INTO tblAuditAccessions
  (
    [Accession] ,
	[PatientID] ,
	[PreAccession] ,
	[ClientCode] ,
	[PhysicianCode] ,
	[CollectionDate] ,
	[OrderDate] ,
	[ReceiveDate] ,
	[DateCreated] ,
	[FinalReportDate] ,
	[OrderType],
	[OrderedTests],
	[MedicationsDataXML] ,
	[DiagnosisDataXML] ,
	[SpecimenDataXML] ,
	[PrimaryInsuranceID] ,
	[PrimaryPatRelationtoIns] ,
	[PrimaryInsuredID] ,
	[SecondaryInsuranceID] ,
	[SecondaryPatRelationtoIns] ,
	[SecondaryInsuredID] ,
	[TertiaryInsuranceID] ,
	[TertiaryPatRelationtoIns] ,
	[TertiaryInsuredID] ,
	[PatientStatus] ,
	[ConditionRelatedTo] ,
	[AdjusterName] ,
	[EmployerName] ,
	[School] ,
	[SymptomAccidentDate] ,
	[SimilarSameDate] ,
	[InternalComment] ,
	[ReportComment] ,
	[ProblemSpec] ,
	[CurrentBillType] ,
	[CurrentBillTo] ,
	[BillingMessage] ,
	[ManualSuspension] ,
	[SiteID] ,
	[QSSCreatedByID] ,
	[QSSCreatedDate] ,
	[QSSVersion] ,
	[AuditType]
	)
    SELECT 
    [Accession] ,
	[PatientID] ,
	[PreAccession] ,
	[ClientCode] ,
	[PhysicianCode] ,
	[CollectionDate] ,
	[OrderDate] ,
	[ReceiveDate] ,
	[DateCreated] ,
	[FinalReportDate] ,
	[OrderType],
	[OrderedTests],
	[MedicationsDataXML] ,
	[DiagnosisDataXML] ,
	[SpecimenDataXML] ,
	[PrimaryInsuranceID] ,
	[PrimaryPatRelationtoIns] ,
	[PrimaryInsuredID] ,
	[SecondaryInsuranceID] ,
	[SecondaryPatRelationtoIns] ,
	[SecondaryInsuredID] ,
	[TertiaryInsuranceID] ,
	[TertiaryPatRelationtoIns] ,
	[TertiaryInsuredID] ,
	[PatientStatus] ,
	[ConditionRelatedTo] ,
	[AdjusterName] ,
	[EmployerName] ,
	[School] ,
	[SymptomAccidentDate] ,
	[SimilarSameDate] ,
	[InternalComment] ,
	[ReportComment] ,
	[ProblemSpec] ,
	[CurrentBillType] ,
	[CurrentBillTo] ,
	[BillingMessage] ,
	[ManualSuspension] ,
	[SiteID] ,
	[QSSLastUpdateID] ,
	[QSSUpdateDate] ,
	[QSSVersion] ,
	@AuditType 
	FROM tblAccessions 
	WHERE Accession = @Accession
	AND QSSVersion = @QSSVersionNumber
END
GO
/****** Object:  StoredProcedure [dbo].[spAuditCytologyCases]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spAuditCytologyCases]                      
 @CaseNumber as varchar(200),                     
 @Accession as varchar(100),                      
 @TestCode as varchar(100),                      
 @Cytologist as varchar(100),                      
 @Status as varchar(100),                     
 @Notes as varchar(200),                   
 @Signed as bit,                    
 --@isAbnormal as bit,                    
 @StainsDataXML xml,                    
 @DiagnosisDataXML xml,                      
 @CPTDataXML xml,                    
 @UserID varchar(10),                      
 @AuditType as char(1),              
  @Jars varchar(10),                      
 @Cassettes varchar(10),               
 @Slides varchar(10)                     
                      
                      
AS                      
BEGIN                      
SET NOCOUNT ON                      
                      
                      
INSERT INTO tblAuditCytologyCases                      
  ([CaseNumber]                    
      ,[Accession]                    
      ,[TestCode]                    
      ,Cytologist                     
      ,[Status]                    
   ,[Notes]                  
      ,[Signed]                    
      --,[isAbnormal]                    
   ,[StainsDataXML]                    
      ,[DiagnosisDataXML]                    
      ,[CPTDataXML]                    
      ,[QSSCreatedByID]                    
      ,[AuditType],Jars,Slides,Cassettes )                                
                            
Values(@CaseNumber                    
      ,@Accession                    
      ,@TestCode                    
      ,@Cytologist                    
      ,@Status                   
   ,@Notes                   
      ,@Signed                    
      --,@isAbnormal                    
   ,@StainsDataXML                    
      ,@DiagnosisDataXML                    
      ,@CPTDataXML                    
      ,@UserID                    
      ,@AuditType,@Jars,@Slides,@Cassettes)                  
                      
                      
END 
GO
/****** Object:  StoredProcedure [dbo].[spAuditMicroTest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Johnny Croyle
-- Create date: 01/18/2016
-- Description:	This procedure audits every insert update, delete of an Micro Tests
-- =============================================
CREATE PROCEDURE [dbo].[spAuditMicroTest]
	@Accession as varchar(100),
	@TestCode as varchar(100),
	@AuditType as char(1)	


AS
BEGIN
SET NOCOUNT ON


INSERT INTO tblAuditMicroTests
		([Accession]
      ,[PatientID]
      ,[ClientCode]
      ,[PhysicianCode]
      ,[CollectionDate]
      ,[TestCode]
      ,[TestDescription]
      ,[SpecimenSource]
      ,[Comment]
      ,[Status]
      ,[QSSCreatedByID]
      ,[QSSCreatedDate]
      ,[QSSLastUpdateID]
      ,[QSSUpdateDate]
      ,[DateChanged]
      ,[AuditType])
      
SELECT [Accession]
      ,[PatientID]
      ,[ClientCode]
      ,[PhysicianCode]
      ,[CollectionDate]
      ,[TestCode]
      ,[TestDescription]
      ,[SpecimenSource]
      ,[Comment]
      ,[Status]
      ,[QSSCreatedByID]
      ,[QSSCreatedDate]
      ,[QSSLastUpdateID]
      ,[QSSUpdateDate]
      ,GetDate()
      ,@AuditType
  FROM tblMicroTests
  where  Accession = @Accession
  and TestCode = @Testcode


END
GO
/****** Object:  StoredProcedure [dbo].[spAuditMicroTestAntibiotics]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Johnny Croyle
-- Create date: 01/18/2016
-- Description:	This procedure audits every insert update, delete of an Micro Tests
-- =============================================
CREATE PROCEDURE [dbo].[spAuditMicroTestAntibiotics]
	@ID as varchar(100),
	@AuditType as char(1)	


AS
BEGIN
SET NOCOUNT ON


INSERT INTO tblAuditMicroTestAntibiotics
		([Accession]
      ,[MicroTestOrganismID]
      ,[AntibioticName]
      ,[Sensitivity]
      ,[MICValue]
      ,[Comment]
      ,[QSSCreatedByID]
      ,[QSSCreatedDate]
      ,[QSSLastUpdateID]
      ,[QSSUpdateDate]
      ,[DateChanged]
      ,[AuditType])
      
SELECT [Accession]
      ,[MicroTestOrganismID]
      ,[AntibioticName]
      ,[Sensitivity]
      ,[MICValue]
      ,[Comment]
      ,[QSSCreatedByID]
      ,[QSSCreatedDate]
      ,[QSSLastUpdateID]
      ,[QSSUpdateDate]
      ,GetDate()
      ,@AuditType
  FROM tblMicroTestAntibiotics
  where  ID = @ID

END
GO
/****** Object:  StoredProcedure [dbo].[spAuditMicroTestOrganisms]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Johnny Croyle
-- Create date: 01/18/2016
-- Description:	This procedure audits every insert update, delete of an Micro Tests
-- =============================================
CREATE PROCEDURE [dbo].[spAuditMicroTestOrganisms]
	@ID as varchar(100),
	@AuditType as char(1)	


AS
BEGIN
SET NOCOUNT ON


INSERT INTO tblAuditMicroTestOrganisms
		([Accession]
      ,[MicroTestID]
      ,[MicroTestOrganismID]
      ,[OrganismName]
      ,[ColonyCount]
      ,[GramStain]
      ,[Comment]
      ,[QSSCreatedByID]
      ,[QSSCreatedDate]
      ,[QSSLastUpdateID]
      ,[QSSUpdateDate]
      ,[DateChanged]
      ,[AuditType])
      
SELECT [Accession]
      ,[MicroTestID]
      ,[MicroTestOrganismID]
      ,[OrganismName]
      ,[ColonyCount]
      ,[GramStain]
      ,[Comment]
      ,[QSSCreatedByID]
      ,[QSSCreatedDate]
      ,[QSSLastUpdateID]
      ,[QSSUpdateDate]
      ,GetDate()
      ,@AuditType
  FROM tblMicroTestOrganisms
  where  ID = @ID

END
GO
/****** Object:  StoredProcedure [dbo].[spAuditPathologyCases]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spAuditPathologyCases]              
 @CaseNumber as varchar(200),             
 @Accession as varchar(100),              
 @TestCode as varchar(100),              
 @Pathologist as varchar(100),              
 @Status as varchar(100),             
 @Notes as varchar(200),           
 @Signed as bit,            
 --@isAbnormal as bit,            
 @StainsDataXML xml,            
 @DiagnosisDataXML xml,              
 @CPTDataXML xml,            
 @UserID varchar(10),              
 @AuditType as char(1),      
  @Jars varchar(10),              
 @Cassettes varchar(10),       
 @Slides varchar(10)             
              
              
AS              
BEGIN              
SET NOCOUNT ON              
              
              
INSERT INTO tblAuditPathologyCases              
  ([CaseNumber]            
      ,[Accession]            
      ,[TestCode]            
      ,[Pathologist]            
      ,[Status]            
   ,[Notes]          
      ,[Signed]            
      --,[isAbnormal]            
   ,[StainsDataXML]            
      ,[DiagnosisDataXML]            
      ,[CPTDataXML]            
      ,[QSSCreatedByID]            
      ,[AuditType],Jars,Slides,Cassettes )                        
                    
Values(@CaseNumber            
      ,@Accession            
      ,@TestCode            
      ,@Pathologist            
      ,@Status           
   ,@Notes           
      ,@Signed            
      --,@isAbnormal            
   ,@StainsDataXML            
      ,@DiagnosisDataXML            
      ,@CPTDataXML            
      ,@UserID            
      ,@AuditType,@Jars,@Slides,@Cassettes)          
              
              
END   
GO
/****** Object:  StoredProcedure [dbo].[spAuditResultedTests]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		IMZ
-- Create date: 01/15/2014
-- Description:	This procedure audits every change in ResultEntry
-- =============================================
CREATE PROCEDURE [dbo].[spAuditResultedTests]
	@Accession as varchar(100),
	@ID as int
--	@QSSVersionNumber as int  = NULL  ,

	
AS
BEGIN
SET NOCOUNT ON
INSERT INTO tblAuditResultedTests(
	[Accession],
	[PerformedTest],
	[ResultTest],
	[Worksheet],
--	[LOINCcode],
--	[Organism],
--	[SensitivitiesXML],
	[Result],
	[ResultFlag],
	[NormalRange],
	[Units],
--	[CorrectionsXML],
--	[CallStatus],
	[ResultComment],
	[Status],
	[EnteredBy],
	[EntryDate],
--	[SiteID],
	[QSSCreatedByID],
	[QSSCreatedDate],
	[QSSLastUpdateID],
	[QSSUpdateDate],
--	[QSSVersion],
	[Outcome]
)
  
    SELECT [Accession],
	[PerformedTest],
	[ResultTest],
	[Worksheet],
--	[LOINCcode],
--	[Organism],
--	[SensitivitiesXML],
	[Result],
	[ResultFlag],
	[NormalRange],
	[Units],
--	[CorrectionsXML],
--	[CallStatus],
	[ResultComment],
	[Status],
	[EnteredBy],
	[EntryDate],
--	[SiteID],
	[QSSCreatedByID],
	[QSSCreatedDate],
	[QSSLastUpdateID],
	[QSSUpdateDate],
--	[QSSVersion],
	[Outcome]
	FROM tblResultedTests 
	WHERE Accession = @Accession
	AND ID = @ID
--	AND QSSVersion = @QSSVersionNumber
END
GO
/****** Object:  StoredProcedure [dbo].[spAuditResultedTestsFromMailout]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		IMZ
-- Create date: 01/15/2014
-- Description:	This procedure audits every change in ResultEntry
-- =============================================
create PROCEDURE [dbo].[spAuditResultedTestsFromMailout]
	@Accession as varchar(100),
	@PerformedTest varchar(100),
	@ResultTest varchar(100), 
	@Version int
--	@QSSVersionNumber as int  = NULL  ,

	
AS
BEGIN
SET NOCOUNT ON
INSERT INTO tblAuditResultedTests(
	[Accession],
	[PerformedTest],
	[ResultTest],
	[Worksheet],
--	[LOINCcode],
--	[Organism],
--	[SensitivitiesXML],
	[Result],
	[ResultFlag],
	[NormalRange],
	[Units],
--	[CorrectionsXML],
--	[CallStatus],
	[ResultComment],
	[Status],
--	[EnteredBy],
--	[EntryDate]
--	[SiteID],
--	[QSSCreatedByID],
--	[QSSCreatedDate],
	[QSSLastUpdateID],
	[QSSUpdateDate]
--	[QSSVersion],
,	[Outcome]
)
  
    SELECT [Accession],
	[PerformedTest],
	[ResultTest],
	[Worksheet],
--  [LOINCcode],
--	[Organism],
--	[SensitivitiesXML],
	[Result],
	[ResultFlag],
	[NormalRange],
	[Units],
--	[CorrectionsXML],
--	[CallStatus],
	[ResultComment],
	[Status],
--	[EnteredBy],
--	[EntryDate],
--	[SiteID],
--	[QSSCreatedByID],
--	[QSSCreatedDate],
	[QSSLastUpdateID],
	[QSSUpdateDate]
--	[QSSVersion],
,	[Outcome]
	FROM tblResultedTests 
	WHERE Accession = @Accession
	AND PerformedTest = @PerformedTest
	AND ResultTest = @ResultTest
	AND Version = @Version
	--	AND QSSVersion = @QSSVersionNumber
END








GO
/****** Object:  StoredProcedure [dbo].[spBilling_AR_Summation_Create]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** Object:  StoredProcedure [dbo].[spBilling_AR_Summation_Create]    Script Date: 1/2/2020 3:35:10 PM ******/
      
CREATE PROCEDURE [dbo].[spBilling_AR_Summation_Create]      
AS      
BEGIN      
    -- SET NOCOUNT ON added to prevent extra result sets from      
    -- interfering with SELECT statements.      
    SET NOCOUNT ON;      
    declare @err as int      
                      
    Truncate Table tblAR_Report_Summation_Table       
      
    -- Insert statements for procedure here      
    Insert into tblAR_Report_Summation_Table       
    SELECT Accession, PatientName, BirthDate, BillType, Ins_Code, InsuranceName, Policy_Number, ClientCode, ClientName,      
    RequestingPhysician, ServiceDate, UpToThirtyDays, ThirtyOneToSixtyDays, SiztyOneToNintyDays, OverNintyDays,BilledDate,TotalCharge ,TotalPayment,TotalBalance  
    From dbo.AR_Report_View      
    Select @err=@@ERROR      
                  if @err = 0 begin   
					if (select count(*) from tblAR_UpdatedDate) = 0    
					begin    
						insert into tblAR_UpdatedDate      
							(UpdateDate) values(getdate())   
					end   
					else begin    
						update tblAR_UpdatedDate set UpdateDate = getdate()   
					end     
				end    
  
    
 RETURN @err       
END      
GO
/****** Object:  StoredProcedure [dbo].[spBilling_WorkFile_Summation_Create]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spBilling_WorkFile_Summation_Create]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @err as int
	
	Truncate Table tblWorkFile_Report_Summation_Table 

    -- Insert statements for procedure here
	Insert into tblWorkFile_Report_Summation_Table 
	 SELECT Accession, PatientName, BirthDate, BillType, Ins_Code, InsuranceName, Policy_Number, ClientCode, ClientName,
                RequestingPhysician, ServiceDate, UpToThirtyDays, ThirtyOneToSixtyDays, SiztyOneToNintyDays, OverNintyDays
                From dbo.WorkFile_Report_View
	Select @err=@@ERROR
	
	RETURN @err
END









GO
/****** Object:  StoredProcedure [dbo].[spBillingARreport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spBillingARreport]
       @sum as bit = 0
       
AS
BEGIN
       if @sum = 0 
       begin

	   --new view is used in this selection (faster) but the view is still needed for the 'else' selection
			SELECT --DISTINCT 
			 a.Accession, 
			 p.ptLastName + ', ' + p.ptFirstName AS PatientName, 
			 CONVERT(varchar, p.ptDateOfBirth, 101) AS BirthDate, 
			 a.CurrentBillType as BillType,
			 CASE WHEN a.CurrentBillTo = 'Primary' THEN 
				COALESCE(NULLIF(aii.PrimaryInsuranceID, ''), p.PrimaryInsuranceID) 
				ELSE COALESCE(NULLIF(aii.SecondaryInsuranceID, ''), p.SecondaryInsuranceID) END AS Ins_Code,
			 ISNULL(i.Name, '') AS InsuranceName,
			 CASE WHEN a.CurrentBillTo = 'Primary' THEN 
				COALESCE(NULLIF(aii.PrimaryPolicy, ''), ii.Policy) 
				ELSE COALESCE(NULLIF(aii.SecondaryPolicy, ''), ii.Policy) END AS Policy_Number, 
			 a.ClientCode, 
			 c.ClientName, 
			 phy.FullName + '(' + a.PhysicianCode + ')' AS RequestingPhysician, 
			 CONVERT(varchar, a.ReceiveDate, 101) AS ServiceDate,
			 a.ReceiveDate as ServiceDateSort,
			 a.InternalComment as Comment,
			(CASE WHEN a.ReceiveDate > DATEADD(d, - 30, getdate()) THEN
			(sum(b.TotalFeeAmt) - sum(dbo.B_GetPaymentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode) + dbo.B_GetAdjustmentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode))) ELSE 0 END)  AS UptoThirtyDays,
			(CASE WHEN a.ReceiveDate BETWEEN DATEADD(d, - 60, getdate()) AND DATEADD(d, - 30, getdate()) THEN
			(sum(b.TotalFeeAmt) - sum(dbo.B_GetPaymentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode) + dbo.B_GetAdjustmentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode))) ELSE 0 END)  AS ThirtyOneToSixtyDays,
			(CASE WHEN a.ReceiveDate BETWEEN DATEADD(d, - 90, getdate()) AND DATEADD(d, - 60, getdate()) THEN
			(sum(b.TotalFeeAmt) - sum(dbo.B_GetPaymentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode) + dbo.B_GetAdjustmentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode))) ELSE 0 END)  AS  SiztyOneToNintyDays, 
			(CASE WHEN a.ReceiveDate < DATEADD(d, - 90, getdate()) THEN
			(sum(b.TotalFeeAmt) - sum(dbo.B_GetPaymentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode) + dbo.B_GetAdjustmentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode))) ELSE 0 END)  AS  OverNintyDays,
			(select  CONVERT(varchar,max(date), 101) from tblBillAudit ba where ba.notetype in ('HCFA', 'ElectronicClaim', 'PatientBill') and ba.Accession=a.Accession group by Accession) as BilledDate    
			   , sum(b.TotalFeeAmt) as TotalCharge, --AccessionCurrentTotalFee as TotalCharge,  
			   sum(b.TotalFeeAmt) - sum(dbo.B_GetPaymentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode) + dbo.B_GetAdjustmentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode)) as TotalBalance,  
			   sum(dbo.B_GetPaymentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode)) as TotalPayment,
			   --AccessionCurrentTotalPaid as TotalPayment,
			Cast(1 as bit) as ptRespFlag
			FROM      tblBillAccessions AS a       
       INNER JOIN tblPatient AS p       
       ON a.PatientID = p.PatientId      
                LEFT OUTER JOIN tblAccessionInsuranceInfo AS aii       
                on aii.Accession = a.Accession      
                LEFT OUTER JOIN tblInsuranceCompanies AS i       
                ON i.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' THEN COALESCE(NULLIF(aii.PrimaryInsuranceID, ''), p.PrimaryInsuranceID) ELSE COALESCE(NULLIF(aii.SecondaryInsuranceID, ''), p.SecondaryInsuranceID) END       
                INNER JOIN tblInsuredInfo AS ii       
                ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END       
                INNER JOIN tblClients AS c       
                ON c.ClientCode = a.ClientCode       
                INNER JOIN tblPhysicians AS phy       
                ON phy.PhysicianCode = a.PhysicianCode             
                --INNER JOIN tblArchiveReviewAccession AS r       
                --ON a.Accession = r.Accession      
				INNER JOIN tblAccessionsFinancials tf
				ON tf.Accession = a.Accession
				and tf.AccessionCurrentBalance <> 0
				INNER JOIN tblPayment py
				on a.Accession = py.Accession
				 AND a.CurrentBillType = py.BTcode
				 and isnull(py.ptRespFlag, 0) = 1
				
				INNER JOIN tblBill AS b       
                ON a.Accession = b.Accession       
                AND a.CurrentBillType = b.BTcode 
				and b.Status = 'BILL'
				and b.OrderedTestCode = py.OrderedTest
				and b.CPTCode = py.CPTcode
				and b.Modifier = py.Modifier
		WHERE   a.Accession NOT IN      
                    (SELECT     Accession      
                    FROM          tblMissingInformation      
                    WHERE      (Accession = a.Accession))      
                    --AND (dbo.B_GetTotalBillBalance_tblAccessionsFinancials(a.Accession) <> 0)
					
		Group by a.Accession, p.ptLastName, p.ptFirstName, p.ptDateOfBirth, a.CurrentBillType, a.CurrentBillTo, 
			aii.PrimaryInsuranceId, aii.SecondaryInsuranceId, p.PrimaryInsuranceID, p.SecondaryInsuranceID,
			i.[Name], aii.PrimaryPolicy, aii.SecondaryPolicy, ii.Policy, a.ClientCode, c.ClientName,
			a.PhysicianCode, phy.FullName, a.ReceiveDate, a.InternalComment--, tf.AccessionCurrentBalance,
			--tf.AccessionCurrentTotalFee, tf.AccessionCurrentTotalPaid
      
Union
		SELECT --DISTINCT 
			 a.Accession, 
			 p.ptLastName + ', ' + p.ptFirstName AS PatientName, 
			 CONVERT(varchar, p.ptDateOfBirth, 101) AS BirthDate, 
			 a.CurrentBillType as BillType,
			 CASE WHEN a.CurrentBillTo = 'Primary' THEN 
				COALESCE(NULLIF(aii.PrimaryInsuranceID, ''), p.PrimaryInsuranceID) 
				ELSE COALESCE(NULLIF(aii.SecondaryInsuranceID, ''), p.SecondaryInsuranceID) END AS Ins_Code,
			 ISNULL(i.Name, '') AS InsuranceName,
			 CASE WHEN a.CurrentBillTo = 'Primary' THEN 
				COALESCE(NULLIF(aii.PrimaryPolicy, ''), ii.Policy) 
				ELSE COALESCE(NULLIF(aii.SecondaryPolicy, ''), ii.Policy) END AS Policy_Number, 
			 a.ClientCode, 
			 c.ClientName, 
			 phy.FullName + '(' + a.PhysicianCode + ')' AS RequestingPhysician, 
			 CONVERT(varchar, a.ReceiveDate, 101) AS ServiceDate,
			 a.ReceiveDate as ServiceDateSort,
			 a.InternalComment as Comment,
			(CASE WHEN a.ReceiveDate > DATEADD(d, - 30, getdate()) THEN
			(sum(b.TotalFeeAmt) - sum(dbo.B_GetPaymentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode) + dbo.B_GetAdjustmentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode))) ELSE 0 END)  AS UptoThirtyDays,
			(CASE WHEN a.ReceiveDate BETWEEN DATEADD(d, - 60, getdate()) AND DATEADD(d, - 30, getdate()) THEN
			(sum(b.TotalFeeAmt) - sum(dbo.B_GetPaymentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode) + dbo.B_GetAdjustmentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode))) ELSE 0 END)  AS ThirtyOneToSixtyDays,
			(CASE WHEN a.ReceiveDate BETWEEN DATEADD(d, - 90, getdate()) AND DATEADD(d, - 60, getdate()) THEN
			(sum(b.TotalFeeAmt) - sum(dbo.B_GetPaymentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode) + dbo.B_GetAdjustmentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode))) ELSE 0 END)  AS  SiztyOneToNintyDays, 
			(CASE WHEN a.ReceiveDate < DATEADD(d, - 90, getdate()) THEN
			(sum(b.TotalFeeAmt) - sum(dbo.B_GetPaymentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode) + dbo.B_GetAdjustmentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode))) ELSE 0 END)  AS  OverNintyDays,
			(select  CONVERT(varchar,max(date), 101) from tblBillAudit ba where ba.notetype in ('HCFA', 'ElectronicClaim', 'PatientBill') and ba.Accession=a.Accession group by Accession) as BilledDate    
			   , sum(b.TotalFeeAmt) as TotalCharge, --AccessionCurrentTotalFee as TotalCharge,  
			   sum(b.TotalFeeAmt) - sum(dbo.B_GetPaymentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode) + dbo.B_GetAdjustmentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode)) as TotalBalance,  
			   sum(dbo.B_GetPaymentsTotal_byPtRespFlag(py.Accession, isnull(py.ptRespFlag, 0), py.CPTCode)) as TotalPayment,
			   --AccessionCurrentTotalPaid as TotalPayment,
			Cast(0 as bit) as ptRespFlag
			FROM      tblBillAccessions AS a       
       INNER JOIN tblPatient AS p       
       ON a.PatientID = p.PatientId      
                      LEFT OUTER JOIN tblAccessionInsuranceInfo AS aii       
                      on aii.Accession = a.Accession      
                      LEFT OUTER JOIN tblInsuranceCompanies AS i       
                      ON i.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' THEN COALESCE(NULLIF(aii.PrimaryInsuranceID, ''), p.PrimaryInsuranceID) ELSE COALESCE(NULLIF(aii.SecondaryInsuranceID, ''), p.SecondaryInsuranceID) END       
                      INNER JOIN tblInsuredInfo AS ii       
                      ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END       
                      INNER JOIN tblClients AS c       
                      ON c.ClientCode = a.ClientCode       
                      INNER JOIN tblPhysicians AS phy       
                      ON phy.PhysicianCode = a.PhysicianCode       
                      --INNER JOIN tblArchiveReviewAccession AS r       
                      --ON a.Accession = r.Accession      
					  INNER JOIN tblAccessionsFinancials tf
					  ON tf.Accession = a.Accession
					  and tf.AccessionCurrentBalance <> 0
					  INNER JOIN tblPayment py
					  on a.Accession = py.Accession
					  AND a.CurrentBillType = py.BTcode
					  and isnull(py.ptRespFlag, 0) = 0
					INNER JOIN tblBill AS b       
					ON a.Accession = b.Accession       
					AND a.CurrentBillType = b.BTcode 
					and b.Status = 'BILL'
					and b.OrderedTestCode = py.OrderedTest
					and b.CPTCode = py.CPTcode
					and b.Modifier = py.Modifier
				WHERE a.Accession NOT IN      
                          (SELECT     Accession      
                            FROM          tblMissingInformation      
                            WHERE      (Accession = a.Accession))       
                            --AND (dbo.B_GetTotalBillBalance_tblAccessionsFinancials(a.Accession) <> 0)
							
				Group by a.Accession, p.ptLastName, p.ptFirstName, p.ptDateOfBirth, a.CurrentBillType, a.CurrentBillTo, 
			aii.PrimaryInsuranceId, aii.SecondaryInsuranceId, p.PrimaryInsuranceID, p.SecondaryInsuranceID,
			i.[Name], aii.PrimaryPolicy, aii.SecondaryPolicy, ii.Policy, a.ClientCode, c.ClientName,
			a.PhysicianCode, phy.FullName, a.ReceiveDate, a.InternalComment--, tf.AccessionCurrentBalance,
			--tf.AccessionCurrentTotalFee, tf.AccessionCurrentTotalPaid
	
       end
	   
	   else begin
		select 
			(CASE WHEN a.CollectionDate > DATEADD(d, - 30, getdate()) THEN
				(SELECT AccessionCurrentBalance FROM tblAccessionsFinancials WHERE Accession = a.Accession) ELSE 0 END)  AS UptoThirtyDays,
			(CASE WHEN a.CollectionDate BETWEEN DATEADD(d, - 60, getdate()) AND DATEADD(d, - 30, getdate()) THEN
				(SELECT sum(AccessionCurrentBalance) FROM tblAccessionsFinancials WHERE Accession = a.Accession) ELSE 0 END)  AS ThirtyOneToSixtyDays,
			(CASE WHEN a.CollectionDate BETWEEN DATEADD(d, - 90, getdate()) AND DATEADD(d, - 60, getdate()) THEN
				(SELECT sum(AccessionCurrentBalance) FROM tblAccessionsFinancials WHERE Accession = a.Accession) ELSE 0 END)  AS  SiztyOneToNintyDays, 
			(CASE WHEN a.CollectionDate < DATEADD(d, - 90, getdate()) THEN
				(SELECT sum(AccessionCurrentBalance) FROM tblAccessionsFinancials WHERE Accession = a.Accession) ELSE 0 END)  AS  OverNinetyDays

			--(select MAX(CAST([Date] as Date)) FROM tblBillAudit WHERE Accession = a.Accession and NoteType in ('ElectronicClaim', 'HCFA', 'PatientBill', 'ClientBill', 'NF')) AS ProcessedDate
			into #tmpARSums
			FROM  tblBillAccessions  a 
			INNER JOIN tblBill AS b 
			ON a.Accession = b.Accession
			WHERE 
			(substring(b.[Status], 1, 4) = 'BILL') 
			AND (dbo.B_GetTotalBillBalance_tblAccessionsFinancials(a.Accession) <> 0)

			select sum(UptoThirtyDays) as [30Days], sum(ThirtyOneToSixtyDays) as [31to60Days], 
			sum(SiztyOneToNintyDays) as [61to90Days], sum(OverNinetyDays) as [Over90Days]
			from #tmpARSums
		end
END

GO
/****** Object:  StoredProcedure [dbo].[spBillingReportAccessionReportByAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportAccessionReportByAccession]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10),
	@ItemType varchar(2)

AS
BEGIN
DECLARE @cID varchar(10), @Pos int

	IF @ItemType = 'AC'
	BEGIN
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			dbo.B_GetPaymentDate_byPaymentDate(a.Accession, @StartDate, @EndDate) as PaymentDate,
			dbo.B_GetAmountBilledTotal(a.Accession) as FeeAmount,
			dbo.B_GetAmountExpTotal(a.Accession) as ExpectedAmount,
			dbo.B_GetPaymentsTotal_byPaymentDate(a.Accession, @StartDate, @EndDate) as Payment,
			dbo.B_GetAdjustmentsTotal_byPaymentDate(a.Accession, @StartDate, @EndDate) as Adjustment

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			LEFT OUTER JOIN tblPayment pay
			ON pay.Accession = b.Accession
			
			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			and substring(b.[Status], 1, 4) = 'BILL'
			AND PAY.EntryDate between @StartDate and @EndDate
			
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate

			ORDER BY  a.Accession, PaymentDate
		END
		
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			dbo.B_GetPaymentDate(a.Accession) as PaymentDate,
			dbo.B_GetAmountBilledTotal(a.Accession) as FeeAmount,
			dbo.B_GetAmountExpTotal(a.Accession) as ExpectedAmount,
			dbo.B_GetPaymentsTotal(a.Accession) as Payment,
			dbo.B_GetAdjustmentsTotal(a.Accession) as Adjustment

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			--LEFT OUTER JOIN tblPayment pay
			--ON pay.Accession = b.Accession
			
			
			WHERE 
			substring(b.[Status], 1, 4) = 'BILL'
			AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			
			
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate

			ORDER BY  a.Accession
	END
	
	END
	
	IF @ItemType = 'CL'
	BEGIN
		if object_id('tempdb..#TempListClientsByAccession') is not null
	drop table #TempListClientsByAccession

	CREATE TABLE #TempListClientsByAccession
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempListClientsByAccession (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempListClientsByAccession (cID)
		SELECT ClientCode
		FROM tblClients ORDER BY ClientCode
	END

 
	
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			dbo.B_GetPaymentDate_byPaymentDate(a.Accession, @StartDate, @EndDate) as PaymentDate,
			dbo.B_GetAmountBilledTotal(a.Accession) as FeeAmount,
			dbo.B_GetAmountExpTotal(a.Accession) as ExpectedAmount,
			dbo.B_GetPaymentsTotal_byPaymentDate(a.Accession, @StartDate, @EndDate) as Payment,
			dbo.B_GetAdjustmentsTotal_byPaymentDate(a.Accession, @StartDate, @EndDate) as Adjustment

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			LEFT OUTER JOIN tblPayment pay
			ON pay.Accession = b.Accession
			
			JOIN 
		           #TempListClientsByAccession t
	             	ON a.ClientCode  = t.cID  

			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			and substring(b.[Status], 1, 4) = 'BILL'
			AND PAY.EntryDate between @StartDate and @EndDate
			
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate

			ORDER BY ClientName, PhysicianName, a.Accession, PaymentDate
		END
		
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			dbo.B_GetPaymentDate(a.Accession) as PaymentDate,
			dbo.B_GetAmountBilledTotal(a.Accession) as FeeAmount,
			dbo.B_GetAmountExpTotal(a.Accession) as ExpectedAmount,
			dbo.B_GetPaymentsTotal(a.Accession) as Payment,
			dbo.B_GetAdjustmentsTotal(a.Accession) as Adjustment

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			--LEFT OUTER JOIN tblPayment pay
			--ON pay.Accession = b.Accession
			
			JOIN 
		           #TempListClientsByAccession t
	             	ON a.ClientCode  = t.cID  

			WHERE 
			substring(b.[Status], 1, 4) = 'BILL'
			AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			
			
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate

			ORDER BY ClientName, PhysicianName, a.Accession, 
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END
		END
if object_id('tempdb..#TempListClientsByAccession') is not null
	drop table #TempListClientsByAccession	
	END

	IF @ItemType = 'PH'
	BEGIN
		if object_id('tempdb..#TempListPhysiciansByAccession') is not null
	drop table #TempListPhysiciansByAccession

	CREATE TABLE #TempListPhysiciansByAccession
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempListPhysiciansByAccession (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempListPhysiciansByAccession (cID)
		SELECT PhysicianCode
		FROM tblPhysicians ORDER BY PhysicianCode
	END

 
	
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			dbo.BR_GetPaymentDate_byPaymentDate(a.Accession, @StartDate, @EndDate) as PaymentDate,
			dbo.B_GetAmountBilledTotal(a.Accession) as FeeAmount,
			dbo.B_GetAmountExpTotal(a.Accession) as ExpectedAmount,
			dbo.B_GetPaymentsTotal_byPaymentDate(a.Accession, @StartDate, @EndDate) as Payment,
			dbo.B_GetAdjustmentsTotal_byPaymentDate(a.Accession, @StartDate, @EndDate) as Adjustment

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			LEFT OUTER JOIN tblPayment pay
			ON pay.Accession = b.Accession
			
			JOIN 
		           #TempListPhysiciansByAccession t
	             	ON a.PhysicianCode  = t.cID  

			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			and substring(b.[Status], 1, 4) = 'BILL'
			AND PAY.EntryDate between @StartDate and @EndDate
			
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate

			ORDER BY  PhysicianName, ClientName, a.Accession, PaymentDate
		END
		
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			dbo.B_GetPaymentDate(a.Accession) as PaymentDate,
			dbo.B_GetAmountBilledTotal(a.Accession) as FeeAmount,
			dbo.B_GetAmountExpTotal(a.Accession) as ExpectedAmount,
			dbo.B_GetPaymentsTotal(a.Accession) as Payment,
			dbo.B_GetAdjustmentsTotal(a.Accession) as Adjustment

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			--LEFT OUTER JOIN tblPayment pay
			--ON pay.Accession = b.Accession
			
			JOIN 
		           #TempListPhysiciansByAccession t
	             	ON a.PhysicianCode  = t.cID  

			WHERE 
			substring(b.[Status], 1, 4) = 'BILL'
			AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			
			
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate

			ORDER BY PhysicianName, ClientName,  a.Accession, 
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END
		END
if object_id('tempdb..#TempListPhysiciansByAccession') is not null
	drop table #TempListPhysiciansByAccession	
	END

	IF @ItemType = 'SR'
	BEGIN
		if object_id('tempdb..#TempListSalesmanByAccession') is not null
	drop table #TempListSalesmanByAccession

	CREATE TABLE #TempListSalesmanByAccession
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempListSalesmanByAccession (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempListSalesmanByAccession (cID)
		SELECT SalesmanCode
		FROM tblSalesman ORDER BY SalesmanCode
	END

 
	
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			sal.SalesmanName + ' (' + sal.SalesmanCode + ')' as SalesmanName,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			dbo.B_GetPaymentDate_byPaymentDate(a.Accession, @StartDate, @EndDate) as PaymentDate,
			dbo.B_GetAmountBilledTotal(a.Accession) as FeeAmount,
			dbo.B_GetAmountExpTotal(a.Accession) as ExpectedAmount,
			dbo.B_GetPaymentsTotal_byPaymentDate(a.Accession, @StartDate, @EndDate) as Payment,
			dbo.B_GetAdjustmentsTotal_byPaymentDate(a.Accession, @StartDate, @EndDate) as Adjustment

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			LEFT OUTER JOIN tblPayment pay
			ON pay.Accession = b.Accession
			LEFT OUTER JOIN tblClientsSalesman cs
			ON cs.ClientCode = a.ClientCode
			LEFT OUTER JOIN tblSalesman sal
			ON sal.SalesmanCode = cs.SalesmanCode
			JOIN 
		           #TempListSalesmanByAccession t
	             	ON sal.SalesmanCode  = t.cID  

			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			and substring(b.[Status], 1, 4) = 'BILL'
			AND PAY.EntryDate between @StartDate and @EndDate
			
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			sal.SalesmanCode,
			sal.SalesmanName,
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate

			ORDER BY  SalesmanName, ClientName, a.Accession, PaymentDate
		END
		
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			sal.SalesmanName + ' (' + sal.SalesmanCode + ')' as SalesmanName,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			dbo.B_GetPaymentDate(a.Accession) as PaymentDate,
			dbo.B_GetAmountBilledTotal(a.Accession) as FeeAmount,
			dbo.B_GetAmountExpTotal(a.Accession) as ExpectedAmount,
			dbo.B_GetPaymentsTotal(a.Accession) as Payment,
			dbo.B_GetAdjustmentsTotal(a.Accession) as Adjustment

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			--LEFT OUTER JOIN tblPayment pay
			--ON pay.Accession = b.Accession
			LEFT OUTER JOIN tblClientsSalesman cs
			ON cs.ClientCode = a.ClientCode
			LEFT OUTER JOIN tblSalesman sal
			ON sal.SalesmanCode = cs.SalesmanCode
			JOIN 
		           #TempListSalesmanByAccession t
	             	ON sal.SalesmanCode  = t.cID  

			WHERE 
			substring(b.[Status], 1, 4) = 'BILL'
			AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			
			
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			sal.SalesmanCode,
			sal.SalesmanName,
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate

			ORDER BY SalesmanName, ClientName,  a.Accession, 
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END
		END
if object_id('tempdb..#TempListSalesmanByAccession') is not null
	drop table #TempListSalesmanByAccession	
	END

	--IF @ItemType = 'PY'
	--BEGIN

	--END
END
GO
/****** Object:  StoredProcedure [dbo].[spBillingReportAccessionReportByCPT]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportAccessionReportByCPT]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10),
	@ItemType varchar(2)

AS
BEGIN
DECLARE @cID varchar(10), @Pos int

	IF @ItemType = 'AC'
	BEGIN
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			MAX(pay.EntryDate) as PaymentDate,
			pay.TotalFeeAmt as FeeAmount,
			pay.ExpAmt as ExpectedAmount,
			SUM(pay.PaymentAmt) as Payment,
			SUM(pay.AdjustmentAmt) as Adjustment,
			--pay.CPTcode + ':' + pay.Modifier as CPT,
			pay.CPTcode as CPT,
			pay.FeeDescription as Description

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			--INNER JOIN tblAccessionInsuranceInfo aii
			--ON aii.Accession = a.Accession
			--LEFT OUTER JOIN tblInsuranceCompanies ins
			--ON ins.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Secondary' THEN aii.SecondaryInsuranceID ELSE aii.PrimaryInsuranceID END 
			
			LEFT OUTER JOIN tblPayment pay
			ON pay.Accession = a.Accession
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			AND pay.CPTcode = b.CPTcode
			AND pay.OrderedTest = b.OrderedTestCode
			--AND pay.Modifier = b.Modifier
			--AND pay.GroupFlag = b.GroupFlag


			----LEFT OUTER JOIN tblClientsSalesman cs
			----ON cs.ClientCode = a.ClientCode
			----LEFT OUTER JOIN tblSalesman sal
			----ON sal.SalesmanCode = cs.SalesmanCode
		
			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND substring(b.[Status], 1, 4) = 'BILL'
			AND PAY.EntryDate between @StartDate and @EndDate
						
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate, 
			pay.TotalFeeAmt,
			pay.ExpAmt,
			pay.OrderedTest,
			pay.CPTcode,
			pay.FeeDescription

			ORDER BY a.Accession, PaymentDate
		END
		
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			MAX(pay.EntryDate) as PaymentDate,
			pay.TotalFeeAmt as FeeAmount,
			pay.ExpAmt as ExpectedAmount,
			SUM(pay.PaymentAmt) as Payment,
			SUM(pay.AdjustmentAmt) as Adjustment,
			--pay.CPTcode + ':' + pay.Modifier as CPT,
			pay.CPTcode as CPT,
			pay.FeeDescription as Description

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			--INNER JOIN tblAccessionInsuranceInfo aii
			--ON aii.Accession = a.Accession
			--LEFT OUTER JOIN tblInsuranceCompanies ins
			--ON ins.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Secondary' THEN aii.SecondaryInsuranceID ELSE aii.PrimaryInsuranceID END 
			LEFT OUTER JOIN tblPayment pay
			ON pay.Accession = a.Accession
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			AND pay.CPTcode = b.CPTcode
			AND pay.OrderedTest = b.OrderedTestCode
			--AND pay.Modifier = b.Modifier
			--AND pay.GroupFlag = b.GroupFlag


			----LEFT OUTER JOIN tblClientsSalesman cs
			----ON cs.ClientCode = a.ClientCode
			----LEFT OUTER JOIN tblSalesman sal
			----ON sal.SalesmanCode = cs.SalesmanCode
			
			WHERE substring(b.[Status], 1, 4) = 'BILL'
			AND
			
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			
			
			
			
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate, 
			pay.TotalFeeAmt,
			pay.ExpAmt,
			pay.OrderedTest,
			pay.CPTcode,
			--pay.Modifier,
			pay.FeeDescription

			ORDER BY a.Accession
			
		END
	END
	
	IF @ItemType = 'CL'
	BEGIN
		if object_id('tempdb..#TempListClientsByCPT') is not null
	drop table #TempListClientsByCPT

	CREATE TABLE #TempListClientsByCPT
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempListClientsByCPT (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempListClientsByCPT (cID)
		SELECT ClientCode
		FROM tblClients ORDER BY ClientCode
	END

 
	
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			MAX(pay.EntryDate) as PaymentDate,
			pay.TotalFeeAmt as FeeAmount,
			pay.ExpAmt as ExpectedAmount,
			SUM(pay.PaymentAmt) as Payment,
			SUM(pay.AdjustmentAmt) as Adjustment,
			--pay.CPTcode + ':' + pay.Modifier as CPT,
			pay.CPTcode as CPT,
			pay.FeeDescription as Description

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			--INNER JOIN tblAccessionInsuranceInfo aii
			--ON aii.Accession = a.Accession
			--LEFT OUTER JOIN tblInsuranceCompanies ins
			--ON ins.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Secondary' THEN aii.SecondaryInsuranceID ELSE aii.PrimaryInsuranceID END 
			
			LEFT OUTER JOIN tblPayment pay
			ON pay.Accession = a.Accession
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			AND pay.CPTcode = b.CPTcode
			AND pay.OrderedTest = b.OrderedTestCode
			--AND pay.Modifier = b.Modifier
			--AND pay.GroupFlag = b.GroupFlag


			----LEFT OUTER JOIN tblClientsSalesman cs
			----ON cs.ClientCode = a.ClientCode
			----LEFT OUTER JOIN tblSalesman sal
			----ON sal.SalesmanCode = cs.SalesmanCode
			JOIN 
		           #TempListClientsByCPT t
	             	ON a.ClientCode  = t.cID  

			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND substring(b.[Status], 1, 4) = 'BILL'
			AND PAY.EntryDate between @StartDate and @EndDate
						
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate, 
			pay.TotalFeeAmt,
			pay.ExpAmt,
			pay.OrderedTest,
			pay.CPTcode,
			pay.FeeDescription

			ORDER BY ClientName, PhysicianName, a.Accession, PaymentDate
		END
		
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			MAX(pay.EntryDate) as PaymentDate,
			pay.TotalFeeAmt as FeeAmount,
			pay.ExpAmt as ExpectedAmount,
			SUM(pay.PaymentAmt) as Payment,
			SUM(pay.AdjustmentAmt) as Adjustment,
			--pay.CPTcode + ':' + pay.Modifier as CPT,
			pay.CPTcode as CPT,
			pay.FeeDescription as Description

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			--INNER JOIN tblAccessionInsuranceInfo aii
			--ON aii.Accession = a.Accession
			--LEFT OUTER JOIN tblInsuranceCompanies ins
			--ON ins.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Secondary' THEN aii.SecondaryInsuranceID ELSE aii.PrimaryInsuranceID END 
			LEFT OUTER JOIN tblPayment pay
			ON pay.Accession = a.Accession
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			AND pay.CPTcode = b.CPTcode
			AND pay.OrderedTest = b.OrderedTestCode
			--AND pay.Modifier = b.Modifier
			--AND pay.GroupFlag = b.GroupFlag


			----LEFT OUTER JOIN tblClientsSalesman cs
			----ON cs.ClientCode = a.ClientCode
			----LEFT OUTER JOIN tblSalesman sal
			----ON sal.SalesmanCode = cs.SalesmanCode
			JOIN 
		           #TempListClientsByCPT t
	             	ON a.ClientCode  = t.cID  

			WHERE substring(b.[Status], 1, 4) = 'BILL'
			AND
			
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			
			
			
			
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate, 
			pay.TotalFeeAmt,
			pay.ExpAmt,
			pay.OrderedTest,
			pay.CPTcode,
			--pay.Modifier,
			pay.FeeDescription

			ORDER BY ClientName, PhysicianName, a.Accession, 
			CASE @DateType
				--WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END
		END
if object_id('tempdb..#TempListClientsByCPT') is not null
	drop table #TempListClientsByCPT	
	END

	IF @ItemType = 'PH'
	BEGIN
		if object_id('tempdb..#TempListPhysiciansByCPT') is not null
	drop table #TempListPhysiciansByCPT

	CREATE TABLE #TempListPhysiciansByCPT
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempListPhysiciansByCPT (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempListPhysiciansByCPT (cID)
		SELECT PhysicianCode
		FROM tblPhysicians ORDER BY PhysicianCode
	END

 
	
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			MAX(pay.EntryDate) as PaymentDate,
			pay.TotalFeeAmt as FeeAmount,
			pay.ExpAmt as ExpectedAmount,
			SUM(pay.PaymentAmt) as Payment,
			SUM(pay.AdjustmentAmt) as Adjustment,
			--pay.CPTcode + ':' + pay.Modifier as CPT,
			pay.CPTcode as CPT,
			pay.FeeDescription as Description

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			--INNER JOIN tblAccessionInsuranceInfo aii
			--ON aii.Accession = a.Accession
			--LEFT OUTER JOIN tblInsuranceCompanies ins
			--ON ins.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Secondary' THEN aii.SecondaryInsuranceID ELSE aii.PrimaryInsuranceID END 
			
			LEFT OUTER JOIN tblPayment pay
			ON pay.Accession = a.Accession
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			AND pay.CPTcode = b.CPTcode
			AND pay.OrderedTest = b.OrderedTestCode
			--AND pay.Modifier = b.Modifier
			--AND pay.GroupFlag = b.GroupFlag


			----LEFT OUTER JOIN tblClientsSalesman cs
			----ON cs.ClientCode = a.ClientCode
			----LEFT OUTER JOIN tblSalesman sal
			----ON sal.SalesmanCode = cs.SalesmanCode
			JOIN 
		           #TempListPhysiciansByCPT t
	             	ON a.PhysicianCode  = t.cID  

			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND substring(b.[Status], 1, 4) = 'BILL'
			AND PAY.EntryDate between @StartDate and @EndDate
						
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate, 
			pay.TotalFeeAmt,
			pay.ExpAmt,
			pay.OrderedTest,
			pay.CPTcode,
			pay.FeeDescription

			ORDER BY PhysicianName, ClientName, a.Accession, PaymentDate
		END
		
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			MAX(pay.EntryDate) as PaymentDate,
			pay.TotalFeeAmt as FeeAmount,
			pay.ExpAmt as ExpectedAmount,
			SUM(pay.PaymentAmt) as Payment,
			SUM(pay.AdjustmentAmt) as Adjustment,
			--pay.CPTcode + ':' + pay.Modifier as CPT,
			pay.CPTcode as CPT,
			pay.FeeDescription as Description

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			--INNER JOIN tblAccessionInsuranceInfo aii
			--ON aii.Accession = a.Accession
			--LEFT OUTER JOIN tblInsuranceCompanies ins
			--ON ins.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Secondary' THEN aii.SecondaryInsuranceID ELSE aii.PrimaryInsuranceID END 
			LEFT OUTER JOIN tblPayment pay
			ON pay.Accession = a.Accession
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			AND pay.CPTcode = b.CPTcode
			AND pay.OrderedTest = b.OrderedTestCode
			--AND pay.Modifier = b.Modifier
			--AND pay.GroupFlag = b.GroupFlag


			----LEFT OUTER JOIN tblClientsSalesman cs
			----ON cs.ClientCode = a.ClientCode
			----LEFT OUTER JOIN tblSalesman sal
			----ON sal.SalesmanCode = cs.SalesmanCode
			JOIN 
		           #TempListPhysiciansByCPT t
	             	ON a.PhysicianCode  = t.cID  

			WHERE substring(b.[Status], 1, 4) = 'BILL'
			AND
			
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			
			
			
			
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate, 
			pay.TotalFeeAmt,
			pay.ExpAmt,
			pay.OrderedTest,
			pay.CPTcode,
			--pay.Modifier,
			pay.FeeDescription

			ORDER BY PhysicianName, ClientName, a.Accession, 
			CASE @DateType
				--WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END
		END
if object_id('tempdb..#TempListPhysiciansByCPT') is not null
	drop table #TempListPhysiciansByCPT	
	END

	IF @ItemType = 'SR'
	BEGIN
		if object_id('tempdb..#TempListSalesmanByCPT') is not null
	drop table #TempListSalesmanByCPT

	CREATE TABLE #TempListSalesmanByCPT
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempListSalesmanByCPT (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempListSalesmanByCPT (cID)
		SELECT SalesmanCode
		FROM tblSalesman ORDER BY SalesmanCode
	END

 
	
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			sal.SalesmanName + ' (' + sal.SalesmanCode + ')' as SalesmanName,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			MAX(pay.EntryDate) as PaymentDate,
			pay.TotalFeeAmt as FeeAmount,
			pay.ExpAmt as ExpectedAmount,
			SUM(pay.PaymentAmt) as Payment,
			SUM(pay.AdjustmentAmt) as Adjustment,
			--pay.CPTcode + ':' + pay.Modifier as CPT,
			pay.CPTcode as CPT,
			pay.FeeDescription as Description

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			--INNER JOIN tblAccessionInsuranceInfo aii
			--ON aii.Accession = a.Accession
			--LEFT OUTER JOIN tblInsuranceCompanies ins
			--ON ins.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Secondary' THEN aii.SecondaryInsuranceID ELSE aii.PrimaryInsuranceID END 
			
			LEFT OUTER JOIN tblPayment pay
			ON pay.Accession = a.Accession
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			AND pay.CPTcode = b.CPTcode
			AND pay.OrderedTest = b.OrderedTestCode
			--AND pay.Modifier = b.Modifier
			--AND pay.GroupFlag = b.GroupFlag


			LEFT OUTER JOIN tblClientsSalesman cs
			ON cs.ClientCode = a.ClientCode
			LEFT OUTER JOIN tblSalesman sal
			ON sal.SalesmanCode = cs.SalesmanCode
			JOIN 
		           #TempListSalesmanByCPT t
	             	ON sal.SalesmanCode  = t.cID  

			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND substring(b.[Status], 1, 4) = 'BILL'
			AND PAY.EntryDate between @StartDate and @EndDate
						
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			sal.SalesmanCode,
			sal.SalesmanName,
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate, 
			pay.TotalFeeAmt,
			pay.ExpAmt,
			pay.OrderedTest,
			pay.CPTcode,
			pay.FeeDescription

			ORDER BY SalesmanName, ClientName, a.Accession, PaymentDate
		END
		
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT  a.Accession, 
			c.ClientName + '(' + c.ClientCode + ')' as ClientName, 
			phy.FullName + '(' + phy.PhysicianCode + ')'  as PhysicianName, 
			a.AccessionStatus, 
			--MAX(pay.Payer) as Payer,
			----ins.Name as InsuranceName, 
			----sal.SalesmanName,
			--MAX(cs.SalesmanCode) as Salesman,

			sal.SalesmanName + ' (' + sal.SalesmanCode + ')' as SalesmanName,

			a.CollectionDate as DateOfService, 
			a.ReceiveDate, 
			a.DateCreated as BilledDate,
			MAX(pay.EntryDate) as PaymentDate,
			pay.TotalFeeAmt as FeeAmount,
			pay.ExpAmt as ExpectedAmount,
			SUM(pay.PaymentAmt) as Payment,
			SUM(pay.AdjustmentAmt) as Adjustment,
			--pay.CPTcode + ':' + pay.Modifier as CPT,
			pay.CPTcode as CPT,
			pay.FeeDescription as Description

			FROM tblBillAccessions a
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON a.PhysicianCode = phy.PhysicianCode
			--INNER JOIN tblAccessionInsuranceInfo aii
			--ON aii.Accession = a.Accession
			--LEFT OUTER JOIN tblInsuranceCompanies ins
			--ON ins.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Secondary' THEN aii.SecondaryInsuranceID ELSE aii.PrimaryInsuranceID END 
			LEFT OUTER JOIN tblPayment pay
			ON pay.Accession = a.Accession
			INNER JOIN tblBill b
			ON b.Accession = a.Accession
			AND pay.CPTcode = b.CPTcode
			AND pay.OrderedTest = b.OrderedTestCode
			--AND pay.Modifier = b.Modifier
			--AND pay.GroupFlag = b.GroupFlag


			LEFT OUTER JOIN tblClientsSalesman cs
			ON cs.ClientCode = a.ClientCode
			LEFT OUTER JOIN tblSalesman sal
			ON sal.SalesmanCode = cs.SalesmanCode
			JOIN 
		           #TempListSalesmanByCPT t
	             	ON sal.SalesmanCode  = t.cID  

			WHERE substring(b.[Status], 1, 4) = 'BILL'
			AND
			
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			
			
			
			
			GROUP BY 
			a.Accession, 
			a.DateCreated,
			a.AccessionStatus,
			c.ClientCode,
			c.ClientName, 
			sal.SalesmanCode,
			sal.SalesmanName,
			phy.PhysicianCode,
			phy.FullName, 
			a.CollectionDate, 
			a.ReceiveDate, 
			pay.TotalFeeAmt,
			pay.ExpAmt,
			pay.OrderedTest,
			pay.CPTcode,
			--pay.Modifier,
			pay.FeeDescription

			ORDER BY SalesmanName, ClientName, a.Accession, 
			CASE @DateType
				--WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END
		END
if object_id('tempdb..#TempListSalesmanByCPT') is not null
	drop table #TempListSalesmanByCPT	
	END

	--IF @ItemType = 'PY'
	--BEGIN

	--END
END








GO
/****** Object:  StoredProcedure [dbo].[spBillingReportSummaryByAccessionByCPT]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportSummaryByAccessionByCPT]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10)

AS
BEGIN

		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT  pay.CPTCode as CPT, COUNT(*) AS AccessionCount, SUM(pay.TotalFeeAmt) as TotalFeeAmtCPT, SUM(pay.ExpAmt) as TotalExpectedCPT, 
			SUM(pay.PaymentAmt) AS TotalPaidCPT, SUM(pay.AdjustmentAmt) AS TotalAdjustedCPT
			FROM tblPayment pay
			
			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND PAY.EntryDate between @StartDate and @EndDate
			GROUP BY  pay.CPTcode
			ORDER BY  CPT
		END
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT  pay.CPTCode as CPT, COUNT(*) AS AccessionCount, SUM(pay.TotalFeeAmt) as TotalFeeAmtCPT, SUM(pay.ExpAmt) as TotalExpectedCPT, 
			SUM(pay.PaymentAmt) AS TotalPaidCPT, SUM(pay.AdjustmentAmt) AS TotalAdjustedCPT
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			GROUP BY  pay.CPTcode
			ORDER BY  CPT
		END
		
if object_id('tempdb..#TempSummaryListSalesRepsByCPTSummary') is not null
	drop table #TempSummaryListSalesRepsByCPTSummary	
END









GO
/****** Object:  StoredProcedure [dbo].[spBillingReportSummaryByAccessionByDenial]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportSummaryByAccessionByDenial]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10)

AS
BEGIN

		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT  pay.AdjustmentReason as DenialCode, COUNT(*) AS AccessionCount, SUM(ISNULL(pay.TotalFeeAmt, 0.00)) as TotalFeeAmtDenial, SUM(ISNULL(pay.ExpAmt, 0.00)) as TotalExpectedDenial, 
			SUM(pay.PaymentAmt) AS TotalPaidDenial, SUM(pay.AdjustmentAmt) AS TotalAdjustedDenial
			FROM tblPayment pay
			
			WHERE pay.AdjustmentReason IS NOT NULL and pay.AdjustmentReason <> ''--(pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND PAY.EntryDate between @StartDate and @EndDate
			GROUP BY  pay.AdjustmentReason
			ORDER BY  DenialCode
		END
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT  pay.AdjustmentReason as DenialCode, COUNT(*) AS AccessionCount, SUM(ISNULL(pay.TotalFeeAmt, 0.00)) as TotalFeeAmtDenial, SUM(ISNULL(pay.ExpAmt, 0.00)) as TotalExpectedDenial, 
			SUM(pay.PaymentAmt) AS TotalPaidDenial, SUM(pay.AdjustmentAmt) AS TotalAdjustedDenial
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			WHERE pay.AdjustmentReason IS NOT NULL and pay.AdjustmentReason <> '' --(pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			GROUP BY  pay.AdjustmentReason
			ORDER BY  DenialCode
		END
		
if object_id('tempdb..#TempSummaryListSalesRepsByCPTSummary') is not null
	drop table #TempSummaryListSalesRepsByCPTSummary	
END








GO
/****** Object:  StoredProcedure [dbo].[spBillingReportSummaryByAccessionByMissingInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportSummaryByAccessionByMissingInfo]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10)

AS
BEGIN

	--select * from #TempSummaryListClientsByMissingInfoSummary
			SELECT c.ClientName + '(' + c.ClientCode + ')' as ClientName, mi.Reason, COUNT(*) AS AccessionCount
			FROM tblBillAccessions a
			INNER JOIN tblMissingInformation mi
			ON mi.Accession = a.Accession
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			
			WHERE --(pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)	AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			GROUP BY c.ClientCode, c.ClientName, mi.Reason
			ORDER BY ClientName, mi.Reason
		
END








GO
/****** Object:  StoredProcedure [dbo].[spBillingReportSummaryByClientByCPT]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportSummaryByClientByCPT]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10)

AS
BEGIN
if object_id('tempdb..#TempSummaryListClientsByCPTSummary') is not null
	drop table #TempSummaryListClientsByCPTSummary

	CREATE TABLE #TempSummaryListClientsByCPTSummary
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	

		DECLARE @cID varchar(10), @Pos int
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempSummaryListClientsByCPTSummary (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempSummaryListClientsByCPTSummary (cID)
		SELECT ClientCode
		FROM tblClients ORDER BY ClientCode
	END
	--select * from #TempSummaryListClientsByCPTSummary
	
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT c.ClientName + '(' + c.ClientCode + ')' as ConditionName, pay.CPTCode as CPT, COUNT(*) AS AccessionCount, SUM(pay.TotalFeeAmt) as TotalFeeAmtCPT, SUM(pay.ExpAmt) as TotalExpectedCPT, 
			SUM(pay.PaymentAmt) AS TotalPaidCPT, SUM(pay.AdjustmentAmt) AS TotalAdjustedCPT
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			JOIN 
		           #TempSummaryListClientsByCPTSummary t
	             	ON a.ClientCode  = t.cID  

			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND PAY.EntryDate between @StartDate and @EndDate
			GROUP BY c.ClientCode, c.ClientName, pay.CPTcode
			ORDER BY ConditionName, CPT
		END
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT c.ClientName + '(' + c.ClientCode + ')' as ConditionName, pay.CPTCode as CPT, COUNT(*) AS AccessionCount, SUM(pay.TotalFeeAmt) as TotalFeeAmtCPT, SUM(pay.ExpAmt) as TotalExpectedCPT, 
			SUM(pay.PaymentAmt) AS TotalPaidCPT, SUM(pay.AdjustmentAmt) AS TotalAdjustedCPT
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			JOIN 
		           #TempSummaryListClientsByCPTSummary t
	             	ON a.ClientCode  = t.cID  

			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			GROUP BY c.ClientCode, c.ClientName, pay.CPTcode
			ORDER BY ConditionName, CPT
		END
		
if object_id('tempdb..#TempSummaryListClientsByCPTSummary') is not null
	drop table #TempSummaryListClientsByCPTSummary	
END







GO
/****** Object:  StoredProcedure [dbo].[spBillingReportSummaryByClientByDenial]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportSummaryByClientByDenial]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10)

AS
BEGIN
if object_id('tempdb..#TempSummaryListClientsByDenialSummary') is not null
	drop table #TempSummaryListClientsByDenialSummary

	CREATE TABLE #TempSummaryListClientsByDenialSummary
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	

		DECLARE @cID varchar(10), @Pos int
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempSummaryListClientsByDenialSummary (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempSummaryListClientsByDenialSummary (cID)
		SELECT ClientCode
		FROM tblClients ORDER BY ClientCode
	END
	--select * from #TempSummaryListClientsByDenialSummary
	
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT c.ClientName + '(' + c.ClientCode + ')' as ConditionName, pay.AdjustmentReason as DenialCode, COUNT(*) AS AccessionCount, SUM(ISNULL(pay.TotalFeeAmt, 0.00)) as TotalFeeAmtDenial, SUM(ISNULL(pay.ExpAmt, 0.00)) as TotalExpectedDenial, 
			SUM(pay.PaymentAmt) AS TotalPaidDenial, SUM(pay.AdjustmentAmt) AS TotalAdjustedDenial
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			JOIN 
		           #TempSummaryListClientsByDenialSummary t
	             	ON a.ClientCode  = t.cID  

			WHERE pay.AdjustmentReason IS NOT NULL and pay.AdjustmentReason <> ''--(pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND PAY.EntryDate between @StartDate and @EndDate
			GROUP BY c.ClientCode, c.ClientName, pay.AdjustmentReason
			ORDER BY ConditionName, DenialCode
		END
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT c.ClientName + '(' + c.ClientCode + ')' as ConditionName, pay.AdjustmentReason as DenialCode, COUNT(*) AS AccessionCount, SUM(ISNULL(pay.TotalFeeAmt, 0.00)) as TotalFeeAmtDenial, SUM(ISNULL(pay.ExpAmt, 0.00)) as TotalExpectedDenial, 
			SUM(pay.PaymentAmt) AS TotalPaidDenial, SUM(pay.AdjustmentAmt) AS TotalAdjustedDenial
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			JOIN 
		           #TempSummaryListClientsByDenialSummary t
	             	ON a.ClientCode  = t.cID  

			WHERE pay.AdjustmentReason IS NOT NULL and pay.AdjustmentReason <> '' --(pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			GROUP BY c.ClientCode, c.ClientName, pay.AdjustmentReason
			ORDER BY ConditionName, DenialCode
		END
		
if object_id('tempdb..#TempSummaryListClientsByDenialSummary') is not null
	drop table #TempSummaryListClientsByDenialSummary	
END







GO
/****** Object:  StoredProcedure [dbo].[spBillingReportSummaryByClientByMissingInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportSummaryByClientByMissingInfo]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10)

AS
BEGIN
if object_id('tempdb..#TempSummaryListClientsByMissingInfoSummary') is not null
	drop table #TempSummaryListClientsByMissingInfoSummary

	CREATE TABLE #TempSummaryListClientsByMissingInfoSummary
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	

		DECLARE @cID varchar(10), @Pos int
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempSummaryListClientsByMissingInfoSummary (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempSummaryListClientsByMissingInfoSummary (cID)
		SELECT ClientCode
		FROM tblClients ORDER BY ClientCode
	END
	--select * from #TempSummaryListClientsByMissingInfoSummary
			SELECT c.ClientName + '(' + c.ClientCode + ')' as ConditionName, mi.Reason, COUNT(*) AS AccessionCount
			FROM tblBillAccessions a
			INNER JOIN tblMissingInformation mi
			ON mi.Accession = a.Accession
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			JOIN 
		           #TempSummaryListClientsByMissingInfoSummary t
	             	ON a.ClientCode  = t.cID  

			WHERE --(pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)	AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			GROUP BY c.ClientCode, c.ClientName, mi.Reason
			ORDER BY ConditionName, mi.Reason
		
if object_id('tempdb..#TempSummaryListClientsByMissingInfoSummary') is not null
	drop table #TempSummaryListClientsByMissingInfoSummary	
END






GO
/****** Object:  StoredProcedure [dbo].[spBillingReportSummaryByPhysicianByCPT]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportSummaryByPhysicianByCPT]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10)

AS
BEGIN
if object_id('tempdb..#TempSummaryListPhysiciansByCPTSummary') is not null
	drop table #TempSummaryListPhysiciansByCPTSummary

	CREATE TABLE #TempSummaryListPhysiciansByCPTSummary
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	

		DECLARE @cID varchar(10), @Pos int
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempSummaryListPhysiciansByCPTSummary (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempSummaryListPhysiciansByCPTSummary (cID)
		SELECT PhysicianCode
		FROM tblPhysicians ORDER BY PhysicianCode
	END
	--select * from #TempSummaryListPhysiciansByCPTSummary
	
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT phy.FullName + '(' + phy.PhysicianCode + ')' as ConditionName, pay.CPTCode as CPT, COUNT(*) AS AccessionCount, SUM(pay.TotalFeeAmt) as TotalFeeAmtCPT, SUM(pay.ExpAmt) as TotalExpectedCPT, 
			SUM(pay.PaymentAmt) AS TotalPaidCPT, SUM(pay.AdjustmentAmt) AS TotalAdjustedCPT
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			--INNER JOIN tblClients c
			--ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON phy.PhysicianCode = a.PhysicianCode
			JOIN 
		           #TempSummaryListPhysiciansByCPTSummary t
	             	ON a.PhysicianCode  = t.cID  

			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND PAY.EntryDate between @StartDate and @EndDate
			GROUP BY phy.PhysicianCode, phy.FullName, pay.CPTcode
			ORDER BY ConditionName, CPT
		END
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT phy.FullName + '(' + phy.PhysicianCode + ')' as ConditionName, pay.CPTCode as CPT, COUNT(*) AS AccessionCount, SUM(pay.TotalFeeAmt) as TotalFeeAmtCPT, SUM(pay.ExpAmt) as TotalExpectedCPT, 
			SUM(pay.PaymentAmt) AS TotalPaidCPT, SUM(pay.AdjustmentAmt) AS TotalAdjustedCPT
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			--INNER JOIN tblClients c
			--ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON phy.PhysicianCode = a.PhysicianCode
			JOIN 
		           #TempSummaryListPhysiciansByCPTSummary t
	             	ON a.PhysicianCode  = t.cID  

			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			GROUP BY phy.PhysicianCode, phy.FullName, pay.CPTcode
			ORDER BY ConditionName, CPT
		END
		
if object_id('tempdb..#TempSummaryListPhysiciansByCPTSummary') is not null
	drop table #TempSummaryListPhysiciansByCPTSummary	
END







GO
/****** Object:  StoredProcedure [dbo].[spBillingReportSummaryByPhysicianByMissingInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportSummaryByPhysicianByMissingInfo]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10)

AS
BEGIN
if object_id('tempdb..#TempSummaryListPhysiciansByMissingInfoSummary') is not null
	drop table #TempSummaryListPhysiciansByMissingInfoSummary

	CREATE TABLE #TempSummaryListPhysiciansByMissingInfoSummary
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	

		DECLARE @cID varchar(10), @Pos int
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempSummaryListPhysiciansByMissingInfoSummary (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempSummaryListPhysiciansByMissingInfoSummary (cID)
		SELECT PhysicianCode
		FROM tblPhysicians ORDER BY PhysicianCode
	END
	--select * from #TempSummaryListPhysiciansByMissingInfoSummary
			SELECT phy.FullName + '(' + phy.PhysicianCode + ')' as ConditionName, mi.Reason, COUNT(*) AS AccessionCount
			FROM tblBillAccessions a
			INNER JOIN tblMissingInformation mi
			ON mi.Accession = a.Accession
			INNER JOIN tblPhysicians phy
			ON phy.PhysicianCode = a.PhysicianCode
			JOIN 
		           #TempSummaryListPhysiciansByMissingInfoSummary t
	             	ON a.PhysicianCode  = t.cID  

			WHERE --(pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)	AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			GROUP BY phy.PhysicianCode, phy.FullName, mi.Reason
			ORDER BY ConditionName, mi.Reason
		
if object_id('tempdb..#TempSummaryListPhysiciansByMissingInfoSummary') is not null
	drop table #TempSummaryListPhysiciansByMissingInfoSummary	
END







GO
/****** Object:  StoredProcedure [dbo].[spBillingReportSummaryByPhysiciansByDenial]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportSummaryByPhysiciansByDenial]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10)

AS
BEGIN
if object_id('tempdb..#TempSummaryListPhysiciansByDenialSummary') is not null
	drop table #TempSummaryListPhysiciansByDenialSummary

	CREATE TABLE #TempSummaryListPhysiciansByDenialSummary
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	

		DECLARE @cID varchar(10), @Pos int
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempSummaryListPhysiciansByDenialSummary (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempSummaryListPhysiciansByDenialSummary (cID)
		SELECT PhysicianCode
		FROM tblPhysicians ORDER BY PhysicianCode
	END
	--select * from #TempSummaryListPhysiciansByDenialSummary
	
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT phy.FullName + '(' + phy.PhysicianCode + ')' as ConditionName, pay.AdjustmentReason as DenialCode, COUNT(*) AS AccessionCount, SUM(ISNULL(pay.TotalFeeAmt, 0.00)) as TotalFeeAmtDenial, SUM(ISNULL(pay.ExpAmt, 0.00)) as TotalExpectedDenial, 
			SUM(pay.PaymentAmt) AS TotalPaidDenial, SUM(pay.AdjustmentAmt) AS TotalAdjustedDenial
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			--INNER JOIN tblClients c
			--ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON phy.PhysicianCode = a.PhysicianCode
			JOIN 
		           #TempSummaryListPhysiciansByDenialSummary t
	             	ON a.PhysicianCode  = t.cID  

			WHERE pay.AdjustmentReason IS NOT NULL and pay.AdjustmentReason <> ''--(pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND PAY.EntryDate between @StartDate and @EndDate
			GROUP BY phy.PhysicianCode, phy.FullName, pay.AdjustmentReason
			ORDER BY ConditionName, DenialCode
		END
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT phy.FullName + '(' + phy.PhysicianCode + ')' as ConditionName, pay.AdjustmentReason as DenialCode, COUNT(*) AS AccessionCount, SUM(ISNULL(pay.TotalFeeAmt, 0.00)) as TotalFeeAmtDenial, SUM(ISNULL(pay.ExpAmt, 0.00)) as TotalExpectedDenial, 
			SUM(pay.PaymentAmt) AS TotalPaidDenial, SUM(pay.AdjustmentAmt) AS TotalAdjustedDenial
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			--INNER JOIN tblClients c
			--ON c.ClientCode = a.ClientCode
			INNER JOIN tblPhysicians phy
			ON phy.PhysicianCode = a.PhysicianCode
			JOIN 
		           #TempSummaryListPhysiciansByDenialSummary t
	             	ON a.PhysicianCode  = t.cID  

			WHERE pay.AdjustmentReason IS NOT NULL and pay.AdjustmentReason <> '' --(pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			GROUP BY phy.PhysicianCode, phy.FullName, pay.AdjustmentReason
			ORDER BY ConditionName, DenialCode
		END
		
if object_id('tempdb..#TempSummaryListPhysiciansByDenialSummary') is not null
	drop table #TempSummaryListPhysiciansByDenialSummary	
END







GO
/****** Object:  StoredProcedure [dbo].[spBillingReportSummaryBySalesRepByCPT]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportSummaryBySalesRepByCPT]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10)

AS
BEGIN
if object_id('tempdb..#TempSummaryListSalesRepsByCPTSummary') is not null
	drop table #TempSummaryListSalesRepsByCPTSummary

	CREATE TABLE #TempSummaryListSalesRepsByCPTSummary
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	

		DECLARE @cID varchar(10), @Pos int
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempSummaryListSalesRepsByCPTSummary (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempSummaryListSalesRepsByCPTSummary (cID)
		SELECT SalesmanCode
		FROM tblSalesman ORDER BY SalesmanCode
	END
	--select * from #TempSummaryListSalesRepsByCPTSummary
	
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT sal.SalesmanName + '(' + sal.SalesmanCode + ')' as ConditionName, pay.CPTCode as CPT, COUNT(*) AS AccessionCount, SUM(pay.TotalFeeAmt) as TotalFeeAmtCPT, SUM(pay.ExpAmt) as TotalExpectedCPT, 
			SUM(pay.PaymentAmt) AS TotalPaidCPT, SUM(pay.AdjustmentAmt) AS TotalAdjustedCPT
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblClientsSalesman cs
			ON cs.ClientCode = c.ClientCode
			INNER JOIN tblSalesman sal
			ON sal.SalesmanCode = cs.SalesmanCode
						JOIN 
		           #TempSummaryListSalesRepsByCPTSummary t
	             	ON sal.SalesmanCode  = t.cID  

			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND PAY.EntryDate between @StartDate and @EndDate
			GROUP BY sal.SalesmanCode, sal.SalesmanName, pay.CPTcode
			ORDER BY ConditionName, CPT
		END
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT sal.SalesmanName + '(' + sal.SalesmanCode + ')' as ConditionName, pay.CPTCode as CPT, COUNT(*) AS AccessionCount, SUM(pay.TotalFeeAmt) as TotalFeeAmtCPT, SUM(pay.ExpAmt) as TotalExpectedCPT, 
			SUM(pay.PaymentAmt) AS TotalPaidCPT, SUM(pay.AdjustmentAmt) AS TotalAdjustedCPT
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblClientsSalesman cs
			ON cs.ClientCode = c.ClientCode
			INNER JOIN tblSalesman sal
			ON sal.SalesmanCode = cs.SalesmanCode
						JOIN 
		           #TempSummaryListSalesRepsByCPTSummary t
	             	ON sal.SalesmanCode  = t.cID  

			WHERE (pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			GROUP BY sal.SalesmanCode, sal.SalesmanName, pay.CPTcode
			ORDER BY ConditionName, CPT
		END
		
if object_id('tempdb..#TempSummaryListSalesRepsByCPTSummary') is not null
	drop table #TempSummaryListSalesRepsByCPTSummary	
END







GO
/****** Object:  StoredProcedure [dbo].[spBillingReportSummaryBySalesRepByDenial]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportSummaryBySalesRepByDenial]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10)

AS
BEGIN
if object_id('tempdb..#TempSummaryListSalesmanByDenialSummary') is not null
	drop table #TempSummaryListSalesmanByDenialSummary

	CREATE TABLE #TempSummaryListSalesmanByDenialSummary
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	

		DECLARE @cID varchar(10), @Pos int
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempSummaryListSalesmanByDenialSummary (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempSummaryListSalesmanByDenialSummary (cID)
		SELECT SalesmanCode
		FROM tblSalesman ORDER BY SalesmanCode
	END
	--select * from #TempSummaryListSalesmanByDenialSummary
	
		IF @DateType = 'PD' --SELECTION BY PAYMENT DATE
		BEGIN
			SELECT sal.SalesmanName + '(' + sal.SalesmanCode + ')' as ConditionName, pay.AdjustmentReason as DenialCode, COUNT(*) AS AccessionCount, SUM(ISNULL(pay.TotalFeeAmt, 0.00)) as TotalFeeAmtDenial, SUM(ISNULL(pay.ExpAmt, 0.00)) as TotalExpectedDenial, 
			SUM(pay.PaymentAmt) AS TotalPaidDenial, SUM(pay.AdjustmentAmt) AS TotalAdjustedDenial
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblClientsSalesman cs
			ON cs.ClientCode = c.ClientCode
			INNER JOIN tblSalesman sal
			ON sal.SalesmanCode = cs.SalesmanCode
			JOIN 
		           #TempSummaryListSalesmanByDenialSummary t
	             	ON sal.SalesmanCode  = t.cID  

			WHERE pay.AdjustmentReason IS NOT NULL and pay.AdjustmentReason <> ''--(pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND PAY.EntryDate between @StartDate and @EndDate
			GROUP BY sal.SalesmanCode, sal.SalesmanName, pay.AdjustmentReason
			ORDER BY ConditionName, DenialCode
		END
		ELSE --NOT BY PaymentDate
		BEGIN
			SELECT sal.SalesmanName + '(' + sal.SalesmanCode + ')' as ConditionName, pay.AdjustmentReason as DenialCode, COUNT(*) AS AccessionCount, SUM(ISNULL(pay.TotalFeeAmt, 0.00)) as TotalFeeAmtDenial, SUM(ISNULL(pay.ExpAmt, 0.00)) as TotalExpectedDenial, 
			SUM(pay.PaymentAmt) AS TotalPaidDenial, SUM(pay.AdjustmentAmt) AS TotalAdjustedDenial
			FROM tblPayment pay
			INNER JOIN tblBillAccessions a
			on a.Accession = pay.Accession
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			INNER JOIN tblClientsSalesman cs
			ON cs.ClientCode = c.ClientCode
			INNER JOIN tblSalesman sal
			ON sal.SalesmanCode = cs.SalesmanCode
			JOIN 
		           #TempSummaryListSalesmanByDenialSummary t
	             	ON sal.SalesmanCode  = t.cID  

			WHERE pay.AdjustmentReason IS NOT NULL and pay.AdjustmentReason <> '' --(pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)
			AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			GROUP BY sal.SalesmanCode, sal.SalesmanName, pay.AdjustmentReason
			ORDER BY ConditionName, DenialCode
		END
		
if object_id('tempdb..#TempSummaryListSalesmanByDenialSummary') is not null
	drop table #TempSummaryListSalesmanByDenialSummary	
END




GO
/****** Object:  StoredProcedure [dbo].[spBillingReportSummaryBySalesRepByMissingInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
create PROCEDURE [dbo].[spBillingReportSummaryBySalesRepByMissingInfo]

	@Items varchar(MAX),
	@StartDate datetime ,
	@EndDate datetime,
	@DateType varchar(10)

AS
BEGIN
if object_id('tempdb..#TempSummaryListClientsByMissingInfoSummary') is not null
	drop table #TempSummaryListClientsByMissingInfoSummary

	CREATE TABLE #TempSummaryListClientsByMissingInfoSummary
		(
			cID varChar(100)
		)
	IF @Items not like 'ALL'
	BEGIN  
	

		DECLARE @cID varchar(10), @Pos int
		SET @Items = LTRIM(RTRIM(@Items))+ '|'
		SET @Pos = CHARINDEX('|', @Items, 1)
		IF REPLACE(@Items, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Items, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempSummaryListClientsByMissingInfoSummary (cID) VALUES (@cID)
				END
				SET @Items = RIGHT(@Items, LEN(@Items) - @Pos)
				SET @Pos = CHARINDEX('|', @Items, 1)

			END
		END	
	END
	ELSE
	BEGIN
		INSERT INTO #TempSummaryListClientsByMissingInfoSummary (cID)
		SELECT SalesmanCode
		FROM tblSalesman ORDER BY SalesmanCode
	END
	--select * from #TempSummaryListClientsByMissingInfoSummary
			SELECT sal.SalesmanName + '(' + sal.SalesmanCode + ')' as ConditionName, mi.Reason, COUNT(*) AS AccessionCount
			FROM tblBillAccessions a
			INNER JOIN tblMissingInformation mi
			ON mi.Accession = a.Accession
			INNER JOIN tblClients c
			ON c.ClientCode = a.ClientCode
			LEFT OUTER JOIN tblClientsSalesman cs
			ON cs.ClientCode = c.ClientCode
			LEFT OUTER JOIN tblSalesman sal
			ON sal.SalesmanCode = cs.SalesmanCode
			JOIN 
		           #TempSummaryListClientsByMissingInfoSummary t
	             	ON sal.SalesmanCode  = t.cID  

			WHERE --(pay.PaymentAmt <> 0 or pay.AdjustmentAmt <> 0)	AND
			CASE @DateType
				WHEN 'DOS' THEN a.CollectionDate
				WHEN 'RD' THEN  a.ReceiveDate
				WHEN 'BD' THEN a.DateCreated
				ELSE a.CollectionDate 
			END between @startdate and @enddate
			GROUP BY sal.SalesmanCode , sal.SalesmanName, mi.Reason
			ORDER BY ConditionName, mi.Reason
		
if object_id('tempdb..#TempSummaryListClientsByMissingInfoSummary') is not null
	drop table #TempSummaryListClientsByMissingInfoSummary	
END




GO
/****** Object:  StoredProcedure [dbo].[spBillingWorkFilereport2]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
  
CREATE PROCEDURE [dbo].[spBillingWorkFilereport2]  
@billerCode as varchar(20)= NULL,  
@billType as varchar(100) = NULL,  
@Payer as varchar(20) = NULL  
   
AS  
BEGIN  
  if @billerCode = 'All'   
  BEGIN  
   SET @billerCode = NULL  
  END  
  if @billType = ''   
  BEGIN  
   SET @billType = NULL  
  END  
  if @Payer = ''   
  BEGIN  
   SET @Payer = NULL  
  END  
 IF @billerCode is null  
 BEGIN  
  Select Accession, PatientName, BirthDate, BillType, Ins_Code, InsuranceName, Policy_Number, ClientCode, ClientName,   
  RequestingPhysician, ServiceDate, UpToThirtyDays, ThirtyOneToSixtyDays, SiztyOneToNintyDays as SixtyOneToNintyDays, OverNintyDays,   
  'Color' = CASE  
  When OverNintyDays > 0 then 'R'  
  When SiztyOneToNintyDays > 0 then 'Y'  
  else  
  'W'  
    end   
  From dbo.tblWorkFile_Report_Summation_Table  
  WHERE (UpToThirtyDays > 0.00 or ThirtyOneToSixtyDays > 0.00 or SiztyOneToNintyDays > 0.00 or OverNintyDays > 0.00)  
  AND ISNULL(Ins_Code,'') LIKE ISNULL(@Payer, Ins_Code)  
  AND ISNULL(BillType,'') LIKE ISNULL(@billType, BillType)  
  order by InsuranceName, ServiceDate   
 END   
 ELSE  
 BEGIN  
  IF @billerCode = 'Unassigned'  
  BEGIN  
   Select Accession, PatientName, BirthDate, BillType, Ins_Code, InsuranceName, Policy_Number, ClientCode, ClientName,   
   RequestingPhysician, ServiceDate, UpToThirtyDays, ThirtyOneToSixtyDays, SiztyOneToNintyDays as SixtyOneToNintyDays, OverNintyDays,   
   'Color' = CASE  
   When OverNintyDays > 0 then 'R'  
   When SiztyOneToNintyDays > 0 then 'Y'  
   else  
   'W'  
     end   
   From dbo.tblWorkFile_Report_Summation_Table  
   WHERE (UpToThirtyDays > 0.00 or ThirtyOneToSixtyDays > 0.00 or SiztyOneToNintyDays > 0.00 or OverNintyDays > 0.00)  
   AND ISNULL(Ins_Code,'') LIKE ISNULL(@Payer, Ins_Code)  
   AND ISNULL(BillType,'') LIKE ISNULL(@billType, BillType)  
   AND Ins_Code NOT IN (SELECT InsuranceCode from tblCollectorInsuranceCodes A INNER JOIN tblCollectorBillTypeCodes B ON A.UserID = B.UserID)  
   order by InsuranceName, ServiceDate   
  END  
  ELSE  
  BEGIN  
   Select Accession, PatientName, BirthDate, BillType, Ins_Code, InsuranceName, Policy_Number, ClientCode, ClientName,   
   RequestingPhysician, ServiceDate, UpToThirtyDays, ThirtyOneToSixtyDays, SiztyOneToNintyDays as SixtyOneToNintyDays, OverNintyDays,   
   'Color' = CASE  
   When OverNintyDays > 0 then 'R'  
   When SiztyOneToNintyDays > 0 then 'Y'  
   else  
   'W'  
       end   
   From dbo.tblWorkFile_Report_Summation_Table  
   left outer join tblCollectorInsuranceCodes  
   on tblCollectorInsuranceCodes.InsuranceCode = dbo.tblWorkFile_Report_Summation_Table.Ins_Code  
   and tblCollectorInsuranceCodes.UserID = @billerCode  
   left outer join tblCollectorBillTypeCodes  
   on tblCollectorBillTypeCodes.BillTypeCode = dbo.tblWorkFile_Report_Summation_Table.BillType  
   and tblCollectorBillTypeCodes.UserID = @billerCode  
   WHERE (UpToThirtyDays > 0.00 or ThirtyOneToSixtyDays > 0.00 or SiztyOneToNintyDays > 0.00 or OverNintyDays > 0.00)  
   AND ISNULL(Ins_Code,'') LIKE ISNULL(@Payer, Ins_Code)  
   AND ISNULL(BillType,'') LIKE ISNULL(@billType, BillType)  
   AND Ins_Code in (select InsuranceCode from tblCollectorInsuranceCodes where UserID = @billerCode)  
   AND BillType in (Select BillTypeCode from tblCollectorBillTypeCodes where UserID = @billerCode)  
   order by InsuranceName, ServiceDate   
  END  
 END   
END  
  
  
  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spBillSetPtRespFlag]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************************
This procedure will update tblBill's ptRespFlag from PostCash
***************************************************************************/
CREATE PROCEDURE [dbo].[spBillSetPtRespFlag]
	@Accession varchar(100),
	@CPTCode varchar(100),
	@ptRespFlag bit,
	@Modifier varchar(100) = '',
	@QSSLastUpdatedID as varchar(20) 
	
AS
BEGIN
Declare @CPTCode1 varchar(100)
--Declare @Modifier varchar(100) = ''
if charindex(':', @CPTCode) > 0 
begin
	Select @Modifier = ''
	Set @CPTCode1 = substring(@CPTCode, 1, charindex(':', @CPTCode) - 1)
	Set @Modifier = substring(@CPTCode, charindex(':', @CPTCode) + 1, len(@CPTCode) - charindex(':', @CPTCode) + 1)
end
else begin
	Set @CPTCode1 = @CPTCode
end
IF EXISTS( SELECT Accession from dbo.tblBill 
	WHERE Accession = @Accession 
	AND   CPTcode   = @CPTCode1
	AND isnull(Modifier, '') = @Modifier
	)
	BEGIN
		Update dbo.tblBill
		SET	ptRespFlag = @ptRespFlag
		WHERE Accession = @Accession 
		AND   CPTcode   = @CPTCode1
		AND isnull(Modifier, '') = @Modifier
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spBulkImport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spBulkImport]

@tableName varchar(50),
@PathFileName varchar(200)

AS

DECLARE @SQL varchar(2000)

BEGIN
--delete all data from table and insert new data from file
SET @SQL = 'Delete from '+@tableName+' BULK INSERT '+@tableName+' FROM "'+@PathFileName+'" WITH (FIELDTERMINATOR = ''\t'', ROWTERMINATOR = ''\n'') '

--APPEND DATA TO THE END OF TABLE
--SET @SQL = 'BULK INSERT '+@tableName+' FROM "'+@PathFileName+'" WITH (DATAFILETYPE = ''widechar'', FIELDTERMINATOR = ''\t'', ROWTERMINATOR = ''\n'',KEEPNULLS) '
END

EXEC (@SQL)
GO
/****** Object:  StoredProcedure [dbo].[spChangeBillAccessionBillType]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spChangeBillAccessionBillType]  
 @Accession varchar(100),
 @CurrentBillType  varchar(20) = NULL
 
AS  
BEGIN  

IF EXISTS( SELECT Accession from tblBillAccessions WHERE  Accession = @Accession)
	BEGIN
		UPDATE tblBillAccessions
		SET 
		CurrentBillType	= @CurrentBillType
		WHERE Accession	= @Accession
	END
END

GO
/****** Object:  StoredProcedure [dbo].[spCheckAccessionBillExist]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spCheckAccessionBillExist] 
	
	@Accession varchar(20)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT TOP 1 DiscountPercentage, OrderedTestCode FROM tblBill (NOLOCK)
	WHERE Accession = @Accession
		
END
GO
/****** Object:  StoredProcedure [dbo].[spCheckAccessionPatientUpdates]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spCheckAccessionPatientUpdates]
	-- Add the parameters for the stored procedure here
	@Accession as varchar(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT ac1.Accession from tblAccessions ac
	inner join tblAccessions ac1
	on ac1.PatientId = ac.PatientId
	and ac1.PatientUpdated = 1
	where ac.Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spCheckAccessionTestVersion]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spCheckAccessionTestVersion] 	
	@Accession varchar(100)
AS
BEGIN
	

	SELECT       tblResultedTests.Version, tblResultCodeVersions.CurrentVersion,tblResultCodeVersions.TestCode
	FROM         tblResultedTests INNER JOIN
						  tblResultCodeVersions ON tblResultedTests.ResultTest = tblResultCodeVersions.TestCode
	WHERE     (tblResultedTests.Accession = @Accession)    


end

GO
/****** Object:  StoredProcedure [dbo].[spCheckAccessoinTestOrderToInstrument]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spCheckAccessoinTestOrderToInstrument] 

@Accession varchar(50)
AS
BEGIN
	      --For DXI800 instrument order 
  if exists(SELECT rt.resulttest from tblInstrumentElements ie     
     LEFT JOIN dbo.tblResultedTests rt (NOLOCK)  
     ON rt.ResultTest = ie.ResultTest    
	  left join dbo.tblInstrumentDXITestOrderSent s
	 on rt.Accession = s.Accession and rt.ResultTest=s.ResultTest
  WHERE rt.ResultTest = ie.ResultTest and ie.InstrumentCode ='DXI800' 
  and rt.Accession = @accession and Status not in ('Final','cancelled') and ie.InstrumentCD<>''
    and s.ResultTest is null)  
    
 BEGIN  
   IF NOT EXISTS ( SELECT accession FROM [tblInstrumentAccessionQueryDXI] WHERE Accession = @Accession )  
   BEGIN  
    insert into [tblInstrumentAccessionQueryDXI]  
    (Accession)  
    values  
    (@Accession) 
	
	 --insert into tblInstrumentDXITestOrderSent
	 --select rt.accession, rt.resulttest from tblInstrumentElements ie     
  --   LEFT JOIN dbo.tblResultedTests rt (NOLOCK)  
  --   ON rt.ResultTest = ie.ResultTest    
	 -- left join dbo.tblInstrumentDXITestOrderSent s
	 --on rt.Accession = s.Accession and rt.ResultTest=s.ResultTest
	 -- WHERE rt.ResultTest = ie.ResultTest and ie.InstrumentCode ='DXI800' 
	 -- and rt.Accession = @accession and Status not in ('Final','cancelled') and ie.InstrumentCD<>''
	 -- and s.ResultTest is null

	   END  
 END    


      --For LH750 instrument order 
  if exists(SELECT rt.resulttest from tblInstrumentElements ie     
     LEFT JOIN dbo.tblResultedTests rt (NOLOCK)  
     ON rt.ResultTest = ie.ResultTest    
  WHERE rt.ResultTest = ie.ResultTest and ie.InstrumentCode ='LH750' and rt.Accession = @accession and Status not in ('Final','cancelled') and ie.InstrumentCD<>'')  
    
 BEGIN  
   IF NOT EXISTS ( SELECT accession FROM [tblInstrumentAccessionQuery] WHERE Accession = @Accession )  
   BEGIN  
    insert into [tblInstrumentAccessionQuery]  
    (Accession)  
    values  
    (@Accession)  
   END  
 END   


END
GO
/****** Object:  StoredProcedure [dbo].[spCheckClientInterface]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spCheckClientInterface] 
	@ClientCode varchar(50)
AS
BEGIN

	SET NOCOUNT ON


	SELECT Interface
	FROM tblClients (NOLOCK)
	WHERE ClientCode = @ClientCode
END
GO
/****** Object:  StoredProcedure [dbo].[spCheckCPTGroup]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
CREATE PROCEDURE [dbo].[spCheckCPTGroup]   
   
 @ResultCode varchar(200),  
 @BillToType varchar(100)  
AS  
BEGIN  
 SET NOCOUNT ON;  
  
 Select GroupCPTCode from tblCPTGroups  
 Where ResultCodes = @ResultCode and BillTypeCode = @BillToType  
    
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spCheckCPTScale]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spCheckCPTScale] 
	
	@CPTCode varchar(50),
	@BillToType varchar(50)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT * FROM tblCPTScaleMaintance (NOLOCK)
	WHERE CPTCode = @CPTCode and InsuranceType= @BillToType
		
END
GO
/****** Object:  StoredProcedure [dbo].[spCheckDOHTestexists]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spCheckDOHTestexists] 
	@Accession varchar(100)
AS
BEGIN
SET NOCOUNT ON;


	SELECT doh.ResultTest
	FROM tblResultedTests rt with (NOLOCK)
	inner join tblResulttestforDOH doh on rt.ResultTest=doh.resulttest
	inner join tblaccessions acc on rt.accession =acc.accession 
	inner join tblclients c on acc.clientcode=c.clientcode
	where rt.Accession = @Accession 
	and (doh.ResultTest in ('LD300', 'LD301','SARS') or  ((doh.ResultTest like 'I%' or doh.resulttest like 'X%') and (rt.Result='positive' or rt.Result='reactive'))) 
	and c.state='NY'
                    
END

GO
/****** Object:  StoredProcedure [dbo].[spCheckForReserved]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spCheckForReserved]	
	@AccessionID varchar(100)
AS
BEGIN

	Select * from tblReservedAccessionsPool where AccessionID = @AccessionID

	
END
GO
/****** Object:  StoredProcedure [dbo].[spcheckQCOrderExists]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spcheckQCOrderExists]
	@OrderID as varchar(20)
	
AS
BEGIN
	SELECT OrderID
	FROM tblControlOrders (nolock) 
	WHERE OrderID =  @OrderID
	
END
GO
/****** Object:  StoredProcedure [dbo].[spCheckTempPassword]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--exec spCheckTempPassword '04503', '04503'

CREATE PROCEDURE [dbo].[spCheckTempPassword]
(
	
	@UserID varchar(20)

)
As
BEGIN
if object_id('tempdb..#tmpTempPassword') is not null
	drop table #tmpTempPassword
	
CREATE TABLE #tmpTempPassword
( UserID varchar(20) NULL,
  TemporaryPassword varchar(100) NULL
)
	INSERT INTO #tmpTempPassword
	SELECT u.UserID, ISNULL(u.TempPassword,'') As TemporaryPassword	
	FROM tblUsersID u (NOLOCK)	
	WHERE 		
		u.UserID = @UserID 
	IF NOT EXISTS( SELECT UserID FROM #tmpTempPassword)
	   BEGIN
		  INSERT INTO #tmpTempPassword(UserID, TemporaryPassword) 
		  Values (@UserID, '')
	   END 	
	   
	  SELECT * FROM #tmpTempPassword		
END
GO
/****** Object:  StoredProcedure [dbo].[spCreateHighLowTests]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		HF
-- Create date: 06/30/2011
-- Description:	This procedure creates one or more Ordered Tests, Resulted Tests, based on the tests seleced for a give Requisition
-- <4/27/2017><Gladson> - Added check for ResultTest duplication in tblResultedTests for Reflexed @OrderedTest.
--							 When the duplication occurs, it will change the status of ResultTest to Cancelled.
-- <8/1/2017><Gladson> Added columns tblResultedTests.InternalComment. 
-- =============================================
CREATE PROCEDURE [dbo].[spCreateHighLowTests]
	@Accession as varchar(50),
	@OrderedTest as varchar(100),	
	@Source as varchar(50)  = NULL ,
	@TestComment as varchar(200)  = ''  ,
	@UserID as varchar(20)  = NULL  ,	
	@QSSVersionNumber as int  = NULL  ,
	@Count as int = 0
	
AS
BEGIN
SET NOCOUNT ON
DECLARE   @PerformedTestCode as varchar(max)
	    , @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @FieldList varchar(2000)
		, @PerformedTest varchar(20)
		, @ResultedTestCodes varchar(max)
		, @ResultedTests varchar(max)
		, @ResultedTestCode varchar(20)
		, @PatientGender varchar(20)
		, @PatientDOB datetime 
		, @Age integer
		, @AccessionOrderedTests as varchar(max)

If @OrderedTest is not null
begin
	If len(@OrderedTest) > 0 
	Begin
		--PA 06/26/2018 : check for if ordered test is in the accession
		--Put result of SplitString into tmp table to allow use of maxrecursion - option clause disallowed in subqueries
		select accTestList.value as TestCode into #tmpAccTestList from tblAccessions 
		cross apply SplitString(tblAccessions.OrderedTests, '|') accTestList 
		inner join  tblOrderedTestsDefinitions on tblOrderedTestsDefinitions.OrderedTest =  accTestList.Value
		where Accession = @Accession  option (maxrecursion 0)
		if @OrderedTest not in (select TestCode from #tmpAccTestList)
		Begin
			SELECT @PerformedTestCode = PerformedTestCode from tblOrderedTestsDefinitions
									where OrderedTest = @OrderedTest

		
			CREATE TABLE #tmpPerformedTest
			(
				PerformedTest varchar(20) NOT NULL
			)
			CREATE TABLE #tmpResultedTest
			(
				ResultedTestCode varchar(20) NOT NULL
			)
			if @Count = 0
			Begin
			delete from tblOrderedTests where Accession = @Accession
			delete from tblResultedTests where Accession = @Accession
			end

			Set @FieldList =''
			Set @FieldList = @PerformedTestCode + '|'
			Set @StartPos = 1
			Set @EndPos = 1
			 -- Start the looping operation
			While @EndPos > 0
			   Begin
				  Set @EndPos = CharIndex('|', @FieldList, @StartPos)
				  If @EndPos > 0
					 Begin
						Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
			 
						-- Add current row to TempTable
						Insert #tmpPerformedTest (PerformedTest) Values (@CurVal)
						Set @StartPos = @EndPos + 1
					 End
   
			   --PRINT @FieldList
			 END
			 --- Get patient Information
			SELECT @PatientGender = ptSex , @PatientDOB = ptDateOfBirth 
			from tblPatient pat (nolock)
			INNER JOIN tblAccessions acc (nolock)
			ON pat.PatientId = acc.PatientID
			where acc.Accession = @Accession

			SET @Age  = DATEDIFF(year,@PatientDOB, getDate())
			declare @sex as varchar(20)
			declare @minage as int
			declare @maxage as int

				DECLARE PERFORMEDTESTCODE_CURSOR CURSOR READ_ONLY FOR 
				SELECT  PerformedTest
				FROM #tmpPerformedTest
				ORDER BY PerformedTest 
				OPEN PERFORMEDTESTCODE_CURSOR

			FETCH NEXT FROM PERFORMEDTESTCODE_CURSOR
				INTO   @PerformedTest
				--PRINT  @PerformedTest

			WHILE @@FETCH_STATUS = 0
			BEGIN 
   
				SELECT @ResultedTests = ResultTestCode from tblPerformedTestsDefinitions (nolock)
				where PerformedTest = @PerformedTest
				--Build a #tmpResultedTest table for each tblPerformedTestsDefinitions.PerformedTest
				delete from  #tmpResultedTest
				Set @FieldList =''
				Set @FieldList = @ResultedTests + '|'
				Set @StartPos = 1
				Set @EndPos = 1
				While @EndPos > 0
					Begin
						Set @EndPos = CharIndex('|', @FieldList, @StartPos)
						If @EndPos > 0
						Begin
							Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
			 
							-- Add current row to TempTable
							Insert #tmpResultedTest (ResultedTestCode) Values (@CurVal)
							Set @StartPos = @EndPos + 1
						End
					END
				DECLARE RESULTTESTCODE_CURSOR CURSOR READ_ONLY FOR 
				SELECT  ResultedTestCode
				FROM #tmpResultedTest
				ORDER BY ResultedTestCode 
				OPEN RESULTTESTCODE_CURSOR
	
				FETCH NEXT FROM RESULTTESTCODE_CURSOR
				INTO   @ResultedTestCode

				WHILE @@FETCH_STATUS = 0
				BEGIN 
				 -- check for PerformedTest duplication in tblResultedTests - When there is duplicate skip insert into tblResultedTests
				 IF NOT EXISTS ( SELECT ResultTest FROM tblResultedTests WHERE 
							Accession = @Accession AND PerformedTest = @PerformedTest AND ResultTest = @ResultedTestCode)
				 BEGIN
	    
					Declare @WorkSheet  varchar(20), @InternalComment varchar (1000)  
					SELECT @WorkSheet = worksheet FROM tblResultedTestsDefinitions WHERE TestCode = @ResultedTestCode	    
					SET @InternalComment = @TestComment + '. Test Cancelled due to duplication (' + CONVERT(VARCHAR(8),GETDATE(),1) + ' ' + RIGHT(CONVERT(VARCHAR, GETDATE(), 100),7) + ').';
					SET @TestComment = @TestComment + ' (' + CONVERT(VARCHAR(8),GETDATE(),1) + ' ' + RIGHT(CONVERT(VARCHAR, GETDATE(), 100),7) + ').';
					-- check for ResultTest duplication in tblResultedTests - When there is duplicate insert into tblOrderedTests with Cancelled Status
					IF EXISTS (SELECT 1 FROM tblResultedTests WHERE Accession = @Accession AND ResultTest = @ResultedTestCode AND [Status] IN ('Final', 'Hold', 'Pending'))
						INSERT INTO tblResultedTests (Accession, PerformedTest, ResultTest, Worksheet, [Status], InternalComment, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion )
						VALUES (@Accession, @PerformedTest, @ResultedTestCode, @WorkSheet, 'Cancelled', @InternalComment, @UserID, GETDATE(), @UserID,  GETDATE(), 0 )
					ELSE
						--Not a duplicate - insert into tblResultedTests with Pending Status
						INSERT INTO tblResultedTests (Accession, PerformedTest, ResultTest, Worksheet, [Status], InternalComment, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion )
						VALUES (@Accession, @PerformedTest, @ResultedTestCode, @WorkSheet, 'Pending', @TestComment, @UserID, GETDATE(), @UserID,  GETDATE(), 0 )
		
					-- set the sex parameter
					select @sex = tblResultedTestsParams.sex, @minage = tblResultedTestsParams.minage, @maxage = tblResultedTestsParams.maxage   
					FROM  tblResultedTests 
					INNER JOIN tblResultedTestsParams
					on tblResultedTests.ResultTest =  tblResultedTestsParams.ResultedTest
					WHERE Accession   =  @Accession
					AND PerformedTest =  @PerformedTest
					AND ResultTest    =  @ResultedTestCode

					if @sex = null or @sex = ''
					begin
						Update tblResultedTests

							 SET NormalRange = case  
							 --NOT USED when UseAlpha = 'True' then alphaNormal
									   when UseRangeLimits = 'True' then NormalLowLimit + '-' + NormalHighLimit
									   When UseCutoffLimit = 'True' then case when CutoffLowLimit != '' AND CutoffHighLimit != '' then  CutoffLowLimit + '-' + CutoffHighLimit 
																	  when CutoffLowLimit != '' AND CutoffHighLimit = '' then '>' + CutoffLowLimit
																	  when CutoffLowLimit  = '' AND CutoffHighLimit != '' then '<' + CutoffHighLimit
																	   end
															 end, Units = tblResultedTestsDefinitions.units,
							Version = tblResultCodeVersions.CurrentVersion												 
							 FROM  tblResultedTests 
							 INNER JOIN tblResultedTestsParams
							 on tblResultedTests.ResultTest =  tblResultedTestsParams.ResultedTest
							  inner join tblResultedTestsDefinitions
							 on tblResultedTests.ResultTest =  tblResultedTestsDefinitions.TestCode
	             
							 INNER JOIN  tblResultCodeVersions ON tblResultedTests.ResultTest = tblResultCodeVersions.TestCode 
							 and tblResultedTestsDefinitions.version = tblResultCodeVersions.CurrentVersion
	 						 AND tblResultedTestsParams.Version = tblResultCodeVersions.CurrentVersion
	             
	             
	             
							 WHERE Accession   =  @Accession
							 AND PerformedTest =  @PerformedTest
							 AND ResultTest    =  @ResultedTestCode
			 	   
					end

					Update tblResultedTests
						 SET NormalRange = case  
						 -- NOT USED when UseAlpha = 'True' then alphaNormal
								   when UseRangeLimits = 'True' then NormalLowLimit + '-' + NormalHighLimit
								   When UseCutoffLimit = 'True' then case when CutoffLowLimit != '' AND CutoffHighLimit != '' then CutoffLowLimit + '-' + CutoffHighLimit 
																  when CutoffLowLimit != '' AND CutoffHighLimit = '' then '>' + CutoffLowLimit
																  when CutoffLowLimit  = '' AND CutoffHighLimit != '' then '<' + CutoffHighLimit
																   end
														 end,Units = tblResultedTestsDefinitions.units,
						 Version = tblResultCodeVersions.CurrentVersion
						 FROM  tblResultedTests 
						 INNER JOIN tblResultedTestsParams
						 ON tblResultedTests.ResultTest =  tblResultedTestsParams.ResultedTest
						  inner join tblResultedTestsDefinitions
						 on tblResultedTests.ResultTest =  tblResultedTestsDefinitions.TestCode
	         
						 INNER JOIN  tblResultCodeVersions ON tblResultedTests.ResultTest = tblResultCodeVersions.TestCode 
						 and tblResultedTestsDefinitions.version = tblResultCodeVersions.CurrentVersion
 						 AND tblResultedTestsParams.Version = tblResultCodeVersions.CurrentVersion
	             	         
	         
						 WHERE Accession   =  @Accession
						 AND PerformedTest =  @PerformedTest
						 AND ResultTest    =  @ResultedTestCode
						 AND tblResultedTestsParams.Sex = @PatientGender
						 AND @Age BETWEEN tblResultedTestsParams.MinAge and tblResultedTestsParams.MaxAge
			 
			 
					 --- Update Records that have no values set in NormalRange.
					 Update tblResultedTests
					 SET NormalRange = 'No Range'
					 WHERE Accession =  @Accession
					 AND PerformedTest =  @PerformedTest
					 AND ResultTest    =  @ResultedTestCode
					 AND (NormalRange IS NULL OR NormalRange = '')
	
					END
		
					FETCH NEXT FROM RESULTTESTCODE_CURSOR
					INTO   @ResultedTestCode
				END
				CLOSE RESULTTESTCODE_CURSOR
				DEALLOCATE RESULTTESTCODE_CURSOR
	
				-- Create tblOrderedTests for @PerformedTest
				IF NOT EXISTS ( SELECT OrderedTest FROM tblOrderedTests WHERE Accession = @Accession AND PerformedTest = @PerformedTest)
					INSERT INTO tblOrderedTests (Accession, OrderedTest, PerformedTest, Source, TestComment, BillStatus, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion )
					values (@Accession, @OrderedTest, @PerformedTest, @Source, @TestComment , 'BILL', @UserID, GETDATE(), @UserID, GETDATE(), @QSSVersionNumber );
					EXEC spPopulateMailoutOrder @Accession

				FETCH NEXT FROM PERFORMEDTESTCODE_CURSOR
				INTO   @PerformedTest
	
			END	 
			CLOSE PERFORMEDTESTCODE_CURSOR
			DEALLOCATE PERFORMEDTESTCODE_CURSOR  
 
			--Append reflex test to tblAccessions.OrderedTests
			SELECT @AccessionOrderedTests = OrderedTests FROM tblAccessions WHERE Accession = @Accession;
			IF NOT EXISTS (SELECT 1 FROM SplitString(@AccessionOrderedTests, '|') WHERE Value = @OrderedTest)
				UPDATE tblAccessions SET OrderedTests = @AccessionOrderedTests + '|' + @OrderedTest, QSSLastUpdateID = @UserID, QSSUpdateDate = GETDATE(), QSSVersion = QSSVersion + 1
				WHERE Accession = @Accession;

			SET @QSSVersionNumber = (SELECT QSSVersion FROM tblAccessions WHERE Accession = @Accession);
			EXEC spAuditAccession @Accession = @Accession , @QSSVersionNumber = @QSSVersionNumber, @AuditType = 'U';
		End
	End
End
END

GO
/****** Object:  StoredProcedure [dbo].[spCreateMissingPerformedTestWithTranslation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[spCreateMissingPerformedTestWithTranslation]

      @PerformedTestCode varchar(100), 
	  @PerformedTestCodeName varchar(100), 
	  @codePrefix varchar(5)

AS

BEGIN
DECLARE @LISPerformedTestCode as varchar(100)
SET @LISPerformedTestCode = @codePrefix + @PerformedTestCode
	if NOT EXISTS (select PerformedTest from tblPerformedTestsDefinitions where PerformedTest = @LISPerformedTestCode)    
	BEGIN    
	  INSERT INTO tblPerformedTestsDefinitions (PerformedTest, InternalDescription, ExternalDescription, ResultTestCode, PerformedBy, MailoutFlag, MailoutLab,    
	  RequiredSpeciments, RequiredVolume, Preservative, ShippingTemp, Instructions, Turnaround, AdditionalInfoScreen, AdditionalInfoScreenTemplate,    
	  QSSCreatedByID, QSSCreatedDate)    
	  VALUES (@LISPerformedTestCode, @PerformedTestCodeName, @PerformedTestCodeName, 'MAILOUT', 'AccuReference', 'M', 'ACCUREFERENCE',  '', '', '', 'ambient', '', '', 'False', '', 'ACCUREFERENCE',     
	  GetDate())  
		 if NOT EXISTS (select MailoutTestCode from tblMailoutTestCodes where MailoutTestCode = @PerformedTestCode)    
		 BEGIN  
			INSERT INTO tblMailoutTestCodes([MailoutLabCode], [TestCode], [MailoutTestCode])
			VALUES('ACCUREFERENCE', @LISPerformedTestCode, @PerformedTestCode)
		 END
   
 END  
 ELSE
 BEGIN
	if NOT EXISTS (select MailoutTestCode from tblMailoutTestCodes where MailoutTestCode = @PerformedTestCode)    
		 BEGIN  
			INSERT INTO tblMailoutTestCodes([MailoutLabCode], [TestCode], [MailoutTestCode])
			VALUES('ACCUREFERENCE', @LISPerformedTestCode, @PerformedTestCode)
		 END
 END  

END
GO
/****** Object:  StoredProcedure [dbo].[spCreateMissingPerformedTestWithTranslationSunrise]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
create PROCEDURE [dbo].[spCreateMissingPerformedTestWithTranslationSunrise]  
  
      @PerformedTestCode varchar(100),   
   @PerformedTestCodeName varchar(100),   
   @codePrefix varchar(5)  
  
AS  
  
BEGIN  
DECLARE @LISPerformedTestCode as varchar(100)  
SET @LISPerformedTestCode = @codePrefix + @PerformedTestCode  
 if NOT EXISTS (select PerformedTest from tblPerformedTestsDefinitions where PerformedTest = @LISPerformedTestCode)      
 BEGIN      
   INSERT INTO tblPerformedTestsDefinitions (PerformedTest, InternalDescription, ExternalDescription, ResultTestCode, PerformedBy, MailoutFlag, MailoutLab,      
   RequiredSpeciments, RequiredVolume, Preservative, ShippingTemp, Instructions, Turnaround, AdditionalInfoScreen, AdditionalInfoScreenTemplate,      
   QSSCreatedByID, QSSCreatedDate)      
   VALUES (@LISPerformedTestCode, @PerformedTestCodeName, @PerformedTestCodeName, 'MAILOUT', 'SUNRISE', 'M', 'SUNRISE',  '', '', '', 'ambient', '', '', 'False', '', 'SUNRISE',       
   GetDate())    
   if NOT EXISTS (select MailoutTestCode from tblMailoutTestCodes where MailoutTestCode = @PerformedTestCode)      
   BEGIN    
   INSERT INTO tblMailoutTestCodes([MailoutLabCode], [TestCode], [MailoutTestCode])  
   VALUES('SUNRISE', @LISPerformedTestCode, @PerformedTestCode)  
   END  
     
 END    
 ELSE  
 BEGIN  
 if NOT EXISTS (select MailoutTestCode from tblMailoutTestCodes where MailoutTestCode = @PerformedTestCode)      
   BEGIN    
   INSERT INTO tblMailoutTestCodes([MailoutLabCode], [TestCode], [MailoutTestCode])  
   VALUES('SUNRISE', @LISPerformedTestCode, @PerformedTestCode)  
   END  
 END    
  
END
GO
/****** Object:  StoredProcedure [dbo].[spCreateOrderedTests2]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  HF    
-- Create date: 06/30/2011    
-- Description: This procedure creates one or more Ordered Tests, Resulted Tests, based on the tests seleced for a give Requisition 
-- Update: Hanane 03/08 remove comparing the worksheet when getting the old result sfrom the temp table      
--<03/05/2019><Hanane> get age as decimal
-- =============================================    
CREATE PROCEDURE [dbo].[spCreateOrderedTests2]    
 @Accession as varchar(50),    
 @OrderedTest as varchar(100),     
 @Source as varchar(50)  = NULL ,    
 @TestComment as varchar(200)  = ''  ,    
 @QSSCreatedByID as varchar(20)  = NULL  ,    
 @QSSCreatedDate as datetime  = NULL  ,    
 @QSSLastUpdatedID as varchar(20)  = NULL  ,    
 @QSSUpdateDate as datetime  = NULL  ,    
 @QSSVersionNumber as int  = NULL  ,    
 @Count as int = 0,     
 @UpdateVersion as int    
     
AS    
BEGIN    
SET NOCOUNT ON    
DECLARE   @PerformedTestCode as varchar(max)    
     , @StartPos smallint    
  , @EndPos smallint    
  , @CurVal varchar(20)    
  , @FieldList varchar(2000)    
  , @PerformedTest varchar(20)    
  , @ResultedTestCodes varchar(max)    
  , @ResultedTests varchar(max)    
  , @ResultedTestCode varchar(20)    
  , @PatientGender varchar(20)    
  , @PatientDOB datetime     
  , @Age decimal(11,5)   
    
    
SELECT @PerformedTestCode = PerformedTestCode from tblOrderedTestsDefinitions    
                        where OrderedTest = @OrderedTest    
    
      
     
CREATE TABLE #tmpPerformedTest    
(    
    PerformedTest varchar(20) NOT NULL    
)    
    
CREATE TABLE #tmpResultedTest    
(    
    ResultedTestCode varchar(20) NOT NULL    
)    
    
    
if @Count = 0    
Begin    
--Save current resuls to temp table to update results after creating order    
IF OBJECT_ID('TempResult') IS NOT NULL DROP TABLE TempResult    
    
Select *  into TempResult from tblResultedTests where Accession = @Accession    
    
delete from tblOrderedTests where Accession = @Accession    
delete from tblResultedTests where Accession = @Accession    
end    
    
Set @FieldList =''    
Set @FieldList = @PerformedTestCode + '|'    
Set @StartPos = 1    
Set @EndPos = 1    
 -- Start the looping operation    
While @EndPos > 0    
   Begin    
      Set @EndPos = CharIndex('|', @FieldList, @StartPos)    
      If @EndPos > 0    
         Begin    
            Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))    
        
            -- Add current row to TempTable    
            Insert #tmpPerformedTest (PerformedTest) Values (@CurVal)    
            Set @StartPos = @EndPos + 1    
         End    
       
   --PRINT @FieldList    
 END    
 DECLARE PERFORMEDTESTCODE_CURSOR CURSOR READ_ONLY FOR     
 SELECT  PerformedTest    
 FROM #tmpPerformedTest    
 ORDER BY PerformedTest     
 OPEN PERFORMEDTESTCODE_CURSOR    
    
FETCH NEXT FROM PERFORMEDTESTCODE_CURSOR    
    INTO   @PerformedTest    
 --PRINT  @PerformedTest    
    
WHILE @@FETCH_STATUS = 0    
BEGIN     
     IF NOT EXISTS ( SELECT PerformedTest FROM tblOrderedTests WHERE      
  Accession = @Accession AND OrderedTest = @OrderedTest AND PerformedTest = @PerformedTest)    
  BEGIN    
   insert into tblOrderedTests    
   (Accession, OrderedTest, PerformedTest, Source, TestComment, BillStatus, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion )    
   values    
   (@Accession, @OrderedTest, @PerformedTest, @Source, @TestComment , 'BILL', @QSSLastUpdatedID, GETDATE(), @QSSLastUpdatedID, GETDATE(), @QSSVersionNumber )    
  END    
 SELECT @ResultedTests = ResultTestCode from tblPerformedTestsDefinitions (nolock)    
 where PerformedTest = @PerformedTest    
    --PRINT @ResultedTests    
    delete from  #tmpResultedTest    
 Set @FieldList =''    
 Set @FieldList = @ResultedTests + '|'    
 Set @StartPos = 1    
 Set @EndPos = 1    
 While @EndPos > 0    
  Begin    
   Set @EndPos = CharIndex('|', @FieldList, @StartPos)    
   If @EndPos > 0    
   Begin    
    Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))    
        
    -- Add current row to TempTable    
    Insert #tmpResultedTest (ResultedTestCode) Values (@CurVal)    
    Set @StartPos = @EndPos + 1    
   End    
  END    
    DECLARE RESULTTESTCODE_CURSOR CURSOR READ_ONLY FOR     
 SELECT  ResultedTestCode    
 FROM #tmpResultedTest    
-- ORDER BY ResultedTestCode     
 OPEN RESULTTESTCODE_CURSOR    
    
 FETCH NEXT FROM RESULTTESTCODE_CURSOR    
    INTO   @ResultedTestCode    
    
 WHILE @@FETCH_STATUS = 0    
 BEGIN     
  IF NOT EXISTS ( SELECT ResultTest FROM tblResultedTests WHERE     
    Accession = @Accession AND PerformedTest = @PerformedTest AND ResultTest = @ResultedTestCode)    
     BEGIN     
    
   declare @iCurrentVersion as int    
   select @iCurrentVersion = CurrentVersion from tblResultCodeVersions  where  TestCode = @ResultedTestCode    
         
           
  insert into tblResultedTests    
  (Accession, PerformedTest, ResultTest,  QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion, Version )    
  values    
  (@Accession, @PerformedTest, @ResultedTestCode, @QSSLastUpdatedID, GETDATE(), @QSSLastUpdatedID,  GETDATE(), 0,@iCurrentVersion )    
        END    
  FETCH NEXT FROM RESULTTESTCODE_CURSOR    
  INTO   @ResultedTestCode    
 END    
 CLOSE RESULTTESTCODE_CURSOR    
 DEALLOCATE RESULTTESTCODE_CURSOR    
     
 FETCH NEXT FROM PERFORMEDTESTCODE_CURSOR    
    INTO   @PerformedTest    
     
END      
CLOSE PERFORMEDTESTCODE_CURSOR    
DEALLOCATE PERFORMEDTESTCODE_CURSOR      
    
    
UPDATE tblResultedTests    
  SET Worksheet  = tblResultedTestsDefinitions.Worksheet,    
      LOINCcode  = tblResultedTestsDefinitions.LOINCcode ,    
      Units      = tblResultedTestsDefinitions.Units ,    
      Status     = 'Pending'    
  FROM         tblResultedTests INNER JOIN    
             tblResultedTestsDefinitions ON tblResultedTestsDefinitions.TestCode = tblResultedTests.ResultTest AND     
             tblResultedTests.Version = tblResultedTestsDefinitions.Version    
  WHERE Accession =  @Accession    
      
      
SELECT @PatientGender = ptSex , @PatientDOB = ptDateOfBirth     
from tblPatient pat (nolock)    
INNER JOIN tblAccessions acc (nolock)    
ON pat.PatientId = acc.PatientID    
where acc.Accession = @Accession    
    
SET @Age  = DATEDIFF(DAY,@PatientDOB, getDate()) / CONVERT(decimal(11,5),365)  
    
declare @sex as varchar(20)    
declare @minage as decimal(11,5)     
declare @maxage as decimal(11,5)     
    
 select @sex = tblResultedTestsParams.sex, @minage = tblResultedTestsParams.minage, @maxage = tblResultedTestsParams.maxage   FROM  tblResultedTests     
  INNER JOIN tblResultedTestsParams    
  on tblResultedTests.ResultTest =  tblResultedTestsParams.ResultedTest    
  WHERE Accession =  @Accession    
    
if @sex is null or @sex = ''    
begin    
Update tblResultedTests    
    
  SET NormalRange = case      
      when tblResultedTestsDefinitions.UseRangeLimits = 'True' then tblResultedTestsParams.NormalLowLimit + '-' + tblResultedTestsParams.NormalHighLimit    
      When tblResultedTestsDefinitions.UseCutoffLimit = 'True' then case when tblResultedTestsDefinitions.CutoffLowLimit != '' AND tblResultedTestsDefinitions.CutoffHighLimit != '' then '>' + tblResultedTestsDefinitions.CutoffLowLimit + ' ' +  '<' + tblResultedTestsDefinitions.CutoffHighLimit    
             when tblResultedTestsDefinitions.CutoffLowLimit != '' AND tblResultedTestsDefinitions.CutoffHighLimit = '' then '>' + tblResultedTestsDefinitions.CutoffLowLimit    
             when tblResultedTestsDefinitions.CutoffLowLimit  = '' AND tblResultedTestsDefinitions.CutoffHighLimit != '' then '<' + tblResultedTestsDefinitions.CutoffHighLimit    
              end    
          end    
  FROM  tblResultedTests     
  INNER JOIN tblResultedTestsParams    
  on tblResultedTests.ResultTest =  tblResultedTestsParams.ResultedTest    
  and tblResultedTests.version =  tblResultedTestsParams.version    
      
  inner join tblResultedTestsDefinitions    
  on tblResultedTests.ResultTest =  tblResultedTestsDefinitions.TestCode    
      
  INNER JOIN  tblResultCodeVersions ON tblResultedTests.ResultTest = tblResultCodeVersions.TestCode and tblResultedTestsDefinitions.version = tblResultCodeVersions.CurrentVersion    
      
  WHERE Accession =  @Accession    
     
end    
Update tblResultedTests    
  SET NormalRange = case      
      when tblResultedTestsDefinitions.UseRangeLimits = 'True' then tblResultedTestsParams.NormalLowLimit + '-' + tblResultedTestsParams.NormalHighLimit    
      When tblResultedTestsDefinitions.UseCutoffLimit= 'True' then case when tblResultedTestsDefinitions.CutoffLowLimit != '' AND tblResultedTestsDefinitions.CutoffHighLimit != '' then '>' + tblResultedTestsDefinitions.CutoffLowLimit + ' ' +  '<' + tblResultedTestsDefinitions.CutoffHighLimit     
             when tblResultedTestsDefinitions.CutoffLowLimit != '' AND tblResultedTestsDefinitions.CutoffHighLimit = '' then '>' + tblResultedTestsDefinitions.CutoffLowLimit    
             when tblResultedTestsDefinitions.CutoffLowLimit  = '' AND tblResultedTestsDefinitions.CutoffHighLimit != '' then '<' + tblResultedTestsDefinitions.CutoffHighLimit    
              end    
          end    
  FROM  tblResultedTests     
  INNER JOIN tblResultedTestsParams    
  on tblResultedTests.ResultTest =  tblResultedTestsParams.ResultedTest    
  and tblResultedTests.version =  tblResultedTestsParams.version    
      
  inner join tblResultedTestsDefinitions    
  on tblResultedTests.ResultTest =  tblResultedTestsDefinitions.TestCode    
      
  INNER JOIN  tblResultCodeVersions ON tblResultedTests.ResultTest = tblResultCodeVersions.TestCode and tblResultedTestsDefinitions.version = tblResultCodeVersions.CurrentVersion    
      
  WHERE Accession =  @Accession    
      
      
  AND tblResultedTestsParams.Sex = @PatientGender    
  AND @Age BETWEEN tblResultedTestsParams.MinAge and tblResultedTestsParams.MaxAge    
      
      
 --- Update Records that have no values set in NormalRange.    
 Update tblResultedTests    
 SET NormalRange = 'No Range'    
 WHERE Accession =  @Accession    
 AND (NormalRange IS NULL OR NormalRange = '')    
     
     
     
 if @UpdateVersion = 0     
 Begin    
     
 --Update new result records with already entered results    
  UPDATE tblResultedTests     
 SET tblResultedTests.Result = TempResult.Result,     
 tblResultedTests.Status = TempResult.Status,    
 tblResultedTests.ResultFlag = TempResult.ResultFlag,    
 tblResultedTests.ResultComment = TempResult.ResultComment,    
 tblResultedTests.EnteredBy = TempResult.EnteredBy,    
 tblResultedTests.EntryDate = TempResult.EntryDate,    
 tblResultedTests.SiteID = TempResult.SiteID,    
 tblResultedTests.QSSCreatedByID = TempResult.QSSCreatedByID,    
 tblResultedTests.QSSCreatedDate = TempResult.QSSCreatedDate,    
 tblResultedTests.Outcome = TempResult.OutCome,    
 tblResultedTests.Version = TempResult.Version,    
 tblResultedTests.NormalRange = TempResult.NormalRange    
    
 FROM tblResultedTests, TempResult     
 WHERE tblResultedTests.accession = TempResult.accession    
 and tblResultedTests.performedtest = TempResult.performedtest    
 and tblResultedTests.ResultTest = TempResult.ResultTest    
 --and tblResultedTests.Worksheet = TempResult.Worksheet    
 --and tblResultedTests.Version = TempResult.Version    
    
     
 End    
     
  if @UpdateVersion = 1     
 Begin    
     
     
  --Update new result records with already entered results    
  UPDATE tblResultedTests     
 SET tblResultedTests.Result = TempResult.Result,     
 tblResultedTests.Status = TempResult.Status,    
 tblResultedTests.ResultFlag = TempResult.ResultFlag,    
 tblResultedTests.ResultComment = TempResult.ResultComment,    
 tblResultedTests.EnteredBy = TempResult.EnteredBy,    
 tblResultedTests.EntryDate = TempResult.EntryDate,    
 tblResultedTests.SiteID = TempResult.SiteID,    
 tblResultedTests.QSSCreatedByID = TempResult.QSSCreatedByID,    
 tblResultedTests.QSSCreatedDate = TempResult.QSSCreatedDate,    
 tblResultedTests.Outcome = TempResult.OutCome--,    
 --tblResultedTests.Version = TempResult.Version    
 FROM tblResultedTests, TempResult     
 WHERE tblResultedTests.accession = TempResult.accession    
 and tblResultedTests.performedtest = TempResult.performedtest    
 and tblResultedTests.ResultTest = TempResult.ResultTest    
 --and tblResultedTests.Worksheet = TempResult.Worksheet    
 --and tblResultedTests.Version = TempResult.Version    
     
     
 -- Set the Status and Outcome to the tests that have changed    
 UPDATE tblResultedTests     
 SET tblResultedTests.Status = 'Pending',    
 tblResultedTests.Outcome = NULL    
 FROM tblResultedTests, TempResult     
 WHERE tblResultedTests.accession = TempResult.accession    
 and tblResultedTests.performedtest = TempResult.performedtest    
 and tblResultedTests.ResultTest = TempResult.ResultTest    
-- and tblResultedTests.Worksheet = TempResult.Worksheet    
 and tblResultedTests.Version <> TempResult.Version    
    
     
 End    
     
 
      --For DXI800 instrument order 
  if exists(SELECT rt.resulttest from tblInstrumentElements ie     
     LEFT JOIN dbo.tblResultedTests rt (NOLOCK)  
     ON rt.ResultTest = ie.ResultTest    
	  left join dbo.tblInstrumentDXITestOrderSent s
	 on rt.Accession = s.Accession and rt.ResultTest=s.ResultTest
  WHERE rt.ResultTest = ie.ResultTest and ie.InstrumentCode ='DXI800' 
  and rt.Accession = @accession and Status not in ('Final','cancelled') and ie.InstrumentCD<>''
    and s.ResultTest is null)  
    
 BEGIN  
   IF NOT EXISTS ( SELECT accession FROM [tblInstrumentAccessionQueryDXI] WHERE Accession = @Accession )  
   BEGIN  
    insert into [tblInstrumentAccessionQueryDXI]  
    (Accession)  
    values  
    (@Accession) 
	
	 --insert into tblInstrumentDXITestOrderSent
	 --select rt.accession, rt.resulttest from tblInstrumentElements ie     
  --   LEFT JOIN dbo.tblResultedTests rt (NOLOCK)  
  --   ON rt.ResultTest = ie.ResultTest    
	 -- left join dbo.tblInstrumentDXITestOrderSent s
	 --on rt.Accession = s.Accession and rt.ResultTest=s.ResultTest
	 -- WHERE rt.ResultTest = ie.ResultTest and ie.InstrumentCode ='DXI800' 
	 -- and rt.Accession = @accession and Status not in ('Final','cancelled') and ie.InstrumentCD<>''
	 -- and s.ResultTest is null

	   END  
 END    
   
   
      --For LH750 instrument order 
  if exists(SELECT rt.resulttest from tblInstrumentElements ie     
     LEFT JOIN dbo.tblResultedTests rt (NOLOCK)  
     ON rt.ResultTest = ie.ResultTest    
  WHERE rt.ResultTest = ie.ResultTest and ie.InstrumentCode ='LH750' and rt.Accession = @accession and Status not in ('Final','cancelled') and ie.InstrumentCD<>'')  
    
 BEGIN  
   IF NOT EXISTS ( SELECT accession FROM [tblInstrumentAccessionQuery] WHERE Accession = @Accession )  
   BEGIN  
    insert into [tblInstrumentAccessionQuery]  
    (Accession)  
    values  
    (@Accession)  
   END  
 END
 
	--Centaur Advia orders
	IF EXISTS(SELECT rt.resulttest from tblInstrumentElements ie       
              LEFT JOIN dbo.tblResultedTests rt ON rt.ResultTest = ie.ResultTest       
			  WHERE rt.ResultTest = ie.ResultTest and ie.InstrumentCode ='Centaur' and rt.Accession = @accession and
			  [Status] NOT IN ('Final','Cancelled') and ie.InstrumentCD <> '')  
    BEGIN
           IF NOT EXISTS ( SELECT 1 FROM tblInstrumentCentaurOrders WHERE Accession = @Accession )
            BEGIN
                INSERT INTO tblInstrumentCentaurOrders (Accession)
                VALUES (@Accession);
            END
    END
	    
END 
GO
/****** Object:  StoredProcedure [dbo].[spCreateOrderedTests3]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================    
-- Author:  HF    
-- Create date: 06/30/2011    
-- Description: This procedure creates one or more Ordered Tests, Resulted Tests, based on the tests seleced for a give Requisition    
-- Update: Hanane 03/08 remove comparing the worksheet when getting the old result sfrom the temp table   
-- <5/20/2019><Gladson> Added check for ResultTest duplication in tblResultedTests for @OrderedTest.
--                     When the duplication occurs, it will change the status of ResultTest to Cancelled.
-- =============================================    
CREATE PROCEDURE [dbo].[spCreateOrderedTests3]    
 @Accession as varchar(50),    
 @OrderedTest as varchar(100),     
 @Source as varchar(50)  = NULL ,    
 @TestComment as varchar(200)  = ''  ,    
 @QSSCreatedByID as varchar(20)  = NULL  ,  --if MODE = ADD this will be passed in, else will be NULL  
 @QSSCreatedDate as datetime  = NULL  ,    
 @QSSLastUpdatedID as varchar(20)  = NULL  ,    
 @QSSUpdateDate as datetime  = NULL  ,    
 @QSSVersionNumber as int  = NULL  ,    
 @Count as int = 0,     
 @UpdateVersion as int,  
 @ResTests as ResultedTestsType ReadOnly   
     
AS    
BEGIN    
SET NOCOUNT ON    
DECLARE     
 @PerformedTestCode as varchar(max)    
    , @StartPos smallint    
 , @EndPos smallint    
 , @CurVal varchar(20)    
 , @FieldList varchar(2000)    
 , @PerformedTest varchar(20)    
 , @ResultedTestCodes varchar(max)    
 , @ResultedTests varchar(max)    
 , @ResultedTestCode varchar(20)    
 , @PatientGender varchar(20)    
 , @PatientDOB datetime     
  , @Age decimal(11,5)   
    
    
SELECT @PerformedTestCode = PerformedTestCode from tblOrderedTestsDefinitions where OrderedTest = @OrderedTest;
    
if OBJECT_ID('tempdb..#tmpPerformedTest') IS NOT NULL
drop table #tmpPerformedTest 

if OBJECT_ID('tempdb..#tmpResultedTest') IS NOT NULL
drop table #tmpResultedTest 

if OBJECT_ID('tempdb..#tempResult2') IS NOT NULL
drop table #tempResult2 
  
CREATE TABLE #tmpPerformedTest    
(    
    PerformedTest varchar(20) NOT NULL    
)    
    
CREATE TABLE #tmpResultedTest    
(    
    ResultedTestCode varchar(20) NOT NULL    
)    
  
if OBJECT_ID('tempdb..#tmpUpdatedResults') IS NOT NULL  
 drop table #tmpUpdatedResults  
--init #tmpUpdatedResults with an arbitrary record  
Select top(1) * into #tmpUpdatedResults from tblResultedTests  
  
--delete the record, only needed to get structure into table  
delete from #tmpUpdatedResults  

CREATE TABLE [dbo].[#tempResult2](
       [Accession] [varchar](100) NULL,
       [PerformedTest] [varchar](100) NULL,
       [ResultTest] [varchar](100) NULL,
       [Status] [varchar](50) NULL,
       [QSSCreatedByID] [varchar](20) NULL,
       [QSSCreatedDate] [datetime] NULL,
       [QSSLastUpdateID] [varchar](20) NULL,
       [QSSUpdateDate] [datetime] NULL,
       [QSSVersion] [int] NULL,
       [Version] [int] NULL,
       [InternalComment] [varchar](1000) NULL);
  

if @Count = 0    
Begin    
 --delete EVERYTHING from the tests tables here; start with blank slate  
 delete from tblOrderedTests where Accession = @Accession    
 delete from tblResultedTests where Accession = @Accession    
end   
    
Set @FieldList =''    
Set @FieldList = @PerformedTestCode + '|'    
Set @StartPos = 1    
Set @EndPos = 1    
 -- Start the looping operation    
While @EndPos > 0    
   Begin    
      Set @EndPos = CharIndex('|', @FieldList, @StartPos)    
      If @EndPos > 0    
         Begin    
            Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))    
        
            -- Add current row to TempTable    
            Insert #tmpPerformedTest (PerformedTest) Values (@CurVal)    
            Set @StartPos = @EndPos + 1    
         End    
       
   --PRINT @FieldList    
 END    
 DECLARE PERFORMEDTESTCODE_CURSOR CURSOR READ_ONLY FOR     
 SELECT  PerformedTest    
 FROM #tmpPerformedTest    
 ORDER BY PerformedTest     
 OPEN PERFORMEDTESTCODE_CURSOR    
    
FETCH NEXT FROM PERFORMEDTESTCODE_CURSOR INTO   @PerformedTest    
    
WHILE @@FETCH_STATUS = 0    
BEGIN     
                IF NOT EXISTS ( SELECT PerformedTest FROM tblOrderedTests WHERE Accession = @Accession AND OrderedTest = @OrderedTest AND PerformedTest = @PerformedTest)
                BEGIN    
                                insert into tblOrderedTests    
                                (Accession, OrderedTest, PerformedTest, Source, TestComment, BillStatus, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion )    
                                values    
                                (@Accession, @OrderedTest, @PerformedTest, @Source, @TestComment , 'BILL', @QSSLastUpdatedID, GETDATE(), @QSSLastUpdatedID, GETDATE(), @QSSVersionNumber )    
                END    
                SELECT @ResultedTests = ResultTestCode from tblPerformedTestsDefinitions (nolock) where PerformedTest = @PerformedTest    
    delete from  #tmpResultedTest    
                Set @FieldList =''    
                Set @FieldList = @ResultedTests + '|'    
                Set @StartPos = 1    
                Set @EndPos = 1    
                While @EndPos > 0    
                Begin    
                                Set @EndPos = CharIndex('|', @FieldList, @StartPos)    
                                If @EndPos > 0    
                                Begin    
                                                Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))    
                        
                                                -- Add current row to TempTable    
                                                Insert #tmpResultedTest (ResultedTestCode) Values (@CurVal)    
                                                Set @StartPos = @EndPos + 1    
                                End    
                END    

                /***** PA 05/21/2019 Copy contents of tblResultedTests for this accession into #tempResult2 *****/
    INSERT INTO #tempResult2(Accession, PerformedTest, ResultTest, [Status], InternalComment, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion, [Version])
    SELECT Accession, PerformedTest, ResultTest, [Status], InternalComment, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion, [Version] FROM tblResultedTests WHERE accession = @Accession;

    DECLARE RESULTTESTCODE_CURSOR CURSOR READ_ONLY FOR     
                SELECT  ResultedTestCode FROM #tmpResultedTest    
                
                OPEN RESULTTESTCODE_CURSOR    
    
                FETCH NEXT FROM RESULTTESTCODE_CURSOR INTO   @ResultedTestCode    
    
                WHILE @@FETCH_STATUS = 0    
                BEGIN     
                                --if result doesn't exist in tblResultedTests, add to temp table; all saves to tblResultedTests done at end
                                IF NOT EXISTS ( SELECT ResultTest FROM #tempResult2 WHERE Accession = @Accession AND PerformedTest = @PerformedTest AND ResultTest = @ResultedTestCode)    
                                BEGIN     
                                                declare @iCurrentVersion as int, @InternalComment varchar (1000);
                                                select @iCurrentVersion = CurrentVersion from tblResultCodeVersions  where  TestCode = @ResultedTestCode    
                                                SET @InternalComment = 'Created by order test ' + @OrderedTest + '. Test Cancelled due to duplication (' + CONVERT(VARCHAR(8),GETDATE(),1) + ' ' + RIGHT(CONVERT(VARCHAR, GETDATE(), 100),7) + ').';
                                                -- check for ResultTest duplication in tblResultedTests - When there is duplication, insert into tblOrderedTests with Cancelled Status
                                                IF EXISTS (SELECT 1 FROM #tempResult2 WHERE Accession = @Accession AND ResultTest = @ResultedTestCode AND [Status] IN ('Final', 'Hold', 'Pending'))
                                                BEGIN
                                                                INSERT INTO #tmpUpdatedResults (Accession, PerformedTest, ResultTest, [Status], InternalComment, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion, [Version])
                                                                                VALUES (@Accession, @PerformedTest, @ResultedTestCode, 'Cancelled', @InternalComment, @QSSLastUpdatedID, GETDATE(), @QSSLastUpdatedID, GETDATE(), 0, @iCurrentVersion);
                                                                INSERT INTO #tempResult2 (Accession, PerformedTest, ResultTest, [Status], InternalComment, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion, [Version])
                                                                                VALUES (@Accession, @PerformedTest, @ResultedTestCode, 'Cancelled', @InternalComment, @QSSLastUpdatedID, GETDATE(), @QSSLastUpdatedID, GETDATE(), 0, @iCurrentVersion);
                                                END
                                                ELSE
                                                BEGIN
                                                --Not a duplicate - insert into temp table with Pending Status 
                                                                INSERT INTO #tmpUpdatedResults (Accession, PerformedTest, ResultTest, [Status], QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion, [Version])
                                                                                VALUES (@Accession, @PerformedTest, @ResultedTestCode, 'Pending', @QSSLastUpdatedID, GETDATE(), @QSSLastUpdatedID, GETDATE(), 0, @iCurrentVersion);
                                                                INSERT INTO #tempResult2 (Accession, PerformedTest, ResultTest, [Status], QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion, [Version])
                                                                                VALUES (@Accession, @PerformedTest, @ResultedTestCode, 'Pending', @QSSLastUpdatedID, GETDATE(), @QSSLastUpdatedID, GETDATE(), 0, @iCurrentVersion);
                                                END
                                END    
                
                                FETCH NEXT FROM RESULTTESTCODE_CURSOR INTO   @ResultedTestCode    
                END    

                CLOSE RESULTTESTCODE_CURSOR    
                DEALLOCATE RESULTTESTCODE_CURSOR    
     
                FETCH NEXT FROM PERFORMEDTESTCODE_CURSOR INTO   @PerformedTest    
     
END      
   
CLOSE PERFORMEDTESTCODE_CURSOR    
DEALLOCATE PERFORMEDTESTCODE_CURSOR      
    
    
Update #tmpUpdatedResults    
  SET Worksheet  = tblResultedTestsDefinitions.Worksheet,    
      LOINCcode  = tblResultedTestsDefinitions.LOINCcode ,    
      Units      = tblResultedTestsDefinitions.Units
  FROM         #tmpUpdatedResults INNER JOIN    
             tblResultedTestsDefinitions ON tblResultedTestsDefinitions.TestCode = #tmpUpdatedResults.ResultTest AND     
             #tmpUpdatedResults.Version = tblResultedTestsDefinitions.Version    
  WHERE Accession =  @Accession    
      
      
SELECT @PatientGender = ptSex , @PatientDOB = ptDateOfBirth     
from tblPatient pat (nolock)    
INNER JOIN tblAccessions acc (nolock)    
ON pat.PatientId = acc.PatientID    
where acc.Accession = @Accession    
    
SET @Age  = DATEDIFF(DAY,@PatientDOB, getDate()) / CONVERT(decimal(11,5),365)  
    
declare @sex as varchar(20)    
declare @minage as decimal(11,5)     
declare @maxage as decimal(11,5)     
    
 select @sex = tblResultedTestsParams.sex, @minage = tblResultedTestsParams.minage, @maxage = tblResultedTestsParams.maxage   FROM  #tmpUpdatedResults     
  INNER JOIN tblResultedTestsParams    
  on #tmpUpdatedResults.ResultTest =  tblResultedTestsParams.ResultedTest    
  WHERE Accession =  @Accession    
    
if @sex is null or @sex = ''    
begin    
Update #tmpUpdatedResults    
    
  SET NormalRange = case      
      when tblResultedTestsDefinitions.UseRangeLimits = 'True' then tblResultedTestsParams.NormalLowLimit + '-' + tblResultedTestsParams.NormalHighLimit    
      When tblResultedTestsDefinitions.UseCutoffLimit = 'True' then case when tblResultedTestsDefinitions.CutoffLowLimit != '' AND tblResultedTestsDefinitions.CutoffHighLimit != '' then '>' + tblResultedTestsDefinitions.CutoffLowLimit + ' ' +  '<' + tblResultedTestsDefinitions.CutoffHighLimit    
             when tblResultedTestsDefinitions.CutoffLowLimit != '' AND tblResultedTestsDefinitions.CutoffHighLimit = '' then '>' + tblResultedTestsDefinitions.CutoffLowLimit    
             when tblResultedTestsDefinitions.CutoffLowLimit  = '' AND tblResultedTestsDefinitions.CutoffHighLimit != '' then '<' + tblResultedTestsDefinitions.CutoffHighLimit    
              end    
          end    
  FROM  #tmpUpdatedResults     
  INNER JOIN tblResultedTestsParams    
  on #tmpUpdatedResults.ResultTest =  tblResultedTestsParams.ResultedTest    
  and #tmpUpdatedResults.version =  tblResultedTestsParams.version    
      
  inner join tblResultedTestsDefinitions    
  on #tmpUpdatedResults.ResultTest =  tblResultedTestsDefinitions.TestCode    
      
  INNER JOIN  tblResultCodeVersions ON #tmpUpdatedResults.ResultTest = tblResultCodeVersions.TestCode and tblResultedTestsDefinitions.version = tblResultCodeVersions.CurrentVersion    
      
  WHERE Accession =  @Accession    
     
end    
Update #tmpUpdatedResults    
  SET NormalRange = case      
      when tblResultedTestsDefinitions.UseRangeLimits = 'True' then tblResultedTestsParams.NormalLowLimit + '-' + tblResultedTestsParams.NormalHighLimit    
      When tblResultedTestsDefinitions.UseCutoffLimit= 'True' then case when tblResultedTestsDefinitions.CutoffLowLimit != '' AND tblResultedTestsDefinitions.CutoffHighLimit != '' then '>' + tblResultedTestsDefinitions.CutoffLowLimit + ' ' +  '<' + tblResultedTestsDefinitions.CutoffHighLimit     
             when tblResultedTestsDefinitions.CutoffLowLimit != '' AND tblResultedTestsDefinitions.CutoffHighLimit = '' then '>' + tblResultedTestsDefinitions.CutoffLowLimit    
             when tblResultedTestsDefinitions.CutoffLowLimit  = '' AND tblResultedTestsDefinitions.CutoffHighLimit != '' then '<' + tblResultedTestsDefinitions.CutoffHighLimit    
              end    
          end    
  FROM  #tmpUpdatedResults     
  INNER JOIN tblResultedTestsParams    
  on #tmpUpdatedResults.ResultTest =  tblResultedTestsParams.ResultedTest    
  and #tmpUpdatedResults.version =  tblResultedTestsParams.version    
      
  inner join tblResultedTestsDefinitions    
  on #tmpUpdatedResults.ResultTest =  tblResultedTestsDefinitions.TestCode    
      
  INNER JOIN  tblResultCodeVersions ON #tmpUpdatedResults.ResultTest = tblResultCodeVersions.TestCode and tblResultedTestsDefinitions.version = tblResultCodeVersions.CurrentVersion    
      
  WHERE Accession =  @Accession    
      
      
  AND tblResultedTestsParams.Sex = @PatientGender    
  AND @Age BETWEEN tblResultedTestsParams.MinAge and tblResultedTestsParams.MaxAge    
      
      
 --- Update Records that have no values set in NormalRange.    
 Update #tmpUpdatedResults    
 SET NormalRange = 'No Range'    
 WHERE Accession =  @Accession    
 AND (NormalRange IS NULL OR NormalRange = '' OR NormalRange = '-')    
     
                if @UpdateVersion = 0    
                Begin    
                                --Update new result records with already entered results    
                                Update #tmpUpdatedResults     
                                SET #tmpUpdatedResults.Result = rt.Result,     
                                #tmpUpdatedResults.Status = rt.Status,    
                                #tmpUpdatedResults.ResultFlag = rt.ResultFlag,    
                                #tmpUpdatedResults.ResultComment = rt.ResultComment,    
                                #tmpUpdatedResults.EnteredBy = rt.EnteredBy,    
                                #tmpUpdatedResults.EntryDate = rt.EntryDate,    
                                #tmpUpdatedResults.SiteID = rt.SiteID,    
                                #tmpUpdatedResults.QSSCreatedByID = rt.QSSCreatedByID,    
                                #tmpUpdatedResults.QSSCreatedDate = rt.QSSCreatedDate,    
                                #tmpUpdatedResults.Outcome = rt.OutCome,    
                                #tmpUpdatedResults.Version = rt.Version,    
                                #tmpUpdatedResults.NormalRange = rt.NormalRange,
                                #tmpUpdatedResults.InternalComment = 
								(CASE WHEN (ISNULL(#tmpUpdatedResults.InternalComment, '')) = 1 THEN
											rt.InternalComment
									   ELSE LTRIM(ISNULL(rt.InternalComment, '') + ' ' + #tmpUpdatedResults.InternalComment)
									   END)
                                FROM #tmpUpdatedResults, @ResTests as rt   
                                WHERE #tmpUpdatedResults.accession = rt.accession    
                                and #tmpUpdatedResults.performedtest = rt.performedtest    
                                and #tmpUpdatedResults.ResultTest = rt.ResultTest     
                                AND #tmpUpdatedResults.Status <> 'Cancelled';
                END

                -- @UpdateVersion = 1 update ResultTest to current version
                if @UpdateVersion = 1     
                Begin    
                                

                                --Update new result records with already entered results    
                                Update #tmpUpdatedResults     
                                SET #tmpUpdatedResults.Result = rt.Result,     
                                #tmpUpdatedResults.Status = rt.Status,    
                                #tmpUpdatedResults.ResultFlag = rt.ResultFlag,    
                                #tmpUpdatedResults.ResultComment = rt.ResultComment,    
                                #tmpUpdatedResults.EnteredBy = rt.EnteredBy,    
                                #tmpUpdatedResults.EntryDate = rt.EntryDate,    
                                #tmpUpdatedResults.SiteID = rt.SiteID,    
                                #tmpUpdatedResults.QSSCreatedByID = rt.QSSCreatedByID,    
                                #tmpUpdatedResults.QSSCreatedDate = rt.QSSCreatedDate,    
                                #tmpUpdatedResults.Outcome = rt.OutCome
                                FROM #tmpUpdatedResults, @ResTests as rt   
                                WHERE #tmpUpdatedResults.accession = rt.accession    
                                and #tmpUpdatedResults.performedtest = rt.performedtest    
                                and #tmpUpdatedResults.ResultTest = rt.ResultTest     
                                AND #tmpUpdatedResults.Status <> 'Cancelled';

                                -- Set the Status and Outcome to the tests that have changed    
                                Update #tmpUpdatedResults     
                                SET #tmpUpdatedResults.Status = 'Pending',    
                                #tmpUpdatedResults.Outcome = NULL    
                                FROM #tmpUpdatedResults, @ResTests as rt   
                                WHERE #tmpUpdatedResults.accession = rt.accession    
                                and #tmpUpdatedResults.performedtest = rt.performedtest    
                                and #tmpUpdatedResults.ResultTest = rt.ResultTest
                                and #tmpUpdatedResults.Version <> rt.Version    
                                AND #tmpUpdatedResults.Status <> 'Cancelled';
                END

-- save all results into the permanent table at the end  
 -- !!!!! LIST OF COLUMNS HERE MUST BE KEPT UPDATED WITH tblResultedTests  
 -- !!!!! TO UPDATE: DRAG & DROP THE COLUMNS FOLDER FROM OBJECT EXPLORER OVER THE BELOW   
 -- !!!!! COLUMN LIST.  
 insert into tblResultedTests   
 select Accession, PerformedTest, ResultTest, Worksheet, LOINCcode, Organism, SensitivitiesXML, Result, ResultFlag, NormalRange,   
 Units, CorrectionsXML, CallStatus, ResultComment, Status, EnteredBy, EntryDate, SiteID, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID,   
 QSSUpdateDate, QSSVersion, Outcome, Version, ReportAs, InternalComment, ApprovedDate, AutoManualFlag, QSSReleasedID 
 from #tmpUpdatedResults  
 
  

 --     --For DXI800 instrument order 
 -- if exists(SELECT rt.resulttest from tblInstrumentElements ie     
 --    LEFT JOIN dbo.tblResultedTests rt (NOLOCK)  
 --    ON rt.ResultTest = ie.ResultTest    
	--  left join dbo.tblInstrumentDXITestOrderSent s
	-- on rt.Accession = s.Accession and rt.ResultTest=s.ResultTest
 -- WHERE rt.ResultTest = ie.ResultTest and ie.InstrumentCode ='DXI800' 
 -- and rt.Accession = @accession and Status not in ('Final','cancelled') and ie.InstrumentCD<>''
 --   and s.ResultTest is null)  
    
 --BEGIN  
 --  IF NOT EXISTS ( SELECT accession FROM [tblInstrumentAccessionQueryDXI] WHERE Accession = @Accession )  
 --  BEGIN  
 --   insert into [tblInstrumentAccessionQueryDXI]  
 --   (Accession)  
 --   values  
 --   (@Accession) 
	
	-- --insert into tblInstrumentDXITestOrderSent
	-- --select rt.accession, rt.resulttest from tblInstrumentElements ie     
 -- --   LEFT JOIN dbo.tblResultedTests rt (NOLOCK)  
 -- --   ON rt.ResultTest = ie.ResultTest    
	-- -- left join dbo.tblInstrumentDXITestOrderSent s
	-- --on rt.Accession = s.Accession and rt.ResultTest=s.ResultTest
	-- -- WHERE rt.ResultTest = ie.ResultTest and ie.InstrumentCode ='DXI800' 
	-- -- and rt.Accession = @accession and Status not in ('Final','cancelled') and ie.InstrumentCD<>''
	-- -- and s.ResultTest is null

	--   END  
 --END    


 --     --For LH750 instrument order 
 -- if exists(SELECT rt.resulttest from tblInstrumentElements ie     
 --    LEFT JOIN dbo.tblResultedTests rt (NOLOCK)  
 --    ON rt.ResultTest = ie.ResultTest    
 -- WHERE rt.ResultTest = ie.ResultTest and ie.InstrumentCode ='LH750' and rt.Accession = @accession and Status not in ('Final','cancelled') and ie.InstrumentCD<>'')  
    
 --BEGIN  
 --  IF NOT EXISTS ( SELECT accession FROM [tblInstrumentAccessionQuery] WHERE Accession = @Accession )  
 --  BEGIN  
 --   insert into [tblInstrumentAccessionQuery]  
 --   (Accession)  
 --   values  
 --   (@Accession)  
 --  END  
 --END    

--return table of saved tests for next iteration if this is a new accession  
if @QSSCreatedById is not null select * from tblResultedTests where Accession = @Accession  
     
END

GO
/****** Object:  StoredProcedure [dbo].[spCytologistCaseList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
       
CREATE procedure [dbo].[spCytologistCaseList]                              
@status varchar(50)='',                              
@user varchar(50)='',                  
@choice varchar(50)=''                  
as                  
begin                  
if(@status ='View All')                
begin                
if(@choice ='BindAllUser')                  
 begin                  
  select P.Accession,P.TestCode,A.PatientID,(T.ptLastName+','+T.ptFirstName)as PatientName,A.ClientCode,Cytologist, P.QSSLastUpdateID,P.Status,P.CaseNumber                
    ,P.Notes,p.Jars,p.Cassettes,p.Slides ,Td.ResultTestCode, Td.PerformedBy,Td.MailoutFlag,Td.MailoutLab   
 ,CONVERT(VARCHAR(20), A.ReceiveDate, 101) AS ReceivedDate,   FORMAT( A.ReceiveDate, 'hh.mm tt') as ReceivedTime,p.ClientCaseNumber,CONVERT(VARCHAR(20)  
, P.QSSUpdateDate, 101) as QSSUpdateDate    
 from tblCytologyCases as P Left join  tblAccessions as A on P.Accession = A.Accession  Left join tblPerformedTestsDefinitions as Td                 
on P.TestCode =Td.PerformedTest Left join tblPatient T on  A.PatientID =T.PatientID  --where P.Status in ('Pending','Final')                
 end                  
if(@choice ='BindLoginUser')                  
begin                  
  select P.Accession,P.TestCode,A.PatientID,(T.ptLastName+','+T.ptFirstName)as PatientName,A.ClientCode,Cytologist, P.QSSLastUpdateID,P.Status,P.CaseNumber,                  
  P.Notes,p.Jars,p.Cassettes,p.Slides ,Td.ResultTestCode, Td.PerformedBy,Td.MailoutFlag,Td.MailoutLab   
  ,CONVERT(VARCHAR(20), A.ReceiveDate, 101) AS ReceivedDate,   FORMAT( A.ReceiveDate, 'hh.mm tt') as ReceivedTime,p.ClientCaseNumber,CONVERT(VARCHAR(20)  
, P.QSSUpdateDate, 101) as QSSUpdateDate    
  from tblCytologyCases as P Left join                   
   tblAccessions as A on P.Accession = A.Accession  Left join tblPerformedTestsDefinitions as Td on P.TestCode =Td.PerformedTest Left join tblPatient T                  
    on     A.PatientID =T.PatientID  where  P.QSSLastUpdateID = (@user) -- and P.Status in ('Pending','Final')               
 end                  
end                
else                
begin                
if(@choice ='BindAllUser')                  
 begin                  
              
               
select * from (              
  select P.Accession,P.TestCode,A.PatientID,(T.ptLastName+','+T.ptFirstName)as PatientName,A.ClientCode,Cytologist, P.QSSLastUpdateID,P.Status,              
    CASE  WHEN Status in (select statusname from tblStatus where statusname in ('Cancelled','Final') ) THEN 'Final'              
            ELSE 'Pending' END as StatusDetails  ,              
  P.CaseNumber                
    ,P.Notes,p.Jars,p.Cassettes,p.Slides ,p.Sources ,Td.ResultTestCode, Td.PerformedBy,Td.MailoutFlag,Td.MailoutLab  
 ,CONVERT(VARCHAR(20), A.ReceiveDate, 101) AS ReceivedDate,   FORMAT( A.ReceiveDate, 'hh.mm tt') as ReceivedTime,p.ClientCaseNumber,CONVERT(VARCHAR(20)  
, P.QSSUpdateDate, 101) as QSSUpdateDate    
  from tblCytologyCases as P Left join  tblAccessions as A on P.Accession = A.Accession  Left join tblPerformedTestsDefinitions as Td          
    
         
on P.TestCode =Td.PerformedTest Left join tblPatient T on  A.PatientID =T.PatientID  ) as T              
              
 where T.StatusDetails = (@status)              
 end                  
if(@choice ='BindLoginUser')                  
begin                  
select * from (              
  select P.Accession,P.TestCode,A.PatientID,(T.ptLastName+','+T.ptFirstName)as PatientName,A.ClientCode,Cytologist, P.QSSLastUpdateID,P.Status,              
   CASE  WHEN Status in (select statusname from tblStatus where statusname in ('Cancelled','Final') ) THEN 'Final'              
            ELSE 'Pending' END as StatusDetails  ,              
  P.CaseNumber,                  
  P.Notes,p.Jars,p.Cassettes,p.Slides ,Td.ResultTestCode, Td.PerformedBy,Td.MailoutFlag,Td.MailoutLab  
  ,CONVERT(VARCHAR(20), A.ReceiveDate, 101) AS ReceivedDate,   FORMAT( A.ReceiveDate, 'hh.mm tt') as ReceivedTime,p.ClientCaseNumber,CONVERT(VARCHAR(20)  
, P.QSSUpdateDate, 101) as QSSUpdateDate    
   from tblCytologyCases as P Left join                   
   tblAccessions as A on P.Accession = A.Accession  Left join tblPerformedTestsDefinitions as Td on P.TestCode =Td.PerformedTest Left join tblPatient T                  
    on     A.PatientID =T.PatientID  where  P.QSSLastUpdateID = (@user)                
  ) as T              
              
 where T.StatusDetails = (@status)               
 end                  
end                
  if (@choice ='BindMailOut') --- dropdownlist bind Mailout Labs                              
  begin                                 
      select id,LabCode from tblMailoutLabs                       
  end                              
 --if (@choice ='BindPythologist') --- dropdownlist bind pythologist                              
 -- begin                              
 -- --SELECT [PhysicianCode], [LastName], [FirstName] FROM [tblPathologists]                              
 --  SELECT [PhysicianCode], [LastName]+','+ [FirstName] as pathlogistname FROM [tblPathologists]                       
 -- end                   
end     
    
    
GO
/****** Object:  StoredProcedure [dbo].[spCytologistUpdateCaseReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[spCytologistUpdateCaseReport]          
         
@Cytologist varchar(50),          
@CaseNo varchar(50)         
as          
          
 begin      
 update tblCytologyCases set Cytologist=@Cytologist where caseNumber =@CaseNo           
 end     
GO
/****** Object:  StoredProcedure [dbo].[spDailyBillingLincoln]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spDailyBillingLincoln]
--QSS EO20190918 - v003 - Generates and Mails Daily Stats Report

AS
BEGIN

	DECLARE @startday datetime = dateadd(dd,-1, cast(getdate() as date))
    DECLARE @endday datetime = dateadd(dd,-0, cast(getdate() as date))
	
declare @EmailBody as varchar(8000) = '';
declare @SubLine as varchar(100) = '';
declare @From as varchar(100) = '';
declare @To as varchar(1000) = '';
declare @CC as varchar(1000) = '';
declare @Format as varchar(20) = '';
declare @Profile as varchar(20) = '';

SET @SubLine = 'LINCOLN STATISTICS CREATED ' +  CONVERT(VARCHAR,@startday, 101)
SET @From = 'Eric Olsyn <eolsyn@labhealth.com>'
SET @To = 'jcarroll@labhealth.com'
--SET @CC = 'eolsyn@labhealth.com'
SET @Format = 'HTML'
SET @Profile = 'LIS-SQL'

SET @EmailBody = '<html><head><style>table, th, td {border: 1px solid black;border-collapse: collapse;}</style></head><body><p>Hi All,<br><br>LINCOLN STATISTICS FOR THE PREVIOUS 7 DAYS<br><br></p>'


SET @EmailBody = @EmailBody + '<table><tr><th style="width:10%">Date</th><th style="width:18%">New accessions entered in the lab</th><th style="width:18%">Accessions waiting to be entered in billing</th><th style="width:18%">Accessions needing corections for billing submission</th><th style="width:18%">New accessions submitted to payer</th><th>Amount posted in billing</th></tr><tr>'

--Date
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@startday, 101) + '</td>'

--New Accessions entered
declare @count as int = 0
select @count = count(*) 
from tblAccessions where QSSCreatedDate between @startday and @endday --> @thisday
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Accessions waiting for bill entry
select @count = count(*)
from tblAccessions acc
inner join tblArchiveReviewAccession ar on ar.Accession = acc.Accession
where acc.Accession not in (select accession from tblBillAccessions)
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Claims needing corrections
select @count = count(distinct ba.accession)
from tblbillaccessions ba
inner join tblMissingInformation mi on ba.Accession=mi.accession
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--# of Claims submitted
select @count = count(*) from(
select Accession, Notetype, MIN([date]) as Date 
from tblBillAudit
where Date  between @startday and @endday --> @thisday
and NoteType in ('HCFA', 'ElectronicClaim', 'PatientBill', 'NF')
group by Accession, Notetype)xx
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Total Payment Posted (For Selected Dates)
declare @totalpaid decimal(18, 2)
select @totalpaid = sum(paymentamt) from tblPayment where QSSCreatedDate between @startday and @endday --> @thisday
IF @totalpaid IS NULL
	BEGIN
		SET @totalpaid = 0		
	END
SET @EmailBody = @EmailBody + '<td>$' + CONVERT(VARCHAR, CAST(@totalpaid as money),1) + '</td></tr>'

--Previous day
SET @startday = dateadd(dd,-2, cast(getdate() as date));
SET @endday = dateadd(dd,-1, cast(getdate() as date));

--Date
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@startday, 101) + '</td>'

--New Accessions entered
select @count = count(*) 
from tblAccessions where QSSCreatedDate between @startday and @endday --> @thisday
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Accessions waiting for bill entry
SET @EmailBody = @EmailBody + '<td></td>'

--Claims needing corrections
SET @EmailBody = @EmailBody + '<td></td>'

--# of Claims submitted
select @count = count(*) from(
select Accession, Notetype, MIN([date]) as Date 
from tblBillAudit
where Date  between @startday and @endday --> @thisday
and NoteType in ('HCFA', 'ElectronicClaim', 'PatientBill', 'NF')
group by Accession, Notetype)xx
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Total Payment Posted (For Selected Dates)
select @totalpaid = sum(paymentamt) from tblPayment where QSSCreatedDate between @startday and @endday --> @thisday
IF @totalpaid IS NULL
	BEGIN
		SET @totalpaid = 0		
	END
SET @EmailBody = @EmailBody + '<td>$' + CONVERT(VARCHAR, CAST(@totalpaid as money),1) + '</td></tr>'

--Previous day
SET @startday = dateadd(dd,-3, cast(getdate() as date));
SET @endday = dateadd(dd,-2, cast(getdate() as date));

--Date
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@startday, 101) + '</td>'

--New Accessions entered
select @count = count(*) 
from tblAccessions where QSSCreatedDate between @startday and @endday --> @thisday
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Accessions waiting for bill entry
SET @EmailBody = @EmailBody + '<td></td>'

--Claims needing corrections
SET @EmailBody = @EmailBody + '<td></td>'

--# of Claims submitted
select @count = count(*) from(
select Accession, Notetype, MIN([date]) as Date 
from tblBillAudit
where Date  between @startday and @endday --> @thisday
and NoteType in ('HCFA', 'ElectronicClaim', 'PatientBill', 'NF')
group by Accession, Notetype)xx
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Total Payment Posted (For Selected Dates)
select @totalpaid = sum(paymentamt) from tblPayment where QSSCreatedDate between @startday and @endday --> @thisday
IF @totalpaid IS NULL
	BEGIN
		SET @totalpaid = 0		
	END
SET @EmailBody = @EmailBody + '<td>$' + CONVERT(VARCHAR, CAST(@totalpaid as money),1) + '</td></tr>'

--Previous day
SET @startday = dateadd(dd,-4, cast(getdate() as date));
SET @endday = dateadd(dd,-3, cast(getdate() as date));

--Date
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@startday, 101) + '</td>'

--New Accessions entered
select @count = count(*) 
from tblAccessions where QSSCreatedDate between @startday and @endday --> @thisday
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Accessions waiting for bill entry
SET @EmailBody = @EmailBody + '<td></td>'

--Claims needing corrections
SET @EmailBody = @EmailBody + '<td></td>'

--# of Claims submitted
select @count = count(*) from(
select Accession, Notetype, MIN([date]) as Date 
from tblBillAudit
where Date  between @startday and @endday --> @thisday
and NoteType in ('HCFA', 'ElectronicClaim', 'PatientBill', 'NF')
group by Accession, Notetype)xx
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Total Payment Posted (For Selected Dates)
select @totalpaid = sum(paymentamt) from tblPayment where QSSCreatedDate between @startday and @endday --> @thisday
IF @totalpaid IS NULL
	BEGIN
		SET @totalpaid = 0		
	END
SET @EmailBody = @EmailBody + '<td>$' + CONVERT(VARCHAR, CAST(@totalpaid as money),1) + '</td></tr>'

--Previous day
SET @startday = dateadd(dd,-5, cast(getdate() as date));
SET @endday = dateadd(dd,-4, cast(getdate() as date));

--Date
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@startday, 101) + '</td>'

--New Accessions entered
select @count = count(*) 
from tblAccessions where QSSCreatedDate between @startday and @endday --> @thisday
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Accessions waiting for bill entry
SET @EmailBody = @EmailBody + '<td></td>'

--Claims needing corrections
SET @EmailBody = @EmailBody + '<td></td>'

--# of Claims submitted
select @count = count(*) from(
select Accession, Notetype, MIN([date]) as Date 
from tblBillAudit
where Date  between @startday and @endday --> @thisday
and NoteType in ('HCFA', 'ElectronicClaim', 'PatientBill', 'NF')
group by Accession, Notetype)xx
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Total Payment Posted (For Selected Dates)
select @totalpaid = sum(paymentamt) from tblPayment where QSSCreatedDate between @startday and @endday --> @thisday
IF @totalpaid IS NULL
	BEGIN
		SET @totalpaid = 0		
	END
SET @EmailBody = @EmailBody + '<td>$' + CONVERT(VARCHAR, CAST(@totalpaid as money),1) + '</td></tr>'

--Previous day
SET @startday = dateadd(dd,-6, cast(getdate() as date));
SET @endday = dateadd(dd,-5, cast(getdate() as date));

--Date
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@startday, 101) + '</td>'

--New Accessions entered
select @count = count(*) 
from tblAccessions where QSSCreatedDate between @startday and @endday --> @thisday
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Accessions waiting for bill entry
SET @EmailBody = @EmailBody + '<td></td>'

--Claims needing corrections
SET @EmailBody = @EmailBody + '<td></td>'

--# of Claims submitted
select @count = count(*) from(
select Accession, Notetype, MIN([date]) as Date 
from tblBillAudit
where Date  between @startday and @endday --> @thisday
and NoteType in ('HCFA', 'ElectronicClaim', 'PatientBill', 'NF')
group by Accession, Notetype)xx
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Total Payment Posted (For Selected Dates)
select @totalpaid = sum(paymentamt) from tblPayment where QSSCreatedDate between @startday and @endday --> @thisday
IF @totalpaid IS NULL
	BEGIN
		SET @totalpaid = 0		
	END
SET @EmailBody = @EmailBody + '<td>$' + CONVERT(VARCHAR, CAST(@totalpaid as money),1) + '</td></tr>'

--Previous day
SET @startday = dateadd(dd,-7, cast(getdate() as date));
SET @endday = dateadd(dd,-6, cast(getdate() as date));

--Date
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@startday, 101) + '</td>'

--New Accessions entered
select @count = count(*) 
from tblAccessions where QSSCreatedDate between @startday and @endday --> @thisday
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Accessions waiting for bill entry
SET @EmailBody = @EmailBody + '<td></td>'

--Claims needing corrections
SET @EmailBody = @EmailBody + '<td></td>'

--# of Claims submitted
select @count = count(*) from(
select Accession, Notetype, MIN([date]) as Date 
from tblBillAudit
where Date  between @startday and @endday --> @thisday
and NoteType in ('HCFA', 'ElectronicClaim', 'PatientBill', 'NF')
group by Accession, Notetype)xx
SET @EmailBody = @EmailBody + '<td>' + CONVERT(VARCHAR,@count) + '</td>'

--Total Payment Posted (For Selected Dates)
select @totalpaid = sum(paymentamt) from tblPayment where QSSCreatedDate between @startday and @endday --> @thisday
IF @totalpaid IS NULL
	BEGIN
		SET @totalpaid = 0		
	END
SET @EmailBody = @EmailBody + '<td>$' + CONVERT(VARCHAR, CAST(@totalpaid as money),1) + '</td></tr></table></body></html>'




EXEC msdb.dbo.sp_send_dbmail
--@profile_name = @Profile,   
@recipients= @To,
@copy_recipients = @CC,
@subject = @SubLine,
@body= @EmailBody,
@body_format= @Format,
@from_address= @From

END
GO
/****** Object:  StoredProcedure [dbo].[spDailyStatsLincoln]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spDailyStatsLincoln]
--QSS EO20190918 - v003 - Generates and Mails Daily Stats Report

AS
BEGIN

	DECLARE @startday datetime = dateadd(dd,-1, cast(getdate() as date))
    DECLARE @endday datetime = dateadd(dd,-0, cast(getdate() as date))
	DECLARE @today INT = DATEPART(weekday, GETDATE())
	
IF @today = 1 OR @today = 7 --Terminate if Saturday or Sunday
	BEGIN
		RETURN
	END
ELSE
	IF @today = 2 --Monday Routine - Adjust Dates to collect data Fri-Sun
		BEGIN
			SET @startday = dateadd(dd,-3, cast(getdate() as date));
			SET @endday = dateadd(dd,-0, cast(getdate() as date));
		END
	ELSE --Tuesday-Friday Routine - Collect data for prior day
		BEGIN  
			SET @startday = dateadd(dd,-1, cast(getdate() as date));
			SET @endday = dateadd(dd,-0, cast(getdate() as date));
		END


declare @EmailBody as varchar(8000) = '';
declare @SubLine as varchar(100) = '';
declare @From as varchar(100) = '';
declare @To as varchar(1000) = '';
declare @CC as varchar(1000) = '';
declare @Format as varchar(20) = '';
declare @Profile as varchar(20) = '';

SET @SubLine = 'LINCOLN STATISTICS FOR THE DAY OF ' +  CONVERT(VARCHAR,@startday, 101)
SET @From = 'Eric Olsyn <eolsyn@labhealth.com>'
SET @To = 'izimet@labhealth.com;jcaspari@labhealth.com;lkolesnikova@labhealth.com;jcarroll@labhealth.com;sjordan@labhealth.com'
--SET @To = 'eolsyn@labhealth.com'
SET @CC = 'eolsyn@labhealth.com'
SET @Format = 'HTML'
SET @Profile = 'LIS-SQL'

SET @EmailBody = 'Good Morning,' + '<br>' + '<br>' + 'LINCOLN STATISTICS FOR THE DAY OF ' +  CONVERT(VARCHAR,@startday, 101)

--New Accessions entered
declare @count as int = 0
select @count = count(*) 
from tblAccessions where QSSCreatedDate between @startday and @endday --> @thisday

SET @EmailBody = @EmailBody + '<br>' + '<br>' + 'New Accessions Entered:' + '<br>' + CONVERT(VARCHAR,@count)

--New Accessions with some results entered 
select @count = count(distinct accession) from tblResultedTests
where Accession in (select accession 
from tblAccessions where QSSCreatedDate between @startday and @endday --> @thisday
) and result is not null and result <> ''

SET @EmailBody = @EmailBody + '<br>' + '<br>' + 'New Accessions with some results entered:' + '<br>' + CONVERT(VARCHAR,@count)

--New Accessions with status Final
select @count = count(distinct accession) from tblResultedTests
where Accession in (select accession 
from tblAccessions where QSSCreatedDate  between @startday and @endday --> @thisday
) and result is not null and result <> '' and dbo.getresultstatus (Accession) = 'Final'

SET @EmailBody = @EmailBody + '<br>' + '<br>' + 'New Accessions with status Final:' + '<br>' + CONVERT(VARCHAR,@count)

--Number of Accessions released on this day
select @count = count(accession) from tblArchiveReviewAccession where ArchivedDate  between @startday and @endday --> @thisday

SET @EmailBody = @EmailBody + '<br>' + '<br>' + 'Number of Accessions released on this day:' + '<br>' + CONVERT(VARCHAR,@count)

--New Accessions with results from ACCUREFERENCE lab
select @count = count(distinct accession) from tblResultedTests
where Accession in (select accession 
from tblAccessions where QSSCreatedDate  between @startday and @endday --> @thisday
) and result is not null and result <> '' and QSSCreatedByID = 'accureference'

SET @EmailBody = @EmailBody + '<br>' + '<br>' + 'New Accessions with results from ACCUREFERENCE lab:' + '<br>' + CONVERT(VARCHAR,@count)

SET @EmailBody = @EmailBody + '<br>' + '<br>' + '***BILLING***'

--New Bills created
select @count = count(*) 
from tblBillAccessions where QSSCreatedDate  between @startday and @endday --> @thisday

SET @EmailBody = @EmailBody + '<br>' + '<br>' + 'New Bills created:' + '<br>' + CONVERT(VARCHAR,@count)

--# of Claims submitted
select @count = count(*) from tblBillAudit where Date  between @startday and @endday --> @thisday
and NoteType in ('HCFA', 'ElectronicClaim', 'PatientBill', 'NF')

SET @EmailBody = @EmailBody + '<br>' + '<br>' + '# of Claims submitted:' + '<br>' + CONVERT(VARCHAR,@count)

--Total Payment Posted (For Selected Dates)
declare @totalpaid decimal(18, 2)
select @totalpaid = sum(paymentamt) from tblPayment where QSSCreatedDate  between @startday and @endday --> @thisday
IF @totalpaid IS NULL
	BEGIN
		SET @totalpaid = 0		
	END

SET @EmailBody = @EmailBody + '<br>' + '<br>' + 'Total Payment Posted (For Selected Dates):' + '<br>' + '$' + CONVERT(VARCHAR, CAST(@totalpaid as money),1)

----Total Payment Posted:
select @totalpaid = sum(paymentamt) from tblPayment where QSSCreatedDate  <= @endday
IF @totalpaid IS NULL
	BEGIN
		SET @totalpaid = 0		
	END

SET @EmailBody = @EmailBody + '<br>' + '<br>' + 'Total Payment Posted:' + '<br>' + '$' + CONVERT(VARCHAR, CAST(@totalpaid as money),1)

SET @EmailBody = @EmailBody + '<br>' + '<br>' + '<br>' + 'QSS Reporting'

EXEC msdb.dbo.sp_send_dbmail
--@profile_name = @Profile,   
@recipients= @To,
@copy_recipients = @CC,
@subject = @SubLine,
@body= @EmailBody,
@body_format= @Format,
@from_address= @From

END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteAccessionAutoFax]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteAccessionAutoFax]
	-- Add the parameters for the stored procedure here
	@Accession varchar(200)
    
AS
BEGIN
		SET NOCOUNT ON;
	Delete from tblAutoFax where Accession =@Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteAccessionfromiPowerDoc]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteAccessionfromiPowerDoc]	
	@Accession varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tbliPowerDoc where Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteAccessionPrefix]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spDeleteAccessionPrefix]	
	@Code varchar(10)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblAccessionPrefix where 
	Prefix = @Code
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteBillingInsuranceCPTCodeLookup]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteBillingInsuranceCPTCodeLookup]
	@InsuranceID as varChar(100),
	@InsCPTCode as varchar(10)
AS
BEGIN
	delete from tblBillingInsuranceCPTCodeLookup where  InsuranceID = @InsuranceID and InsCPTCode = @InsCPTCode
		
END





GO
/****** Object:  StoredProcedure [dbo].[spDeleteBillingNotifications]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create Procedure [dbo].[spDeleteBillingNotifications]
(
	@accession varchar(50)
	
)
As
BEGIN
	delete from tblBillingNotifications
	where @accession = accession
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteBillType]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteBillType]	
	@BTCode varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblBillTypeDefinitions where 
	
		BTCode = @BTCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteCalculation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spDeleteCalculation] 
@CalculationID varchar(100) 

AS
BEGIN
SET NOCOUNT ON
	UPDATE tblResultedTestsDefinitions
	SET Calculation = '',
	Formula = ''
	WHERE TestCode = @CalculationID

END

GO
/****** Object:  StoredProcedure [dbo].[spDeleteCalculationReference]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spDeleteCalculationReference] 
@CalculationID varchar(100) 

AS
BEGIN
SET NOCOUNT ON
	DELETE dbo.tblCalculationReference WHERE ParentCalculationID = @CalculationID
END

GO
/****** Object:  StoredProcedure [dbo].[spDeleteClientDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteClientDefinitions]	
	@ClientCode varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblClients where 
	
		ClientCode = @ClientCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteClientEmail]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spDeleteClientEmail]
	@ID varchar(20)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    delete from tblClientsEmails where 
		ID = @ID
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteClientEmails]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteClientEmails]	
	@ClientCode varchar(20)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblClientsEmails where 
	
		ClientCode = @ClientCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteClientFaxes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteClientFaxes]	
	@ClientCode varchar(20)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblClientsFaxNumbers where 
	
		ClientCode = @ClientCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteClientFaxNumber]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spDeleteClientFaxNumber]
	@ID varchar(20)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    delete from tblClientsFaxNumbers where 
		ID = @ID
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteClientsPhysician]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteClientsPhysician]	
	@ClientCode varchar(100),
	@PhysicianCode varchar(100)		
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblClientsPhysicians where 
	
		ClientCode = @ClientCode
		and PhysicianCode = @PhysicianCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteClientsSales]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spDeleteClientsSales]	
	@ClientCode varchar(100),
	@SalesmanCode varchar(100)		
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblClientsSalesman where 
	
		ClientCode = @ClientCode
		and SalesmanCode = @SalesmanCode
END
 --************************************************************
GO
/****** Object:  StoredProcedure [dbo].[spDeleteControlModule]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteControlModule]	
	@ControlID varchar(100)
   ,@LotNumber varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblQCControls 
    where 	ControlID = @ControlID
		AND Lot		  = @LotNumber 
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteControlOrder]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteControlOrder]
	@ControlOrderNumber as varchar(20)
	    
	
AS
BEGIN
	delete from tblQCOrders where  OrderID = @ControlOrderNumber
			
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteControlResults]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spDeleteControlResults]
	-- Add the parameters for the stored procedure here
	@QCResultID varchar(50),
	@QCGroupID varchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    Delete from tblQCResultValues
	where QCResultsID = @QCResultID
	and QCGroupNumber = @QCGroupID
	
END



GO
/****** Object:  StoredProcedure [dbo].[spDeleteCopyToClient]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteCopyToClient]

	@Accession as varchar(100)	
	
AS
BEGIN
    DELETE FROM dbo.tblAccessionsClients
    WHERE Accession = @Accession         
  
	
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteCptforCase]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[spDeleteCptforCase]            
           
       
 @CaseNumber as varchar(100)            
AS            
BEGIN            
           
          
 DELETE FROM [dbo].[tblPathologyBilling]     
 WHERE PathologyCase = @CaseNumber      
      
END     
GO
/****** Object:  StoredProcedure [dbo].[spDeleteCPTGroup]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
--PA 5/16/2017 - ALL KEYS must be sent into this procedure and be part of the test in the delete statement  
CREATE PROCEDURE [dbo].[spDeleteCPTGroup]   
 @ResultCode varchar(200),  
 @GroupCPTCode varchar(100),  
 @BillTypeCode varchar(100),  
 @EffectiveDate datetime  
AS  
BEGIN  
   
 SET NOCOUNT ON;  
  
    delete from tblCPTGroups where   
   
  ResultCodes = @ResultCode and GroupCPTCode = @GroupCPTCode and BillTypeCode = @BillTypeCode and EffectiveDate = @EffectiveDate  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spDeleteCPTGroupByName]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[spDeleteCPTGroupByName]   
 @GroupName varchar(200),  
 @BillTypeCode varchar(100),  
 @EffectiveDate datetime  
AS  
BEGIN  
   
 SET NOCOUNT ON;  
  
    delete from tblCPTGroups where   
   
  GroupName = @GroupName and  
  BillTypeCode = @BillTypeCode and   
  EffectiveDate = @EffectiveDate  
  
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteCPTScale]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteCPTScale]	
	@InsuranceType varchar(100),
	@CPTCode varchar(100),
	@ConvertToCode varchar(100)
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblCPTScaleMaintance where 
		InsuranceType = @InsuranceType and CPTCode = @CPTCode and ConvertToCode = ConvertToCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteCurrentPanel]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spDeleteCurrentPanel]	
	@Accession varchar(100),
	@MailoutLab varchar(100), 
	@QSSCreatedByID varchar(100),
	@PerfTest varchar(100)
AS
BEGIN
	
	SET NOCOUNT ON;
	
	delete from tblOrderedTests 
	where Accession = @Accession 
	--and QSSCreatedByID <> @QSSCreatedByID --CLEAR ALL EVERY TIME
	and PerformedTest in 
	(select PerformedTest 
	from tblPerformedTestsDefinitions
	where MailoutLab = @MailoutLab
	and MailoutFlag = 'M'
	and Performedtest = @PerfTest) 
	
	delete from tblResultedTests
	where Accession = @Accession 
	--and QSSCreatedByID <> @QSSCreatedByID --CLEAR ALL EVERY TIME
	and PerformedTest in 
	(select PerformedTest 
	from tblPerformedTestsDefinitions
	where MailoutLab = @MailoutLab
	and MailoutFlag = 'M'
	and Performedtest = @PerfTest) 
	
END

GO
/****** Object:  StoredProcedure [dbo].[spDeleteCytoCptforCase]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteCytoCptforCase]              
             
         
 @CaseNumber as varchar(100)              
AS              
BEGIN              
             
            
 DELETE FROM [dbo].tblCytologyBilling       
 WHERE CytologyCase = @CaseNumber        
        
END 
GO
/****** Object:  StoredProcedure [dbo].[spDeleteCytoSources]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteCytoSources]          
 @ID as int          
          
AS          
BEGIN          
DECLARE @Check int         
SET @Check = (SELECT SourceID from tblCytologySources where ID = @ID)          
          
IF @Check IS NOT NULL          
          
 Delete from tblCytologySources where ID = @ID          
 Delete from tblCytoHeadersForSource where SourceID= @Check      
END 
GO
/****** Object:  StoredProcedure [dbo].[spDeleteCytoStainsforCase]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteCytoStainsforCase]            
           
       
 @CaseNumber as varchar(100)            
AS            
BEGIN            
           
          
 DELETE FROM [dbo].tblCytoStains          
 WHERE CaseNumber = @CaseNumber      
      
END 
GO
/****** Object:  StoredProcedure [dbo].[spDeleteDenialDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





create PROCEDURE [dbo].[spDeleteDenialDefinitions]

	@Code as varchar(100)
	
AS

BEGIN

	declare @iCount as int
	select @iCount = count(DenialCode) from tblDenialDefinitions where DenialCode = @Code

	if @iCount > 0
	begin
		delete from tblDenialDefinitions 
		 where DenialCode = @Code 
	end
	
END



GO
/****** Object:  StoredProcedure [dbo].[spDeleteDiagnosis]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spDeleteDiagnosis]
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    delete from tblDiagnosis 
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteDiagnosisDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteDiagnosisDefinitions]	
	@Code varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblDiagnosis where 
	
		DiagnosisCode = @Code
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteEmailData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteEmailData]
	@Accession as varchar(50)
AS
	SET NOCOUNT ON;
	DELETE tblAutoEmail WHERE Accession = @Accession;
GO
/****** Object:  StoredProcedure [dbo].[spDeleteFeeDefinition]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteFeeDefinition]
	@OrderedTestCode as varChar(100),
	@BillTypeCode as varchar(100),
	@ClientCode as varchar(100),
	@CPTcode as varchar(100), 
	@CPTCounter as integer
	    
	
AS
BEGIN
	delete from tblFeeDefinitions where  OrderedTestCode = @OrderedTestCode and
	BillTypeCode = @BillTypeCode and CPTcode = @CPTcode and ClientCode = @ClientCode 
	and CPTCounter = @CPTCounter
			
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromArchiveReviewAccessionMailout]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spDeleteFromArchiveReviewAccessionMailout]	
	@Accession varchar(100)	,
	@MailoutLab varchar(100)
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblArchiveReviewAccessionMailout where 
			Accession = @Accession
			and MailoutLab = @MailoutLab
END


GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromAutoRelease]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Paul Antompietri
-- Create date: 3/19/2019
-- Description:	Delete from tblAutoRelease
-- =============================================
CREATE PROCEDURE [dbo].[spDeleteFromAutoRelease]
	@Accession varchar(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	delete from tblAutoRelease where Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicGeneratePDF]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spDeleteFromElectronicGeneratePDF]
	-- Add the parameters for the stored procedure here
	@Accession varchar(200)
    
AS
BEGIN
		SET NOCOUNT ON;
	Delete from tblElectronicGeneratePDF where Accession =@Accession
END


GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicInterfaceAthena]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  
CREATE PROCEDURE [dbo].[spDeleteFromElectronicInterfaceAthena] 
 -- Add the parameters for the stored procedure here  
 @Accession varchar(200)  
      
AS  
BEGIN  
  SET NOCOUNT ON;  
 Delete from tblElectronicInterfaceAthena where Accession =@Accession  
END  
  
  

GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicInterfaceChangeHealthcare]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




create PROCEDURE [dbo].[spDeleteFromElectronicInterfaceChangeHealthcare]
	-- Add the parameters for the stored procedure here
	@Accession varchar(200)
    
AS
BEGIN
		SET NOCOUNT ON;
	Delete from tblElectronicInterfaceChangeHealthcare where Accession =@Accession
END



GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicInterfaceCureMD]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
CREATE PROCEDURE [dbo].[spDeleteFromElectronicInterfaceCureMD]  
 -- Add the parameters for the stored procedure here  
 @Accession varchar(200)  
      
AS  
BEGIN  
  SET NOCOUNT ON;  
 Delete from tblElectronicInterfaceCureMD where Accession =@Accession  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicInterfaceEClinical]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  
CREATE PROCEDURE [dbo].[spDeleteFromElectronicInterfaceEClinical]  
 -- Add the parameters for the stored procedure here  
 @Accession varchar(200)  
      
AS  
BEGIN  
  SET NOCOUNT ON;  
 Delete from tblElectronicInterfaceEClinical where Accession =@Accession  
END  
  
  

GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicInterfaceEHI]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
CREATE PROCEDURE [dbo].[spDeleteFromElectronicInterfaceEHI]  
 -- Add the parameters for the stored procedure here  
 @Accession varchar(200)  
      
AS  
BEGIN  
  SET NOCOUNT ON;  
 Delete from tblElectronicInterfaceEHI where Accession =@Accession  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicInterfaceElation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
CREATE PROCEDURE [dbo].[spDeleteFromElectronicInterfaceElation]  
 -- Add the parameters for the stored procedure here  
 @Accession varchar(200)  
      
AS  
BEGIN  
  SET NOCOUNT ON;  
 Delete from tblElectronicInterfaceElation where Accession =@Accession  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicInterfaceGADOH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[spDeleteFromElectronicInterfaceGADOH]
	-- Add the parameters for the stored procedure here
	@Accession varchar(200)
    
AS
BEGIN
		SET NOCOUNT ON;
	Delete from tblElectronicInterfaceGADOH  where Accession =@Accession
END

GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicInterfaceMDLAND]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spDeleteFromElectronicInterfaceMDLAND]
	-- Add the parameters for the stored procedure here
	@Accession varchar(200)
    
AS
BEGIN
		SET NOCOUNT ON;
	Delete from tblElectronicInterfaceMDLAND where Accession =@Accession
END


GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicInterfaceMedGen]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
CREATE PROCEDURE [dbo].[spDeleteFromElectronicInterfaceMedGen]  
 -- Add the parameters for the stored procedure here  
 @Accession varchar(200)  
      
AS  
BEGIN  
  SET NOCOUNT ON;  
 Delete from tblElectronicInterfaceMedGen where Accession =@Accession  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicInterfaceNextGen]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




create PROCEDURE [dbo].[spDeleteFromElectronicInterfaceNextGen]
	-- Add the parameters for the stored procedure here
	@Accession varchar(200)
    
AS
BEGIN
		SET NOCOUNT ON;
	Delete from tblElectronicInterfaceNextGen where Accession =@Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicInterfaceNYSDOH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  
create PROCEDURE [dbo].[spDeleteFromElectronicInterfaceNYSDOH]  
 -- Add the parameters for the stored procedure here  
 @Accession varchar(200)  
      
AS  
BEGIN  
  SET NOCOUNT ON;  
 Delete from tblElectronicInterfaceNYSDOH where Accession =@Accession  
END  
  
  

GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicInterfaceOptiMantra]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
CREATE PROCEDURE [dbo].[spDeleteFromElectronicInterfaceOptiMantra]  
 -- Add the parameters for the stored procedure here  
 @Accession varchar(200)  
      
AS  
BEGIN  
  SET NOCOUNT ON;  
 Delete from tblElectronicInterfaceOptiMantra where Accession =@Accession  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicInterfacePracticeFusion]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[spDeleteFromElectronicInterfacePracticeFusion]  
 -- Add the parameters for the stored procedure here  
 @Accession varchar(200)  
      
AS  
BEGIN  
  SET NOCOUNT ON;  
 Delete from tblElectronicInterfacePracticeFusion where Accession =@Accession  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromElectronicReq]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create PROCEDURE [dbo].[spDeleteFromElectronicReq]
	-- Add the parameters for the stored procedure here
	@Accession varchar(200)
    
AS
BEGIN
		SET NOCOUNT ON;
	Delete from tblElectronicReq where Accession =@Accession
END


GO
/****** Object:  StoredProcedure [dbo].[spDeleteFromSalesportalAccessions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spDeleteFromSalesportalAccessions]	
	@Accession varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblSalesportalAccessions where 
	Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteInstrumentAccessionQuery]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spDeleteInstrumentAccessionQuery]
	@Accession varchar(100)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    delete from [tblInstrumentAccessionQuery] where 
		Accession = @Accession 
		
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteInstrumentAccessionQueryDXI]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spDeleteInstrumentAccessionQueryDXI]
	@Accession varchar(100)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    delete from [tblInstrumentAccessionQueryDXI] where 
		Accession = @Accession 
		
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteInstrumentCentaurOrder]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
CREATE PROCEDURE [dbo].[spDeleteInstrumentCentaurOrder]
	@Accession varchar(100)
AS
BEGIN
	SET NOCOUNT ON;
	DELETE FROM tblInstrumentCentaurOrders WHERE Accession = @Accession;
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteInsuranceCompany]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteInsuranceCompany]	
	@InsuranceCode varchar(20)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblInsuranceCompanies where 
	
		InsuranceCode = @InsuranceCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteLabCommentDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteLabCommentDefinitions]	
	@Code varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblLabCommentDefinitions  where 
	
		Code = @Code
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteMailoutLabDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteMailoutLabDefinitions]	
	@LabCode varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblMailoutLabs where 
	
		LabCode = @LabCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteMailoutOrderedTestcodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteMailoutOrderedTestcodes]         
 @Accession varchar(100),  
  @PerfTest varchar(100),        
 @MailoutLab varchar(100)         
AS        
BEGIN        
         
 SET NOCOUNT ON;        
 --DECLARE @PerfTest varchar(100)        
 delete from tblOrderedTests         
 where Accession = @Accession      
 --and QSSCreatedByID <> @MailoutLab        
 and PerformedTest in         
 (select PerformedTest         
 from tblPerformedTestsDefinitions      
 where MailoutLab = @MailoutLab        
 and MailoutFlag = 'M'  
 and Performedtest = @PerfTest)         
         
 delete from tblResultedTests        
 where Accession = @Accession         
-- and QSSCreatedByID <> @MailoutLab        
 and PerformedTest in         
 (select PerformedTest         
 from tblPerformedTestsDefinitions        
 where MailoutLab = @MailoutLab        
 and MailoutFlag = 'M'  
 and Performedtest = @PerfTest)     
 
 
 --SET NOCOUNT ON;    
 --DECLARE @PerfTest varchar(100)    
 --delete from tblOrderedTests     
 --where Accession = @Accession     
 --and QSSCreatedByID <> @MailoutLab    
 --and PerformedTest in     
 --(select PerformedTest     
 --from tblPerformedTestsDefinitions    
 --where MailoutLab = @MailoutLab    
 --and MailoutFlag = 'M')     
     
 --delete from tblResultedTests    
 --where Accession = @Accession     
 --and QSSCreatedByID <> @MailoutLab    
 --and PerformedTest in     
 --(select PerformedTest     
 --from tblPerformedTestsDefinitions    
 --where MailoutLab = @MailoutLab    
 --and MailoutFlag = 'M')     
         
         
END 
GO
/****** Object:  StoredProcedure [dbo].[spDeleteMailoutTestCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create PROCEDURE [dbo].[spDeleteMailoutTestCodes]	
	  @MailoutLabCode varchar(20)
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblMailoutTestCodes
	where MailoutLabCode = @MailoutLabCode
END



GO
/****** Object:  StoredProcedure [dbo].[spDeleteMedicationDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteMedicationDefinitions]	
	@Code varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblMedications where 
	
		MedicationCode = @Code
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteMicroTestAntibiotic]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteMicroTestAntibiotic]
	@ID as int

AS
BEGIN
DECLARE @Check varchar(20)
SET @Check = (SELECT Accession from tblMicroTestAntibiotics where ID = @ID)

IF @Check IS NOT NULL

	Delete from tblMicroTestAntibiotics where ID = @ID
END

GO
/****** Object:  StoredProcedure [dbo].[spDeleteMicroTestOrganism]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteMicroTestOrganism]
	@ID as int

AS
BEGIN
DECLARE @Check varchar(20)
SET @Check = (SELECT MicroTestOrganismID from tblMicroTestOrganisms where ID = @ID)

IF @Check IS NOT NULL

	Delete from tblMicroTestOrganisms where ID = @ID

	Delete from tblMicroTestAntibiotics where MicroTestOrganismID = @Check
END

GO
/****** Object:  StoredProcedure [dbo].[spDeleteMissingInformation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteMissingInformation]
	@Accession as varchar(50),
	@Reason as varchar(max)
	
	    	
AS
BEGIN
	delete from tblMissingInformation where  Accession = @Accession and Reason = @Reason 
			
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteMissingInformationAll]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteMissingInformationAll]
                @Accession as varchar(50),
                @UserID as varchar(20)= NULL
                
                
                                
AS
BEGIN
insert into tblBillAudit
                select getdate(), ISNULL(@UserID, 'BillingEntry'), Accession, 'Removed from Missing Information list: ' + Reason, 'Bill'
                from tblMissingInformation where  Accession = @Accession and Reason like 'DenialCode%'
                delete from tblMissingInformation where  Accession = @Accession
                                                
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteOrderedTestDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteOrderedTestDefinitions]	
	@Code varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from   tblOrderedTestsDefinitions where 
	
		OrderedTest = @Code
END
GO
/****** Object:  StoredProcedure [dbo].[spDeletePatient]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spDeletePatient]
	@labcode varchar(20),
	@clientcode varchar(20),
	@patientid varchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    delete from tblPatients where 
		Labcode = @labcode and
		clientcode = @clientcode and
		PatientID = @patientid
END
GO
/****** Object:  StoredProcedure [dbo].[spDeletePendingOrder]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[spDeletePendingOrder]
(
	@accession varchar(50)
	
)
As
BEGIN
	delete from tblPendingOrders
	where @accession = accession
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spDeletePerformedTestDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeletePerformedTestDefinitions]	
	@Code varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from   tblPerformedTestsDefinitions where 
	
		PerformedTest = @Code
END
GO
/****** Object:  StoredProcedure [dbo].[spDeletePhysicianDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeletePhysicianDefinitions]	
	@PhysicianCode varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblPhysicians where 
	
		PhysicianCode = @PhysicianCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteReportOrderHeader]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteReportOrderHeader]
  @Header As Varchar(200)
 
	
AS 
 
	BEGIN 
	DELETE dbo.tblTestsReportOrder	
	WHERE Header = @Header
    END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteResultedTestAlphaDecodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteResultedTestAlphaDecodes] 

	@TestCode varchar(100),
	--@Decode varchar(50) ,
	@UserID varchar(20) 
AS
BEGIN

			
	UPDATE  dbo.tblResultedTestDecodes
	SET ReflexTestCode = '' ,
	QSSLastUpdateID = @UserID ,
	QSSUpdateDate = GETDATE()	,
	QSSVersion = QSSVersion + 1	
	WHERE TestCode =  @TestCode
	
		
		
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteResultedTestDecodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Paul Antompietri
-- Create date: 6/22/2016
-- Description:	Delete individual result decode row
-- =============================================
CREATE PROCEDURE [dbo].[spDeleteResultedTestDecodes] 
	-- Add the parameters for the stored procedure here
	@TestCode as varchar(20),
	@Code as varchar(20)
AS
BEGIN
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	Delete from tblResultedTestDecodes 
	where TestCode = @TestCode and Code = @Code
END

GO
/****** Object:  StoredProcedure [dbo].[spDeleteResultedTestDecodesALL]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteResultedTestDecodesALL]	
	@TestCode varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblResultedTestDecodes where 
	
		TestCode = @TestCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteResultedTestDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteResultedTestDefinitions]	
	@TestCode varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblResultedTestsDefinitions where 
	
		TestCode = @TestCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteResultedTestParam]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteResultedTestParam]	
	@TestCode varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblResultedTestsParams where 
	
		ResultedTest = @TestCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteResultedTestParamALL]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteResultedTestParamALL]	
	@TestCode varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblResultedTestsParams where 
	
		ResultedTest = @TestCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteResultedTestReflexParams]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteResultedTestReflexParams] 

	@TestCode varchar(100),
	@UserID varchar(20) 
AS
BEGIN

	UPDATE dbo.tblResultedTestsDefinitions
	SET ReflexLowValue = '' ,
	    ReflexHighValue = '' , 
	    ReflexLowTestCode = '' , 
	    ReflexHighTestCode = '' ,
	    QSSLastUpdateID = @UserID ,
	    QSSUpdateDate = GETDATE() ,
	    QSSVersion = QSSVersion + 1	    		
		WHERE TestCode = @TestCode
		
	
		
		
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteRouteInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteRouteInfo]	
	@RouteCode varchar(200)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblRptRoutesDefinitions where 
	
		RouteCode = @RouteCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteSavedQuery]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spDeleteSavedQuery]	
	@QueryName varchar(200)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblBillingGeneratedQueries where 
	
		QueryName = @QueryName
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteSavedQueryLab]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spDeleteSavedQueryLab]	
	@QueryName varchar(200)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblLabGeneratedQueries where 
	
		QueryName = @QueryName
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteSources]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteSources]          
 @ID as int          
          
AS          
BEGIN          
DECLARE @Check int         
SET @Check = (SELECT SourceID from tblPathologySources where ID = @ID)          
          
IF @Check IS NOT NULL          
          
 Delete from tblPathologySources where ID = @ID          
 Delete from tblHeadersForSource where SourceID= @Check      
 delete from tblPathologyStains where Source =@Check  
END   
GO
/****** Object:  StoredProcedure [dbo].[spDeleteSpecimenType]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteSpecimenType]	
	@Code varchar(25)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblSpecimens where 
	
		SpecimenCode = @Code
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteStains]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spDeleteStains]          
 @CaseNumber as varchar(100),
 @Source as varchar(200),
 @StainRequest as varchar(100)
AS          
BEGIN          
    
 delete from tblPathologyStains where Source =@Source and CaseNumber=@CaseNumber and StainRequest =@StainRequest
   
END   
GO
/****** Object:  StoredProcedure [dbo].[spDeleteStainsforCase]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteStainsforCase]        
       
   
 @CaseNumber as varchar(100)        
AS        
BEGIN        
       
      
 DELETE FROM [dbo].[tblStains]      
 WHERE CaseNumber = @CaseNumber  
  
END 
GO
/****** Object:  StoredProcedure [dbo].[spDeleteSuspensionReason]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteSuspensionReason]	
	@BTCode varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblSuspensionReasion where 
	
		BTCode = @BTCode
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteTblBillData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spDeleteTblBillData]	
	@Accession varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;
if exists (select top 1 accession from tblbill where accession = @Accession)
begin
    delete from tblBill where 
		Accession = @Accession and CPTCode not like 'Unallocated%'
end		
END

GO
/****** Object:  StoredProcedure [dbo].[spDeleteTempFaxData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spDeleteTempFaxData]
	@Accession as varchar(50)
 
AS
BEGIN
	delete from tblAutoFax where accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteTempiPowerDocData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spDeleteTempiPowerDocData]
		    
	
AS
BEGIN
	delete from tbliPowerDoc 
			
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteTempRemitDataAll]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteTempRemitDataAll]
		    
	
AS
BEGIN
	delete from tblBillingTempRemit 
END
GO
/****** Object:  StoredProcedure [dbo].[spDeleteWorkSheetsDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteWorkSheetsDefinitions]	
	@WCode varchar(100)	
AS
BEGIN
	
	SET NOCOUNT ON;

    delete from tblWorkSheetsDefinitions where 
	
		WKCode = @WCode
END
GO
/****** Object:  StoredProcedure [dbo].[spExGetCovidReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[spExGetCovidReport]
as
begin
select pat.ptLastName, pat.ptFirstName, pat.ptDateOfBirth, pat.ptSex, '', '', pat.ptAddress1, pat.ptAddress2, pat.ptCity, pat.ptState, pat.ptZip, pat.PTContactHomePhone,
a.Accession, l.LabName, l.CLIAnumber, a.CollectionDate, rtd.ExternalName, '94500-6', r.Result, 'Nasopharyngeal', 
c.ClientName, c.Address, c.Address2, c.City, c.State, c.Zip, c.Telephone,
p.LastName, p.FirstName, c.Address, c.Address2, c.City, c.State, c.Zip, c.Telephone --, r.ResultComment
from tblAccessions a
join tblResultedTests r
on a.Accession = r.Accession
join tblResultedTestsDefinitions rtd
on r.ResultTest = rtd.TestCode and r.Version = rtd.Version
join tblPatient pat
on a.PatientID = pat.PatientId
join tblClients c
on a.ClientCode = c.ClientCode
join tblPhysicians p
on a.PhysicianCode = p.PhysicianCode
join tblLabs l
on l.LabCode = l.LabCode
left join tblArchiveReviewAccession ara
on a.Accession = ara.Accession
where r.PerformedTest = 'LD074'
and pat.ptState = 'NJ'
and l.VersionNumber = '2'
and r.Status = 'Final'
and r.ResultTest = 'sars'
--and ara.QSSFinalizedDate is null
order by ara.ArchivedDate

end
GO
/****** Object:  StoredProcedure [dbo].[spFinalizeNullResult]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Update 4/27/2017 Gladson - tblResultedTests can have ResultTest duplication with a Status of Cancelled.    
--         This procedure will only update ResultTest with Status of Pending or Hold.    
-- =============================================    
-- =============================================    
-- Update 5/17/2017 Hanane - Do not modify Entry Date when the result is modified    
-- =============================================    
CREATE PROCEDURE [dbo].[spFinalizeNullResult]      
    
        @Accession varchar(100),    
        @Instrument varchar(100)  
          
AS      
BEGIN      
   
	--Update result record    
	UPDATE tblResultedTests set     
	Status = 'Final',    
	EnteredBy = @Instrument,    
	EntryDate = getdate(),     
	QSSLastUpdateID = @Instrument,      
	QSSUpdateDate = GETDATE()     
	where Accession=@Accession and ResultTest in (SELECT rt.ResultTest from tblInstrumentElements ie       
		inner JOIN dbo.tblResultedTests rt (NOLOCK)    
		ON rt.ResultTest = ie.ResultTest      
		WHERE ie.InstrumentCode =@Instrument and rt.Accession = @Accession   
		and Status ='Pending' and Result is null)  
     
END
GO
/****** Object:  StoredProcedure [dbo].[spFinalizeResults]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--=============================================
-- <3/12/2019><Gladson><Finalize report and add to tblReviewAccession.
-- =============================================
CREATE PROCEDURE [dbo].[spFinalizeResults]
	@Accession varchar(100),
	@EnteredBy varchar(100),
	@ReturnCode int output
AS
BEGIN

	SET NOCOUNT OFF;

	UPDATE tblAccessions SET AddScannedPaperWork = 1, ReportImportDate = GETDATE(), QSSLastUpdateID = @EnteredBy, QSSUpdateDate = GETDATE() WHERE Accession = @Accession;

	SET @ReturnCode = @@ROWCOUNT;

	UPDATE a SET [Status] = 'Final', ResultComment = b.Comment, EnteredBy = @EnteredBy, EntryDate = GETDATE(), QSSLastUpdateID = @EnteredBy, QSSUpdateDate = GETDATE() 
	FROM tblResultedTests a INNER JOIN
		tblResultedTestsDefinitions b ON b.TestCode = a.ResultTest AND a.[Version] = b.[Version]
		WHERE Accession =  @Accession AND [Status] != 'Cancelled';

	IF @@ROWCOUNT > 0
	BEGIN
		IF NOT EXISTS (SELECT 1 FROM tblReviewAccession WHERE Accession = @Accession)
			INSERT INTO tblReviewAccession(Accession, QSSLastUpdatedByID, QSSLastUpdatedDate)
				values(@Accession, @EnteredBy, GETDATE());
	End 

END


	
GO
/****** Object:  StoredProcedure [dbo].[spFinlalizeIricellUntestedResults]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
--12/17/2020 - For some odd reasons Result = Null for ResultTest IN ('RBC', 'RBCC', 'WBC', 'WBCC', 'BACT', 'YST') ex. 2012101017
--03/11/2021 - Gladson - These elements need to be finalized with with null result also - WAXY, BYST, HYST
-- Any update to testcodes requires update to spSaveInstrumentResult & spGetAccessionDetailsInfo
-- =============================================
CREATE PROCEDURE [dbo].[spFinlalizeIricellUntestedResults]
  
        @Accession varchar(100)
        
AS   
BEGIN   

	DECLARE @Result  varchar(100) = 'NEGATIVE',  
        @Outcome varchar(50) = 'C',  
        @Status varchar(50) = 'Final',
        @ResultFlag varchar(100) = 'Negative',
		@EnteredBy varchar(100) = 'iRICELL';
        
	UPDATE tblResultedTests set  
	Result = 'NEGATIVE',  
	Status = @Status,  
	Outcome = @Outcome,  
	EnteredBy = @EnteredBy,  
	ResultFlag = @ResultFlag,  
	EntryDate = GETDATE(),
	QSSLastUpdateID = @EnteredBy,    
	QSSUpdateDate = GETDATE()   
	WHERE Accession = @Accession AND
	ResultTest IN ('RBC', 'RBCC', 'WBC', 'WBCC', 'BACT', 'YST') AND Status IN ('Pending', 'Hold');

	UPDATE tblResultedTests set  
	Result = NULL,
	Status = @Status,  
	Outcome = NULL,  
	EnteredBy = @EnteredBy,  
	ResultFlag = NULL,  
	EntryDate = GETDATE(),
	QSSLastUpdateID = @EnteredBy,    
	QSSUpdateDate = GETDATE()   
	WHERE Accession = @Accession AND
	ResultTest IN ('SQEP', 'TREP', 'REEP', 'FAT', 'MUCS', 'SPRM', 'TRCH', 'HYAL', 'EPIC', 'WBCT', 'RBCT', 'GRAN', 'CELL', 'BROAD', 'FATC', 'TPO4', 'CAOX', 'CAPH', 'CACB', 'URIC', 'LEUC', 'CYST', 'TYRO', 'AMOR', 'WAXY', 'BYST', 'HYST')
	AND Status IN ('Pending', 'Hold');

END
GO
/****** Object:  StoredProcedure [dbo].[spGeneratePostCashPayments]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		HF
-- Create date: 07/12/2011
-- Description:	This procedure creates one or more Bills for the Accession
-- =============================================
CREATE PROCEDURE [dbo].[spGeneratePostCashPayments]
	@Accession varchar(50),	
	@QSSLastUpdatedID as varchar(20)  

AS
BEGIN
	DECLARE    
            @OrderedTestCode  varchar(100)
          , @NextBillDate datetime
          , @BTCode varchar(100)
          , @CPTCode varchar(100)
		  , @Modifier varchar(100)
		  , @GroupFlag bit
          --, @FeeDescription varchar(200)
          --, @TotalFeeAmt decimal(18,4)
          --, @ExpPaymentAmt decimal(18,4)
          --, @Units int
          --, @BillableFlag bit
          --, @Description varchar(200)
IF NOT EXISTS (SELECT Top 1 Accession FROM dbo.tblPayment  
           WHERE Accession = @Accession   )  
  BEGIN
  PRINT 'DO NOT EXISTS'
  DECLARE POSTCASHBILL_CURSOR CURSOR READ_ONLY FOR 
	SELECT  BTCode, CPTCode , OrderedTestCode, Modifier, GroupFlag
	FROM dbo.tblBill
	WHERE Accession = @Accession
           
	ORDER BY OrderedTestCode , CPTCode, Modifier, GroupFlag
	OPEN POSTCASHBILL_CURSOR

	FETCH NEXT FROM POSTCASHBILL_CURSOR
		INTO   @BTCode, @CPTCode , @OrderedTestCode, @Modifier, @GroupFlag
	WHILE @@FETCH_STATUS = 0
	BEGIN 
	INSERT INTO dbo.tblPayment
		(Accession , BTCode , CPTcode, OrderedTest, EntryDate, PaymentAmt, AdjustmentAmt,
		QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID, QSSUpdateDate, QSSVersion, Modifier, GroupFlag)
	VALUES
		(@Accession, @BTCode , @CPTCode , @OrderedTestCode ,  GETDATE() , '0' , '0' , 
		@QSSLastUpdatedID , GETDATE(), @QSSLastUpdatedID , GETDATE(), 0, @Modifier, @GroupFlag )
		
	FETCH NEXT FROM POSTCASHBILL_CURSOR
		INTO   @BTCode, @CPTCode , @OrderedTestCode, @Modifier, @GroupFlag
	END
	CLOSE POSTCASHBILL_CURSOR
	DEALLOCATE POSTCASHBILL_CURSOR 
	END
ELSE IF EXISTS (SELECT Top 1 Accession FROM dbo.tblPayment  
           WHERE Accession = @Accession   )    
 BEGIN
  
  PRINT 'EXISTS'
  DECLARE POSTCASHBILL_CURSOR CURSOR READ_ONLY FOR 
	SELECT  BTCode, CPTCode , OrderedTestCode, Modifier, GroupFlag
	FROM dbo.tblBill
	WHERE Accession = @Accession
           
	ORDER BY OrderedTestCode , CPTCode, Modifier, GroupFlag
	OPEN POSTCASHBILL_CURSOR

	FETCH NEXT FROM POSTCASHBILL_CURSOR
		INTO   @BTCode, @CPTCode , @OrderedTestCode, @Modifier, @GroupFlag
	WHILE @@FETCH_STATUS = 0
	BEGIN 
	PRINT @CPTCode
	PRINT @OrderedTestCode
	--IF EXISTS ( SELECT Accession from dbo.tblPayment 
	--			where Accession = @Accession and CPTcode= @CPTCode and OrderedTest = @OrderedTestCode)
	--BEGIN
	--Update dbo.tblPayment
	--SET BTcode =  @BTCode
	--WHERE Accession = @Accession 
	--and CPTcode= @CPTCode 
	--and OrderedTest = @OrderedTestCode
	
	--END
	--ELSE
	--BEGIN
	
	INSERT INTO dbo.tblPayment
		(Accession , BTCode , CPTcode, OrderedTest, EntryDate, PaymentAmt, AdjustmentAmt,
		QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID, QSSUpdateDate, QSSVersion, Modifier, GroupFlag)
	VALUES
		(@Accession, @BTCode , @CPTCode , @OrderedTestCode ,  GETDATE() , '0' , '0' , 
		@QSSLastUpdatedID , GETDATE(), @QSSLastUpdatedID , GETDATE(), 0, @Modifier, @GroupFlag)
	--END
		
	FETCH NEXT FROM POSTCASHBILL_CURSOR
		INTO   @BTCode, @CPTCode , @OrderedTestCode, @Modifier, @GroupFlag
	END
	CLOSE POSTCASHBILL_CURSOR
	DEALLOCATE POSTCASHBILL_CURSOR 
	END
END

GO
/****** Object:  StoredProcedure [dbo].[spGet90DayBillingActivity]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGet90DayBillingActivity]
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	SET NOCOUNT ON;

    Declare @ActivityDate as date = dateadd(dd, -90, getdate())

	select count(*) from tblAccessions where CollectionDate > @ActivityDate
	select sum(PaymentAmt) from tblPayment where QSSCreatedDate > @ActivityDate
END

GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionAOEs]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
CREATE PROCEDURE [dbo].[spGetAccessionAOEs]            
            
 @Accession as varchar(100)            
AS            
BEGIN            
 SELECT distinct  acc.AOEQuestionText as AOEQuestion, acc.AOEAnswer as SelectedAnswer ,           
  STUFF((SELECT distinct '| ' +CAST( c.AOEAnswer as varchar(50))          
    FROM tblPerformedTestsAOE c where c.AOEQuestion=a.AOEQuestion                               
     FOR XML PATH('')), 1, 1, '') as AOEAnswer,a.AOETextAnswer,acc.AOEQuestionCode,          
  acc.PerformedTests  FROM tblAccessionAOE acc inner join tblPerformedTestsAOE a on a.performedtest=acc.PerformedTests WHERE Accession = @Accession            
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionBillingStatus]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetAccessionBillingStatus] 
                
                @Accession varchar(100)
AS
BEGIN
                SET NOCOUNT ON;

                SELECT Accession
                FROM tblBillAccessions with (NOLOCK)
                WHERE Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionBillingStatuses]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetAccessionBillingStatuses]
	
AS
BEGIN
	SET NOCOUNT ON;
		select AccessionBillingStatus as Code, AccessionBillingStatus as Description
		from tblAccessionBillingStatus
		ORDER BY AccessionBillingStatus
END






GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionBillingSummary]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetAccessionBillingSummary] 
                
                @Accession varchar(100)
AS
BEGIN
                SET NOCOUNT ON;

                SELECT Accession, dbo.B_GetAmountBilledTotal(@Accession) BillTotal,
                dbo.B_PaidAmount(@Accession) TotalPaid, 
                dbo.B_GetAdjustmentsTotal(@Accession) TotalAdjusted, 
                dbo.B_GetTotalBillBalance(@Accession) Balance,
                PatientID
                from tblBillAccessions 
                where accession = @Accession
END

GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionBilltype]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetAccessionBilltype] 
                
                @Accession varchar(100)
AS
BEGIN
                SET NOCOUNT ON;

                SELECT CurrentBillType as BillType
                FROM tblBillAccessions with (NOLOCK)
                WHERE Accession = @Accession
END

GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionData]
	
	@Accession varchar(50)
AS
BEGIN
	select ba.accession , ba.PatientID, ba.ClientCode, ba.PhysicianCode, ba.CollectionDate,
	PrimaryInsuranceID, ba.OrderType, ba.OrderedTests, ba.DiagnosisDataXML
	from tblBillAccessions ba with (nolock) 
	inner join tblAccessions on tblAccessions.accession = ba.accession 

	where 

ba.accession = @accession
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionDetailsInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
--PA 5/21/2020 - added approveddate from tblResultedTests to select; for auto-release
--10/22/2020 - Gladson - These elements need to be suppressed if RESULTED by the iRICELL analyzer with null result.
        --SQEP	SQUAMOUS EPITHELIAL
        --TREP	Transitional Epithelial
        --REEP	Renal Epithelial
        --FAT	FAT
        --MUCS	MUCOUS
        --SPRM	SPERM
        --TRCH	TRICHOMONAS
        --HYAL	Hyaline Cast
        --EPIC	Epithelial Cast
        --WBCT	White Blood Cell Cast
        --RBCT	Red Blood Cell Cast
        --GRAN	Granular Cast
        --CELL	Cellular Cast
        --BROAD	Broad Cast
        --FATC	Fatty Cell
        --TPO4	Triple Phosphate Crystal
        --CAOX	Calcium Oxalate Crystal
        --CAPH	Calcium Phosphate Crystal
        --CACB	Calcium Carbonate Crystal
        --URIC	Uric Acid Crystal
        --LEUC	Leucine Crystal
        --CYST	Cystine Crystal
        --TYRO	Tyrosine Crystal
        --AMOR	Amorphous Crystal
--01/07/2021 - Gladson - These elements need to be suppressed if RESULTED by the iRICELL analyzer with null result.
		--WAXY, BYST, HYST
-- =============================================
CREATE PROCEDURE [dbo].[spGetAccessionDetailsInfo]
@Accession varchar(50)          
AS                
BEGIN                
if OBJECT_ID('tempdb..#tmpTestInfo') IS NOT NULL                
 drop table #tmpTestInfo                
if OBJECT_ID('tempdb..#accTestInfo') IS NOT NULL                
 drop table #accTestInfo 
if OBJECT_ID('tempdb..#PerformedTestsList') IS NOT NULL                
 drop table #PerformedTestsList   
                
	 declare @PatientGender varchar(20)
			, @PatientDOB datetime 
			, @Age decimal(11, 5)
	 
	 SELECT @PatientGender = ptSex , @PatientDOB = ptDateOfBirth 
			from tblPatient pat (nolock)
			INNER JOIN tblAccessions acc (nolock)
			ON pat.PatientId = acc.PatientID
			where acc.Accession = @Accession

			SET @Age  = cast (DATEDIFF(day,@PatientDOB, getDate()) as decimal(11, 5))/365

--SET @Age  = cast (DATEDIFF(SECOND,@PatientDOB, getDate()) / 8760.0 as decimal(11, 5))/365
if @age=0
begin
SET @Age  = cast (DATEDIFF(SECOND,@PatientDOB, getDate()) / 8760.0 as decimal(11, 5))/365
end
			  
			 			           
Create table #tmpTestInfo                
(id int not null,                
PrfTestCode varchar(100) not null,                
PrfTestName varchar(100) not null,                
PrfTestStatus varchar(20) null,                
PrfTestMailOutFlag varchar(20) null,                
Element varchar(100) not null,                
ElementName varchar(100) null,                
Result varchar(100) null,                
NormalRange varchar(200) null,                
Units varchar(100) null,                
[Status] varchar(50) null,                
ResultComment varchar(max) null,                
CriticalLowLimit varchar(100) null,                
CriticalHighLimit varchar(100) null,                
ElemComment varchar(Max) null,                
Outcome varchar(1) null,                 
ReportAs varchar(100) null,                
DynamicHighLimit varchar(100) null,                 
Department varchar(100) null,                 
ConsistentCommentCode varchar(max),                
InconsistentCommentCode varchar(max),                 
UseRangeLimits bit,                
UseCutoffLimit bit,                 
Worksheet varchar(100),                 
WorksheetName varchar(300),                
ReportOrder int,                
ElemReportOrder int,          
AllTestMedications varchar(max),                
Header varchar(100),                
ResultFlag varchar(100),                
MicrobioFlag varchar(1),                
Section int,                
ReportNormalRangeHigh varchar(100),                
CutOff_DynamicLow varchar(100),                 
CutOff_DynamicLowReportAs varchar(100),                 
CutOff_DynamicHigh varchar(100),          
CutOff_DynamicHighReportAs varchar(100),                  
Range_DynamicLow varchar(100),                 
Range_DynamicLowReportAs varchar(100),                 
Range_DynamicHigh varchar(100),                 
Range_DynamicHighReportAs varchar(100),                
ReportAlphaRange  varchar(200),                
Version int,                
MailoutLab varchar(100),                
MailoutLabDisplay varchar(100),                
SummaryResult varchar(100) null,                
ResultEntryDate datetime ,              
PathoFlag varchar(1),              
ProstateFlag varchar(1) ,        
CytoFlag varchar(1) ,      
ToxicologyFlag varchar(1),  
Category varchar(50),  
CategoryOrder int,
ApprovedDate datetime,
 PodiatryFlag varchar(1) 
)                
                
 INSERT INTO #tmpTestInfo                
SELECT     rt.id, rt.PerformedTest AS PrfTestCode, '' AS PrfTestName, CASE WHEN EXISTS                
                          (SELECT     rt1.Status                
                            FROM          dbo.tblResultedTests rt1(nolock)                
                        WHERE      rt1.Accession = @Accession AND rt1.PerformedTest = rt.PerformedTest AND rt1.Status = 'Pending') THEN 'Pending' WHEN EXISTS                
                          (SELECT     rt1.Status                
                            FROM          dbo.tblResultedTests rt1(nolock)                
                            WHERE      rt1.Accession = @Accession AND rt1.PerformedTest = rt.PerformedTest AND rt1.Status = 'Hold') THEN 'Hold' WHEN EXISTS                
                          (SELECT     rt1.Status                
                            FROM          dbo.tblResultedTests rt1(nolock)                
                            WHERE      rt1.Accession = @Accession AND rt1.PerformedTest = rt.PerformedTest AND rt1.Status = 'Final') THEN 'Final' WHEN EXISTS                
                          (SELECT     rt1.Status               
                            FROM          dbo.tblResultedTests rt1(nolock)                
                            WHERE      rt1.Accession = @Accession AND rt1.PerformedTest = rt.PerformedTest AND rt1.Status = 'Cancelled') THEN 'Cancelled' END AS 'PrfTestStatus',                 
                      '' AS PrfTestMailOutFlag, rt.ResultTest, '' AS ElementName, rt.Result, rt.NormalRange, rt.Units, rt.Status, rt.ResultComment, '' AS CriticalLowLimit,                 
                      '' AS CriticalHighLimit, Comment AS ElemComment, rt.Outcome, rt.ReportAs, '' AS DynamicHighLimit, '' AS Department, '' AS ConsistentCommentCode,                 
                      '' AS InconsistentCommentCode, '' AS UseRangeLimits, '' AS UseCutoffLimit, '' AS Worksheet, '' AS WorksheetName, 0 AS ReportOrder, 0 as ElemReportOrder, '' AS AllTestMedications,                 
                      '' AS Header, rt.ResultFlag, 0, 0 as Section, '' as ReportNormalRangeHigh ,                 
                      DynamicLowLimit as CutOff_DynamicLow, LowReportAs as CutOff_DynamicLowReportAs, DynamicHighLimit as CutOff_DynamicHigh , tblResultedTestsDefinitions.ReportAs as CutOff_DynamicHighReportAs,                
                      '' as Range_DynamicLow, '' as Range_DynamicLowReportAs, '' as Range_DynamicHigh, '' as Range_DynamicHighReportAs, tblResultedTestsDefinitions.ReportAlphaRange,                
                            
         rt.Version ,'' as MailoutLab, '' as MailoutLabDisplay,'' as SummaryResult ,rt.EntryDate as ResultEntryDate  ,0  ,0   ,0  ,0  ,'',0 , rt.ApprovedDate , 0    
FROM         tblResultedTests AS rt WITH (NOLOCK) INNER JOIN                
                      tblResultedTestsDefinitions ON rt.ResultTest = tblResultedTestsDefinitions.TestCode                
                      INNER JOIN  tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode AND                 
    tblResultedTestsDefinitions.Version = tblResultCodeVersions.CurrentVersion      
                   
                                      
WHERE     (rt.Accession = @Accession) AND (rt.Status <> 'Cancelled') AND tblResultedTestsDefinitions.SuppressFlag = 0                
                  
	-- suppress null result for iRICELL analyzer
	DELETE #tmpTestInfo WHERE Element IN (SELECT ResultTest FROM tblResultedTests a
	WHERE Accession = @Accession AND Status = 'Final' AND EnteredBy = 'iRICELL' AND NULLIF(Result, '') IS NULL AND 
	ResultTest IN ('SQEP', 'TREP', 'REEP', 'FAT', 'MUCS', 'SPRM', 'TRCH', 'HYAL', 'EPIC', 'WBCT', 'RBCT', 'GRAN', 'CELL', 'BROAD', 'FATC', 'TPO4', 'CAOX', 'CAPH', 'CACB', 'URIC', 'LEUC', 'CYST', 'TYRO', 'AMOR', 'WAXY', 'BYST', 'HYST'));


  UPDATE #tmpTestInfo                
                  
  SET CriticalLowLimit = rtp.CriticalLowLimit,                
      CriticalHighLimit  =  rtp.CriticalHighLimit,                
      PrfTestName = ptd.ExternalDescription,                
      PrfTestMailOutFlag = ptd.MailoutFlag,                
      ElementName = rtDef.ExternalName,                
      --ReportAs = rtDef.ReportAs,                 
      DynamicHighLimit = rtDef.DynamicHighLimit,                
      Department = rtDef.Department,                 
      ConsistentCommentCode = rtDef.ConsistentCommentCode,                
      InconsistentCommentCode = rtDef.InconsistentCommentCode,                
      UseRangeLimits = rtDef.UseRangeLimits,                
      UseCutoffLimit = rtDef.UseCutoffLimit,  
      Worksheet = rtDef.Worksheet,                 
      WorksheetName = ws.Description,                
      ReportOrder = isnull(rtro.ReportOrder, 999999),                
      AllTestMedications = rtDef.MedicationData + '|' + rtDef.MedicationDataIndirect                 
      ,Header = rtro.Header,                
      ResultFlag = rt.ResultFlag,                
      MicrobioFlag = ptd.MicrobioFlag,                
      Section = rtro.Section,                
      ReportNormalRangeHigh = rtdef.ReportNormalRangeHigh,                
   Range_DynamicLow = rtp.DynamicLow ,                 
Range_DynamicLowReportAs = rtp.DynamicLowReportAs ,                 
   Range_DynamicHigh = rtp.DynamicHigh ,                 
   Range_DynamicHighReportAs = rtp.DynamicHighReportAs,                 
      MailoutLab=ptd.MailoutLab,                
      MailoutLabDisplay = ml.DisplayText,              
       PathoFlag = isnull(ptd.PathologyFlag  , 0)  ,          
    ProstateFlag = isnull(ptd.ProstateFlag  , 0)  ,         
               CytoFlag = isnull(ptd.CytologyFlag,0),         
               ToxicologyFlag = isnull(ptd.ToxicologyFlag,0) ,  
               Category=upper(c.category),  
               CategoryOrder=c.[order],
			    PodiatryFlag = isnull(ptd.PodiatryFlag  , 0)  
      FROM #tmpTestInfo rt                
                      
      LEFT JOIN dbo.tblResultedTestsParams rtp (NOLOCK)                
   ON rt.Element = rtp.ResultedTest and rt.Version = rtp.Version    and @age between rtp.MinAge and rtp.maxage    and   rtp.sex=@PatientGender        
                   
   INNER JOIN dbo.tblAccessions acc (NOLOCK)              
   ON acc.Accession = @Accession                
                   
   INNER JOIN dbo.tblPerformedTestsDefinitions ptd (NOLOCK)                
   on rt.PrfTestCode = ptd.PerformedTest                 
                   
   LEFT OUTER JOIN dbo.tblResultedTestsDefinitions rtDef (NOLOCK)                
   on rt.Element = rtDef.TestCode and rt.Version = rtDef.Version                 
                   
   LEFT OUTER JOIN dbo.tblWorkSheetsDefinitions ws (NOLOCK)                
   on ws.WKCode = rtDef.Worksheet                 
                   
   LEFT OUTER JOIN dbo.tblTestsReportOrderNew rtro                
   on rt.Element = rtro.ResultTestCode                
   LEFT JOIN dbo.tblMailoutLabs ml on ml.LabCode = ptd.MailoutLab and ptd.MailoutLab is not null and ptd.MailoutLab <> ''   
   left outer join tblCategory c on   c.Category = ptd.category                
   --select * from #tmpTestInfo order by ReportOrder             
                   
 --PA 02/23/2016 use split string func to get list of tests and see if alt                 
 --report order applies to them                
 --THIS GETS ReportAsDefined ordered tests: if this is set this takes priority over anything defined in the              
 --TestReportOrder, and the below will overwrite whatever order was set up in the earlier portion of this                
 --stored procedure.                
 Create table #accTestInfo                
  (OrdTestCode varchar(100) not null)                
 insert into #accTestInfo                
 select accTestList.value from tblAccessions                 
 cross apply SplitString(tblAccessions.OrderedTests, '|') accTestList                
 inner join  tblOrderedTestsDefinitions on tblOrderedTestsDefinitions.OrderedTest =  accTestList.Value                
 where Accession = @Accession and tblOrderedTestsDefinitions.ReportFlag = 1                
                 
 Create table #PerformedTestsList                
 (OrderedTest varchar(max),                
 Description varchar(max),                
 ActiveFlag bit,                
 InSearchFlag bit,                
 pTestCode varchar(max),                
 ExternalDescription varchar(max),                
 ReportFlag bit,                
 iPos smallint,          
 ResultTestCode varchar(max),  
 category varchar(50),  
 categoryreportOrder DECIMAL(6,2))          
          
 if object_id('tempdb..#ResultTests') is not null          
          
 drop table #ResultTests          
           
 create table #ResultTests          
 (           
   PerformedTest varchar(50),          
   rTestCode varchar(50),          
   iPos smallint             
 )            
                 
 DECLARE @PerfTests VARCHAR(MAX);                
 Declare @iPosCtr integer;                
                 
 DECLARE   @StartPos smallint          
   , @EndPos smallint          
   , @CurVal varchar(20)          
   , @FieldList varchar(max)          
   , @PTestCode varchar(50)          
  , @RTestsList varchar(max)          
   , @iResultPos smallint          
           
 set @iPosCtr = 0          
                 
 DECLARE GetTests CURSOR Forward_Only                
 For Select OrdTestCode from #accTestInfo                
                 
 Open GetTests                
                 
  Fetch next from GetTests into @PerfTests                
  While @@Fetch_Status = 0                
  Begin                
   insert into #PerformedTestsList                
   exec spGetAllPrfTestsforOrderedTestForReport @PerfTests     
     
   --Get category as header if exists  
   Update #PerformedTestsList  
   set [Description] =category, iPos=categoryreportOrder  
   where category<>'' and category is not NULL  
     
    Update #PerformedTestsList  
   set  iPos=iPos + @iPosCtr   
   where category='' or category is NULL  
     
   --End -- Get category as header if exists  
                
   update #tmpTestInfo set Header = #PerformedTestsList.[Description],                
    ReportOrder = #PerformedTestsList.iPos                
   from #PerformedTestsList                
   where #PerformedTestsList.pTestCode = #tmpTestInfo.PrfTestCode                
   --2 - update report order for result tests codes          
   Declare GetResultTests CURSOR Forward_Only          
   For Select pTestCode, ResultTestCode from #PerformedTestsList          
          
   Open GetResultTests          
          
    Fetch next from GetResultTests into @PTestCode, @RTestsList          
    While @@Fetch_Status = 0          
    Begin          
          
     Set @FieldList = @RTestsList       
     Set @FieldList = @FieldList + '|'          
     Set @StartPos = 1          
     Set @EndPos = 1          
     Set @iResultPos = 1          
          
     --Print @FieldList          
          
     -- Start the looping operation          
     While @EndPos > 0          
     Begin          
      Set @EndPos = CharIndex('|', @FieldList, @StartPos)          
      If @EndPos > 0          
       Begin          
       Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))          
       -- Add current row to TempTable          
       Insert #ResultTests (PerformedTest, rTestCode, iPos) Values (@PTestCode, @CurVal, @iResultPos)          
       Set @StartPos = @EndPos + 1          
       Set @iResultPos = @iResultPos + 1          
      End          
     End          
          
     --select * from #ResultTests          
     update #tmpTestInfo set ElemReportOrder = #ResultTests.[iPos]          
     from #ResultTests          
     where #ResultTests.PerformedTest = #tmpTestInfo.PrfTestCode          
      and #ResultTests.rTestCode = #tmpTestInfo.Element          
     truncate table #ResultTests          
     Fetch next from GetResultTests into @PTestCode, @RTestsList          
    End          
   Close GetResultTests          
   Deallocate GetResultTests          
   --increment position counter by number of rows already done                
   select @iPosCtr = @iPosCtr + count(*) from #PerformedTestsList                 
   --clear out table for next fetch                
   truncate table #PerformedTestsList    
   Fetch next from GetTests into @PerfTests                
  End                
 Close GetTests                
 Deallocate GetTests                  
                   
     
   -- Clear held result
  update  #tmpTestInfo   
  set resultflag=''  , outcome='',result=''
  where status='hold'               
                
      
   update #tmpTestInfo
   set category='zzzzz'
   where category is null or category=''
   
    update #tmpTestInfo
   set CategoryOrder=99999999
   where CategoryOrder is null or CategoryOrder=0
                    
    update #tmpTestInfo
   set elemcomment='eGFR Calculation is Not Performed. Formula is not valid for patient under 18 years old.”'
   where element='LD038' and @age<=18 and Range_DynamicLow='999999' and Range_DynamicLowReportAs='TNP'
                        
     
	 if exists(select * from tblOrderedTests where accession=@accession and OrderedTest='L999')   
	 begin 
	  delete from  #tmpTestInfo
	  where PrfTestCode='3'
	    and ( Element='LD011' or Element='LD012' or Element='LD013' or Element='LD014' or  Element='LD015' or Element='LD016' or  Element='LD017' or Element='LD018' or  Element='LD019' or Element='LD020' )
	 end          
  select * from #tmpTestInfo rt (nolock)                
 -- order by rt.PrfTestCode asc, department                
 -- order by  rt.PrfTestCode asc, ReportOrder                
  order by  CategoryOrder, ReportOrder , ElemReportOrder,id           
                  
  if OBJECT_ID('tempdb..#tmpTestInfo') IS NOT NULL                
   drop table #tmpTestInfo                
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionDetailsInfo_HL7]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetAccessionDetailsInfo_HL7] 
@Accession varchar(50)
AS
BEGIN

if OBJECT_ID('tempdb..#tmpTestInfo') IS NOT NULL
 drop table #tmpTestInfo

 declare @PatientGender varchar(20)
			, @PatientDOB datetime 
			, @Age decimal(11, 5)
	 
	 SELECT @PatientGender = ptSex , @PatientDOB = ptDateOfBirth 
			from tblPatient pat (nolock)
			INNER JOIN tblAccessions acc (nolock)
			ON pat.PatientId = acc.PatientID
			where acc.Accession = @Accession

			SET @Age  = cast (DATEDIFF(day,@PatientDOB, getDate()) as decimal(11, 5))/365

--SET @Age  = cast (DATEDIFF(SECOND,@PatientDOB, getDate()) / 8760.0 as decimal(11, 5))/365
if @age=0
begin
SET @Age  = cast (DATEDIFF(SECOND,@PatientDOB, getDate()) / 8760.0 as decimal(11, 5))/365
end

Create table #tmpTestInfo
(id int not null,
PrfTestCode varchar(100) not null,
PrfTestName varchar(100) not null,
PrfTestStatus varchar(20) null,
PrfTestMailOutFlag varchar(20) null,
Element varchar(100) not null,
ElementName varchar(100) null,
Result varchar(100) null,
NormalRange varchar(200) null,
Units varchar(100) null,
[Status] varchar(50) null,
ResultComment varchar(max) null,
CriticalLowLimit varchar(100) null,
CriticalHighLimit varchar(100) null,
ElemComment varchar(500) null,
Outcome varchar(1) null, 
ReportAs varchar(100) null,
DynamicHighLimit varchar(100) null, 
DynamicLowLimit varchar(100) null,
Department varchar(100) null, 
ConsistentCommentCode varchar(max),
InconsistentCommentCode varchar(max), 
Worksheet varchar(100), 
UseCutoffLimit bit, 
UseRangeLimits bit, 
QSSUpdateDate datetime,
SpecimenDataXML XML,
ResultFlag varchar(100),
Section int,
ReportNormalRangeHigh varchar(100),
CutOff_DynamicLow varchar(100), 
CutOff_DynamicLowReportAs varchar(100), 
CutOff_DynamicHigh varchar(100),
CutOff_DynamicHighReportAs varchar(100),  
Range_DynamicLow varchar(100), 
Range_DynamicLowReportAs varchar(100), 
Range_DynamicHigh varchar(100), 
Range_DynamicHighReportAs varchar(100),
ReportAlphaRange  varchar(200),
Version int,
ToxicologyFlag bit,
Header varchar(100)
)

	


	INSERT INTO #tmpTestInfo
	SELECT
	    rt.id ,rt.PerformedTest as PrfTestCode, '' as PrfTestName,	    	 
	   'PrfTestStatus' = CASE
						WHEN EXISTS (SELECT rt1.Status 
										FROM dbo.tblResultedTests rt1 (nolock)
										WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Pending'
								     ) THEN 'Pending'
						WHEN EXISTS (SELECT rt1.Status FROM dbo.tblResultedTests rt1 (nolock)
										WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Hold') THEN 'Hold'
						WHEN EXISTS (SELECT rt1.Status FROM dbo.tblResultedTests rt1 (nolock)
										WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Final') THEN 'Final'
						WHEN EXISTS (SELECT rt1.Status FROM dbo.tblResultedTests rt1 (nolock)
										WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Cancelled') THEN 'Cancelled'
		                END,
	    '' as PrfTestMailOutFlag , 	    
	    rt.ResultTest  , ''  As ElementName , 
	    
	    rt.Result  ,
	    --'Result' = CASE
					--WHEN EXISTS (SELECT rt2.Result
					--				FROM dbo.tblResultedTests rt2 (nolock)
					--					WHERE rt2.Accession = @Accession and rt2.PerformedTest = rt.PerformedTest and  rt2.Result = ''
					--					) THEN '0'
					--WHEN EXISTS (SELECT rt2.Result
					--				FROM dbo.tblResultedTests rt2 (nolock)
					--					WHERE rt2.Accession = @Accession and rt2.PerformedTest = rt.PerformedTest and  rt2.Result <>''
					--					) THEN rt.Result
					--END,									
	    
	    
	    
	    
	    
	    
	    rt.NormalRange,
	    rt.Units , rt.Status ,
	    rt.ResultComment + ' '+tblResultedTestsDefinitions.Comment as ResultComment ,'' as CriticalLowLimit, '' as CriticalHighLimit ,
	    '' as ElemComment, Outcome, '' as ReportAs, '' as DynamicHighLimit, '' as DynamicLowLimit, '' as Department, '' as ConsistentCommentCode, 
	    '' as InconsistentCommentCode, '' as Worksheet, '' as UseCutoffLimit, '' as UseRangeLimits, rt.QSSUpdateDate, SpecimenDataXML, rt.ResultFlag, 0 as Section, '' as ReportNormalRangeHigh , 
                      DynamicLowLimit as CutOff_DynamicLow, LowReportAs as CutOff_DynamicLowReportAs, DynamicHighLimit as CutOff_DynamicHigh , tblResultedTestsDefinitions.ReportAs as CutOff_DynamicHighReportAs,
                      '' as Range_DynamicLow, '' as Range_DynamicLowReportAs, '' as Range_DynamicHigh, '' as Range_DynamicHighReportAs, tblResultedTestsDefinitions.ReportAlphaRange,
            
                      rt.Version, 0,'' AS Header
		  
		FROM dbo.tblResultedTests rt (NOLOCK)
		INNER JOIN tblAccessions on tblAccessions.Accession = rt.Accession
		INNER JOIN
                      tblResultedTestsDefinitions ON rt.ResultTest = tblResultedTestsDefinitions.TestCode
                      INNER JOIN  tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode AND 
            tblResultedTestsDefinitions.Version = tblResultCodeVersions.CurrentVersion	
			
		WHERE rt.Accession = @Accession	
		
		
		UPDATE #tmpTestInfo
		
		SET CriticalLowLimit = rtp.CriticalLowLimit,
		    CriticalHighLimit  =  rtp.CriticalHighLimit,
		    PrfTestName = ptd.ExternalDescription,
		    PrfTestMailOutFlag = ptd.MailoutFlag,
		    ElementName = rtDef.ExternalName,
		    ReportAs = rtDef.ReportAs, 
		    DynamicHighLimit = rtDef.DynamicHighLimit,
		    DynamicLowLimit = rtDef.DynamicLowLimit,
		    Department = rtDef.Department, 
		    ConsistentCommentCode = rtDef.ConsistentCommentCode,
		    InconsistentCommentCode = rtDef.InconsistentCommentCode, 
		    Worksheet = rtdef.Worksheet, 
		     ResultFlag = rt.ResultFlag,
	
		    ReportNormalRangeHigh = rtdef.ReportNormalRangeHigh,
			Range_DynamicLow = rtp.DynamicLow , 
			Range_DynamicLowReportAs = rtp.DynamicLowReportAs , 
			Range_DynamicHigh = rtp.DynamicHigh , 
			Range_DynamicHighReportAs = rtp.DynamicHighReportAs,
		    UseCutoffLimit = rtdef.UseCutoffLimit, 
		    UseRangeLimits = rtdef.UseRangeLimits,
			ToxicologyFlag = ptd.ToxicologyFlag,
			Header = rtro.Header
		    
		    
		    FROM #tmpTestInfo rt
		    
		    LEFT JOIN dbo.tblResultedTestsParams rtp (NOLOCK)
			ON rt.Element = rtp.ResultedTest
			
			INNER JOIN dbo.tblAccessions acc (NOLOCK)
			ON acc.Accession = @Accession
			
			INNER JOIN dbo.tblPerformedTestsDefinitions ptd (NOLOCK)
			on rt.PrfTestCode = ptd.PerformedTest 
		-- ON rt.Element = rtp.ResultedTest and rt.Version = rtp.Version    and @age between rtp.MinAge and rtp.maxage    and   rtp.sex=@PatientGender        
			
			LEFT OUTER JOIN dbo.tblResultedTestsDefinitions rtDef (NOLOCK)
			on rt.Element = rtDef.TestCode and rt.Version = rtDef.Version 
			
			--INNER JOIN  tblResultCodeVersions ON rtDef.TestCode = tblResultCodeVersions.TestCode AND 
   --         rtDef.Version = tblResultCodeVersions.CurrentVersion	
			
			 LEFT OUTER JOIN dbo.tblTestsReportOrderNew rtro                
			 on rt.Element = rtro.ResultTestCode 


   update #tmpTestInfo
   set resultcomment='eGFR Calculation is Not Performed. Formula is not valid for patient under 18 years old.”'
   where element='LD038' and @age<=18 and Range_DynamicLow='999999' and Range_DynamicLowReportAs='TNP'
  


	update #tmpTestInfo set Normalrange=reportAlpharange where normalrange='no range' and isnull(reportalpharange,'')<>''
		
		select * from #tmpTestInfo rt (nolock)
	
		order by  rt.PrfTestName asc, Worksheet desc,
		
Case Element
    When 'AC_CLI' Then 1
    When 'AC_LMP' Then 2
    When 'AC_GD' Then 3
    When 'AC_SRC' Then 4
    When 'AC_SA' Then 5
    When 'AC_DX' Then 6
    When 'AC_SCR' Then 7
    When 'AC_REV' Then 8
    When 'AC_CYTD' Then 9
    Else 10 End 

		--select * from #tmpTestInfo rt (nolock)
		----ORDER BY CASE WHEN CAST(Result as DECIMAL(9,2)) > 0 THEN 0 ELSE 1 END, PrfTestCode, Result
		--ORDER BY CASE WHEN Result<>'0' and Result<>'' THEN 0 ELSE 1 END, PrfTestCode, ElementName --, Result
				
		
		if OBJECT_ID('tempdb..#tmpTestInfo') IS NOT NULL
			drop table #tmpTestInfo
END

GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionDetailsInfo_HL7_NYSDOH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetAccessionDetailsInfo_HL7_NYSDOH] 
@Accession varchar(50)
AS
BEGIN

if OBJECT_ID('tempdb..#tmpTestInfo') IS NOT NULL
 drop table #tmpTestInfo


Create table #tmpTestInfo
(id int not null,
PrfTestCode varchar(100) not null,
PrfTestName varchar(100) not null,
PrfTestStatus varchar(20) null,
PrfTestMailOutFlag varchar(20) null,
Element varchar(100) not null,
ElementName varchar(100) null,
Result varchar(100) null,
NormalRange varchar(200) null,
Units varchar(100) null,
[Status] varchar(50) null,
ResultComment varchar(max) null,
CriticalLowLimit varchar(100) null,
CriticalHighLimit varchar(100) null,
ElemComment varchar(500) null,
Outcome varchar(1) null, 
ReportAs varchar(100) null,
DynamicHighLimit varchar(100) null, 
DynamicLowLimit varchar(100) null,
Department varchar(100) null, 
ConsistentCommentCode varchar(max),
InconsistentCommentCode varchar(max), 
Worksheet varchar(100), 
UseCutoffLimit bit, 
UseRangeLimits bit, 
QSSUpdateDate datetime,
SpecimenDataXML XML,
ResultFlag varchar(100),
Section int,
ReportNormalRangeHigh varchar(100),
CutOff_DynamicLow varchar(100), 
CutOff_DynamicLowReportAs varchar(100), 
CutOff_DynamicHigh varchar(100),
CutOff_DynamicHighReportAs varchar(100),  
Range_DynamicLow varchar(100), 
Range_DynamicLowReportAs varchar(100), 
Range_DynamicHigh varchar(100), 
Range_DynamicHighReportAs varchar(100),
ReportAlphaRange  varchar(200),
Version int,
ToxicologyFlag bit,
Header varchar(100),
LOINCcode varchar(100),
SpecimenTypeForNYSDOH varchar(50)
)

	


	INSERT INTO #tmpTestInfo
	SELECT
	    rt.id ,rt.PerformedTest as PrfTestCode, '' as PrfTestName,	    	 
	   'PrfTestStatus' = CASE
						WHEN EXISTS (SELECT rt1.Status 
										FROM dbo.tblResultedTests rt1 (nolock)
										WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Pending'
								     ) THEN 'Pending'
						WHEN EXISTS (SELECT rt1.Status FROM dbo.tblResultedTests rt1 (nolock)
										WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Hold') THEN 'Hold'
						WHEN EXISTS (SELECT rt1.Status FROM dbo.tblResultedTests rt1 (nolock)
										WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Final') THEN 'Final'
						WHEN EXISTS (SELECT rt1.Status FROM dbo.tblResultedTests rt1 (nolock)
										WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Cancelled') THEN 'Cancelled'
		                END,
	    '' as PrfTestMailOutFlag , 	    
	    rt.ResultTest  , ''  As ElementName , 
	    
	    rt.Result  ,
	    --'Result' = CASE
					--WHEN EXISTS (SELECT rt2.Result
					--				FROM dbo.tblResultedTests rt2 (nolock)
					--					WHERE rt2.Accession = @Accession and rt2.PerformedTest = rt.PerformedTest and  rt2.Result = ''
					--					) THEN '0'
					--WHEN EXISTS (SELECT rt2.Result
					--				FROM dbo.tblResultedTests rt2 (nolock)
					--					WHERE rt2.Accession = @Accession and rt2.PerformedTest = rt.PerformedTest and  rt2.Result <>''
					--					) THEN rt.Result
					--END,									
	    
	    
	    
	    
	    
	    
	    rt.NormalRange,
	    rt.Units , rt.Status ,
	    rt.ResultComment + ' '+tblResultedTestsDefinitions.Comment as ResultComment ,'' as CriticalLowLimit, '' as CriticalHighLimit ,
	    '' as ElemComment, Outcome, '' as ReportAs, '' as DynamicHighLimit, '' as DynamicLowLimit, '' as Department, '' as ConsistentCommentCode, 
	    '' as InconsistentCommentCode, '' as Worksheet, '' as UseCutoffLimit, '' as UseRangeLimits, rt.QSSUpdateDate, SpecimenDataXML, rt.ResultFlag, 0 as Section, '' as ReportNormalRangeHigh , 
                      DynamicLowLimit as CutOff_DynamicLow, LowReportAs as CutOff_DynamicLowReportAs, DynamicHighLimit as CutOff_DynamicHigh , tblResultedTestsDefinitions.ReportAs as CutOff_DynamicHighReportAs,
                      '' as Range_DynamicLow, '' as Range_DynamicLowReportAs, '' as Range_DynamicHigh, '' as Range_DynamicHighReportAs, tblResultedTestsDefinitions.ReportAlphaRange,
            
                      rt.Version, 0,'' AS Header, isnull(tblResultedTestsDefinitions.LOINCcode,'') as LOINCcode, doh.SpecimenType as SpecimenTypeForNYSDOH
		  
		FROM dbo.tblResultedTests rt (NOLOCK)
		INNER JOIN tblAccessions on tblAccessions.Accession = rt.Accession
		INNER JOIN
                      tblResultedTestsDefinitions ON rt.ResultTest = tblResultedTestsDefinitions.TestCode
                      INNER JOIN  tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode AND 
            tblResultedTestsDefinitions.Version = tblResultCodeVersions.CurrentVersion	
			inner join tblResultTestforDOH doh on rt.resulttest=doh.resulttest
		WHERE rt.Accession = @Accession	
			and (doh.ResultTest in ('LD300','SARS') or  ((doh.ResultTest like 'I%' or doh.resulttest like 'X%') and (rt.Result='positive' or rt.Result='reactive'))) 
		
		
		UPDATE #tmpTestInfo
		
		SET CriticalLowLimit = rtp.CriticalLowLimit,
		    CriticalHighLimit  =  rtp.CriticalHighLimit,
		    PrfTestName = ptd.ExternalDescription,
		    PrfTestMailOutFlag = ptd.MailoutFlag,
		    ElementName = rtDef.ExternalName,
		    ReportAs = rtDef.ReportAs, 
		    DynamicHighLimit = rtDef.DynamicHighLimit,
		    DynamicLowLimit = rtDef.DynamicLowLimit,
		    Department = rtDef.Department, 
		    ConsistentCommentCode = rtDef.ConsistentCommentCode,
		    InconsistentCommentCode = rtDef.InconsistentCommentCode, 
		    Worksheet = rtdef.Worksheet, 
		     ResultFlag = rt.ResultFlag,
	
		    ReportNormalRangeHigh = rtdef.ReportNormalRangeHigh,
			Range_DynamicLow = rtp.DynamicLow , 
			Range_DynamicLowReportAs = rtp.DynamicLowReportAs , 
			Range_DynamicHigh = rtp.DynamicHigh , 
			Range_DynamicHighReportAs = rtp.DynamicHighReportAs,
		    UseCutoffLimit = rtdef.UseCutoffLimit, 
		    UseRangeLimits = rtdef.UseRangeLimits,
			ToxicologyFlag = ptd.ToxicologyFlag,
			Header = rtro.Header
		    
		    
		    FROM #tmpTestInfo rt
		    
		    LEFT JOIN dbo.tblResultedTestsParams rtp (NOLOCK)
			ON rt.Element = rtp.ResultedTest
			
			INNER JOIN dbo.tblAccessions acc (NOLOCK)
			ON acc.Accession = @Accession
			
			INNER JOIN dbo.tblPerformedTestsDefinitions ptd (NOLOCK)
			on rt.PrfTestCode = ptd.PerformedTest 
			
			LEFT OUTER JOIN dbo.tblResultedTestsDefinitions rtDef (NOLOCK)
			on rt.Element = rtDef.TestCode 
			
			INNER JOIN  tblResultCodeVersions ON rtDef.TestCode = tblResultCodeVersions.TestCode AND 
            rtDef.Version = tblResultCodeVersions.CurrentVersion	
			
			 LEFT OUTER JOIN dbo.tblTestsReportOrderNew rtro                
			 on rt.Element = rtro.ResultTestCode 
		
		select * from #tmpTestInfo rt (nolock)
	
		order by  rt.PrfTestName asc, Worksheet desc,
		
Case Element
    When 'AC_CLI' Then 1
    When 'AC_LMP' Then 2
    When 'AC_GD' Then 3
    When 'AC_SRC' Then 4
    When 'AC_SA' Then 5
    When 'AC_DX' Then 6
    When 'AC_SCR' Then 7
    When 'AC_REV' Then 8
    When 'AC_CYTD' Then 9
    Else 10 End 

		--select * from #tmpTestInfo rt (nolock)
		----ORDER BY CASE WHEN CAST(Result as DECIMAL(9,2)) > 0 THEN 0 ELSE 1 END, PrfTestCode, Result
		--ORDER BY CASE WHEN Result<>'0' and Result<>'' THEN 0 ELSE 1 END, PrfTestCode, ElementName --, Result
				
		
		if OBJECT_ID('tempdb..#tmpTestInfo') IS NOT NULL
			drop table #tmpTestInfo
END

GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionDetailsInfo_HL7_OrderedTest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spGetAccessionDetailsInfo_HL7_OrderedTest] 
@Accession varchar(50)
AS
BEGIN

if OBJECT_ID('tempdb..#tmpTestInfo') IS NOT NULL
 drop table #tmpTestInfo


Create table #tmpTestInfo
(id int not null,
OrdTestCode varchar(100) not null,
OrdTestName varchar(100) not null,
PrfTestCode varchar(100) not null,
PrfTestName varchar(100) not null,
PrfTestStatus varchar(20) null,
PrfTestMailOutFlag varchar(20) null,
Element varchar(100) not null,
ElementName varchar(100) null,
Result varchar(100) null,
NormalRange varchar(200) null,
Units varchar(100) null,
[Status] varchar(50) null,
ResultComment varchar(max) null,
CriticalLowLimit varchar(100) null,
CriticalHighLimit varchar(100) null,
ElemComment varchar(500) null,
Outcome varchar(1) null, 
ReportAs varchar(100) null,
DynamicHighLimit varchar(100) null, 
DynamicLowLimit varchar(100) null,
Department varchar(100) null, 
ConsistentCommentCode varchar(max),
InconsistentCommentCode varchar(max), 
Worksheet varchar(100), 
UseCutoffLimit bit, 
UseRangeLimits bit, 
QSSUpdateDate datetime,
SpecimenDataXML XML,
ResultFlag varchar(100),
Section int,
ReportNormalRangeHigh varchar(100),
CutOff_DynamicLow varchar(100), 
CutOff_DynamicLowReportAs varchar(100), 
CutOff_DynamicHigh varchar(100),
CutOff_DynamicHighReportAs varchar(100),  
Range_DynamicLow varchar(100), 
Range_DynamicLowReportAs varchar(100), 
Range_DynamicHigh varchar(100), 
Range_DynamicHighReportAs varchar(100),
ReportAlphaRange  varchar(200),
Version int,
ToxicologyFlag bit,
Header varchar(100)
)

	


	INSERT INTO #tmpTestInfo
	SELECT
	    rt.id ,rt.PerformedTest as PrfTestCode, '' as PrfTestName,	 
		'' as OrdTestCode, '' as OrdTestName,	    	 
	   'PrfTestStatus' = CASE
						WHEN EXISTS (SELECT rt1.Status 
										FROM dbo.tblResultedTests rt1 (nolock)
										WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Pending'
								     ) THEN 'Pending'
						WHEN EXISTS (SELECT rt1.Status FROM dbo.tblResultedTests rt1 (nolock)
										WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Hold') THEN 'Hold'
						WHEN EXISTS (SELECT rt1.Status FROM dbo.tblResultedTests rt1 (nolock)
										WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Final') THEN 'Final'
						WHEN EXISTS (SELECT rt1.Status FROM dbo.tblResultedTests rt1 (nolock)
										WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Cancelled') THEN 'Cancelled'
		                END,
	    '' as PrfTestMailOutFlag , 	    
	    rt.ResultTest  , ''  As ElementName , 
	    
	    rt.Result  ,
	    --'Result' = CASE
					--WHEN EXISTS (SELECT rt2.Result
					--				FROM dbo.tblResultedTests rt2 (nolock)
					--					WHERE rt2.Accession = @Accession and rt2.PerformedTest = rt.PerformedTest and  rt2.Result = ''
					--					) THEN '0'
					--WHEN EXISTS (SELECT rt2.Result
					--				FROM dbo.tblResultedTests rt2 (nolock)
					--					WHERE rt2.Accession = @Accession and rt2.PerformedTest = rt.PerformedTest and  rt2.Result <>''
					--					) THEN rt.Result
					--END,									
	    
	    
	    
	    
	    
	    
	    rt.NormalRange,
	    rt.Units , rt.Status ,
	    rt.ResultComment + ' '+tblResultedTestsDefinitions.Comment as ResultComment ,'' as CriticalLowLimit, '' as CriticalHighLimit ,
	    '' as ElemComment, Outcome, '' as ReportAs, '' as DynamicHighLimit, '' as DynamicLowLimit, '' as Department, '' as ConsistentCommentCode, 
	    '' as InconsistentCommentCode, '' as Worksheet, '' as UseCutoffLimit, '' as UseRangeLimits, rt.QSSUpdateDate, SpecimenDataXML, rt.ResultFlag, 0 as Section, '' as ReportNormalRangeHigh , 
                      DynamicLowLimit as CutOff_DynamicLow, LowReportAs as CutOff_DynamicLowReportAs, DynamicHighLimit as CutOff_DynamicHigh , tblResultedTestsDefinitions.ReportAs as CutOff_DynamicHighReportAs,
                      '' as Range_DynamicLow, '' as Range_DynamicLowReportAs, '' as Range_DynamicHigh, '' as Range_DynamicHighReportAs, tblResultedTestsDefinitions.ReportAlphaRange,
            
                      rt.Version, 0,'' AS Header
		  
		FROM dbo.tblResultedTests rt (NOLOCK)
		INNER JOIN tblAccessions on tblAccessions.Accession = rt.Accession
		INNER JOIN tblResultedTestsDefinitions ON rt.ResultTest = tblResultedTestsDefinitions.TestCode
        INNER JOIN  tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode AND 
            tblResultedTestsDefinitions.Version = tblResultCodeVersions.CurrentVersion	
			
		



		WHERE rt.Accession = @Accession	
		
		
		UPDATE #tmpTestInfo
		
		SET CriticalLowLimit = rtp.CriticalLowLimit,
		    CriticalHighLimit  =  rtp.CriticalHighLimit,
		    PrfTestName = ptd.ExternalDescription,
			OrdTestCode = a.OrderedTest,
			OrdTestName = a.Description,
		    PrfTestMailOutFlag = ptd.MailoutFlag,
		    ElementName = rtDef.ExternalName,
		    ReportAs = rtDef.ReportAs, 
		    DynamicHighLimit = rtDef.DynamicHighLimit,
		    DynamicLowLimit = rtDef.DynamicLowLimit,
		    Department = rtDef.Department, 
		    ConsistentCommentCode = rtDef.ConsistentCommentCode,
		    InconsistentCommentCode = rtDef.InconsistentCommentCode, 
		    Worksheet = rtdef.Worksheet, 
		     ResultFlag = rt.ResultFlag,
	
		    ReportNormalRangeHigh = rtdef.ReportNormalRangeHigh,
			Range_DynamicLow = rtp.DynamicLow , 
			Range_DynamicLowReportAs = rtp.DynamicLowReportAs , 
			Range_DynamicHigh = rtp.DynamicHigh , 
			Range_DynamicHighReportAs = rtp.DynamicHighReportAs,
		    UseCutoffLimit = rtdef.UseCutoffLimit, 
		    UseRangeLimits = rtdef.UseRangeLimits,
			ToxicologyFlag = ptd.ToxicologyFlag,
			Header = rtro.Header
		    
		    
		    FROM #tmpTestInfo rt
		    
		    LEFT JOIN dbo.tblResultedTestsParams rtp (NOLOCK)
			ON rt.Element = rtp.ResultedTest
			
			INNER JOIN dbo.tblAccessions acc (NOLOCK)
			ON acc.Accession = @Accession

		inner join [tblOrderedTestsDefinitions] a on ('|' + rt.PrfTestCode + '|') like '%|' + rt.PrfTestCode + '|%'
		
			
			INNER JOIN dbo.tblPerformedTestsDefinitions ptd (NOLOCK)
			on rt.PrfTestCode = ptd.PerformedTest 
			
			LEFT OUTER JOIN dbo.tblResultedTestsDefinitions rtDef (NOLOCK)
			on rt.Element = rtDef.TestCode 
			
			INNER JOIN  tblResultCodeVersions ON rtDef.TestCode = tblResultCodeVersions.TestCode AND 
            rtDef.Version = tblResultCodeVersions.CurrentVersion	
			
			 LEFT OUTER JOIN dbo.tblTestsReportOrderNew rtro                
			 on rt.Element = rtro.ResultTestCode 
		
		select * from #tmpTestInfo rt (nolock)
	
		order by  rt.PrfTestName asc, Worksheet desc,
		
Case Element
    When 'AC_CLI' Then 1
    When 'AC_LMP' Then 2
    When 'AC_GD' Then 3
    When 'AC_SRC' Then 4
    When 'AC_SA' Then 5
    When 'AC_DX' Then 6
    When 'AC_SCR' Then 7
    When 'AC_REV' Then 8
    When 'AC_CYTD' Then 9
    Else 10 End 

		--select * from #tmpTestInfo rt (nolock)
		----ORDER BY CASE WHEN CAST(Result as DECIMAL(9,2)) > 0 THEN 0 ELSE 1 END, PrfTestCode, Result
		--ORDER BY CASE WHEN Result<>'0' and Result<>'' THEN 0 ELSE 1 END, PrfTestCode, ElementName --, Result
				
		
		if OBJECT_ID('tempdb..#tmpTestInfo') IS NOT NULL
			drop table #tmpTestInfo
END


GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionDetailsInfo_HL7GADOH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionDetailsInfo_HL7GADOH]   
@Accession varchar(50)  
AS  
BEGIN  
  
if OBJECT_ID('tempdb..#tmpTestInfo') IS NOT NULL  
 drop table #tmpTestInfo  
  
 declare @PatientGender varchar(20)  
   , @PatientDOB datetime   
   , @Age decimal(11, 5)  
    
  SELECT @PatientGender = ptSex , @PatientDOB = ptDateOfBirth   
   from tblPatient pat (nolock)  
   INNER JOIN tblAccessions acc (nolock)  
   ON pat.PatientId = acc.PatientID  
   where acc.Accession = @Accession  
  
   SET @Age  = cast (DATEDIFF(day,@PatientDOB, getDate()) as decimal(11, 5))/365  
  
--SET @Age  = cast (DATEDIFF(SECOND,@PatientDOB, getDate()) / 8760.0 as decimal(11, 5))/365  
if @age=0  
begin  
SET @Age  = cast (DATEDIFF(SECOND,@PatientDOB, getDate()) / 8760.0 as decimal(11, 5))/365  
end  
  
Create table #tmpTestInfo      
(id int not null,      
OrderedTest varchar(100) not null,      
OrderedTestDesc varchar(200) not null,      
PrfTestCode varchar(100) not null,      
PrfTestName varchar(100) not null,      
PrfTestStatus varchar(20) null,      
PrfTestMailOutFlag varchar(20) null,      
Element varchar(100) not null,      
ElementName varchar(100) null,      
Result varchar(100) null,      
NormalRange varchar(200) null,      
Units varchar(100) null,      
[Status] varchar(50) null,      
ResultComment varchar(max) null,      
CriticalLowLimit varchar(100) null,      
CriticalHighLimit varchar(100) null,      
ElemComment varchar(5000) null,      
Outcome varchar(1) null,       
ReportAs varchar(100) null,      
DynamicHighLimit varchar(100) null,       
DynamicLowLimit varchar(100) null,      
Department varchar(100) null,       
ConsistentCommentCode varchar(max),      
InconsistentCommentCode varchar(max),       
Worksheet varchar(100),       
UseCutoffLimit bit,       
UseRangeLimits bit,       
QSSUpdateDate datetime,      
SpecimenDataXML XML,      
MedicationsDataXML XML,      
Header varchar(100),      
ResultFlag varchar(100),      
Section int,      
ReportNormalRangeHigh varchar(100),      
CutOff_DynamicLow varchar(100),       
CutOff_DynamicLowReportAs varchar(100),       
CutOff_DynamicHigh varchar(100),      
CutOff_DynamicHighReportAs varchar(100),        
Range_DynamicLow varchar(100),       
Range_DynamicLowReportAs varchar(100),       
Range_DynamicHigh varchar(100),       
Range_DynamicHighReportAs varchar(100),      
Version int,  
LOINCcode varchar(100)     
)      
      
       
      
      
 INSERT INTO #tmpTestInfo      
 SELECT      
     rt.id ,ot.Orderedtest as Orderedtest, otf.Description  as OrderedTestDesc,rt.PerformedTest as PrfTestCode, '' as PrfTestName,             
    'PrfTestStatus' = CASE      
      WHEN EXISTS (SELECT rt1.Status       
          FROM dbo.tblResultedTests rt1 (nolock)      
          WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Pending'      
             ) THEN 'Pending'      
      WHEN EXISTS (SELECT rt1.Status FROM dbo.tblResultedTests rt1 (nolock)      
          WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Hold') THEN 'Hold'      
      WHEN EXISTS (SELECT rt1.Status FROM dbo.tblResultedTests rt1 (nolock)      
          WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Final') THEN 'Final'      
      WHEN EXISTS (SELECT rt1.Status FROM dbo.tblResultedTests rt1 (nolock)      
          WHERE rt1.Accession = @Accession and rt1.PerformedTest = rt.PerformedTest and  rt1.Status = 'Cancelled') THEN 'Cancelled'      
                  END,      
     '' as PrfTestMailOutFlag ,            
     rt.ResultTest  , ''  As ElementName ,       
     rt.Result  ,      
     rt.NormalRange, rt.Units , rt.Status ,      
     REPLACE(REPLACE(rt.ResultComment, CHAR(13), ''), CHAR(10), '') ResultComment,      
  '' as CriticalLowLimit, '' as CriticalHighLimit ,      
     '' as ElemComment, Outcome, '' as ReportAs, '' as DynamicHighLimit, '' as DynamicLowLimit, '' as Department, '' as ConsistentCommentCode,       
     '' as InconsistentCommentCode, '' as Worksheet, '' as UseCutoffLimit, '' as UseRangeLimits, rt.QSSUpdateDate, SpecimenDataXML, MedicationsDataXML, '' AS Header, rt.ResultFlag, 0 as Section, '' as ReportNormalRangeHigh ,       
      DynamicLowLimit as CutOff_DynamicLow, LowReportAs as CutOff_DynamicLowReportAs, DynamicHighLimit as CutOff_DynamicHigh , tblResultedTestsDefinitions.ReportAs as CutOff_DynamicHighReportAs,      
      '' as Range_DynamicLow, '' as Range_DynamicLowReportAs, '' as Range_DynamicHigh, '' as Range_DynamicHighReportAs,      
    
      rt.Version , tblResultedTestsDefinitions.LOINCcode      
          
  FROM dbo.tblResultedTests rt      
  INNER JOIN tblResultedTestsDefinitions ON rt.ResultTest = tblResultedTestsDefinitions.TestCode      
        INNER JOIN tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode AND       
            tblResultedTestsDefinitions.Version = tblResultCodeVersions.CurrentVersion      
        
  INNER JOIN tblAccessions on tblAccessions.Accession = rt.Accession      
        
  inner join tblPerformedTestsDefinitions ptd      
  on rt.PerformedTest = ptd.PerformedTest      
  inner join tblOrderedTests ot      
  on ot.PerformedTest = ptd.PerformedTest      
  and ot.Accession = rt.Accession        
         Left join tblOrderedTestsDefinitions otf on otf.OrderedTest = ot.OrderedTest 
  WHERE rt.Accession = @Accession
    
  UPDATE #tmpTestInfo  
    
  SET CriticalLowLimit = rtp.CriticalLowLimit,  
      CriticalHighLimit  =  rtp.CriticalHighLimit,  
      PrfTestName = ptd.ExternalDescription,  
      PrfTestMailOutFlag = ptd.MailoutFlag,  
      ElementName = rtDef.ExternalName,  
      ReportAs = rtDef.ReportAs,   
      DynamicHighLimit = rtDef.DynamicHighLimit,  
      DynamicLowLimit = rtDef.DynamicLowLimit,  
      Department = rtDef.Department,   
      ConsistentCommentCode = rtDef.ConsistentCommentCode,  
      InconsistentCommentCode = rtDef.InconsistentCommentCode,   
      Worksheet = rtdef.Worksheet,   
       ResultFlag = rt.ResultFlag,  
   
      ReportNormalRangeHigh = rtdef.ReportNormalRangeHigh,  
   Range_DynamicLow = rtp.DynamicLow ,   
   Range_DynamicLowReportAs = rtp.DynamicLowReportAs ,   
   Range_DynamicHigh = rtp.DynamicHigh ,   
   Range_DynamicHighReportAs = rtp.DynamicHighReportAs,  
      UseCutoffLimit = rtdef.UseCutoffLimit,   
      UseRangeLimits = rtdef.UseRangeLimits,  
   --ToxicologyFlag = ptd.ToxicologyFlag,  
   Header = rtro.Header  
        
        
      FROM #tmpTestInfo rt  
        
      LEFT JOIN dbo.tblResultedTestsParams rtp (NOLOCK)  
   ON rt.Element = rtp.ResultedTest  
     
   INNER JOIN dbo.tblAccessions acc (NOLOCK)  
   ON acc.Accession = @Accession  
     
   INNER JOIN dbo.tblPerformedTestsDefinitions ptd (NOLOCK)  
   on rt.PrfTestCode = ptd.PerformedTest   
  -- ON rt.Element = rtp.ResultedTest and rt.Version = rtp.Version    and @age between rtp.MinAge and rtp.maxage    and   rtp.sex=@PatientGender          
     
   LEFT OUTER JOIN dbo.tblResultedTestsDefinitions rtDef (NOLOCK)  
   on rt.Element = rtDef.TestCode and rt.Version = rtDef.Version   
     
   --INNER JOIN  tblResultCodeVersions ON rtDef.TestCode = tblResultCodeVersions.TestCode AND   
   --         rtDef.Version = tblResultCodeVersions.CurrentVersion   
     
    LEFT OUTER JOIN dbo.tblTestsReportOrderNew rtro                  
    on rt.Element = rtro.ResultTestCode   
  
  
   update #tmpTestInfo  
   set resultcomment='eGFR Calculation is Not Performed. Formula is not valid for patient under 18 years old.”'  
   where element='LD038' and @age<=18 and Range_DynamicLow='999999' and Range_DynamicLowReportAs='TNP'  
    
  
  
 --update #tmpTestInfo set Normalrange=reportAlpharange where normalrange='no range' and isnull(reportalpharange,'')<>''  
    
  select * from #tmpTestInfo rt (nolock)  
   
  order by  rt.PrfTestName asc, Worksheet desc,  
    
Case Element  
    When 'AC_CLI' Then 1  
    When 'AC_LMP' Then 2  
    When 'AC_GD' Then 3  
    When 'AC_SRC' Then 4  
    When 'AC_SA' Then 5  
    When 'AC_DX' Then 6  
    When 'AC_SCR' Then 7  
    When 'AC_REV' Then 8  
    When 'AC_CYTD' Then 9  
    Else 10 End   
  
  --select * from #tmpTestInfo rt (nolock)  
  ----ORDER BY CASE WHEN CAST(Result as DECIMAL(9,2)) > 0 THEN 0 ELSE 1 END, PrfTestCode, Result  
  --ORDER BY CASE WHEN Result<>'0' and Result<>'' THEN 0 ELSE 1 END, PrfTestCode, ElementName --, Result  
      
    
  if OBJECT_ID('tempdb..#tmpTestInfo') IS NOT NULL  
   drop table #tmpTestInfo  
END  
  




GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionDetailsInfoHistoricalData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionDetailsInfoHistoricalData] 
@PatientID varchar(50),
@CollectionDate datetime,
@Element varchar(100)
AS
BEGIN
set @CollectionDate = @CollectionDate + ' 23:59:59.000'

if OBJECT_ID('tempdb..#tmpAccessionsForHist') IS NOT NULL
 drop table #tmpAccessionsForHist
if OBJECT_ID('tempdb..#tmpTestInfoHIST') IS NOT NULL
 drop table #tmpTestInfoHIST
 
Create table #tmpAccessionsForHist
 (Accession varchar(100),
 CollectionDate datetime)
 Insert Into #tmpAccessionsForHist
Select top 5 accession, CollectionDate from tblAccessions where PatientID = @PatientID and CollectionDate <= Convert(datetime, @CollectionDate )  
order by collectiondate desc


Create table #tmpTestInfoHIST
(
id int not null,
PrfTestCode varchar(100) not null,
PrfTestName varchar(100) not null,
Element varchar(100) not null,
ElementName varchar(100) null,
Result varchar(100) null,
NormalRange varchar(200) null,
Units varchar(100) null,
[Status] varchar(50) null,

Outcome varchar(1) null, 
ReportAs varchar(100) null,
DynamicHighLimit varchar(100) null, 
DynamicLowLimit varchar(100) null,

Accession varchar(100),
CollectionDate datetime
)
INSERT INTO #tmpTestInfoHIST
SELECT

	    rt.id ,
	    rt.PerformedTest as PrfTestCode, 
	    '' as PrfTestName, 
	    rt.ResultTest,
	    ''  As ElementName , 
	    rt.Result  ,
	    rt.NormalRange,
	    rt.Units , 
	    rt.Status ,
	    Outcome, 
	    '' as ReportAs, 
	    '' as DynamicHighLimit, 
	    '' as DynamicLowLimit, 	 
	    rt.Accession, 
	    acc.CollectionDate
		  
		FROM dbo.tblResultedTests  rt (NOLOCK)
		
		INNER JOIN dbo.tblAccessions acc (NOLOCK)
			ON acc.Accession =rt.accession
			
		WHERE rt.Accession IN (Select top 5 accession from #tmpAccessionsForHist)	
		AND rt.Result<>'' 
		--****************get all inconsistencies from the last 5 accession

		UPDATE #tmpTestInfoHIST
		
		SET 
		    PrfTestName = ptd.ExternalDescription,
		    ElementName = rtDef.ExternalName
		    ,ReportAs = rtDef.ReportAs, 
		    DynamicHighLimit = rtDef.DynamicHighLimit,
		    DynamicLowLimit = rtDef.DynamicLowLimit		    
		    
		    FROM #tmpTestInfoHIST rt
		    
		    LEFT JOIN dbo.tblResultedTestsParams rtp (NOLOCK)
			ON rt.Element = rtp.ResultedTest
			
			INNER JOIN dbo.tblAccessions acc (NOLOCK)
			ON acc.Accession IN (Select top 5 accession from #tmpAccessionsForHist)
			
			INNER JOIN dbo.tblPerformedTestsDefinitions ptd (NOLOCK)
			on rt.PrfTestCode = ptd.PerformedTest 
			
			LEFT OUTER JOIN dbo.tblResultedTestsDefinitions rtDef (NOLOCK)
			on rt.Element = rtDef.TestCode 
		
		select Accession, CollectionDate, Result from #tmpTestInfoHIST	
		where ElementName= @Element	
		order by CollectionDate
		
			
END

GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionDetailsInfoHistoryData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetAccessionDetailsInfoHistoryData]         
@Accession varchar(50)        
AS        
BEGIN        
 SET NOCOUNT ON        
if OBJECT_ID('tempdb..#tmpAccessionsForHist') IS NOT NULL        
 drop table #tmpAccessionsForHist        
if OBJECT_ID('tempdb..#tmpTestInfoHIST') IS NOT NULL        
 drop table #tmpTestInfoHIST        
    
    
    declare @PatientGender varchar(20)    
   , @PatientDOB datetime     
   , @Age decimal(11, 5)    
      
  SELECT @PatientGender = ptSex , @PatientDOB = ptDateOfBirth     
   from tblPatient pat (nolock)    
   INNER JOIN tblAccessions acc (nolock)    
   ON pat.PatientId = acc.PatientID    
   where acc.Accession = @Accession    
    
   SET @Age  = cast (DATEDIFF(day,@PatientDOB, getDate()) as decimal(11, 5))/365    
    
--SET @Age  = cast (DATEDIFF(SECOND,@PatientDOB, getDate()) / 8760.0 as decimal(11, 5))/365    
if @age=0    
begin    
SET @Age  = cast (DATEDIFF(SECOND,@PatientDOB, getDate()) / 8760.0 as decimal(11, 5))/365    
end    
    
         
Create table #tmpAccessionsForHist        
 (Accession varchar(100),        
 CollectionDate datetime)        
 Insert Into #tmpAccessionsForHist        
Select top 20 accession, CollectionDate from tblAccessions                           
WHERE patientID =(select patientID from [tblAccessions] where accession =@Accession)        
and CollectionDate <= (select CollectionDate from [tblAccessions] where accession =@Accession)       
and clientcode = (select clientcode from [tblAccessions] where accession =@Accession)        
order by CollectionDate desc        
        
        
Create table #tmpTestInfoHIST        
(        
id int not null,        
PrfTestCode varchar(100) not null,        
Element varchar(100) not null,        
ElemName varchar(100) not null,        
Result varchar(100) null,        
ResultFlag varchar(10) null,        
Flag bit not Null,        
NormalRange varchar(200) null,        
Units varchar(100) null,        
Worksheet varchar(100),        
Outcome varchar(1) null,         
ReportAs varchar(100) null,        
DynamicHighLimit varchar(100) null,         
DynamicLowLimit varchar(100) null,        
UseRangeLimits bit,        
UseCutoffLimit bit,                           
Accession varchar(100),        
PreAccession varchar(100),                          
CollectionDate DATETIME,                          
version int           ,              
CutOff_DynamicLow varchar(100),                   
CutOff_DynamicLowReportAs varchar(100),                   
CutOff_DynamicHigh varchar(100),                  
CutOff_DynamicHighReportAs varchar(100),                    
Range_DynamicLow varchar(100),                   
Range_DynamicLowReportAs varchar(100),                   
Range_DynamicHigh varchar(100),                   
Range_DynamicHighReportAs varchar(100),                
AllTestMedications varchar(max) ,              
DynamicHigh  varchar(100),                
ReportDynamicHighAs  varchar(100),              
DynamicLow  varchar(100),                
ReportDynamicLowAs varchar(100),          
Header varchar(100),
ElemReportOrder int,             
ReportOrder int,
PrfTestName varchar(100)                    

)        
INSERT INTO #tmpTestInfoHIST        
SELECT distinct        
        
     rt.id ,        
        rt.PerformedTest as PrfTestCode,         
     rt.ResultTest,        
     rtf.ExternalName  ,                          
     rt.Result  ,        
     rt.ResultFlag,        
     0 as Flag,        
     rt.NormalRange,        
     rt.Units ,         
     '' as worksheet,        
     Outcome,         
     '' as ReportAs,         
     '' as DynamicHighLimit,         
     '' as DynamicLowLimit,        
     '' AS UseRangeLimits,           
   '' AS UseCutoffLimit,                           
     rt.Accession,         
     acc.PreAccession,                
     --CONVERT(date ,acc.CollectionDate) as CollectionDate, rt.version ,     
       acc.CollectionDate, rt.version ,           
  DynamicLowLimit as CutOff_DynamicLow, LowReportAs as CutOff_DynamicLowReportAs, DynamicHighLimit as CutOff_DynamicHigh , '' as CutOff_DynamicHighReportAs,                  
                      '' as Range_DynamicLow, '' as Range_DynamicLowReportAs, '' as Range_DynamicHigh, '' as Range_DynamicHighReportAs,              
  '' AS AllTestMedications           ,              
    '' AS   DynamicHigh ,              
 '' AS ReportDynamicHighAs ,              
 '' AS DynamicLow ,                
 '' AS ReportDynamicLowAs ,          
 '' AS Header,0 AS ElemReportOrder,0 AS ReportOrder, '' AS PrfTestName
  FROM dbo.tblResultedTests  rt (NOLOCK)        
          
  INNER JOIN dbo.tblAccessions acc (NOLOCK)        
   ON acc.Accession =rt.accession        
  Inner Join tblResultedTestsdefinitions rtf        
  on rtf.testCode=rt.resulttest and  rtf.version=rt.version     
  inner join  tblResultCodeVersions rcv      
  on rcv.testcode=rt.resulttest      
  WHERE rt.Accession IN (Select top 20 accession from #tmpAccessionsForHist)         
 -- AND (rt.worksheet='CONF' or rt.ResultTest in (SELECT [ResultTestCode] FROM tblTestsReportOrderNew where header like '%CONFIRMATIONS%'))        
  AND rt.Result <> ''         
 AND rt.status ='final'        
      
  --****************get all inconsistencies from the last 6 accession        
        
  UPDATE #tmpTestInfoHIST        
          
  SET         
      ReportAs = rtDef.ReportAs,         
      DynamicHighLimit = rtDef.DynamicHighLimit,        
      DynamicLowLimit = rtDef.DynamicLowLimit,              
      Worksheet = rtDef.Worksheet,        
      UseRangeLimits = rtDef.UseRangeLimits ,              
    UseCutoffLimit = rtDef.UseCutoffLimit,               
   AllTestMedications = rtDef.MedicationData + '|' + rtDef.MedicationDataIndirect  ,              
   Range_DynamicLow = rtp.DynamicLow ,                   
   Range_DynamicLowReportAs = rtp.DynamicLowReportAs ,                   
   Range_DynamicHigh = rtp.DynamicHigh ,                   
      Range_DynamicHighReportAs = rtp.DynamicHighReportAs    ,              
   CutOff_DynamicHighReportAs =rtdef.ReportAs ,          
   ReportOrder = isnull(rtro.ReportOrder, 999999), 
    PrfTestName = ptd.ExternalDescription,           
   Header = rtro.Header             
                            
      FROM #tmpTestInfoHIST rt        
              
      LEFT JOIN dbo.tblResultedTestsParams rtp (NOLOCK)        
   ON rt.Element = rtp.ResultedTest   and rt.Version = rtp.Version     and @age between rtp.MinAge and rtp.maxage    and   rtp.sex=@PatientGender                         
           
   INNER JOIN dbo.tblAccessions acc (NOLOCK)        
   ON acc.Accession IN (Select top 4 accession from #tmpAccessionsForHist)        
           
   INNER JOIN dbo.tblPerformedTestsDefinitions ptd (NOLOCK)        
   on rt.PrfTestCode = ptd.PerformedTest         
           
   LEFT OUTER JOIN dbo.tblResultedTestsDefinitions rtDef (NOLOCK)        
   on rt.Element = rtDef.TestCode         
   and rt.version=rtDef.version         
 LEFT OUTER JOIN dbo.tblTestsReportOrderNew rtro                  
   on rt.Element = rtro.ResultTestCode 
       
       
       ---- set header and test order
       
       Create table #accTestInfo                    
  (OrdTestCode varchar(100) not null)                    
 insert into #accTestInfo                    
 select accTestList.value from tblAccessions                     
 cross apply SplitString(tblAccessions.OrderedTests, '|') accTestList                    
 inner join  tblOrderedTestsDefinitions on tblOrderedTestsDefinitions.OrderedTest =  accTestList.Value                    
 where Accession = @Accession and tblOrderedTestsDefinitions.ReportFlag = 1                    
                     
 Create table #PerformedTestsList                    
 (OrderedTest varchar(max),                    
 Description varchar(max),                    
 ActiveFlag bit,                    
 InSearchFlag bit,                    
 pTestCode varchar(max),                    
 ExternalDescription varchar(max),                    
 ReportFlag bit,                    
 iPos smallint,              
 ResultTestCode varchar(max),      
 category varchar(50),      
 categoryreportOrder DECIMAL(6,2))              
              
 if object_id('tempdb..#ResultTests') is not null              
              
 drop table #ResultTests              
               
 create table #ResultTests              
 (               
   PerformedTest varchar(50),              
   rTestCode varchar(50),              
   iPos smallint                 
 )                
                     
 DECLARE @PerfTests VARCHAR(MAX);                    
 Declare @iPosCtr integer;                    
                     
 DECLARE   @StartPos smallint              
   , @EndPos smallint              
   , @CurVal varchar(20)              
   , @FieldList varchar(max)              
   , @PTestCode varchar(50)              
  , @RTestsList varchar(max)              
   , @iResultPos smallint              
               
 set @iPosCtr = 0              
                     
 DECLARE GetTests CURSOR Forward_Only                    
 For Select OrdTestCode from #accTestInfo                    
                     
 Open GetTests                    
                     
  Fetch next from GetTests into @PerfTests                    
  While @@Fetch_Status = 0                    
  Begin                    
   insert into #PerformedTestsList                    
   exec spGetAllPrfTestsforOrderedTestForReport @PerfTests         
         
   --Get category as header if exists      
   Update #PerformedTestsList      
   set [Description] =category, iPos=categoryreportOrder      
   where category<>'' and category is not NULL      
         
    Update #PerformedTestsList      
   set  iPos=iPos + @iPosCtr       
   where category='' or category is NULL      
         
   --End -- Get category as header if exists      
                    
   update #tmpTestInfoHIST set Header = #PerformedTestsList.[Description],                    
    ReportOrder = #PerformedTestsList.iPos                    
   from #PerformedTestsList                    
   where #PerformedTestsList.pTestCode = #tmpTestInfoHIST.PrfTestCode                    
   --2 - update report order for result tests codes              
   Declare GetResultTests CURSOR Forward_Only              
   For Select pTestCode, ResultTestCode from #PerformedTestsList              
              
   Open GetResultTests              
              
    Fetch next from GetResultTests into @PTestCode, @RTestsList              
    While @@Fetch_Status = 0              
    Begin              
              
     Set @FieldList = @RTestsList              
     Set @FieldList = @FieldList + '|'              
     Set @StartPos = 1              
     Set @EndPos = 1              
     Set @iResultPos = 1              
              
     --Print @FieldList              
              
     -- Start the looping operation              
     While @EndPos > 0              
     Begin              
      Set @EndPos = CharIndex('|', @FieldList, @StartPos)              
      If @EndPos > 0              
       Begin              
       Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))              
       -- Add current row to TempTable              
       Insert #ResultTests (PerformedTest, rTestCode, iPos) Values (@PTestCode, @CurVal, @iResultPos)              
       Set @StartPos = @EndPos + 1              
       Set @iResultPos = @iResultPos + 1              
      End              
     End              
              
     --select * from #ResultTests              
     update #tmpTestInfoHIST set ElemReportOrder = #ResultTests.[iPos]    
     from #ResultTests              
     where #ResultTests.PerformedTest = #tmpTestInfoHIST.PrfTestCode              
      and #ResultTests.rTestCode = #tmpTestInfoHIST.Element              
     truncate table #ResultTests              
     Fetch next from GetResultTests into @PTestCode, @RTestsList              
    End              
   Close GetResultTests              
   Deallocate GetResultTests              
   --increment position counter by number of rows already done                    
   select @iPosCtr = @iPosCtr + count(*) from #PerformedTestsList                     
   --clear out table for next fetch                    
   truncate table #PerformedTestsList        
   Fetch next from GetTests into @PerfTests                    
  End                    
 Close GetTests                    
 Deallocate GetTests                      
   
       ---- end header and test order   
       
  select * from #tmpTestInfoHIST    
  where Element in (select ResultTest from  tblResultedTests where Accession=@Accession)
    
  order by CollectionDate desc ,ReportOrder asc , ElemReportOrder asc--,PrfTestName asc 
        
           
END      
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetAccessionInfo] 	
	@AccessionCode varchar(50)
AS
BEGIN
	
	SET NOCOUNT ON;

    
	SELECT acc.Accession, pl.ptLastName + ', ' + pl.ptFirstName as Name, acc.Accession + ' (' +  pl.ptLastName + ', ' + pl.ptFirstName + ') ' as PatientCodeName
	FROM tblAccessions acc with (NOLOCK)
	
	
	Inner Join dbo.tblPatient pl (NOLOCK)
				on acc.PatientID = pl.PatientId
	
	and	acc.Accession = @AccessionCode
	
	

end
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionMailoutLabCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetAccessionMailoutLabCode]	
	@Accession varchar(100),
	@BatchID varchar(200)
AS
BEGIN
	SELECT MailoutLabCode FROM tblMailoutOrders WHERE SentBatchID = @BatchID and MOAccession = @Accession order by id desc
END


GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionMailoutResults]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- <12/6/2019><Gladson>Get resulted mailout tests. These should be modeled after ResultedTestsType TableType.
-- =============================================
CREATE PROCEDURE [dbo].[spGetAccessionMailoutResults]
	@Accession varchar(50)
AS
BEGIN

	SET NOCOUNT ON;

	SELECT a.[id], [Accession], a.[PerformedTest], [ResultTest], [Worksheet], [LOINCcode], [Organism], [SensitivitiesXML], 
		[Result], [ResultFlag], [NormalRange], [Units], [CorrectionsXML], [CallStatus], [ResultComment], [Status], [EnteredBy], [EntryDate], 
		[SiteID], a.[QSSCreatedByID], a.[QSSCreatedDate], a.[QSSLastUpdateID], a.[QSSUpdateDate], a.[QSSVersion], [Outcome], [Version], [ReportAs], 
		[InternalComment], [ApprovedDate], [AutoManualFlag], [QSSReleasedID]
	FROM tblResultedTests a
	JOIN tblPerformedTestsDefinitions b ON a.PerformedTest = b.PerformedTest
	WHERE Accession = @Accession AND MailoutFlag = 'M' AND [Status] != 'Pending';
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionNotes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionNotes] 
	
	@Accession varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT Accession, Notes, DateCreated
	FROM tblAccessionNotes with (NOLOCK)
	WHERE Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionOrderedTestData1]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionOrderedTestData1]     
@Accession varchar(50)  ,  
@BillType varchar(100),  
@ClientCode varchar (20)  
AS    
BEGIN    
  
if OBJECT_ID('tempdb..#tmpOrderedTest') IS NOT NULL  
 drop table #tmpOrderedTest  
   
 if OBJECT_ID('tempdb..#tmpCPT') IS NOT NULL  
 drop table #tmpCPT  
   
 DECLARE      
            @OrderedTest varchar(100)  
          , @NextBillDate datetime  
          , @CPTCode varchar(100)  
          , @FeeDescription varchar(200)  
          , @TotalFeeAmt decimal(18,4)  
          , @ExpPaymentAmt decimal(18,4)  
          , @Units int  
          , @BillableFlag varchar(20)  
          , @Description varchar(200)  
      
CREATE TABLE #tmpOrderedTest  
(  
    OrderedTest varchar(100) NOT NULL,  
 Description varchar(200) NULL,   
 Billable varchar(100) NULL  
   
)    
CREATE TABLE #tmpCPT  
(  
    OrderedTestCode varchar(100) NOT NULL,  
 FeeDescription varchar(200) NULL,  
 CPTCode varchar(100) NULL,  
 Units int,  
 Modifier varchar(100) NULL,  
 Location varchar(100) NULL,  
 Billable varchar(100) NULL  
   
)  
  
 INSERT INTO #tmpOrderedTest   
 SELECT     
 distinct ot.OrderedTest,  otd.Description  , ot.BillStatus As Billable     
  FROM dbo.tblOrderedTests  ot (NOLOCK)    
  INNER JOIN dbo.tblOrderedTestsDefinitions otd (NOLOCK)    
  ON ot.OrderedTest = otd.OrderedTest    
  WHERE ot.Accession = @Accession       
  order by  ot.OrderedTest asc    
      
  
 DECLARE CPT_MAIN_CURSOR CURSOR READ_ONLY FOR   
 SELECT  OrderedTest , Billable  
 FROM #tmpOrderedTest   
 ORDER BY OrderedTest   
 OPEN CPT_MAIN_CURSOR  
  
 FETCH NEXT FROM CPT_MAIN_CURSOR  
  INTO   @OrderedTest , @BillableFlag  
 WHILE @@FETCH_STATUS = 0  
 BEGIN  
  IF EXISTS (SELECT Top 1 OrderedTestCode FROM dbo.tblFeeDefinitions   
           WHERE OrderedTestCode = @OrderedTest  
           AND BillTypeCode = @BillType  
           AND ClientCode = @ClientCode )  
  BEGIN  
   DECLARE CPT_CURSOR CURSOR READ_ONLY FOR   
   SELECT  CPTCode , FeeAmt,  Units , ExpPaymentAmt, [Description]  
   FROM dbo.tblFeeDefinitions  
   WHERE OrderedTestCode = @OrderedTest  
       AND BillTypeCode = @BillType  
       AND ClientCode = @ClientCode  
   ORDER BY CPTCode   
   OPEN CPT_CURSOR  
  
   FETCH NEXT FROM CPT_CURSOR  
    INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description  
   WHILE @@FETCH_STATUS = 0  
    BEGIN   
     INSERT INTO #tmpCPT (OrderedTestCode, CPTCode, FeeDescription, Units, Modifier, Location, Billable)  
     VALUES(@OrderedTest ,  @CPTCode , @Description , @Units, '' , '', @BillableFlag)  
     FETCH NEXT FROM CPT_CURSOR  
      INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description  
    END  
   CLOSE CPT_CURSOR  
   DEALLOCATE CPT_CURSOR   
       
  END  
  ELSE IF EXISTS (SELECT OrderedTestCode FROM dbo.tblFeeDefinitions   
           WHERE OrderedTestCode = @OrderedTest  
           AND BillTypeCode = @BillType  
           AND ClientCode = 'ALL' )  
  BEGIN   
   DECLARE CPT_CURSOR CURSOR READ_ONLY FOR   
   SELECT  CPTCode , FeeAmt, Units , ExpPaymentAmt, [Description]  
   FROM dbo.tblFeeDefinitions  
   WHERE OrderedTestCode = @OrderedTest  
       AND BillTypeCode = @BillType  
       AND ClientCode = 'ALL'  
   ORDER BY CPTCode   
   OPEN CPT_CURSOR  
  
   FETCH NEXT FROM CPT_CURSOR  
    INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description  
   WHILE @@FETCH_STATUS = 0  
    BEGIN   
    INSERT INTO #tmpCPT (OrderedTestCode, CPTCode, FeeDescription, Units, Modifier, Location, Billable)  
     VALUES(@OrderedTest ,  @CPTCode , @Description , @Units, '' , '', @BillableFlag)  
    FETCH NEXT FROM CPT_CURSOR  
     INTO   @CPTCode , @TotalFeeAmt, @Units , @ExpPaymentAmt, @Description  
    END  
   CLOSE CPT_CURSOR  
   DEALLOCATE CPT_CURSOR     
    
  END  
  ELSE  
  BEGIN  
   
   INSERT INTO #tmpCPT (OrderedTestCode, CPTCode, FeeDescription, Units, Modifier, Location, Billable)  
     VALUES(@OrderedTest ,  @CPTCode , @Description , @Units, '' , '', @BillableFlag)  
    
  END  
 FETCH NEXT FROM CPT_MAIN_CURSOR  
 INTO   @OrderedTest , @BillableFlag  
    END  
    CLOSE CPT_MAIN_CURSOR  
 DEALLOCATE CPT_MAIN_CURSOR  
    
    SELECT * from #tmpOrderedTest  
    SELECT * from #tmpCPT  
END  
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionOrderedTestData2]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[spGetAccessionOrderedTestData2]     
@Accession varchar(50),  
@BillType varchar(100),  
@ClientCode varchar (20)  
AS    
BEGIN    
  
if OBJECT_ID('tempdb..#tmpOrderedTest') IS NOT NULL  
 drop table #tmpOrderedTest  
   
 if OBJECT_ID('tempdb..#tmpCPT') IS NOT NULL  
 drop table #tmpCPT  
   
   
 DECLARE      
            @OrderedTest varchar(100)  
          , @NextBillDate datetime  
          , @CPTCode varchar(100)  
          , @FeeDescription varchar(200)  
          , @TotalFeeAmt decimal(18,4)  
          , @ExpPaymentAmt decimal(18,4)  
          , @BillTypeCode varchar(100)  
          , @Units int  
          , @BillableFlag varchar(20)  
          , @Description varchar(200)  
    , @BillOrderedTestCode varchar(100)  
    , @ICD9CODES varchar(100)  
    , @GroupFlag bit  
    , @CollectionDate datetime  
  
CREATE TABLE #tmpOrderedTest  
(  
    OrderedTest varchar(100) NOT NULL,  
 Description varchar(200) NULL,   
 Billable varchar(100) NULL,  
 GroupFlag bit  
)    
  
--Set collection date for use later in selecting CPTs that are effective at the time of service  
if exists(select Accession from tblBillAccessions where Accession = @Accession)  
begin  
 select @CollectionDate = CollectionDate from tblBillAccessions where Accession = @Accession  
end  
else  
begin  
 select @CollectionDate = CollectionDate from tblAccessions where Accession = @Accession  
end  
      
SET @BillOrderedTestCode = (SELECT TOP 1 OrderedTestCode FROM tblBill (NOLOCK)  
 WHERE Accession = @Accession)  
--IF Bill exists get data from the bill tables  
IF @BillOrderedTestCode IS NOT NULL   
 BEGIN  
   --Print 'at part where it should exist in tblBill'  
   --Get ordered tests with group status  
   Select   
   tblOrderedTests.OrderedTest, tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName, 1 as Units, tblCPTScaleMaintance.Amount   
   into #tmpGroupOrderedTest  
   from tblOrderedTests  
   inner join tblResultedTests  
   on tblResultedTests.Accession = tblOrderedTests.Accession  
   and tblResultedTests.PerformedTest = tblOrderedTests.PerformedTest  
   inner join tblCPTGroups   
   on tblCPTGroups.ResultCodes = tblResultedTests.ResultTest   
   left outer join tblCPTScaleMaintance  
   on tblCPTScaleMaintance.CPTCode = tblCPTGroups.GroupCPTCode and tblCPTScaleMaintance.InsuranceType = tblCPTGroups.BillTypeCode  
   where tblResultedTests.Accession = @Accession and tblCPTGroups.BillTypeCode = @BillType  
   group by tblOrderedTests.OrderedTest, tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName, Units, tblCPTScaleMaintance.Amount  
  
    Insert into #tmpOrderedTest  
    SELECT     
    distinct ot.OrderedTest,  otd.[Description],   
    case when exists (select accession from tblBill where accession = @accession) then   
    isnull(bi.Status, ot.BillStatus) else ot.BillStatus end as Billable,   
    case when #tmpGroupOrderedTest.OrderedTest is null then 0 else 1 end as groupflag  
    FROM dbo.tblOrderedTests  ot (NOLOCK)    
    INNER JOIN dbo.tblOrderedTestsDefinitions otd (NOLOCK)    
    ON ot.OrderedTest = otd.OrderedTest    
    left outer join #tmpGroupOrderedTest  
    on #tmpGroupOrderedTest.OrderedTest = ot.OrderedTest  
    left outer join tblBill bi on bi.Accession = ot.Accession and bi.OrderedTestCode = ot.OrderedTest  
     WHERE ot.Accession = @Accession        
     order by  ot.OrderedTest asc  
       
   Select * from #tmpOrderedTest    
     
   SELECT distinct b.OrderedTestCode, b.FeeDescription, b.CPTCode, b.Units, isnull(b.Modifier, '') as Modifier,   
   isnull(b.Location, '') as Location,   
   Case When BillableFlag = 'True' then b.[Status]  else 'DO NOT BILL'    
   end  As Billable ,   
   isnull(b.TotalFeeAmt, '0') as TotalFeeAmt, isnull(b.ExpAmt, '0') as ExpAmt, b.BTCode, isnull(b.ICD9code, '') as ICD9code,   
    isnull(#tmpOrderedTest.GroupFlag, 0) as GroupFlag  
   FROM dbo.tblBill  b (nolock)  
   INNER JOIN dbo.tblOrderedTests  ot (NOLOCK)  
   ON b.OrderedTestCode = ot.OrderedTest  
   and b.Accession = ot.Accession  
   AND Substring(ot.BillStatus, 1, 4) = 'BILL'  
   LEFT OUTER JOIN  
                #tmpOrderedTest   
    ON b.OrderedTestCode = #tmpOrderedTest.OrderedTest  
    --and b.CPTCode = #tmpGroupOrderedTest.GroupCPTCode  
   WHERE b.Accession = @Accession   
     
   ORDER BY OrderedTestCode , CPTcode    
     
   SELECT SUM(TotalFeeAmt)  
   FROM dbo.tblBill    
   WHERE Accession = @Accession   
   and substring([Status], 1, 4) = 'BILL'  
   and BTcode = @BillType  
     
   select isnull(sum(PaymentAmt), '0') as Paid from tblPayment where Accession = @Accession and BTcode = @BillType  
     
 END  
ELSE  
BEGIN   
---Else Get data from fee definition and Ordered test    
  
CREATE TABLE #tmpCPT  
(  
    OrderedTestCode varchar(100) NOT NULL,  
 FeeDescription varchar(200) NULL,  
 CPTCode varchar(100) NULL,  
 Units int,  
 Modifier varchar(100) NULL,  
 Location varchar(100) NULL,  
 Billable varchar(100) NULL,  
 TotalFeeAmt decimal(18,2) NULL,  
 ExpAmt decimal(18,2) NULL,   
 BillTypeCode varchar(20),   
 ICD9Code varchar(100),  
 GroupFlag bit NULL  
)  
  
 --Get ordered tests with group status  
 Select   
 tblOrderedTests.OrderedTest, tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName, 1 as Units, tblCPTScaleMaintance.Amount into #tmpGroupOrderedTest2  
 from tblOrderedTests  
 inner join tblResultedTests  
 on tblResultedTests.Accession = tblOrderedTests.Accession  
 and tblResultedTests.PerformedTest = tblOrderedTests.PerformedTest  
 inner join tblCPTGroups   
 on tblCPTGroups.ResultCodes = tblResultedTests.ResultTest   
 left outer join tblCPTScaleMaintance  
 on tblCPTScaleMaintance.CPTCode = tblCPTGroups.GroupCPTCode and tblCPTScaleMaintance.InsuranceType = tblCPTGroups.BillTypeCode  
 where tblResultedTests.Accession = @Accession and tblCPTGroups.BillTypeCode = @BillType  
 group by tblOrderedTests.OrderedTest, tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName, Units, tblCPTScaleMaintance.Amount  
  
 INSERT INTO #tmpOrderedTest   
 SELECT     
 distinct ot.OrderedTest,  otd.[Description], ot.BillStatus As Billable,   
 case when #tmpGroupOrderedTest2.OrderedTest is null then 0 else 1 end as groupflag  
 FROM dbo.tblOrderedTests  ot (NOLOCK)    
 INNER JOIN dbo.tblOrderedTestsDefinitions otd (NOLOCK)    
 ON ot.OrderedTest = otd.OrderedTest    
 left outer join #tmpGroupOrderedTest2  
 on #tmpGroupOrderedTest2.OrderedTest = ot.OrderedTest  
 WHERE ot.Accession = @Accession        
 order by  ot.OrderedTest asc    
  
 DECLARE CPT_MAIN_CURSOR CURSOR READ_ONLY FOR   
 SELECT  OrderedTest , Billable  
 FROM #tmpOrderedTest   
 ORDER BY OrderedTest   
 OPEN CPT_MAIN_CURSOR  
  
 FETCH NEXT FROM CPT_MAIN_CURSOR  
  INTO   @OrderedTest , @BillableFlag  
 WHILE @@FETCH_STATUS = 0  
 BEGIN  
  IF EXISTS (SELECT Top 1 OrderedTestCode FROM dbo.tblFeeDefinitions   
           WHERE OrderedTestCode = @OrderedTest  
           AND BillTypeCode = @BillType  
           AND ClientCode = @ClientCode )  
  BEGIN  
   DECLARE CPT_CURSOR CURSOR READ_ONLY FOR   
  
   --SELECT distinct b.OrderedTestCode, b.FeeDescription, b.CPTCode, b.Units, isnull(b.Modifier, '') as Modifier,   
   --isnull(b.Location, '') as Location,   
   --Case When BillableFlag = 'True' then 'BILL'  else 'DO NOT BILL'    
   --end  As Billable ,   
   --isnull(b.TotalFeeAmt, '0') as TotalFeeAmt, isnull(b.ExpAmt, '0') as ExpAmt, b.BTCode, isnull(b.ICD9code, '') as ICD9code,   
   -- isnull(#tmpOrderedTest.GroupFlag, 0) as GroupFlag  
  
   SELECT  fd.CPTCode , fd.FeeAmt,  fd.Units , fd.ExpPaymentAmt, fd.[Description], fd.BillTypeCode, isnull(cpt.ICD9CODES, ''),   
    isnull(#tmpOrderedTest.GroupFlag, '')  
   FROM dbo.tblFeeDefinitions fd  
   left outer join tblCPT cpt  
   on fd.CPTCode = cpt.CPTCODE  
   LEFT OUTER JOIN  
                #tmpOrderedTest ON fd.OrderedTestCode = #tmpOrderedTest.OrderedTest  
   WHERE fd.OrderedTestCode = @OrderedTest  
       AND fd.BillTypeCode = @BillType  
       AND fd.ClientCode = @ClientCode  
       AND EffectiveDate =   
     (select max(effectivedate) from tblFeeDefinitions where OrderedTestCode = @OrderedTest and billtypecode = @BillType   
        and ClientCode = @ClientCode and EffectiveDate <= @CollectionDate )   
     AND EffectiveDate <= @CollectionDate  
   ORDER BY CPTCode   
   OPEN CPT_CURSOR  
  
   FETCH NEXT FROM CPT_CURSOR  
    INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description, @BillTypeCode, @ICD9CODES, @GroupFlag  
   WHILE @@FETCH_STATUS = 0  
    BEGIN   
     INSERT INTO #tmpCPT (OrderedTestCode, CPTCode, TotalFeeAmt, ExpAmt, FeeDescription, Units, Modifier, Location, Billable, BillTypeCode, ICD9Code,  
      GroupFlag)  
     VALUES(@OrderedTest ,  @CPTCode , @TotalFeeAmt, @ExpPaymentAmt, @Description , @Units, '' , '', @BillableFlag, @BillTypeCode, @ICD9CODES,  
      @GroupFlag)  
     FETCH NEXT FROM CPT_CURSOR  
      INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description, @BillTypeCode, @ICD9CODES, @GroupFlag  
    END  
   CLOSE CPT_CURSOR  
   DEALLOCATE CPT_CURSOR   
       
  END  
  ELSE IF EXISTS (SELECT OrderedTestCode FROM dbo.tblFeeDefinitions   
           WHERE OrderedTestCode = @OrderedTest  
           AND BillTypeCode = @BillType  
           AND ClientCode = 'ALL' )  
  BEGIN   
   DECLARE CPT_CURSOR CURSOR READ_ONLY FOR   
   SELECT  fd.CPTCode , fd.FeeAmt, fd.Units , fd.ExpPaymentAmt, fd.[Description], fd.BillTypeCode, isnull(cpt.ICD9CODES, ''),  
    isnull(#tmpGroupOrderedTest2.GroupName, '')  
   FROM dbo.tblFeeDefinitions fd  
   left outer join tblCPT cpt  
   on fd.CPTCode = cpt.CPTCODE  
   LEFT OUTER JOIN  
                #tmpGroupOrderedTest2 ON fd.OrderedTestCode = #tmpGroupOrderedTest2.OrderedTest -- AND fd.BillTypeCode = tblCPTGroups.BillTypeCode  
   WHERE fd.OrderedTestCode = @OrderedTest  
       AND fd.BillTypeCode = @BillType  
       AND fd.ClientCode = 'ALL'  
       AND EffectiveDate =   
     (select max(effectivedate) from tblFeeDefinitions where OrderedTestCode = @OrderedTest and billtypecode = @BillType   
        and ClientCode = 'ALL' and EffectiveDate <= @CollectionDate )   
     AND EffectiveDate <= @CollectionDate  
   ORDER BY CPTCode   
   OPEN CPT_CURSOR  
  
   FETCH NEXT FROM CPT_CURSOR  
    INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description, @BillTypeCode, @ICD9CODES, @GroupFlag  
   WHILE @@FETCH_STATUS = 0  
    BEGIN   
    INSERT INTO #tmpCPT (OrderedTestCode, CPTCode,TotalFeeAmt, ExpAmt, FeeDescription, Units, Modifier, Location, Billable, BillTypeCode, ICD9Code,  
     GroupFlag)  
     VALUES(@OrderedTest ,  @CPTCode , @TotalFeeAmt, @ExpPaymentAmt,@Description , @Units, '' , '', @BillableFlag, @BillTypeCode, @ICD9CODES,  
      @GroupFlag)  
    FETCH NEXT FROM CPT_CURSOR  
     INTO   @CPTCode , @TotalFeeAmt, @Units , @ExpPaymentAmt, @Description, @BillTypeCode, @ICD9CODES, @GroupFlag  
    END  
   CLOSE CPT_CURSOR  
   DEALLOCATE CPT_CURSOR     
    
  END  
  ELSE  
  BEGIN  
   
   INSERT INTO #tmpCPT (OrderedTestCode, CPTCode, TotalFeeAmt, ExpAmt, FeeDescription, Units, Modifier, Location, Billable, BillTypeCode, ICD9Code, GroupFlag)  
     VALUES(@OrderedTest ,  @CPTCode , 0, 0, @Description , @Units, '' , '', 'BILL', @BillType, '', '')  
   UPDATE #tmpCPT set CPTCode = #tmpGroupOrderedTest2.GroupCPTCode, FeeDescription = #tmpGroupOrderedTest2.GroupName,   
     Units = #tmpGroupOrderedTest2.Units, TotalFeeAmt = #tmpGroupOrderedTest2.Amount, ExpAmt = #tmpGroupOrderedTest2.Amount,  
     GroupFlag = #tmpOrderedTest.GroupFlag  
    from #tmpGroupOrderedTest2  
    inner join #tmpOrderedTest on #tmpOrderedTest.OrderedTest = #tmpGroupOrderedTest2.OrderedTest  
    where #tmpCPT.OrderedTestCode = #tmpGroupOrderedTest2.OrderedTest --and #tmpOrderedTest.GroupFlag = 1  
    
  END  
 FETCH NEXT FROM CPT_MAIN_CURSOR  
 INTO   @OrderedTest , @BillableFlag  
    END  
    CLOSE CPT_MAIN_CURSOR  
 DEALLOCATE CPT_MAIN_CURSOR  
    
    SELECT * from #tmpOrderedTest  
    SELECT * from #tmpCPT  
      
          
    SELECT isnull(SUM(TotalFeeAmt),0) from #tmpCPT where BillTypeCode = @BillType  
      
    select isnull(sum(PaymentAmt), '0') as Paid from tblPayment where Accession = @Accession and BTcode = @BillType  
  END  END  
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionPatient]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetAccessionPatient]

                @Accession as varchar(100)
AS
BEGIN
                DECLARE @PatientID as varchar(100)
                SELECT @PatientID = PatientID from tblAccessions where Accession = @Accession
                
                SELECT ptFirstName + ' ' + ptLastName as PatientName, PatientID
                FROM tblPatient 
                WHERE PatientId = @Patientid
                
END

GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionPatientName]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetAccessionPatientName] 
	@Accession varchar(100)
AS
BEGIN

	SET NOCOUNT ON


	SELECT a.Accession, p.ptLastName + ', ' + p.ptFirstName as PatientName
	FROM dbo.tblAccessions a (NOLOCK)
	inner join tblPatient p
	on a.PatientID = p.PatientID
	WHERE a.Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionPerformedTestData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionPerformedTestData] 
@Accession varchar(50)
AS
BEGIN

	
	SELECT 
	 ot.PerformedTest As Code  , ptd.InternalDescription As Description , ot.CallNote , ot.OrderedTest,
	 
	'Status' = CASE
						WHEN EXISTS (SELECT rt.Status 
										FROM dbo.tblResultedTests rt (nolock)
										WHERE rt.Accession = @Accession and rt.PerformedTest = ptd.PerformedTest and  rt.Status = 'Pending'
								     ) THEN 'Pending'
						WHEN EXISTS (SELECT rt.Status FROM dbo.tblResultedTests rt (nolock)
										WHERE rt.Accession = @Accession and rt.PerformedTest = ptd.PerformedTest and  rt.Status = 'Hold') THEN 'Hold'
						WHEN EXISTS (SELECT rt.Status FROM dbo.tblResultedTests rt (nolock)
										WHERE rt.Accession = @Accession and rt.PerformedTest = ptd.PerformedTest and  rt.Status = 'Final') THEN 'Final'
						WHEN EXISTS (SELECT rt.Status FROM dbo.tblResultedTests rt (nolock)
										WHERE rt.Accession = @Accession and rt.PerformedTest = ptd.PerformedTest and  rt.Status = 'Cancelled') THEN 'Cancelled'
		                END , 
		                
		               	(SELECT TOP 1 rt.result FROM dbo.tblResultedTests rt 	WHERE rt.Accession = @Accession and rt.PerformedTest = ptd.PerformedTest ) as Result, 
		               	
		       	'HasCritical' = CASE
						WHEN EXISTS (SELECT rt.Status 
										FROM dbo.tblResultedTests rt (nolock)
										WHERE rt.Accession = @Accession and rt.PerformedTest = ptd.PerformedTest and  rt.ResultFlag like '%Critical%'
								     ) THEN 'True'
		                END ,		               	
		        
		   ot.TestComment as InternalComment, ptd.MailoutFlag, ptd.MicrobioFlag, ptd.PerformedBy
	
		FROM dbo.tblOrderedTests  ot (NOLOCK)
		INNER JOIN dbo.tblPerformedTestsDefinitions ptd (NOLOCK)
		ON ot.PerformedTest = ptd.PerformedTest

		WHERE ot.Accession = @Accession	
		
		
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionPrefix]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionPrefix]
	
AS
BEGIN
	SET NOCOUNT ON;
		select Prefix as Code, Prefix as Description
		from tblAccessionPrefix
		ORDER BY Prefix
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionPrimaryInsurance]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetAccessionPrimaryInsurance] 
                
@Accession varchar(100)
AS

SET NOCOUNT ON;

IF EXISTS( SELECT Accession from tblAccessionInsuranceInfo WHERE  Accession = @Accession)
BEGIN
	--Get primary insurance info
	select ic.*
	from tblAccessionInsuranceInfo (nolock) aii 
	inner join tblInsuranceCompanies ic on aii.primaryinsuranceid = ic.InsuranceCode
	where Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionPT_AOEs]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================      
-- Author:  <Author,,Name>      
-- Create date: <Create Date,,>      
-- Description: <Description,,>      
-- =============================================      
CREATE PROCEDURE [dbo].[spGetAccessionPT_AOEs]        
 @Accession varchar(50)      
      
AS      
BEGIN      
       
 SET NOCOUNT ON;      
      
          
 SELECT specimensource,isnull(LMP,'')as LMP      
 FROM tblAccessions where Accession = @Accession   
       
       
      
end 
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionResultedTestData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- <9/11/2017><Gladson> Added columns Worksheet, PrevValue, Hold and InternalComment. Added parameter @InstrumentCode as optional
-- =============================================
CREATE PROCEDURE [dbo].[spGetAccessionResultedTestData]   
@Accession varchar(50),  
@PerformedTest varchar(100)  = null,
@InstrumentCode varchar(200)  = null
AS  
BEGIN  
Declare @PFT varchar(100) 
if @PerformedTest = 'All' set @PFT=null else set @PFT=@PerformedTest
if OBJECT_ID('tempdb..#tmpResultedTest') IS NOT NULL  
 drop table #tmpResultedTest  
  
  
Create table #tmpResultedTest  
(id int not null,  
RTName varchar(100) null,  
Element varchar(100) not null,  
  
Result varchar(100) null,  
NormalRange varchar(200) null,  
Units varchar(100) null,  
Status varchar(50) null,  
ResultComment varchar(max) null,  
CriticalLowLimit varchar(100) null,  
CriticalHighLimit varchar(100) null,  
HighLimit varchar(100) null,  
LowLimit varchar(100) null,  
NormalHighLimit varchar(100) null,  
NormalLowLimit varchar(100) null,  
AutoReleaseHighLimit varchar(100) null,  
AutoReleaseLowLimit varchar(100) null,  
HighFlag varchar(100) null,  
LowFlag varchar(100) null,  
CriticalHighFlag varchar(100) null,  
CriticalLowFlag varchar(100) null,  
ReviewHighFlag varchar(100) null,  
ReviewLowFlag varchar(100) null,  
HasComment varchar(3) null,  
NullFlag bit null,  
UseAlpha bit null,  
DecodedFlagRequired bit null,   
Outcome varchar(1) null,   
Decimals varchar(100),  
Testcode varchar(20) null,  
AbnormalCommentCode varchar(max) null,  
ResultFlag varchar(100) null,  
ReportAs varchar(100) null,  
Version int  ,
ConsistentCommentCode varchar(max) null, 
InconsistentCommentCode varchar(max) null,
OrderedTest varchar(100) null,
PerformedTest varchar(100) null ,
Worksheet varchar(100) NULL, 
PrevResult varchar(100) NULL, 
Hold bit, 
InternalComment varchar(1000), 
CancelFlag bit,
ApprovedDate datetime);
 
 IF @InstrumentCode IS NOT NULL

	 INSERT INTO #tmpResultedTest  
	 SELECT rt.id,  rtd.InternalName as RTName,  rt.ResultTest As Element  , rt.Result , rt.NormalRange, rt.Units  , rt.Status, rt.ResultComment,  
	   '' as CriticalLowLimit , '' as CriticalHighLimit , '' as HighLimit, '' as LowLimit, '' as NormalHighLimit, '' as NormalLowLimit,  
	   '' as AutoReleaseLowLimit , '' as AutoReleaseHighLimit , '' as HighFlag, '' as LowFlag, '' as CriticalHighFlag, '' as CriticalLowFlag,  
	   '' as ReviewLowFlag, '' as ReviewHighFlag,   
	   Case when datalength(rt.ResultComment) > 1 then '*'  
	   else ''   
	   end  HasComment,  rtd.NullFlag as NullFlag, rtd.UseAlpha as UseAlpha, rtd.DecodedFlagRequired as DecodedFlagRequired , rt.Outcome, rtd.Decimals,  
	   rtd.TestCode as TestCode, rtd.AbnormalCommentCode, rt.ResultFlag , rt.ReportAs, rt.Version  , rtd.ConsistentCommentCode,rtd.InconsistentCommentCode,
	   '' as OrderedTest, rt.PerformedTest, rt.Worksheet, '', 
		  CASE WHEN Status = 'Hold' THEN 1 ELSE 0 END, InternalComment, CASE WHEN Status = 'Cancelled' THEN 1 ELSE 0 END,
		  rt.ApprovedDate

	  FROM dbo.tblResultedTests  rt 
		  INNER JOIN dbo.tblResultedTestsDefinitions rtd ON rt.ResultTest = rtd.testcode  
		  INNER JOIN  tblResultCodeVersions ON rtd.TestCode = tblResultCodeVersions.TestCode AND rtd.Version = tblResultCodeVersions.CurrentVersion     
		  INNER JOIN tblInstrumentElements ie ON rt.ResultTest = ie.ResultTest
		  INNER JOIN tblInstrumentDefinitions ids ON ids.InstrumentCode = ie.InstrumentCode
		
      WHERE rt.Accession = @Accession AND rt.PerformedTest = COALESCE(@PFT  , rt.PerformedTest) AND ids.InstrumentCode = @InstrumentCode;

  ELSE

	 INSERT INTO #tmpResultedTest  
	 SELECT rt.id,  rtd.InternalName as RTName,  rt.ResultTest As Element  , rt.Result , rt.NormalRange, rt.Units  , rt.Status, rt.ResultComment,  
	   '' as CriticalLowLimit , '' as CriticalHighLimit , '' as HighLimit, '' as LowLimit, '' as NormalHighLimit, '' as NormalLowLimit,  
	   '' as AutoReleaseLowLimit , '' as AutoReleaseHighLimit , '' as HighFlag, '' as LowFlag, '' as CriticalHighFlag, '' as CriticalLowFlag,  
	   '' as ReviewLowFlag, '' as ReviewHighFlag,   
	   Case when datalength(rt.ResultComment) > 1 then '*'  
	   else ''   
	   end  HasComment,  rtd.NullFlag as NullFlag, rtd.UseAlpha as UseAlpha, rtd.DecodedFlagRequired as DecodedFlagRequired , rt.Outcome, rtd.Decimals,  
	   rtd.TestCode as TestCode, rtd.AbnormalCommentCode, rt.ResultFlag , rt.ReportAs, rt.Version  , rtd.ConsistentCommentCode,rtd.InconsistentCommentCode,
	   '' as OrderedTest, rt.PerformedTest, rt.Worksheet, '', 
		  CASE WHEN Status = 'Hold' THEN 1 ELSE 0 END, InternalComment, CASE WHEN Status = 'Cancelled' THEN 1 ELSE 0 END,
		  rt.ApprovedDate

	  FROM dbo.tblResultedTests  rt (NOLOCK)   
	  INNER JOIN dbo.tblResultedTestsDefinitions rtd(NOLOCK)  
	   ON rt.ResultTest = rtd.testcode  
						INNER JOIN  tblResultCodeVersions ON rtd.TestCode = tblResultCodeVersions.TestCode AND   
						  rtd.Version = tblResultCodeVersions.CurrentVersion     
     
      
		WHERE rt.Accession = @Accession  
	  and rt.PerformedTest =  COALESCE(@PFT  , rt.PerformedTest)

  UPDATE #tmpResultedTest  
  SET CriticalLowLimit = rtp.CriticalLowLimit  
      ,CriticalHighLimit  =  rtp.CriticalHighLimit  
      ,HighLimit = rtp.HighLimit  
      ,LowLimit = rtp.LowLimit  
      ,NormalHighLimit = rtp.NormalHighLimit  
      ,NormalLowLimit = rtp.NormalLowLimit  
      ,AutoReleaseLowLimit = rtp.AutoReleaseLowLimit  
      ,AutoReleaseHighLimit = rtp.AutoReleaseHighLimit  
      ,HighFlag = rtp.HighFlag  
      ,LowFlag = rtp.LowFlag  
      ,CriticalHighFlag = rtp.CriticalHighFlag  
      ,CriticalLowFlag = rtp.CriticalLowFlag  
      ,ReviewHighFlag = rtp.ReviewHighFlag  
      ,ReviewLowFlag = rtp.ReviewLowFlag  
   ,NullFlag=rt.NullFlag  
   ,UseAlpha=rt.UseAlpha  
   ,DecodedFlagRequired=rt.DecodedFlagRequired  
   ,Outcome = rt.Outcome  
   ,Decimals = rt.Decimals  
   ,Testcode=rt.Testcode  
   ,AbnormalCommentCode=rt.AbnormalCommentCode  
   ,ResultFlag=rt.ResultFlag  
   ,ReportAs = rt.ReportAs   
   ,Version  = rt.Version  
   ,ConsistentCommentCode=rt.ConsistentCommentCode  
   ,InconsistentCommentCode=rt.InconsistentCommentCode  
      FROM #tmpResultedTest rt  
      LEFT JOIN dbo.tblResultedTestsParams rtp (NOLOCK)  
   ON rt.Element = rtp.ResultedTest and rt.Version = rtp.Version   
     
   
     
   INNER JOIN dbo.tblAccessions acc (NOLOCK)  
   ON acc.Accession = @Accession  
   INNER JOIN dbo.tblPatient pat (NOLOCK)  
   ON acc.PatientID = pat.PatientId  
   AND rtp.Sex =  pat.ptSex  
  
  select * from #tmpResultedTest rt  
	order by rt.PerformedTest, rt.RTName asc 
	
    
  if OBJECT_ID('tempdb..#tmpResultedTest') IS NOT NULL  
   drop table #tmpResultedTest  
END  

GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionResultStatus]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Paul Antompietri
-- Create date: 03/21/2019
-- Description:	Get Accession Result Status
-- =============================================
CREATE PROCEDURE [dbo].[spGetAccessionResultStatus]
	@Accession varchar(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	Declare @Status as varchar(100)
	SELECT @Status = dbo.F_GetResultStatus(@Accession)
	if @Status = 'Final' begin
		if (select count(*) from tblResultedTests where Accession = @Accession and Status = 'Final' and ApprovedDate is null)
			 = 0 set @Status = 'Final/Approved'
	end
	Select @Status
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionsByCallList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionsByCallList]
	
	
AS
BEGIN
    			select cs.id, cs.accession, cs.lastname, cs.firstname, cs.clientcode, cs.clientname,  cs.PhysicianCode, 
				cs.PhysicianName, cs.DOB, cs.SEX, cs.CollectionDate, cs.ServiceDate, 
			
			'Status' = CASE
				        WHEN EXISTS (SELECT rt.Status 
							 FROM dbo.tblResultedTests rt (nolock)
						     WHERE rt.Accession = cs.Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold')) THEN 'Pending'
						 ELSE 'Final'
	            END
			, MAX(an.Notes)	as Notes		
			from tblCallSheet cs (nolock) 
			left outer join tblAccessionNotes an (nolock)
			on cs.accession = an.Accession
			
			
			where ActiveFlag = '' or ActiveFlag is null
			GROUP BY cs.id, cs.accession, cs.lastname, cs.firstname, cs.clientcode, cs.clientname,  cs.PhysicianCode, 
				cs.PhysicianName, cs.DOB, cs.SEX, cs.CollectionDate, cs.ServiceDate
			order by cs.CollectionDate desc , cs.lastname
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionsByCallListDOH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionsByCallListDOH]    
     
     
AS    
BEGIN    
       select cs.id, cs.accession, cs.lastname, cs.firstname, cs.clientcode, cs.clientname,  cs.PhysicianCode,     
    cs.PhysicianName, cs.DOB, cs.SEX, cs.CollectionDate, cs.ServiceDate,     
       
   'Status' = CASE    
            WHEN EXISTS (SELECT rt.Status     
        FROM dbo.tblResultedTests rt (nolock)    
           WHERE rt.Accession = cs.Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold')) THEN 'Pending'    
       ELSE 'Final'    
             END    
   , MAX(an.Notes) as Notes      
   from tblCallSheetDOH cs (nolock)     
   left outer join tblAccessionNotes an (nolock)    
   on cs.accession = an.Accession    
       
       
   where ActiveFlag = '' or ActiveFlag is null    
   GROUP BY cs.id, cs.accession, cs.lastname, cs.firstname, cs.clientcode, cs.clientname,  cs.PhysicianCode,     
    cs.PhysicianName, cs.DOB, cs.SEX, cs.CollectionDate, cs.ServiceDate    
   order by cs.CollectionDate desc , cs.lastname    
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionsByDateTime]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionsByDateTime]
	@Client varchar(20),
	@StartDate datetime,
	@EndDate datetime
AS
BEGIN
		begin
			select * from tblAccessions 
				where PatientID = @Client and
					(DateCreated between @startdate and @enddate)
		end
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionsByDateTimeAll]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Batch submitted through debugger: SQLQuery17.sql|7|0|C:\Documents and Settings\Administrator\Local Settings\Temp\~vs363.sql
CREATE PROCEDURE [dbo].[spGetAccessionsByDateTimeAll]
	@Client varchar(20),
	@StartDate datetime,
	@EndDate datetime
AS
BEGIN

	begin
			select * from tblAccessions 
				where (DateCreated between @startdate and @enddate)
	
		End 
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionsByParam]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionsByParam]    
 @Accession varchar(50) = NULL ,    
 @LastName varchar(100) = NULL ,     
 @FirstName varchar(100) = NULL ,    
 @Client varchar(100)= NULL,    
 @DateType varchar(20),    
 @StartDate datetime ,    
 @EndDate datetime,    
 @DOB datetime = NULL,    
 @Progress varchar(500) = NULL    
AS    
BEGIN    
    
    
    
    
If @Accession<>'' or @Accession is not null    
begin    
    
    
 SELECT     a.Accession, p.ptLastName AS LastName, p.ptFirstName AS FirstName, a.ClientCode, c.ClientName, a.PhysicianCode, phs.FullName AS PhysicianName,     
        p.ptDateOfBirth AS DOB, p.ptSex AS Sex, a.CollectionDate, a.ReceiveDate AS servicedate, CASE WHEN EXISTS    
         (SELECT     rt.Status    
        FROM          dbo.tblResultedTests rt(nolock)    
        WHERE      rt.Accession = a.Accession AND (rt.Status = 'Pending' OR    
                rt.Status = 'Hold')) THEN 'Pending' ELSE 'Final' END AS 'Status', MAX(an.Notes) AS Notes, vAccessionProgress.Progress, phs.SeriesName  ,ara.ArchivedDate as ReleasedDate  
 FROM         tblAccessions AS a WITH (nolock) INNER JOIN    
        tblPatient AS p WITH (nolock) ON a.PatientID = p.PatientId INNER JOIN    
        tblClients AS c WITH (nolock) ON a.ClientCode = c.ClientCode INNER JOIN    
        tblPhysicians AS phs WITH (nolock) ON a.PhysicianCode = phs.PhysicianCode INNER JOIN    
        vAccessionProgress ON a.Accession = vAccessionProgress.Accession LEFT OUTER JOIN    
        tblAccessionNotes AS an WITH (nolock) ON a.Accession = an.Accession    
  LEFT OUTER JOIN dbo.tblArchiveReviewAccession ara (NOLOCK) ON a.Accession = ara.Accession  
 WHERE     (a.Accession LIKE ISNULL(@Accession, a.Accession))    
 GROUP BY a.Accession, p.ptLastName, p.ptFirstName, a.ClientCode, c.ClientName, a.PhysicianCode, phs.FullName, p.ptDateOfBirth, p.ptSex, a.CollectionDate, a.ReceiveDate, ara.ArchivedDate  ,  
        vAccessionProgress.Progress, phs.SeriesName    
end    
else    
begin       
       
    
    
    
 IF @DateType = 'collectiondate'     
   Begin    
       
      
  If @Progress<>'' or @Progress is not null    
  begin    
       
   select a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName,    
       a.ClientCode,c.ClientName,a.PhysicianCode,phs.FullName as PhysicianName,    
       p.ptDateOfBirth as DOB , p.ptSex  as Sex, a.collectiondate, a.ReceiveDate as servicedate,    
       
          'Status' = CASE    
            WHEN EXISTS (SELECT rt.Status     
        FROM dbo.tblResultedTests rt (nolock)    
           WHERE rt.Accession = a.Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold' )) THEN 'Pending'    
       ELSE 'Final'    
             END    
   , MAX(an.Notes) as Notes, vAccessionProgress.Progress, phs.SeriesName   ,ara.ArchivedDate as ReleasedDate    
       
   from tblAccessions a (nolock)     
   inner join tblPatient p (nolock)    
   on a.PatientID = p.PatientId    
   inner join tblClients c (nolock)    
   on a.ClientCode = c.ClientCode    
   inner join tblPhysicians phs (nolock)    
   on a.PhysicianCode = phs.PhysicianCode    
       
   INNER JOIN  vAccessionProgress ON a.Accession = vAccessionProgress.Accession    
       
   left outer join tblAccessionNotes an (nolock)    
   on a.Accession = an.Accession    
     LEFT OUTER JOIN dbo.tblArchiveReviewAccession ara (NOLOCK) ON a.Accession = ara.Accession  
   where (p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)    
   and p.ptFirstName LIKE ISNULL(@FirstName, p.ptFirstName)    
   and p.ptDateOfBirth  LIKE ISNULL(@DOB, p.ptDateOfBirth )    
   and a.ClientCode  LIKE ISNULL(@Client, a.ClientCode)    
   and (a.CollectionDate between @startdate and @enddate))    
   and vAccessionProgress.Progress = @Progress    
    
   group by a.Accession,p.ptLastName, p.ptFirstName,    
       a.ClientCode,c.ClientName,a.PhysicianCode,phs.FullName,    
       p.ptDateOfBirth , p.ptSex, a.collectiondate, a.ReceiveDate, vAccessionProgress.Progress, phs.SeriesName ,ara.ArchivedDate   
   order by a.collectiondate desc , p.ptLastName    
  end    
  else    
  Begin    
      
     select a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName,    
       a.ClientCode,c.ClientName,a.PhysicianCode,phs.FullName as PhysicianName,    
       p.ptDateOfBirth as DOB , p.ptSex  as Sex, a.collectiondate, a.ReceiveDate as servicedate,    
       
          'Status' = CASE    
            WHEN EXISTS (SELECT rt.Status     
        FROM dbo.tblResultedTests rt (nolock)    
           WHERE rt.Accession = a.Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold' )) THEN 'Pending'    
       ELSE 'Final'    
             END    
   , MAX(an.Notes) as Notes, vAccessionProgress.Progress, phs.SeriesName  ,ara.ArchivedDate as ReleasedDate    
       
   from tblAccessions a (nolock)     
   inner join tblPatient p (nolock)    
   on a.PatientID = p.PatientId    
   inner join tblClients c (nolock)    
   on a.ClientCode = c.ClientCode    
   inner join tblPhysicians phs (nolock)    
   on a.PhysicianCode = phs.PhysicianCode    
       
   INNER JOIN  vAccessionProgress ON a.Accession = vAccessionProgress.Accession    
       
   left outer join tblAccessionNotes an (nolock)    
   on a.Accession = an.Accession    
     LEFT OUTER JOIN dbo.tblArchiveReviewAccession ara (NOLOCK) ON a.Accession = a.Accession   
   where (p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)    
   and p.ptFirstName LIKE ISNULL(@FirstName, p.ptFirstName)    
   and p.ptDateOfBirth  LIKE ISNULL(@DOB, p.ptDateOfBirth )    
   and a.ClientCode  LIKE ISNULL(@Client, a.ClientCode)    
   and (a.CollectionDate between @startdate and @enddate))    
   group by a.Accession,p.ptLastName, p.ptFirstName,    
       a.ClientCode,c.ClientName,a.PhysicianCode,phs.FullName,    
       p.ptDateOfBirth , p.ptSex, a.collectiondate, a.ReceiveDate, vAccessionProgress.Progress, phs.SeriesName  ,ara.ArchivedDate  
   order by a.collectiondate desc , p.ptLastName    
      
  End    
       
       
    end    
        
        
        
ELSE    
    
    
    
 If @Progress<>'' or @Progress is not null    
 begin    
    
      select a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName,    
        a.ClientCode,c.ClientName,a.PhysicianCode,phs.FullName as PhysicianName,    
        p.ptDateOfBirth as DOB , p.ptSex as Sex, a.collectiondate,a.ReceiveDate as servicedate,    
          
       'Status' = CASE    
       WHEN EXISTS (SELECT rt.Status     
         FROM dbo.tblResultedTests rt (nolock)    
         WHERE rt.Accession = a.Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold' )) THEN 'Pending'    
        ELSE 'Final'    
     END    
     , MAX(an.Notes) as Notes,vAccessionProgress.Progress, phs.SeriesName       ,ara.ArchivedDate as ReleasedDate  
        
    from tblAccessions a (nolock)     
    inner join tblPatient p (nolock)    
    on a.PatientID = p.PatientId    
    inner join tblClients c (nolock)    
    on a.ClientCode = c.ClientCode    
    inner join tblPhysicians phs (nolock)    
    on a.PhysicianCode = phs.PhysicianCode    
        
    INNER JOIN  vAccessionProgress ON a.Accession = vAccessionProgress.Accession    
        
    left outer join tblAccessionNotes an (nolock)    
    on a.Accession = an.Accession    
      LEFT OUTER JOIN dbo.tblArchiveReviewAccession ara (NOLOCK) ON a.Accession = a.Accession   
    where (p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)    
    and p.ptFirstName LIKE ISNULL(@FirstName, p.ptFirstName)    
    and p.ptDateOfBirth  LIKE ISNULL(@DOB, p.ptDateOfBirth )    
    and a.ClientCode  LIKE ISNULL(@Client, a.ClientCode)    
    and (a.ReceiveDate between @startdate and @enddate))    
    and vAccessionProgress.Progress = @Progress    
    
     group by a.Accession,p.ptLastName, p.ptFirstName,    
        a.ClientCode,c.ClientName,a.PhysicianCode,phs.FullName,    
        p.ptDateOfBirth , p.ptSex, a.collectiondate,a.ReceiveDate, vAccessionProgress.Progress, phs.SeriesName ,ara.ArchivedDate   
    order by a.ReceiveDate desc, p.ptLastName     
    
    
 End    
 Else    
 Begin    
     
      select a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName,    
        a.ClientCode,c.ClientName,a.PhysicianCode,phs.FullName as PhysicianName,    
        p.ptDateOfBirth as DOB , p.ptSex as Sex, a.collectiondate,a.ReceiveDate as servicedate,    
          
       'Status' = CASE    
       WHEN EXISTS (SELECT rt.Status     
         FROM dbo.tblResultedTests rt (nolock)    
         WHERE rt.Accession = a.Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold' )) THEN 'Pending'    
        ELSE 'Final'    
     END    
     , MAX(an.Notes) as Notes,vAccessionProgress.Progress , phs.SeriesName      ,ara.ArchivedDate as ReleasedDate  
        
    from tblAccessions a (nolock)     
    inner join tblPatient p (nolock)    
    on a.PatientID = p.PatientId    
    inner join tblClients c (nolock)    
    on a.ClientCode = c.ClientCode    
    inner join tblPhysicians phs (nolock)    
    on a.PhysicianCode = phs.PhysicianCode    
        
    INNER JOIN  vAccessionProgress ON a.Accession = vAccessionProgress.Accession    
        
    left outer join tblAccessionNotes an (nolock)      on a.Accession = an.Accession    
 LEFT OUTER JOIN tblArchiveReviewAccession ara (NOLOCK) ON a.Accession = ara.Accession  
        
    where (p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)    
    and p.ptFirstName LIKE ISNULL(@FirstName, p.ptFirstName)    
    and p.ptDateOfBirth  LIKE ISNULL(@DOB, p.ptDateOfBirth )    
    and a.ClientCode  LIKE ISNULL(@Client, a.ClientCode)    
    and (a.ReceiveDate between @startdate and @enddate))    
    
        
     group by a.Accession,p.ptLastName, p.ptFirstName,    
        a.ClientCode,c.ClientName,a.PhysicianCode,phs.FullName,    
        p.ptDateOfBirth , p.ptSex, a.collectiondate,a.ReceiveDate, vAccessionProgress.Progress, phs.SeriesName,ara.ArchivedDate    
    order by a.ReceiveDate desc, p.ptLastName     
  END    
    
    
   End    
    
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionsByPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[spGetAccessionsByPatientID]    
 @PatientID varchar(100)    
AS    
BEGIN    
    
 SELECT     a.Accession, p.ptLastName AS LastName, p.ptFirstName AS FirstName, a.ClientCode, c.ClientName, a.PhysicianCode, phs.FullName AS PhysicianName,     
        p.ptDateOfBirth AS DOB, p.ptSex AS Sex, a.CollectionDate, a.ReceiveDate AS servicedate, CASE WHEN EXISTS    
         (SELECT     rt.Status    
        FROM          dbo.tblResultedTests rt(nolock)    
        WHERE      rt.Accession = a.Accession AND (rt.Status = 'Pending' OR    
                rt.Status = 'Hold')) THEN 'Pending' ELSE 'Final' END AS 'Status', MAX(an.Notes) AS Notes,   
    vAccessionProgress.Progress, phs.SeriesName ,ara.ArchivedDate as ReleasedDate  
       
 FROM         tblAccessions AS a WITH (nolock) INNER JOIN    
        tblPatient AS p WITH (nolock) ON a.PatientID = p.PatientId INNER JOIN    
        tblClients AS c WITH (nolock) ON a.ClientCode = c.ClientCode INNER JOIN    
        tblPhysicians AS phs WITH (nolock) ON a.PhysicianCode = phs.PhysicianCode INNER JOIN    
        vAccessionProgress ON a.Accession = vAccessionProgress.Accession LEFT OUTER JOIN    
        tblAccessionNotes AS an WITH (nolock) ON a.Accession = an.Accession    
   LEFT OUTER JOIN dbo.tblArchiveReviewAccession ara (NOLOCK) ON a.Accession = ara.Accession --= @Accession     
 WHERE     (a.PatientID LIKE ISNULL(@PatientID, a.PatientID))    
 GROUP BY a.Accession, p.ptLastName, p.ptFirstName, a.ClientCode, c.ClientName, a.PhysicianCode, phs.FullName, p.ptDateOfBirth, p.ptSex, a.CollectionDate, a.ReceiveDate,     
        vAccessionProgress.Progress, phs.SeriesName ,ara.ArchivedDate  
END 


GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionsByWorkSheet]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionsByWorkSheet]
	@WorkSheet varchar(300)
AS


  BEGIN 
 
	CREATE TABLE #TempList
	(
		cID varchar(20)
	)

	DECLARE @cID varchar(20), @Pos int
	SET @WorkSheet = LTRIM(RTRIM(@WorkSheet))+ ','
	SET @Pos = CHARINDEX(',', @WorkSheet, 1)
	IF REPLACE(@WorkSheet, ',', '') <> ''
	BEGIN
		WHILE @Pos > 0
		BEGIN
			SET @cID = LTRIM(RTRIM(LEFT(@WorkSheet, @Pos - 1)))
			IF @cID <> ''
			BEGIN
				INSERT INTO #TempList (cID) VALUES (CAST(@cID AS varchar(20)))
			END
			SET @WorkSheet = RIGHT(@WorkSheet, LEN(@WorkSheet) - @Pos)
			SET @Pos = CHARINDEX(',', @WorkSheet, 1)

		END
	END	
	
	SELECT * FROM tblAccessions_old  o
	JOIN 
		#TempList t
		ON o.WorkSheet = t.cID  
		
	 Order by Accession , WorkSheet  
   END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionsClnList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionsClnList]
	@LabCode varchar(20),
	@ClientCode varchar(500)=null ,	
	@StartDate datetime,
	@EndDate datetime
AS

IF @ClientCode <> ''
  BEGIN 
 
	CREATE TABLE #TempList
	(
		cID int
	)

	DECLARE @cID varchar(10), @Pos int
	SET @ClientCode = LTRIM(RTRIM(@ClientCode))+ ','
	SET @Pos = CHARINDEX(',', @ClientCode, 1)
	IF REPLACE(@ClientCode, ',', '') <> ''
	BEGIN
		WHILE @Pos > 0
		BEGIN
			SET @cID = LTRIM(RTRIM(LEFT(@ClientCode, @Pos - 1)))
			IF @cID <> ''
			BEGIN
				INSERT INTO #TempList (cID) VALUES (CAST(@cID AS int))
			END
			SET @ClientCode = RIGHT(@ClientCode, LEN(@ClientCode) - @Pos)
			SET @Pos = CHARINDEX(',', @ClientCode, 1)

		END
	END	
	
	SELECT * FROM tblAccessions_old  o
	JOIN 
		#TempList t
		ON o.LoggedInClient = t.cID  
		
	WHERE labcode = @Labcode  
	--and ClientCode in ('+ @ClientCode +')
	and  (DateCreated  between @startdate and @enddate)  
  
   END
ELSE
   BEGIN   
 
      	SELECT * FROM tblAccessions_old 
		WHERE labcode = @Labcode  
		and  (DateCreated  between @startdate and @enddate)
  
   END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionsFinancials]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spGetAccessionsFinancials] 
	@Accession varchar(100)
AS
BEGIN

	SET NOCOUNT ON


	Select * from tblAccessionsFinancials
	where Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionsLatestICN]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetAccessionsLatestICN] 
	@Accession varchar(100)
AS
BEGIN

	SET NOCOUNT ON


	Select top 1 PayerClaimNumber from tblBillingTempRemitArchive
	where Accession = @Accession
	order by CheckDate desc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionsResultedTestValues]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionsResultedTestValues] 
@ID integer
AS
BEGIN

	
	SELECT rt.id, rt.ResultTest , rt.Result , rt.NormalRange, rt.Units, rt.ResultComment, rt.Status ,  
		   rtp.CriticalLowLimit , rtp.CriticalHighLimit 
		   FROM dbo.tblResultedTests  rt (NOLOCK)
		   LEFT JOIN dbo.tblResultedTestsParams rtp (NOLOCK)
		   ON rt.ResultTest = rtp.ResultedTest
		
		WHERE rt.id = @ID
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionToReview]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionToReview]    
 @QSSLastUpdatedByID varchar(20) = NULL,    
 @Client varchar(50)= NULL,     
 @StartDate datetime ,    
 @EndDate datetime,
 @Global bit = 0
AS    
      
     
BEGIN     
 IF @QSSLastUpdatedByID = 'ALL'     
  BEGIN    
  Select ra.Accession, p.ptLastName As LastName, p.ptFirstName As FirstName, c.ClientCode as ClientCode,  c.ClientName as ClientName, ra.QSSLastUpdatedByID, 
	'Status' = CASE    
        WHEN EXISTS (SELECT rt.Status     
        FROM dbo.tblResultedTests rt (nolock)    
           WHERE rt.Accession = a.Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold')) THEN 'Preliminary'    
		ELSE 'Final'    
	END,
	--'Approved' = CASE
	--	WHEN EXISTS (Select rt.ApprovedDate
	--	FROM dbo.tblResultedTests rt (nolock)    
 --          WHERE rt.Accession = a.Accession  and  (rt.ApprovedDate is NULL or rt.ApprovedDate = '')) THEN 'Unapproved'
	--	ELSE 'Approved'
	--END,
	'Review' = CASE  
		WHEN EXISTS(select Accession from tblPathologyCases pc where pc.Accession=ra.Accession) THEN 'CHECK'  
		else 'N/A'  
	end  
  , a.PreAccession, ph.PhysicianCode, ph.FullName as PhysicianName, a.CollectionDate, p.ptDateOfBirth as DOB, p.ptSex, c.Interface  ,a.ProblemSpec,  
  ra.ReleaseFail, isnull(ra.ReleaseFailCounter, 0) as ReleaseFailCounter
      
      
  from dbo.tblReviewAccession ra (nolock)    
  inner join tblAccessions a (nolock)    
  on ra.Accession=a.Accession    
  inner join tblPatient p (nolock)    
  on a.PatientID = p.PatientId    
  inner join tblClients c     
  on a.ClientCode = c.ClientCode    
      
  inner join tblPhysicians ph    
  on a.PhysicianCode  = ph.PhysicianCode    
      
  --where ra.QSSLastUpdatedByID  = ISNULL(@QSSLastUpdatedByID, ra.QSSLastUpdatedByID)    
  WHERE a.ClientCode LIKE ISNULL(@Client, a.ClientCode) and (a.ReceiveDate between @startdate and @enddate) 
  --PA 9/17/2020 if running from global.asax then omit accessions that have already been released as final from the selection
  and (@Global = 0 or ra.Accession not in (select Accession from tblReleasedForReview where Status = 'Final'))
  --PA 9/18/2020 if running from global.asax then omit accessions that have failed and have been retried 3 times; should be released manually
  and (@Global = 0  or ra.ReleaseFail = 0  or isnull(ra.ReleaseFailCounter, 0) < 3)
      
  ORDER BY ra.Accession    
 END    
ELSE    
 BEGIN    
  Select ra.Accession, p.ptLastName As LastName, p.ptFirstName As FirstName, c.ClientCode as ClientCode,  c.ClientName as ClientName, ra.QSSLastUpdatedByID,  
	'Status' = CASE    
        WHEN EXISTS (SELECT rt.Status     
        FROM dbo.tblResultedTests rt (nolock)    
           WHERE rt.Accession = a.Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold')) THEN 'Preliminary'    
		ELSE 'Final'    
	END,
	--'Approved' = CASE
	--	WHEN EXISTS (Select rt.ApprovedDate
	--	FROM dbo.tblResultedTests rt (nolock)    
 --          WHERE rt.Accession = a.Accession  and  (rt.ApprovedDate is NULL or rt.ApprovedDate = '')) THEN 'Unapproved'
	--	ELSE 'Approved'
	--END,
	'Review' = CASE  
		WHEN EXISTS(select Accession from tblPathologyCases pc where pc.Accession=ra.Accession) THEN 'CHECK'  
		else 'N/A'  
	end  
  , a.PreAccession, ph.PhysicianCode, ph.FullName as PhysicianName, a.CollectionDate, p.ptDateOfBirth as DOB, p.ptSex, c.Interface,a.ProblemSpec,  
  ra.ReleaseFail, ra.ReleaseFailCounter     
      
      
  from dbo.tblReviewAccession ra (nolock)    
  inner join tblAccessions a (nolock)    
  on ra.Accession=a.Accession    
  inner join tblPatient p (nolock)    
  on a.PatientID = p.PatientId    
  inner join tblClients c     
  on a.ClientCode = c.ClientCode    
      
  inner join tblPhysicians ph    
  on a.PhysicianCode  = ph.PhysicianCode    
      
  WHERE ra.QSSLastUpdatedByID  = ISNULL(@QSSLastUpdatedByID, ra.QSSLastUpdatedByID) AND a.ClientCode  LIKE ISNULL(@Client, a.ClientCode) and (a.ReceiveDate between @startdate and @enddate)      
  ORDER BY ra.Accession    
 END    
  END 

GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionToReviewByAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionToReviewByAccession]
	@Accession varchar(50),
	@AutoRelease bit = 0
AS
  
if @AutoRelease = 0
  BEGIN
		Select ra.Accession, p.ptLastName As LastName, p.ptFirstName As FirstName, c.ClientCode as ClientCode,  c.ClientName as ClientName, ra.QSSLastUpdatedByID, 
		
			'Status' = CASE
				        WHEN EXISTS (SELECT rt.Status 
							 FROM dbo.tblResultedTests rt (nolock)
						     WHERE rt.Accession = a.Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold')) THEN 'Pending'
						 ELSE 'Final'
	            END
		
		, a.PreAccession, ph.PhysicianCode, ph.FullName as PhysicianName, a.CollectionDate, p.ptDateOfBirth as DOB, p.ptSex, c.Interface,
		ra.ReleaseFail
		
		from dbo.tblReviewAccession ra (nolock)
		inner join tblAccessions a (nolock)
		on ra.Accession=a.Accession
		inner join tblPatient p (nolock)
		on a.PatientID = p.PatientId
		inner join tblClients c 
		on a.ClientCode = c.ClientCode
		
		inner join tblPhysicians ph
		on a.PhysicianCode  = ph.PhysicianCode
		
		where a.accession = @Accession
END
ELSE BEGIN
	Select a.Accession, p.ptLastName As LastName, p.ptFirstName As FirstName, c.ClientCode as ClientCode,  c.ClientName as ClientName, '' as QSSLastUpdatedByID, 
		'Status' = CASE
				    WHEN EXISTS (SELECT rt.Status 
							FROM dbo.tblResultedTests rt (nolock)
						    WHERE rt.Accession = a.Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold')) THEN 'Pending'
						ELSE 'Final'
	        END
	, a.PreAccession, ph.PhysicianCode, ph.FullName as PhysicianName, a.CollectionDate, p.ptDateOfBirth as DOB, p.ptSex, c.Interface, 
	'False' as ReleaseFail
	from dbo.tblAccessions a (nolock)
	inner join tblPatient p (nolock)
	on a.PatientID = p.PatientId
	inner join tblClients c 
	on a.ClientCode = c.ClientCode
	inner join tblPhysicians ph
	on a.PhysicianCode  = ph.PhysicianCode
	where a.accession = @Accession
	END

GO
/****** Object:  StoredProcedure [dbo].[spGetAccessionToReviewUsers]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAccessionToReviewUsers]
	

AS
  
 
  BEGIN 
  SELECT 'ALL' As QSSLastUpdatedByID
  UNION
  SELECT DISTINCT QSSLastUpdatedByID from dbo.tblReviewAccession(nolock)
  ORDER BY QSSLastUpdatedByID
  END
GO
/****** Object:  StoredProcedure [dbo].[spGetAdditionalDataForPrinting]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAdditionalDataForPrinting]  
	@LabCode varchar(20),
	@ClientCode varchar(20),	
	@PatientId as varchar(20) ,
	@PhysicianCode varchar(20)
AS  
BEGIN  
 --Get Client Info
SELECT ClientCode, ClientName, Address, City, State, Zip, Telephone
	FROM tblClients with (NOLOCK)
	WHERE ClientCode = @ClientCode
		
--Get Physician Info		
SELECT LastName + ',' + FirstName  as PhysicianName
	FROM tblPhysicians with (NOLOCK)
	WHERE 
		PhysicianCode = @PhysicianCode
		
--Get Patient Info		
SELECT a.PatientId, a.ptLastName as LastName, a.ptFirstName as FirstName, a.ptDateOfBirth as DateOfBirth  , a.ptAddress1 as Address1, a.ptAddress2 as Address2, 
        a.ptCity as City, 
		a.ptState as State, a.ptZip as Zip, a.ptSex as Sex, a.PTContactHomePhone as Telephone
		FROM dbo.tblPatient a with (NOLOCK)		
		where  a.PatientId = @PatientId
   
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAllCPTScaleMaint]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAllCPTScaleMaint]

	@InsuranceType varchar(50)

AS
  
 
BEGIN 

Select InsuranceType + CPTCode + ConvertToCode as id, InsuranceType, CPTCode, MaxUnits, ConvertToCode, [Description], 
	MaxUnitsSent, Amount, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate

from tblCPTScaleMaintance 
where InsuranceType = @InsuranceType
order by CPTCode, MaxUnits


END
GO
/****** Object:  StoredProcedure [dbo].[spGetAllCytologySourceList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE procedure [dbo].[spGetAllCytologySourceList]      
@caseno  varchar(50)      
as      
begin      
      
select s.SourceID,CaseNumber,Source,h.HeadingCode,th.Heading as header ,Result   from tblCytologySources as s inner join         
   tblCytoHeadersForSource as h on  s.SourceID =h.SourceID Left join tblHeadings th on h.HeadingCode=th.HeadingCode   where CaseNumber=@caseno      
      
end     
GO
/****** Object:  StoredProcedure [dbo].[spGetAllPathologySourceList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spGetAllPathologySourceList]    
@caseno  varchar(50)    
as    
begin    
    
select s.SourceID,CaseNumber,Source,h.HeadingCode,th.Heading as header ,Result,s.Cassettes   from tblPathologySources as s inner join       
   tblHeadersForSource as h on  s.SourceID =h.SourceID Left join tblHeadings th on h.HeadingCode=th.HeadingCode   where CaseNumber=@caseno    
    
end 
GO
/****** Object:  StoredProcedure [dbo].[spGetAllPendingAccessionsforExport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetAllPendingAccessionsforExport] 	

AS
BEGIN
	
	SET NOCOUNT ON;

    SELECT     ptFirstName + ' ' + ptLastName AS Name, Accession, EntryDate, Acc.ClientCode
    FROM         tblAccessions as Acc INNER JOIN
                          tblPatient as Pat ON Acc.PatientID = Pat.PatientId

    where  Acc.Accession in (

	SELECT     Distinct(tblResultedTests.Accession)

	FROM         tblResultedTests INNER JOIN
						  tblInstrumentElements ON tblResultedTests.ResultTest = tblInstrumentElements.ResultTest
	WHERE     (tblResultedTests.Status = 'Pending'))
	
	Order by Accession asc
		
	

end
GO
/****** Object:  StoredProcedure [dbo].[spGetAllPrfTestsforOrderedTest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
CREATE PROCEDURE [dbo].[spGetAllPrfTestsforOrderedTest] 
      @OrderedTestCode varchar(20)
AS
BEGIN
	
SET NOCOUNT ON;

DECLARE   @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @FieldList varchar(2000)
		, @PTestsList varchar(500)
		, @iPos smallint

if object_id('tempdb..#PrfTests') is not null

	drop table #PrfTests
	
create table #PrfTests
( 
	 pTestCode varchar(20),
	 iPos smallint   
)  

Set @PTestsList = (SELECT PerformedTestCode FROM dbo.tblOrderedTestsDefinitions WHERE OrderedTest = @OrderedTestCode)

IF @PTestsList IS NULL OR @PTestsList =''
	BEGIN
	    SELECT OrderedTest,[Description],ActiveFlag ,InSearchFlag ,'' as pTestCode , '' as ExternalDescription,
			ReportFlag, '', '' as MailoutFlag, '' as MailoutLab, UTI
	    FROM dbo.tblOrderedTestsDefinitions
	    WHERE OrderedTest = @OrderedTestCode
		--SELECT ClientCode, ClientName FROM dbo.tblClients 
	END
	
ELSE

	BEGIN
		Set @FieldList =''
		Set @FieldList = @PTestsList + '|'
		Set @StartPos = 1
		Set @EndPos = 1
		Set @iPos = 1
		 -- Start the looping operation
		While @EndPos > 0
		   Begin
			  Set @EndPos = CharIndex('|', @FieldList, @StartPos)
			  If @EndPos > 0
				 Begin
					Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
					-- Add current row to TempTable
					Insert #PrfTests (pTestCode, iPos) Values (@CurVal, @iPos)
					Set @StartPos = @EndPos + 1
					Set @iPos = @iPos + 1
				 End
		   End

		  
		  SELECT o.OrderedTest,o.[Description],o.ActiveFlag ,o.InSearchFlag ,cl.pTestCode, c.ExternalDescription, o.InstrumentCode,
			o.ReportFlag, cl.iPos, c.PerformedTest, isnull(c.MailoutFlag, '') as MailoutFlag, isnull(c.MailoutLab, '') as MailoutLab, UTI, o.iDocAvailable, o.LastSyncDate, o.NeedsSync
		  
		  from  #PrfTests cl
		  
		  INNER JOIN tblPerformedTestsDefinitions c
		  ON cl.pTestCode = c.PerformedTest
		  
		  INNER JOIN tblOrderedTestsDefinitions o
		  ON o.OrderedTest = @OrderedTestCode
		
	  END
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAllPrfTestsforOrderedTestForReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
      
      
CREATE PROCEDURE [dbo].[spGetAllPrfTestsforOrderedTestForReport]       
      @OrderedTestCode varchar(20)      
AS      
BEGIN      
       
SET NOCOUNT ON;      
      
DECLARE   @StartPos smallint      
  , @EndPos smallint      
  , @CurVal varchar(20)      
  , @FieldList varchar(2000)      
  , @PTestsList varchar(500)      
  , @iPos smallint      
      
if object_id('tempdb..#PrfTests') is not null      
      
 drop table #PrfTests      
       
create table #PrfTests      
(       
  pTestCode varchar(20),      
  iPos smallint         
)        
      
Set @PTestsList = (SELECT PerformedTestCode FROM dbo.tblOrderedTestsDefinitions WHERE OrderedTest = @OrderedTestCode)      
      
IF @PTestsList IS NULL OR @PTestsList =''      
 BEGIN      
     SELECT OrderedTest,[Description],ActiveFlag ,InSearchFlag ,'' as pTestCode , '' as ExternalDescription,      
   ReportFlag, ''      
     FROM dbo.tblOrderedTestsDefinitions      
     WHERE OrderedTest = @OrderedTestCode      
  --SELECT ClientCode, ClientName FROM dbo.tblClients       
 END      
       
ELSE      
      
 BEGIN      
  Set @FieldList =''      
  Set @FieldList = @PTestsList + '|'      
  Set @StartPos = 1      
  Set @EndPos = 1      
  Set @iPos = 1      
   -- Start the looping operation      
  While @EndPos > 0      
     Begin      
     Set @EndPos = CharIndex('|', @FieldList, @StartPos)      
     If @EndPos > 0      
     Begin      
     Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))      
     -- Add current row to TempTable      
     Insert #PrfTests (pTestCode, iPos) Values (@CurVal, @iPos)      
     Set @StartPos = @EndPos + 1      
     Set @iPos = @iPos + 1      
     End      
     End      
      
          
    SELECT o.OrderedTest,o.[Description],o.ActiveFlag ,o.InSearchFlag ,cl.pTestCode, c.ExternalDescription,      
   o.ReportFlag, cl.iPos , c.ResultTestCode ,upper(c.category),c.categoryreportOrder      
          
    from  #PrfTests cl      
          
    INNER JOIN tblPerformedTestsDefinitions c      
    ON cl.pTestCode = c.PerformedTest      
          
    INNER JOIN tblOrderedTestsDefinitions o      
    ON o.OrderedTest = @OrderedTestCode      
        
   END      
END      
GO
/****** Object:  StoredProcedure [dbo].[spGetAllReportFormats]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetAllReportFormats] 

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT * from tblClientReportOptions
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAllResTestsforPerfTest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAllResTestsforPerfTest]           
      @PerformedTestCode varchar(20)            
AS            
BEGIN            
             
SET NOCOUNT ON;            
            
DECLARE   @StartPos smallint            
  , @EndPos smallint            
  , @CurVal varchar(20)            
  , @FieldList varchar(2000)            
  , @rTestsList varchar(Max)            
            
if object_id('tempdb..#PrfTests') is not null            
            
 drop table #PrfTests            
             
create table #PrfTests            
(             
  rTestCode varchar(20)               
)              
            
Set @rTestsList = (SELECT ResultTestCode FROM dbo.tblPerformedTestsDefinitions            
 WHERE PerformedTest = @PerformedTestCode)            
            
IF @rTestsList IS NULL OR @rTestsList =''            
 BEGIN            
     SELECT PerformedTest, InternalDescription,            
            ExternalDescription, PerformedBy,             
            '' as rTestCode , '' as ExternalName,                       
            MailoutFlag, RequiredSpeciments,            
            RequiredVolume,  Preservative, ShippingTemp,             
            Instructions, Turnaround, AdditionalInfoScreen,            
            AdditionalInfoScreenTemplate, MicrobioFlag, InstrumentCode, MailoutLab ,  
            PathologyFlag,CytologyFlag,ProstateFlag,ToxicologyFlag ,Category ,CategoryReportOrder ,PodiatryFlag       
                                   
     FROM dbo.tblPerformedTestsDefinitions            
     WHERE PerformedTest = @PerformedTestCode            
  --SELECT ClientCode, ClientName FROM dbo.tblClients             
 END            
             
ELSE            
            
 BEGIN            
  Set @FieldList =''            
  Set @FieldList = @rTestsList + '|'            
  Set @StartPos = 1            
  Set @EndPos = 1            
   -- Start the looping operation            
  While @EndPos > 0            
     Begin            
     Set @EndPos = CharIndex('|', @FieldList, @StartPos)            
     If @EndPos > 0            
     Begin            
     Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))            
     -- Add current row to TempTable            
     Insert #PrfTests (rTestCode) Values (@CurVal)            
     Set @StartPos = @EndPos + 1            
     End            
     End            
            
                
    SELECT PerformedTest, InternalDescription,            
           ExternalDescription, PerformedBy,             
           cl.rTestCode , c.ExternalName,                        
              MailoutFlag, RequiredSpeciments,            
              RequiredVolume,  Preservative, ShippingTemp,             
              Instructions, Turnaround, AdditionalInfoScreen,            
              AdditionalInfoScreenTemplate, MicrobioFlag, InstrumentCode, MailoutLab ,  
              PathologyFlag,CytologyFlag,ProstateFlag,ToxicologyFlag ,Category,CategoryReportOrder ,PodiatryFlag        
                    
                
                  
    from  #PrfTests cl            
                
    INNER JOIN tblResultedTestsDefinitions c            
    ON cl.rTestCode = c.TestCode            
                
    INNER JOIN tblPerformedTestsDefinitions o            
    ON o.PerformedTest = @PerformedTestCode            
                
    INNER JOIN  tblResultCodeVersions ON cl.rTestCode = tblResultCodeVersions.TestCode AND c.Version = tblResultCodeVersions.CurrentVersion            
              
   END            
END             
          
          
GO
/****** Object:  StoredProcedure [dbo].[spGetAllWorksheets]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAllWorksheets] 
AS
BEGIN

	SELECT '' as WKCode , '' as Description, 'Select...' as WorksheetIdName
	UNION
	SELECT 'All' as WKCode , '' as Description, 'ALL' as WorksheetIdName
	UNION
	SELECT WKCode,  Description, WKCode + ' - (' + Description + ')' as WorksheetIdName
		FROM dbo.tblWorkSheetsDefinitions (NOLOCK)
		
		order by  WKCode asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAlphaDecodeFlag]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetAlphaDecodeFlag]
                @TestCode varchar(100),
                @Result varchar(100)
AS
BEGIN
SELECT     CASE WHEN EXISTS
                          (SELECT     Flag
                            FROM          tblResultedTestDecodes rt1(nolock)
                            WHERE      rt1.TestCode = @TestCode AND rt1.Flag <> '' AND rt1.decode = @Result)  THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END AS 'AlphaDecodeFlag'
END

GO
/****** Object:  StoredProcedure [dbo].[spGetAlphaPositive]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spGetAlphaPositive]       
       
 @Code varchar(100)      
AS      
BEGIN      
 SET NOCOUNT ON;      
      
 SELECT Decode      
 FROM tblResultedTestDecodes with (NOLOCK)      
 WHERE TestCode = @Code      
 and Flag<>''      
        
        
  end
GO
/****** Object:  StoredProcedure [dbo].[spGetAntibiotics]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetAntibiotics] 

AS
BEGIN
	
	SET NOCOUNT ON;
	Select ROW_NUMBER() OVER (ORDER BY Description) AS ID, Description FROM (
	Select  Description from tblAntibiotics 
	Union
	Select  Distinct(AntibioticName) as Description from  tblMicroTestAntibiotics where AntibioticName <> '') A


                      
END


GO
/****** Object:  StoredProcedure [dbo].[spGetAnyPaymentPosted]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================

CREATE PROCEDURE [dbo].[spGetAnyPaymentPosted]
	@Accession varchar(100),
	@BTcode varchar(100)

AS
BEGIN

	SELECT CPTcode from tblPayment where accession = @Accession and BTcode = @BTcode and (PaymentAmt <> 0.00 or AdjustmentAmt <> 0.00)
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetARUpdateDate]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
create PROCEDURE [dbo].[spGetARUpdateDate]    
    
As    
BEGIN    
                                    
                                SELECT UpdateDate    
                                FROM tblAR_UpdatedDate     
END    
    
    
    
    
GO
/****** Object:  StoredProcedure [dbo].[spGetAuditAccessionData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		HF
-- Create date: 08/11/2013
-- Description:	Gets all the accession data for an Accession
-- =============================================
CREATE PROCEDURE [dbo].[spGetAuditAccessionData]
	@Accession as varchar(100)
	
AS
BEGIN
	select 
	a.Accession ,
	a.PatientID ,
	a.PreAccession ,
	a.ClientCode ,
	a.PhysicianCode ,
	a.CollectionDate ,
	a.OrderDate ,
	a.ReceiveDate ,
	a.DateCreated ,
	a.FinalReportDate ,
	a.OrderType,
	a.OrderedTests,
	a.MedicationsDataXML ,
	a.DiagnosisDataXML ,
	a.SpecimenDataXML ,
	a.PrimaryInsuranceID ,
	a.PrimaryPatRelationtoIns ,
	a.PrimaryInsuredID ,
	a.SecondaryInsuranceID ,
	a.SecondaryPatRelationtoIns ,
	a.SecondaryInsuredID ,
	a.TertiaryInsuranceID ,
	a.TertiaryPatRelationtoIns ,
	a.TertiaryInsuredID ,
	a.PatientStatus ,
	a.ConditionRelatedTo ,
	a.AdjusterName ,
	a.EmployerName ,
	a.School ,
	a.SymptomAccidentDate ,
	a.SimilarSameDate ,
	a.InternalComment ,
	a.ReportComment ,
	a.ProblemSpec ,
	a.CurrentBillType ,
	a.CurrentBillTo ,
	a.BillingMessage ,
	a.ManualSuspension ,
	a.SiteID ,
	a.QSSCreatedByID as UserID,
	a.QSSCreatedDate ,
	a.AuditType, 
	p.ptLastName + ', ' + p.ptFirstName as PatientName,
	p.ptDateOfBirth as DOB
	FROM tblAuditAccessions a
	left join tblPatient p (nolock)
	on a.PatientID = p.PatientId
	WHERE Accession = @Accession
	order by a.QSSCreatedDate
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAuditDetails]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spGetAuditDetails] 
@Accession varchar (50),
@NoteType varchar (10)
AS
BEGIN
	
	SET NOCOUNT ON;
IF @NoteType = 'Bill' OR @NoteType = 'PostCash'
begin
	SELECT [Date], WebuserID, Note, NoteType
	FROM dbo.tblBillAudit (nolock)
	WHERE Accession = @Accession
	--AND NoteType = @NoteType
	ORDER BY [Date] desc
end
else
begin
	SELECT [Date], WebuserID, Note, NoteType
	FROM dbo.tblLabAudit (nolock)
	WHERE Accession = @Accession
	--AND NoteType = @NoteType
	ORDER BY [Date] desc
end

	
END




GO
/****** Object:  StoredProcedure [dbo].[spGetAutoReleaseAll]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Paul Antompietri
-- Create date: 3/20/2019
-- Description:	Get all rows in tblAutoRelease
-- =============================================
CREATE PROCEDURE [dbo].[spGetAutoReleaseAll] 
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Get all rows that are more than one minute old
	SELECT Accession, '' as SelectedFlag from tblAutoRelease 
	where datediff(mi, QSSCreatedDate, getdate()) > 0
	group by Accession
END

GO
/****** Object:  StoredProcedure [dbo].[spGetAutoReleaseQueueCount]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetAutoReleaseQueueCount]
	@ReturnCode int output
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	

    -- Insert statements for procedure here
	Select @ReturnCode = count(*) from tblAutoRelease
END
GO
/****** Object:  StoredProcedure [dbo].[spGetBillCycles]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetBillCycles]

		
AS
BEGIN

	SELECT a.BTCode, a.BillCycle 
	FROM dbo.tblBillTypeDefinitions a (NOLOCK)	
	
	ORDER BY a.BTcode asc
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetBillers]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create PROCEDURE [dbo].[spGetBillers]
As
BEGIN

	SELECT Distinct UserID as  BillerCode, UserName + ' ' + UserLastName as UserFullName
	
	FROM tblUsersID 
	where isCollector = 'True' or isCollector = 1
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetBillingEntryAuditData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		IMZ
-- Create date: 02/05/2014
-- Description:	Gets all the Result Entry Audit data
-- =============================================
create PROCEDURE [dbo].[spGetBillingEntryAuditData]
	@Accession as varchar(100)
	
AS
BEGIN
	select 
	abe.Accession ,
	abe.ResultTest  as TestCode,
	rtd.ExternalName as TestName,
	abe.Result,
	abe.ResultComment, 
	abe.Status,
	abe.QSSLastUpdateID,
	abe.QSSUpdateDate,
	p.ptLastName + ', ' + p.ptFirstName as PatientName,
	p.ptDateOfBirth as DOB
	FROM tblAuditBillingEntry abe
	left join tblAccessions a (nolock)
	on a.Accession = abe.Accession
	left join tblResultedTestsDefinitions rtd (nolock)
	on abe.ResultTest = rtd.TestCode
	left join tblPatient p (nolock)
	on a.PatientID = p.PatientId
	WHERE abe.Accession = @Accession
	order by a.QSSCreatedDate
END
GO
/****** Object:  StoredProcedure [dbo].[spGetBillingEntryOrderData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetBillingEntryOrderData]	
	@Accession varchar(50)
AS
BEGIN
	DECLARE @InsuredAccession varchar(50)
	
	SET @InsuredAccession = @Accession + '%'
	select acc.Accession, acc.ClientCode , acc.PatientID,  acc.PhysicianCode,  acc.ReceiveDate , acc.CollectionDate,  acc.OrderType , acc.ProblemSpec, acc.PrimaryInsuranceID , acc.PreAccession ,  
	acc.CurrentBillType, acc.CurrentBillTo, acc.BillingMessage,
	acc.InternalComment, acc.PatientStatus, acc.SpecimenDataXML , acc.DiagnosisDataXML , acc.MedicationsDataXML , acc.QSSCreatedByID , acc.QSSCreatedDate, acc.QSSLastUpdateID, acc.QSSUpdateDate, acc.QSSVersion,
	pat.ptAddress1 , pat.ptAddress2, pat.ptCity, pat.ptState, pat.ptZip,
	pat.ptFirstName , pat.ptLastName , pat.ptMiddleName, pat.ptSSN, pat.ptSex, pat.ptDateOfBirth,
	pat.btAddress1 , pat.btAddress2, pat.btCity, pat.btState, pat.btZip,
	pat.btFirstName , pat.btLastName , pat.btMiddleName, 
	--pat.btSSN, pat.btSex, pat.btDateOfBirth,
	acc.PrimaryInsuranceID, acc.PrimaryInsuredID, acc.PrimaryPatRelationtoIns,
	acc.SecondaryInsuranceID, acc.SecondaryInsuredID, acc.SecondaryPatRelationtoIns,
	acc.TertiaryInsuranceID, acc.TertiaryInsuredID, acc.TertiaryPatRelationtoIns,
	pat.PTContactCellPhone, pat.PTContactHomePhone, pat.PTContactWorkPhone,	pat.PTContactEmail, pat.PTContactFax,
	pat.BTContactCellPhone, pat.BTContactHomePhone, pat.BTContactWorkPhone,	pat.BTContactEmail, pat.BTContactFax, pat.QSSVersion As PatientVersion ,
	c.ClientName , p.FullName, p.NPI , i.Name as InsuranceName
	from dbo.tblAccessions  acc (nolock) 
	INNER JOIN dbo.tblPatient pat(nolock)
	ON acc.PatientID = pat.PatientId
	INNER JOIN dbo.tblClients c (nolock)
	ON acc.ClientCode = c.ClientCode
	LEFT JOIN dbo.tblPhysicians p (nolock)
	ON acc.PhysicianCode = p.PhysicianCode
	LEFT JOIN dbo.tblInsuranceCompanies i (nolock)
	ON acc.PrimaryInsuranceID = i.InsuranceCode
	where Accession = @Accession
	
	select InsuredID, [Plan] , Policy, [Group], Copay,  Employer ,
		FirstName ,	MiddleName ,	LastName ,		Address1 ,	Address2 ,	City ,	[State] ,	Zip ,
		HomePhone ,	WorkPhone ,	CellPhone,	Email ,	Fax ,	DateOfBirth ,	Sex ,	SSN 
	from dbo.tblInsuredInfo (nolock)  
	where InsuredID like @InsuredAccession 
END
GO
/****** Object:  StoredProcedure [dbo].[spGetBillingEntryOrderData2]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetBillingEntryOrderData2]    
       @Accession varchar(50)
AS
BEGIN
       DECLARE @PatID varchar(50)
       DECLARE @PriInsuredID varchar(50)
       DECLARE @SecInsuredID varchar(50)


       
       IF EXISTS( SELECT Accession from tblBillAccessions WHERE  Accession = @Accession)
       BEGIN

              
              SET @PatID = (select PatientID from tblBillAccessions where Accession = @Accession)
       
              select acc.Accession, acc.ClientCode , acc.PatientID,  acc.PhysicianCode,  acc.ReceiveDate , acc.CollectionDate, isnull(SymptomAccidentDate, '') as SymptomAccidentDate,  acc.OrderType , acc.ProblemSpec, pat.PrimaryInsuranceID , '' as PreAccession ,  
              acc.CurrentBillType, acc.CurrentBillTo, acc.BillingMessage,
              acc.InternalComment, '' as PatientStatus, acc.SpecimenDataXML , acc.DiagnosisDataXML , acc.MedicationsDataXML , 
              isnull(acc.ManualSuspension, 0) as ManualSuspension, case when (isnull(acc.ManualSuspension, 0) = 1) then mi.Reason else '' end as reason, 
              acc.QSSCreatedByID, acc.QSSCreatedDate, acc.QSSLastUpdateID, acc.QSSUpdateDate, 0 as QSSVersion,
              pat.ptAddress1 , pat.ptAddress2, pat.ptCity, pat.ptState, pat.ptZip,
              pat.ptFirstName , pat.ptLastName , pat.ptMiddleName, pat.ptSSN, pat.ptSex, pat.ptDateOfBirth,
              
              COALESCE(aii.PrimaryInsuranceID, pat.PrimaryInsuranceID) as PrimaryInsuranceID, COALESCE(aii.PrimaryPatRelationtoIns, pat.PrimaryPatRelationtoIns) as PrimaryPatRelationtoIns, 
              COALESCE(aii.SecondaryInsuranceID, pat.SecondaryInsuranceID) as SecondaryInsuranceID, COALESCE(aii.SecondaryPatRelationtoIns, pat.SecondaryPatRelationtoIns) as SecondaryPatRelationtoIns, 
              --pat.PrimaryInsuranceID,  pat.PrimaryPatRelationtoIns,
              --pat.SecondaryInsuranceID, pat.SecondaryPatRelationtoIns,
              
              pat.TertiaryInsuranceID, pat.TertiaryPatRelationtoIns,
              pat.PTContactCellPhone, pat.PTContactHomePhone, pat.PTContactWorkPhone,       pat.PTContactEmail, pat.PTContactFax, 
              pat.QSSVersion As PatientVersion ,
              c.ClientName , p.FullName, p.NPI , acc.ClientBillAccession, bt.ClaimCode, isnull(acc.InjuryType, '') as InjuryType
              , pat.AutoRelatedInjuryDate, pat.WorkRelatedInjuryDate, ISNULL(acc.AccessionStatus, '') as AccessionStatus
			  , ISNULL(acc.CorrectedClaim, '') as CorrectedClaim, ISNULL(acc.CorrectedClaimReferenceNumber, '') as CorrectedClaimReferenceNumber
              from dbo.tblBillAccessions  acc (nolock) 
              INNER JOIN dbo.tblPatient pat(nolock)
              ON acc.PatientID = pat.PatientId
              INNER JOIN dbo.tblClients c (nolock)
              ON acc.ClientCode = c.ClientCode
              LEFT JOIN dbo.tblPhysicians p (nolock)
              ON acc.PhysicianCode = p.PhysicianCode
              left outer join tblAccessionInsuranceInfo aii (nolock)
              on aii.Accession = acc.Accession
              left join tblBillTypeDefinitions bt
              on bt.BTCode = acc.CurrentBillType
              left join tblMissingInformation mi 
              on mi.Accession = acc.Accession
              where acc.Accession = @Accession
              
              
       
       End 
       
       ELSE
       BEGIN
       
       
              SET @PatID = (select PatientID from tblAccessions where Accession = @Accession)

       
              select acc.Accession, acc.ClientCode , acc.PatientID,  acc.PhysicianCode,  acc.ReceiveDate , acc.CollectionDate, acc.SymptomAccidentDate,  acc.OrderType , acc.ProblemSpec, pat.PrimaryInsuranceID , acc.PreAccession ,  
              Coalesce(nullif(acc.CurrentBillType, ''), i.BillType) as CurrentBillType, acc.CurrentBillTo, acc.BillingMessage,
              acc.InternalComment, acc.PatientStatus, acc.SpecimenDataXML , acc.DiagnosisDataXML , acc.MedicationsDataXML , 
              0 as ManualSuspension, '' as reason, acc.QSSCreatedByID , acc.QSSCreatedDate, acc.QSSLastUpdateID, acc.QSSUpdateDate, acc.QSSVersion,
              pat.ptAddress1 , pat.ptAddress2, pat.ptCity, pat.ptState, pat.ptZip,
              pat.ptFirstName , pat.ptLastName , pat.ptMiddleName, pat.ptSSN, pat.ptSex, pat.ptDateOfBirth,
              --pat.btAddress1 , pat.btAddress2, pat.btCity, pat.btState, pat.btZip,
              --pat.btFirstName , pat.btLastName , pat.btMiddleName, 
              --pat.btSSN, pat.btSex, pat.btDateOfBirth,
              COALESCE(aii.PrimaryInsuranceID, pat.PrimaryInsuranceID) as PrimaryInsuranceID, COALESCE(aii.PrimaryPatRelationtoIns, pat.PrimaryPatRelationtoIns) as PrimaryPatRelationtoIns, 
              COALESCE(aii.SecondaryInsuranceID, pat.SecondaryInsuranceID) as SecondaryInsuranceID, COALESCE(aii.SecondaryPatRelationtoIns, pat.SecondaryPatRelationtoIns) as SecondaryPatRelationtoIns, 
              
              --pat.PrimaryInsuranceID,  pat.PrimaryPatRelationtoIns,
              ----acc.PrimaryInsuredID,
              --pat.SecondaryInsuranceID, pat.SecondaryPatRelationtoIns,
              ----acc.SecondaryInsuredID, 
              pat.TertiaryInsuranceID, pat.TertiaryPatRelationtoIns,
              --acc.TertiaryInsuredID, 
              pat.PTContactCellPhone, pat.PTContactHomePhone, pat.PTContactWorkPhone,       pat.PTContactEmail, pat.PTContactFax,
              --pat.BTContactCellPhone, pat.BTContactHomePhone, pat.BTContactWorkPhone,       pat.BTContactEmail, pat.BTContactFax, 
              pat.QSSVersion As PatientVersion ,
              c.ClientName , p.FullName, p.NPI, '' as ClientBillAccession, bt.ClaimCode, '' as InjuryType
              , pat.AutoRelatedInjuryDate, pat.WorkRelatedInjuryDate, '' as AccessionStatus
			  , '' as CorrectedClaim, '' as CorrectedClaimReferenceNumber
              --, i.Name as InsuranceName
              from dbo.tblAccessions  acc (nolock) 
              INNER JOIN dbo.tblPatient pat(nolock)
              ON acc.PatientID = pat.PatientId
              INNER JOIN dbo.tblClients c (nolock)
              ON acc.ClientCode = c.ClientCode
              LEFT JOIN dbo.tblPhysicians p (nolock)
              ON acc.PhysicianCode = p.PhysicianCode
              left outer join tblAccessionInsuranceInfo aii (nolock)
              on aii.Accession = acc.Accession
			  LEFT JOIN dbo.tblInsuranceCompanies i (nolock)
              ON i.InsuranceCode = Coalesce(aii.PrimaryInsuranceID, pat.PrimaryInsuranceID)
              left join tblBillTypeDefinitions bt
              on bt.BTCode = acc.CurrentBillType
              where acc.Accession = @Accession  
              
       END
       
       IF EXISTS( SELECT Accession from tblAccessionInsuranceInfo WHERE  Accession = @Accession)
       BEGIN
              --get information for primary insurance
              select '*' + @PatID + 'P' as PrimaryInsuredID, PrimaryPlan as [Plan] , PrimaryPolicy as Policy, PrimaryGroup as [Group], PrimaryCopay as Copay,  PrimaryEmployer as Employer,
              PrimaryInsuranceID as InsuranceID, 
                     PrimaryFirstName as FirstName ,   PrimaryMiddleName as MiddleName, PrimaryLastName as LastName, PrimaryAddress1 as Address1 ,    PrimaryAddress2 as Address2, PrimaryCity as City , 
                     PrimaryState as [State] ,  PrimaryZip as Zip ,
                     PrimaryHomePhone as HomePhone ,   PrimaryWorkPhone as WorkPhone ,       PrimaryCellPhone as CellPhone,    PrimaryEmail as Email ,    PrimaryFax as Fax ,       PrimaryDateOfBirth as DateOfBirth ,      
                     PrimarySex as Sex ,  PrimarySSN as SSN 
              from tblAccessionInsuranceInfo (nolock) 
              where Accession = @Accession
              
              --get information for secondary insurance
              select '*' + @PatID + 'P' as SecondaryInsuredID, SecondaryPlan as [Plan] , SecondaryPolicy as Policy, SecondaryGroup as [Group], SecondaryCopay as Copay,  SecondaryEmployer as Employer,
              SecondaryInsuranceID as InsuranceID, 
                     SecondaryFirstName as FirstName , SecondaryMiddleName as MiddleName, SecondaryLastName as LastName, SecondaryAddress1 as Address1 ,       SecondaryAddress2 as Address2, SecondaryCity as City , 
                     SecondaryState as [State] , SecondaryZip as Zip ,
                     SecondaryHomePhone as HomePhone , SecondaryWorkPhone as WorkPhone ,       SecondaryCellPhone as CellPhone,  SecondaryEmail as Email ,  SecondaryFax as Fax ,       SecondaryDateOfBirth as DateOfBirth ,    
                     SecondarySex as Sex ,      SecondarySSN as SSN 
              from tblAccessionInsuranceInfo (nolock) 
              where Accession = @Accession
       END
       ELSE
       BEGIN
              SET @PriInsuredID = '*' + @PatID + 'P'
              SET @SecInsuredID = '*' + @PatID + 'S'
              
              --get information for primary insurance
              select ii.InsuredID as PrimaryInsuredID, ii.[Plan] , ii.Policy, ii.[Group], ii.Copay,  ii.Employer ,
              ii.InsuranceID, 
                     ii.FirstName ,       ii.MiddleName ,      ii.LastName ,        ii.Address1 ,       ii.Address2 , ii.City ,     ii.[State] ,  ii.Zip ,
                     ii.HomePhone ,       ii.WorkPhone ,       ii.CellPhone, ii.Email ,    ii.Fax ,       ii.DateOfBirth ,     ii.Sex ,      ii.SSN 
              from dbo.tblInsuredInfo ii(nolock) 
              where InsuredID = @PriInsuredID 
              
              
              --get information for secondary insurance
              select ii.InsuredID as SecondaryInsuredID, ii.[Plan] , ii.Policy, ii.[Group], ii.Copay,  ii.Employer ,
              ii.InsuranceID, 
              --ic.Name as InsuranceName,
                     ii.FirstName ,       ii.MiddleName ,      ii.LastName ,        ii.Address1 ,       ii.Address2 , ii.City ,     ii.[State] ,  ii.Zip ,
                     ii.HomePhone ,       ii.WorkPhone ,       ii.CellPhone, ii.Email ,    ii.Fax ,       ii.DateOfBirth ,     ii.Sex ,      ii.SSN 
              from dbo.tblInsuredInfo ii(nolock) 
       --     INNER JOIN dbo.tblInsuranceCompanies ic (nolock)
       --     ON ic.InsuranceCode = ii.InsuranceID
              where InsuredID = @SecInsuredID 
       END
       
       select distinct NextBillDate from tblBill where accession = @Accession

              -- PA 5/3/2017 - get Work Related Injury Date and Auto Related Injury Date from tblInsuredInfo regardless
              --IMZ 2/15/2019 - this data is no longer relavent, the data is coming from tblPatient but this procedure is being called from several places, so I just left it here:
       SET @PriInsuredID = '*' + @PatID + 'P'
       SET @SecInsuredID = '*' + @PatID + 'S'

       select ii.WorkRelatedInjuryDate, ii.AutoRelatedInjuryDate
       from dbo.tblInsuredInfo ii(nolock) 
       where InsuredID = @PriInsuredID 
       
       select ii.WorkRelatedInjuryDate, ii.AutoRelatedInjuryDate
       from dbo.tblInsuredInfo ii(nolock) 
       where InsuredID = @SecInsuredID 

END


GO
/****** Object:  StoredProcedure [dbo].[spGetBillingEntryOrderData2AllDetails]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetBillingEntryOrderData2AllDetails]	
	@Accessions varchar(max)
AS
BEGIN



	CREATE TABLE #TempList
	(
		cID varchar(100)
	)

	DECLARE @cID varchar(100), @Pos int
	SET @Accessions = LTRIM(RTRIM(@Accessions))+ '|'
	SET @Pos = CHARINDEX('|', @Accessions, 1)
	IF REPLACE(@Accessions, '|', '') <> ''
	BEGIN
		WHILE @Pos > 0
		BEGIN
			SET @cID = LTRIM(RTRIM(LEFT(@Accessions, @Pos - 1)))
			IF @cID <> ''
			BEGIN
					INSERT INTO #TempList (cID) VALUES (@cID)
			END
			SET @Accessions = RIGHT(@Accessions, LEN(@Accessions) - @Pos)
			SET @Pos = CHARINDEX('|', @Accessions, 1)

		END
	END	
	
	
	


SELECT * INTO #TempTableName
FROM(

	select acc.Accession, acc.ClientCode , acc.PatientID,  acc.PhysicianCode,  acc.ReceiveDate , acc.CollectionDate, acc.SymptomAccidentDate,  acc.OrderType , acc.ProblemSpec,
	-- pat.PrimaryInsuranceID , 
	 acc.PreAccession ,  
	acc.CurrentBillType, acc.CurrentBillTo, acc.BillingMessage,
	acc.InternalComment, acc.PatientStatus,  acc.DiagnosisDataXML, acc.QSSCreatedByID , acc.QSSCreatedDate, acc.QSSLastUpdateID, acc.QSSUpdateDate, acc.QSSVersion,
	pat.ptAddress1 , pat.ptAddress2, pat.ptCity, pat.ptState, pat.ptZip,
	pat.ptFirstName , pat.ptLastName , pat.ptMiddleName, pat.ptSSN, pat.ptSex, pat.ptDateOfBirth,
		pat.PrimaryInsuranceID,  pat.PrimaryPatRelationtoIns,
	pat.SecondaryInsuranceID, pat.SecondaryPatRelationtoIns,
	pat.TertiaryInsuranceID, pat.TertiaryPatRelationtoIns,
	pat.PTContactCellPhone, pat.PTContactHomePhone, pat.PTContactWorkPhone,	pat.PTContactEmail, pat.PTContactFax,
	pat.QSSVersion As PatientVersion ,
	c.ClientName , p.FullName, p.NPI 
	
	, ii.InsuredID, ii.[Plan] , ii.Policy, ii.[Group], ii.Copay,  ii.Employer ,
	ii.InsuranceID, ii.FirstName ,	ii.MiddleName ,	ii.LastName ,		ii.Address1 ,	ii.Address2 ,	ii.City ,	ii.[State] ,	ii.Zip ,
		ii.HomePhone ,	ii.WorkPhone ,	ii.CellPhone,	ii.Email ,	ii.Fax ,	ii.DateOfBirth ,	ii.Sex ,	ii.SSN 
	, [dbo].[B_PaidAmount](acc.Accession) As PaidSum
	
	
	
	
	
	, ic.name as INSname, Isnull(ic.address, '') as INSaddress, Isnull(ic.address2, '') as INSaddress2, Isnull(ic.city, '') as INScity, 
	Isnull(ic.state, '') as INSstate, Isnull(ic.zip, '') 
	as INSzip, 
	Isnull(ic.Telephone, '') as INSTelephone
	
	
	, b.OrderedTestCode, b.FeeDescription, b.CPTCode, b.Units, isnull(b.Modifier, '') as Modifier, 
			isnull(b.Location, '') as Location, 
			Case When BillableFlag = 'True' then 'BILL'  else 'DO NOT BILL'  
			end  As Billable , 
			isnull(b.TotalFeeAmt, '0') as TotalFeeAmt,  b.BTCode, isnull(b.ICD9code, '') as ICD9code
	
	
	
	--,NextBillDate, HCFASubmission
	
	from dbo.tblAccessions  acc (nolock) 
	INNER JOIN dbo.tblPatient pat(nolock)
	ON acc.PatientID = pat.PatientId
	INNER JOIN dbo.tblClients c (nolock)
	ON acc.ClientCode = c.ClientCode
	INNER JOIN dbo.tblBill b (nolock)
	ON acc.Accession = b.accession
	LEFT JOIN dbo.tblPhysicians p (nolock)
	ON acc.PhysicianCode = p.PhysicianCode
	left outer join tblInsuredInfo  ii 
	ON ii.InsuredID = CASE WHEN acc.CurrentBillTo = 'Primary' or NULLIF ( acc.CurrentBillTo , '' ) is NULL THEN '*' + pat.PatientId + 'P' ELSE '*' + pat.PatientId + 'S' END 
	LEFT OUTER JOIN tblInsuranceCompanies ic 
	on ic.InsuranceCode = CASE WHEN acc.CurrentBillTo = 'Primary' or NULLIF ( acc.CurrentBillTo , '' ) is NULL  THEN pat.PrimaryInsuranceID ELSE pat.SecondaryInsuranceID END 
	inner join #TempList tmp
	on acc.accession=tmp.cID
	)AS x
	
	select * from #TempTableName
END
GO
/****** Object:  StoredProcedure [dbo].[spGetBillingInsuranceCPTCodeLookup]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spGetBillingInsuranceCPTCodeLookup] 	
	@InsuranceID varchar(100)--, 
	--@CPTCode varchar(100)
AS
BEGIN
	
	SET NOCOUNT ON;
	select * from tblBillingInsuranceCPTCodeLookup
	where InsuranceID = @InsuranceID-- and CPTCode = @CPTCode
    
end
GO
/****** Object:  StoredProcedure [dbo].[spGetBillingInsuranceCPTCodeLookupAll]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetBillingInsuranceCPTCodeLookupAll] 	
	
AS
BEGIN
	
	SET NOCOUNT ON;
	select bi.InsCPTCode as InsuranceCPT, InsCPTDescription, bi.CPTCode, bi.InsuranceID, ic.Name
	from tblBillingInsuranceCPTCodeLookup bi
	inner join tblInsuranceCompanies ic
	on ic.InsuranceCode = bi.InsuranceID
	order by ic.Name, bi.InsCPTCode
end








GO
/****** Object:  StoredProcedure [dbo].[spGetBillingInsuranceCPTCodeLookupByInsAndInsCPT]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetBillingInsuranceCPTCodeLookupByInsAndInsCPT] 	
	@InsuranceID varchar(100), 
	@InsCPTCode varchar(100)
AS
BEGIN
	
	SET NOCOUNT ON;
	select CPTCode, InsCPTDescription from tblBillingInsuranceCPTCodeLookup
	where InsuranceID = @InsuranceID and InsCPTCode = @InsCPTCode
    
end




GO
/****** Object:  StoredProcedure [dbo].[spGetBillingNotifications]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spGetBillingNotifications]
	
AS
BEGIN
	
			select * 
			from tblBillingNotifications with (nolock)
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetBillingOpenBatches]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetBillingOpenBatches]
	@Top as bit	= 0	
AS
BEGIN

if @Top <> 1 
begin
	select 
		distinct tblBillingECSBatchList.BatchID, 
		CONVERT(VARCHAR(10),DateCreated,101) as ProcessDate,
		CONVERT(VARCHAR(10),DateCreated,108) as ProcessTime,
		(select count(Accession) from tblBillingECSBatchDetails where BatchID = tblBillingECSBatchList.BatchID) NoOfPatients,
		(select sum(TotalFeeAmt) from tblBill where Accession in (select accession from  tblBillingECSBatchDetails where BatchID = tblBillingECSBatchList.BatchID)) - 
		(select isnull(sum(PaymentAmt), 0) from tblPayment where accession  in (select accession from  tblBillingECSBatchDetails where BatchID = tblBillingECSBatchList.BatchID)) - 
		(select isnull(sum(AdjustmentAmt), 0) from tblPayment where accession  in (select accession from  tblBillingECSBatchDetails where BatchID = tblBillingECSBatchList.BatchID)) Balance,
		tblBillingECSBatchList.ClearinghouseName
		, DateCreated
	from tblBillingECSBatchList
	inner join tblBillingECSBatchDetails
	on tblBillingECSBatchDetails.BatchID = tblBillingECSBatchList.BatchID
	group by tblBillingECSBatchList.BatchID, tblBillingECSBatchList.DateCreated, tblBillingECSBatchList.ClearinghouseName
	--order by batchid desc, tblBillingECSBatchList.ClearinghouseName desc
	order by DateCreated desc, batchid desc, tblBillingECSBatchList.ClearinghouseName desc


end
else begin
	select
		distinct top 3 tblBillingECSBatchList.BatchID, 
		CONVERT(VARCHAR(10),DateCreated,101) as ProcessDate,
		CONVERT(VARCHAR(10),DateCreated,108) as ProcessTime,
		(select count(Accession) from tblBillingECSBatchDetails where BatchID = tblBillingECSBatchList.BatchID) NoOfPatients,
		(select sum(TotalFeeAmt) from tblBill where Accession in (select accession from  tblBillingECSBatchDetails where BatchID = tblBillingECSBatchList.BatchID)) - 
		(select isnull(sum(PaymentAmt), 0) from tblPayment where accession  in (select accession from  tblBillingECSBatchDetails where BatchID = tblBillingECSBatchList.BatchID)) - 
		(select isnull(sum(AdjustmentAmt), 0) from tblPayment where accession  in (select accession from  tblBillingECSBatchDetails where BatchID = tblBillingECSBatchList.BatchID)) Balance

	from tblBillingECSBatchList
	inner join tblBillingECSBatchDetails
	on tblBillingECSBatchDetails.BatchID = tblBillingECSBatchList.BatchID
	--inner join tblBill
	--on tblBill.Accession = tblBillingECSBatchDetails.Accession
	--left outer join tblPayment
	--on tblPayment.Accession = tblBillingECSBatchDetails.Accession
	group by tblBillingECSBatchList.BatchID, tblBillingECSBatchList.DateCreated---, tblBill.Accession, tblBillingECSBatchDetails.Accession
	order by batchid desc
end
END

GO
/****** Object:  StoredProcedure [dbo].[spGetBillingPendingRecords]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetBillingPendingRecords]
       @StartDate as datetime, 
       @EndDate as datetime,
	   @ClientCode as varchar(20) = '',
	   @Count as bit = 0
AS
BEGIN
	if @Count = 1 
	begin
		if @StartDate is not null and @enddate is not null
		begin
			select count(*)
			from tblAccessions acc
			inner join tblPatient pat on pat.PatientId = acc.PatientId
			inner join tblClients cl on cl.ClientCode = acc.ClientCode
			inner join tblArchiveReviewAccession ar on ar.Accession = acc.Accession
			and ar.QSSFinalizedDate is not null
			and ar.QSSFinalizedDate <> ''
			where acc.DateCreated >= @StartDate and acc.DateCreated <= @EndDate
					and acc.Accession not in (select accession from tblBillAccessions)	
		end
		else begin
			select count(*)
			from tblAccessions acc
			inner join tblPatient pat on pat.PatientId = acc.PatientId
			inner join tblClients cl on cl.ClientCode = acc.ClientCode
			inner join tblArchiveReviewAccession ar on ar.Accession = acc.Accession
			and ar.QSSFinalizedDate is not null
			and ar.QSSFinalizedDate <> ''
			where acc.Accession not in (select accession from tblBillAccessions)
		end
	end
	else begin
		if @StartDate is not null and @enddate is not null
		begin
			if @ClientCode = ''
				select acc.Accession, pat.ptLastName + ', ' + pat.ptFirstName as Name, acc.DateCreated as ReceiveDate, cl.ClientName as Client, cl.ClientCode,
				case when isnull(bt.printflag, 0) = 1 then 'Client'
				when isnull(bt.InsuranceFlag, 0) = 1 then 'Insurance'
				when isnull(bt.BTcode, '') = '' then ''
				else 'Cash' end as CurrentBillType
				from tblAccessions acc
				inner join tblPatient pat on pat.PatientId = acc.PatientId
				inner join tblClients cl on cl.ClientCode = acc.ClientCode
				inner join tblArchiveReviewAccession ar on ar.Accession = acc.Accession
				left join tblInsuranceCompanies ic
				  on ic.InsuranceCode = pat.PrimaryInsuranceID
				left join tblBillTypeDefinitions bt
				  on bt.BTcode = isnull(ic.BillType, '')
				and ar.QSSFinalizedDate is not null
				and ar.QSSFinalizedDate <> ''
				where acc.DateCreated >= @StartDate and acc.DateCreated <= @EndDate
						and acc.Accession not in (select accession from tblBillAccessions)
						and dbo.F_GetResultStatus(acc.Accession) <> 'Cancelled'
						order by client, ReceiveDate
			else
				select acc.Accession, pat.ptLastName + ', ' + pat.ptFirstName as Name, acc.DateCreated as ReceiveDate, cl.ClientName as Client, cl.ClientCode,
				isnull(ic.BillType, '') as CurrentBillType
				from tblAccessions acc
				inner join tblPatient pat on pat.PatientId = acc.PatientId
				inner join tblClients cl on cl.ClientCode = acc.ClientCode
				inner join tblArchiveReviewAccession ar on ar.Accession = acc.Accession
				left join tblInsuranceCompanies ic
				  on ic.InsuranceCode = pat.PrimaryInsuranceID
				left join tblBillTypeDefinitions bt
				  on bt.BTcode = isnull(ic.BillType, '')
				and ar.QSSFinalizedDate is not null
				and ar.QSSFinalizedDate <> ''
				where acc.DateCreated >= @StartDate and acc.DateCreated <= @EndDate
						and acc.Accession not in (select accession from tblBillAccessions)
						and dbo.F_GetResultStatus(acc.Accession) <> 'Cancelled'
						and cl.ClientCode = @ClientCode
						order by client, ReceiveDate
		end
		else
		begin
			if @ClientCode = ''
				select acc.Accession, pat.ptLastName + ', ' + pat.ptFirstName as Name, acc.DateCreated as ReceiveDate, cl.ClientName as Client, cl.ClientCode,
				isnull(ic.BillType, '') as CurrentBillType
				from tblAccessions acc
				inner join tblPatient pat on pat.PatientId = acc.PatientId
				inner join tblClients cl on cl.ClientCode = acc.ClientCode
				inner join tblArchiveReviewAccession ar on ar.Accession = acc.Accession
				left join tblInsuranceCompanies ic
				  on ic.InsuranceCode = pat.PrimaryInsuranceID
				left join tblBillTypeDefinitions bt
				  on bt.BTcode = isnull(ic.BillType, '')
				and ar.QSSFinalizedDate is not null
				and ar.QSSFinalizedDate <> ''
				where acc.Accession not in (select accession from tblBillAccessions)
				and dbo.F_GetResultStatus(acc.Accession) <> 'Cancelled'
				order by client, ReceiveDate
			else
				select acc.Accession, pat.ptLastName + ', ' + pat.ptFirstName as Name, acc.DateCreated as ReceiveDate, cl.ClientName as Client, cl.ClientCode,
				isnull(ic.BillType, '') as CurrentBillType
				from tblAccessions acc
				inner join tblPatient pat on pat.PatientId = acc.PatientId
				inner join tblClients cl on cl.ClientCode = acc.ClientCode
				inner join tblArchiveReviewAccession ar on ar.Accession = acc.Accession
				left join tblInsuranceCompanies ic
				  on ic.InsuranceCode = pat.PrimaryInsuranceID
				left join tblBillTypeDefinitions bt
				  on bt.BTcode = isnull(ic.BillType, '')
				and ar.QSSFinalizedDate is not null
				and ar.QSSFinalizedDate <> ''
				where acc.Accession not in (select accession from tblBillAccessions)
				and dbo.F_GetResultStatus(acc.Accession) <> 'Cancelled'
				and cl.ClientCode = @ClientCode
				order by client, ReceiveDate
		end
	end
END

GO
/****** Object:  StoredProcedure [dbo].[spGetBillingQueueByBillType]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetBillingQueueByBillType] 
	@BillType as varchar(100),
	@Count as bit = 0
AS
BEGIN
	
	SET NOCOUNT ON;

DECLARE @tomorrow DATETIME 
SET @tomorrow = convert(varchar,dateadd(d, 1,getdate()),101)
if @count = 1 
begin
	--below is count only for billing dashboard. Changes made to the JOIN, WHERE, and GROUP BY logic
	--in the 2nd part of this procedure have to be EXACTLY duplicated in the top part.
	--Order by code can be omitted.
	Select count(*) from tblBill b
	inner join tblBillAccessions a
	on b.Accession = a.Accession
	inner join tblPatient p
	on a.PatientID = p.PatientID
	Inner join tblClients c
	on a.clientcode = c.clientcode
	left outer join tblInsuranceCompanies i
	
	on i.InsuranceCode = 
	Case When a.CurrentBillTo = 'Primary' then p.PrimaryInsuranceID  else p.SecondaryInsuranceID 
			end 

	where a.CurrentBilltype = @BillType
	 and substring(b.[Status], 1, 4) = 'BILL'
	
	and b.NextBillDate < @tomorrow
	and a.Accession in (select Accession from tblArchiveReviewAccession where accession = a.Accession)
	and a.Accession not in (select Accession from tblMissingInformation where Accession = a.Accession)
	
	and dbo.B_GetTotalBillBalance(a.Accession) > 0 

	group by b.Accession, a.ReceiveDate, p.ptLastName, p.ptFirstName, 
	a.ClientCode, c.ClientName, p.PrimaryInsuranceID, i.Name,
	a.CurrentBillTo, p.SecondaryInsuranceID--, a.CurrentBilltype
end

else begin
	Select b.Accession, convert(varchar, a.ReceiveDate, 101) as ReceiveDate, p.ptLastName + ', ' + p.ptFirstName as PatientName, 
	a.ClientCode, c.ClientName, 
	
	Case When a.CurrentBillTo = 'Primary' then p.PrimaryInsuranceID  else p.SecondaryInsuranceID 
			end  As InsuranceCoCode , 

	
--	p.PrimaryInsuranceID as InsuranceCoCode, 
	isnull(i.Name, '') as InsuranceCompany
	
	, dbo.B_GetTotalBillBalance(b.Accession) Balance 
	
	
--	, isnull((select sum(TotalFeeAmt*Units) from tblBill where accession = b.Accession and btcode=@BillType), 0.00) - isnull((select sum(PaymentAmt) from tblPayment where accession = b.accession and btcode=@BillType), 0.00) - isnull((select sum(AdjustmentAmt) from tblPayment where accession = b.Accession and btcode=@BillType), 0.00) as Balance
	from tblBill b
	inner join tblBillAccessions a
	on b.Accession = a.Accession
	inner join tblPatient p
	on a.PatientID = p.PatientID
	Inner join tblClients c
	on a.clientcode = c.clientcode
	left outer join tblInsuranceCompanies i
	
	on i.InsuranceCode = 
	Case When a.CurrentBillTo = 'Primary' then p.PrimaryInsuranceID  else p.SecondaryInsuranceID 
			end 
	
	--on i.InsuranceCode = p.PrimaryInsuranceID
	----left outer join tblPayment pay
	----on b.Accession = pay.Accession
	
	
	where a.CurrentBilltype = @BillType
	 and b.[Status] = 'BILL'
	
	and b.NextBillDate < @tomorrow
	and a.Accession in (select Accession from tblArchiveReviewAccession where accession = a.Accession)
	and a.Accession not in (select Accession from tblMissingInformation where Accession = a.Accession)
	
	and dbo.B_GetTotalBillBalance(a.Accession) > 0  
	
	
	--and ((select sum(isnull(TotalFeeAmt * Units, 0)) from tblBill where Accession = b.Accession and btcode = @BillType)
	---(select sum(isnull(PaymentAmt, 0)) from tblPayment where accession = b.Accession and btcode = @BillType)
	---(select sum(isnull(AdjustmentAmt, 0)) from tblPayment where accession = b.Accession and btcode = @BillType)
	--)<>0
	
	group by b.Accession, a.ReceiveDate, p.ptLastName, p.ptFirstName, 
	a.ClientCode, c.ClientName, p.PrimaryInsuranceID, i.Name,
	a.CurrentBillTo, p.SecondaryInsuranceID--, a.CurrentBilltype
end
	
END


GO
/****** Object:  StoredProcedure [dbo].[spGetBillingReleaseInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- =============================================    
-- Update 11/12/2019 Hanane -Report comment instead of internal comment  
-- =============================================    
CREATE PROCEDURE [dbo].[spGetBillingReleaseInfo]     
 @Accession varchar(50)    
AS    
BEGIN    
 select    
     
    a.Accession,a.PreAccession,a.CollectionDate, a.OrderDate ,a.ReceiveDate ,    
    a.FinalReportDate ,a.ordertype,a.ClientCode , c.ClientName,    
 c.Address,c.Address2,c.City ,c.State ,c.Zip,c.Telephone, a.PatientID,      
 p.ptFirstName as FirstName, p.ptLastName As LastName, p.ptSex as Sex, p.ptDateofBirth as DOB,     
 a.PhysicianCode,phs.FullName  as PhysName, MedicationsDataXML, SpecimenDataXML, DiagnosisDataXML, ara.QSSFinalizedDate as ReleasedDate, 
 a.OrderedTests, CurrentBillType,    
 'Status' = CASE    
            WHEN EXISTS (SELECT rt.Status     
        FROM dbo.tblResultedTests rt (nolock)    
           WHERE rt.Accession = @Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold')) THEN 'Pending'    
       ELSE 'Final'    
             END    
 ,a.AddScannedPaperWork  ,a.ExternalComments as ReportComment, a.Fasting, p.PTContactHomePhone   
    from tblAccessions a (nolock)     
 inner join tblClients c (nolock)    
 on a.ClientCode = c.ClientCode    
     
 inner join tblPatient p (nolock)    
 on a.PatientID = p.PatientId    
     
 left join tblPhysicians phs (nolock)    
 on a.PhysicianCode = phs.PhysicianCode    
     
 LEFT OUTER JOIN dbo.tblArchiveReviewAccession ara (NOLOCK)    
   ON ara.Accession = @Accession    
     
 where a.Accession = @Accession    
     
     
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetBillingRemitDetailsByAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetBillingRemitDetailsByAccession] 
	
	@Accession varchar(100)
AS
BEGIN
	SET NOCOUNT ON;
	select distinct ba.Accession, ba.CheckNumber, ba.PayerClaimNumber,
	ba.ptLastName, ba.ptFirstName, 
	CONVERT(varchar, ba.CheckDate, 101) AS CheckDate, 
	ba.Payer,
	ba.CPT_Code +  ISNULL(NULLIF(':' + ba.Modifier, ':'), '') as CPT_Code, 
	ba.AdjustmentCode, ba.AdjustmentReason,
	dd.DenialDescription, 
	ISNULL(r.RemarkCode, '') AS RemarkCode, 
	dbo.B_GetRemarkDescription(ba.Accession, ba.CPT_Code, ba.Modifier, ba.CheckNumber) as RemarkDescription, 
	--ISNULL(rd.RemarkDescription, '') AS RemarkDescription,
	ba.CPT_Charge, Isnull(ba.AllowedAmount, ba.CPT_Charge) as AllowedAmount, ba.CPT_Paid , AdjustmentAmount as HiddenAdjustmentAmount
	, CASE WHEN AdjustmentReason Not in ('1', '2', '3') THEN AdjustmentAmount ELSE 0 END as AdjustmentAmount
	, CASE WHEN AdjustmentReason = '1' THEN AdjustmentAmount ELSE 0 END as Deductible
	, CASE WHEN AdjustmentReason = '2' THEN AdjustmentAmount ELSE 0 END As Coinsurance 
	,  CASE WHEN AdjustmentReason = '3' THEN AdjustmentAmount ELSE 0 END as  Copay 
	From tblBillingTempRemitArchive ba
	left outer join tblBillingRemitRemarks r
	on r.Accession = ba.Accession
	and ba.CPT_Code = r.CPT_Code
	and ba.CheckNumber = r.CheckNumber
	left outer join tblBillingRemitRemarkDefinitions rd
	on rd.RemarkCode = r.RemarkCode
	left outer join tblDenialDefinitions dd
	on dd.DenialCode = ba.AdjustmentCode + ba.AdjustmentReason
	WHERE ba.Accession = @Accession
	order by CheckDate ASC, ba.checknumber ASC, CPT_Code ASC, AdjustmentAmount DESC
	--order by ba.accession
END



GO
/****** Object:  StoredProcedure [dbo].[spGetBillingRemittanceFileStatus]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetBillingRemittanceFileStatus]

@FileName varchar(150)
		
AS
BEGIN

	SELECT  [Status]
	FROM dbo.tblBillingRemittanceFiles (NOLOCK)	
	WHERE [FileName] = @FileName
	
	ORDER BY [Status] desc
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetBillingRequisitionPrint]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetBillingRequisitionPrint]	
	@Accession varchar(50)
AS
BEGIN
	select acc.Accession,  pat.ptLastName , pat.ptFirstName ,pat.ptSSN, pat.ptDateOfBirth, pat.ptSex, pat.ptAddress1 , pat.ptAddress2, 
	pat.ptCity, pat.ptState, pat.ptZip,  
	--acc.SymptomAccidentDate, 
	i.Name as InsuranceName, acc.AdjusterName,acc.DiagnosisDataXML ,
	c.ClientName, p.FullName as PhysicianName, p.License, p.NPI, c.Address as ClientAddress, c.Address2 as ClientAddress2, c.City as ClientCity, 
	c.State as ClientState,  c.Zip as ClientZip, c.Telephone as ClientTelephone, sm.SalesmanName, acc.CollectionDate, acc.ReceiveDate , 
	acc.CurrentBillType, 
	aii.PrimaryPolicy as Policy, acc.ClientCode, 
	aii.PrimaryFirstName + ' ' + aii.PrimaryLastName as subName, aii.PrimaryAddress1 as subAddress1, 
	aii.PrimaryAddress2 as subAddress2, aii.PrimaryCity + ', ' + aii.PrimaryState + ' ' + aii.PrimaryZip as subCityStateZip, aii.PrimaryGroup as subGroup   ,bm.Description as BillingMessage
		
	from dbo.tblBillAccessions  acc (nolock) 
	INNER JOIN dbo.tblPatient pat(nolock)
	ON acc.PatientID = pat.PatientId
	INNER JOIN dbo.tblClients c (nolock)
	ON acc.ClientCode = c.ClientCode
		
	inner join tblAccessionInsuranceInfo aii
	on aii.Accession = acc.Accession
		
	LEFT JOIN dbo.tblPhysicians p (nolock)
	ON acc.PhysicianCode = p.PhysicianCode
	LEFT JOIN dbo.tblSalesman sm (nolock)
	ON c.SalesmanCode = sm.SalesmanCode
	--LEFT JOIN dbo.tblInsuredInfo ii (nolock)
	--ON ii.InsuredID like '%'+pat.PatientID +'%'	
	LEFT JOIN dbo.tblInsuranceCompanies i (nolock)
	ON aii.PrimaryInsuranceID  = i.InsuranceCode
	Left join tblBillMessages bm on acc.BillingMessage = bm.Code
	where acc.Accession = @Accession 
	--and pat.PrimaryInsuranceID=ii.InsuranceID
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetBillingRoutes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[spGetBillingRoutes] 
                
AS
BEGIN
                SET NOCOUNT ON;

                SELECT *
                FROM tblBillingRoutes with (NOLOCK)
                order by Route
END


GO
/****** Object:  StoredProcedure [dbo].[spGetBillingSummaryQueue]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetBillingSummaryQueue] 
	
AS
BEGIN
	
	SET NOCOUNT ON;
DECLARE @tomorrow DATETIME 
SET @tomorrow = convert(varchar,dateadd(d, 1,getdate()),101)

select b.btcode as BillTypeCode,
btd.Description as BillTypeName, 
count(distinct b.accession) as NoOfClaims
--, ((sum(b.totalfeeamt*b.Units)) - 
, ((select sum(totalfeeamt) from tblBill where accession = b.accession and substring([Status], 1, 4) = 'BILL') - 
(select isnull(sum(PaymentAmt), 0) from tblPayment where Accession = b.Accession) - 
(select isnull(sum(AdjustmentAmt), 0) from tblPayment where Accession = b.Accession)) Balance 

INTO #TempNewtable 

from tblBill b
inner join tblBillAccessions a
on b.accession = a.accession
inner join tblBillTypeDefinitions btd
on btd.BTcode = b.btcode
where b.btcode = a.Currentbilltype

and b.NextBillDate < @tomorrow
 and substring(b.[Status], 1, 4) = 'BILL'
--and a.Accession in (select Accession from tblArchiveReviewAccession where accession = a.Accession)
and a.Accession not in (select Accession from tblMissingInformation where Accession = a.Accession)

and ((select sum(totalfeeamt) from tblBill where accession = b.accession and substring([Status], 1, 4) = 'BILL') - 
(select isnull(sum(PaymentAmt), 0) from tblPayment where Accession = b.Accession) - 
(select isnull(sum(AdjustmentAmt), 0) from tblPayment where Accession = b.Accession)) >0
--and ((select sum(isnull(TotalFeeAmt * Units, 0)) from tblBill where Accession = b.Accession and btcode = b.BTcode)
--	-(select sum(isnull(PaymentAmt, 0)) from tblPayment where accession = b.Accession and btcode = b.BTcode)
--	-(select sum(isnull(AdjustmentAmt, 0)) from tblPayment where accession = b.Accession and btcode = b.BTcode)
--	)<>0
and a.accession not like 'CL%'

group by b.btcode, btd.Description, b.Accession

select BillTypeCode, BillTypeName, sum(NoOfClaims) as NoOfClaims, sum(Balance) as Balance
from #TempNewtable
group by billtypecode, billtypename
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetBillMessage]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spGetBillMessage] 
	@Code as varchar(100)
AS
BEGIN
	
	SET NOCOUNT ON;


	SELECT a.Description 
	FROM dbo.tblBillMessages a (NOLOCK)	
	where Code = @Code
END

GO
/****** Object:  StoredProcedure [dbo].[spGetBillMessages]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetBillMessages] 
	
AS
BEGIN
	
	SET NOCOUNT ON;


	SELECT a.Code, a.Description 
	FROM dbo.tblBillMessages a (NOLOCK)	
	
	ORDER BY a.Description asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetBillPrintCPTs]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[spGetBillPrintCPTs]     
@Accession varchar(50),  
@BillType varchar(100)  
  
AS    
BEGIN    
  
 if OBJECT_ID('tempdb..#tmpOrderedTest') IS NOT NULL  
  drop table #tmpOrderedTest  
   
  if OBJECT_ID('tempdb..#tmpCPT') IS NOT NULL  
  drop table #tmpCPT  
   
   
  DECLARE      
    @OrderedTest varchar(100)  
     , @NextBillDate datetime  
     , @CPTCode varchar(100)  
     , @FeeDescription varchar(200)  
     , @TotalFeeAmt decimal(18,4)  
     , @ExpPaymentAmt decimal(18,4)  
     , @BillTypeCode varchar(100)  
     , @Units int  
     , @BillableFlag varchar(20)  
     , @Description varchar(200)  
     , @BillOrderedTestCode varchar(100)  
     , @ICD9CODES varchar(100)  
     , @GroupFlag bit  
  
 CREATE TABLE #tmpOrderedTest  
 (  
  OrderedTest varchar(100) NOT NULL,  
  Description varchar(200) NULL,   
  Billable varchar(100) NULL,  
  GroupFlag bit  
 )    
  
 --Get ordered tests with group status  
 Select   
 tblOrderedTests.OrderedTest, tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName, 1 as Units, tblCPTScaleMaintance.Amount   
 into #tmpGroupOrderedTest  
 from tblOrderedTests  
 inner join tblResultedTests  
 on tblResultedTests.Accession = tblOrderedTests.Accession  
 and tblResultedTests.PerformedTest = tblOrderedTests.PerformedTest  
 inner join tblCPTGroups   
 on tblCPTGroups.ResultCodes = tblResultedTests.ResultTest   
 left outer join tblCPTScaleMaintance  
 on tblCPTScaleMaintance.CPTCode = tblCPTGroups.GroupCPTCode and tblCPTScaleMaintance.InsuranceType = tblCPTGroups.BillTypeCode  
 where tblResultedTests.Accession = @Accession and tblCPTGroups.BillTypeCode = @BillType  
 group by tblOrderedTests.OrderedTest, tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName, Units, tblCPTScaleMaintance.Amount  
  
 Insert into #tmpOrderedTest  
 SELECT     
 distinct ot.OrderedTest,  otd.[Description],   
 case when exists (select accession from tblBill where accession = @accession) then   
 isnull(bi.Status, ot.BillStatus) else ot.BillStatus end as Billable,   
 case when #tmpGroupOrderedTest.OrderedTest is null then 0 else 1 end as groupflag  
 FROM dbo.tblOrderedTests  ot (NOLOCK)    
 INNER JOIN dbo.tblOrderedTestsDefinitions otd (NOLOCK)    
 ON ot.OrderedTest = otd.OrderedTest    
 left outer join #tmpGroupOrderedTest  
 on #tmpGroupOrderedTest.OrderedTest = ot.OrderedTest  
 left outer join tblBill bi on bi.Accession = ot.Accession and bi.OrderedTestCode = ot.OrderedTest  
 WHERE ot.Accession = @Accession        
 order by  ot.OrderedTest asc  
       
 Select * from #tmpOrderedTest    
   
 --CPT Table  
 Select OrderedTestCode, FeeDescription, CPTCode, Units,isnull(Modifier, '') as Modifier, isnull(Location, '') as Location,    
 Case When BillableFlag = 'True' then Status  else 'DO NOT BILL'    
 end  As Billable ,    
 isnull(TotalFeeAmt, '0') as TotalFeeAmt, isnull(ExpAmt, '0') as ExpAmt, isnull(ICD9code, '') as ICD9code  
 from tblBill where Accession = @Accession and BTcode = @BillType  
 ORDER BY OrderedTestCode , CPTcode    
     
       SELECT SUM(TotalFeeAmt)  
 FROM dbo.tblBill    
 WHERE Accession = @Accession   
 and substring([Status], 1, 4) = 'BILL'  
 and BTcode = @BillType  
     
 select isnull(sum(PaymentAmt), '0') as Paid from tblPayment where Accession = @Accession and BTcode = @BillType  
    select isnull(sum(AdjustmentAmt), '0') as Adjusted from tblPayment where Accession = @Accession and BTcode = @BillType  

	--[spGetPostCashOrderData] get the eacb cpt datas    
select p.OrderedTest, p.CPTCode, p.BTCode, p.GroupFlag , p.Paid, p.CurrentPaid, p.Adjusted, p.CurrentAdj,       
p.Units, p.Expected, p.Fees, p.[Description], Balance, cast(ptRespFlag as bit) as ptRespFlag from       
      
 (      
 select top 1000 p.OrderedTest, case when len(p.Modifier) > 0 then p.CPTCode + ':' + p.Modifier else p.CPTCode end as CPTCode, p.BTCode, p.GroupFlag,      
 (select isnull(sum(PaymentAmt), 0) from tblPayment where accession = @Accession and CPTcode = p.CPTCode and OrderedTest = p.OrderedTest and Modifier = p.Modifier) /** and GroupFlag = p.GroupFlag) **/ as Paid,      
 '0' as CurrentPaid,      
 (select isnull(sum(AdjustmentAmt), 0) from tblPayment where accession = @Accession and CPTcode = p.CPTCode and OrderedTest = p.OrderedTest and Modifier = p.Modifier) /** and GroupFlag = p.GroupFlag) **/  as Adjusted,       
 '0' as CurrentAdj,      
 ISNULL(max(f.Units), 0) as Units , ISNULL(max(f.ExpAmt), 0) as Expected , ISNULL(max(f.TotalFeeAmt),0) as Fees, ISNULL(max(f.[FeeDescription]),'') as [Description],      
 ( (select sum(totalfeeamt) from tblBill where accession = @Accession and CPTcode = p.CPTcode and OrderedTestCode = p.OrderedTest and Modifier = p.Modifier) --and GroupFlag = p.GroupFlag)      
    - (select isnull(sum(PaymentAmt), 0) from tblPayment where accession = @Accession and CPTcode = p.CPTCode and OrderedTest = p.OrderedTest and Modifier = p.Modifier) --and GroupFlag = p.GroupFlag)      
    - (select isnull(sum(AdjustmentAmt), 0) from tblPayment where accession = @Accession and CPTcode = p.CPTCode and OrderedTest = p.OrderedTest and Modifier = p.Modifier) /** and GroupFlag = p.GroupFlag) **/ ) as Balance,      
 max(cast(isnull(p.ptRespFlag, 0) as smallint)) as ptRespFlag      
              
               
 FROM dbo.tblPayment p (nolock)      
 INNER JOIN dbo.tblBill f (nolock)      
 on p.OrderedTest = f.OrderedTestCode      
             
 and p.BTcode = f.BTCode      
 and p.CPTcode = f.CPTcode      
 and p.Modifier = f.Modifier      
 --and p.GroupFlag = f.GroupFlag      
               
 WHERE p.Accession = @Accession      
 AND f.Accession = @Accession      
 AND Upper(substring(f.[Status], 1, 4)) = 'BILL'      
      
 Group By p.OrderedTest, p.CPTCode, p.Modifier, p.BTCode, p.GroupFlag      
 ORDER BY p.OrderedTest, p.CPTCode, p.Modifier, p.BTCode, p.GroupFlag       
  ) p         
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetBillTypeAccessionList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Paul Antompietri
-- Create date: 1/19/2017
-- Description:	Modified to always join with the insurance table and check the HCFA flag.
-- =============================================

CREATE PROCEDURE [dbo].[spGetBillTypeAccessionList]
	@BTcode varchar(100)

AS
BEGIN
DECLARE @tomorrow DATETIME 
SET @tomorrow = convert(varchar,dateadd(d, 1,getdate()),101)
declare @Balance decimal(18, 2)

if @BTcode <> 'Cash'
begin
select distinct a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName, a.ClientCode, 
	p.ptLastName + ', ' + p.ptFirstName as PatientName, a.collectiondate
	,dbo.B_GetTotalBillBalance(a.Accession) as Balance
	, ins.Name
    from tblBillAccessions a (nolock) 
    inner join tblAccessionInsuranceInfo aii (nolock)
    on aii.Accession = a.Accession
	inner join tblPatient p (nolock)
	on a.PatientID = p.PatientId
	inner join tblClients c (nolock)
	on a.ClientCode = c.ClientCode
	inner join tblBill b (nolock)
	on b.Accession = a.Accession
	
	inner join tblInsuranceCompanies ins
    on aii.PrimaryInsuranceID = ins.InsuranceCode
	
	where  b.BTcode = COALESCE(Nullif(@BTcode, ''), b.BTCode)
	 and substring(b.[Status], 1, 4) = 'BILL'
	and b.NextBillDate < @tomorrow
	and a.Accession in (select Accession from tblArchiveReviewAccession where accession = a.Accession)
	and a.Accession not in (select Accession from tblMissingInformation where Accession = a.Accession)
	
	and dbo.B_GetTotalBillBalance(a.Accession) > 0
	
	and ins.HCFABills <> 0
	
	order by ins.Name
end
else if @BTCode = 'Cash'
begin
	select distinct a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName, a.ClientCode, 
	p.ptLastName + ', ' + p.ptFirstName as PatientName, a.collectiondate
	,( (select sum(totalfeeamt) from tblBill where accession = a.Accession and [Status] = 'BILL')
	-(select isnull(sum(PaymentAmt), 0) from tblPayment where Accession = a.Accession)
	-(select isnull(sum(AdjustmentAmt), 0) from tblPayment where Accession = a.Accession)) as Balance
	from tblBillAccessions a (nolock) 
	inner join tblPatient p (nolock)
	on a.PatientID = p.PatientId
	inner join tblClients c (nolock)
	on a.ClientCode = c.ClientCode
	inner join tblBill b (nolock)
	on b.Accession = a.Accession
	where  b.BTcode in ('Cash', 'PTRESP')

	 and b.[Status] = 'BILL'
	and b.NextBillDate < @tomorrow
	and a.Accession in (select Accession from tblArchiveReviewAccession where accession = a.Accession)
	and a.Accession not in (select Accession from tblMissingInformation where Accession = a.Accession)

	and dbo.B_GetTotalBillBalance(a.Accession) > 0
	
	--and ( (select sum(totalfeeamt * Units) from tblBill where accession = a.Accession and [Status] = 'BILL')
	---(select isnull(sum(PaymentAmt), 0) from tblPayment where Accession = a.Accession)
	---(select isnull(sum(AdjustmentAmt), 0) from tblPayment where Accession = a.Accession))>0
	
end	
	
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetBillTypeAccessionListBasedOnAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetBillTypeAccessionListBasedOnAccession]
	@BTcode varchar(100)

AS
BEGIN
DECLARE @tomorrow DATETIME 
SET @tomorrow = convert(varchar,dateadd(d, 1,getdate()),101)
declare @Balance decimal(18, 2)

if @BTcode <> 'PT'
begin
select distinct a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName, a.ClientCode, 
	p.ptLastName + ', ' + p.ptFirstName as PatientName, a.collectiondate
	,dbo.B_GetTotalBillBalance(a.Accession) as Balance
	, ins.Name, ins.InsuranceCode
	from tblBillAccessions a (nolock) 
	inner join tblAccessionPatient p (nolock)
	on a.Accession = p.Accession
	inner join tblClients c (nolock)
	on a.ClientCode = c.ClientCode
	inner join tblBill b (nolock)
	on b.Accession = a.Accession
	
	inner join tblInsuranceCompanies ins
	on p.PrimaryInsuranceID = ins.InsuranceCode

	Inner join tblArchiveReviewAccession ara
	on ara.Accession = a.Accession
	
	where  b.BTcode in (select btcode from tblBillTypeDefinitions where ClaimFlag = 'True' or ClaimFlag = 1)
	 and (substring([Status], 1, 4) = 'BILL' or [Status] = 'SUPPRESS')
	and b.NextBillDate < @tomorrow
	--and a.Accession in (select Accession from tblArchiveReviewAccession where accession = a.Accession)
	and a.Accession not in (select Accession from tblMissingInformation)-- where Accession = a.Accession)
	
	and dbo.B_GetTotalBillBalance(a.Accession) > 0
	
	and ins.HCFABills <> 0
	
	order by ins.Name

end
else
begin
select distinct a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName, a.ClientCode, 
	p.ptLastName + ', ' + p.ptFirstName as PatientName, a.collectiondate
	,dbo.B_GetTotalBillBalance(a.Accession) as Balance
	, isnull(abc.BillCounter, 0) BillCounter
	--, ins.Name, ins.InsuranceCode
	from tblBillAccessions a (nolock) 
	inner join tblAccessionPatient p (nolock)
	on a.Accession = p.Accession
	inner join tblClients c (nolock)
	on a.ClientCode = c.ClientCode
	inner join tblBill b (nolock)
	on b.Accession = a.Accession
	
	left outer join tblAccessionBillCounter abc
	on abc.Accession = a.Accession
	and abc.TypeOfBill = 'PatientBill'
	
	--inner join tblInsuranceCompanies ins
	--on p.PrimaryInsuranceID = ins.InsuranceCode

	Inner join tblArchiveReviewAccession ara
	on ara.Accession = a.Accession
	
	where  
	--b.BTcode in (select btcode from tblBillTypeDefinitions where ClaimFlag = 'True' or ClaimFlag = 1)
	-- and 
	 (substring([Status], 1, 4) = 'BILL' or [Status] = 'SUPPRESS')
	and b.NextBillDate < @tomorrow
	--and a.Accession in (select Accession from tblArchiveReviewAccession where accession = a.Accession)
	--and a.Accession not in (select Accession from tblMissingInformation)-- where Accession = a.Accession)
	
	and dbo.B_GetTotalBillBalance(a.Accession) > 0
	
	and (a.CurrentBillType = 'P' or a.CurrentBillType = 'Cash')
	
end	
	
	
	
END

GO
/****** Object:  StoredProcedure [dbo].[spGetBillTypeForBiller]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spGetBillTypeForBiller] 
@Biller varchar(100)
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT a.BTCode As Code, a.Description 
	FROM tblBillTypeDefinitions a (NOLOCK)	
	INNER JOIN tblCollectorBillTypeCodes b
	ON b.BillTypeCode = a.BTCode
	WHERE b.UserID = @Biller
	UNION
	SELECT '' As Code , '' As Description
	ORDER BY a.Description asc

END


GO
/****** Object:  StoredProcedure [dbo].[spGetBillTypeInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spGetBillTypeInfo]
	@Code varchar(50) = NULL 
	


AS
BEGIN

	select BTcode, [Description], ExpectedAmt, PrintFlag, BillHeaderText, ClaimFlag, ClaimCode, InsuranceFlag 
	from tblBillTypeDefinitions (nolock) 	
	where BTcode LIKE ISNULL(@Code, BTcode) and VisibleFlag = 1
	order by BTcode 
	
END



GO
/****** Object:  StoredProcedure [dbo].[spGetBillTypes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetBillTypes] 
@blnVisible as bit = 1,
@blnPrint as bit = 0,
@blnQueue as bit = 0,
@blnType as bit = 0
AS
BEGIN
	
	SET NOCOUNT ON;

If @blnPrint <> 1
BEGIN
	if @blnType = 1 begin
		select case when isnull(bt.printflag, 0) = 1 then 'Client'
			when isnull(bt.InsuranceFlag, 0) = 1 then 'Insurance'
			else 'Cash' end as Code,
		case when isnull(bt.printflag, 0) = 1 then 'Client'
			when isnull(bt.InsuranceFlag, 0) = 1 then 'Insurance'
			else 'Cash' end As [Description]
		from tblBillTypeDefinitions bt
		Where VisibleFlag = @blnVisible
		UNION
			SELECT '' As BTCode , '' As [Description]
			ORDER BY Description asc
	end
	else begin
		if @blnQueue <> 1 begin 
			SELECT a.BTCode As Code, 
			Case When a.[Description] = '' then a.BTCode else a.[Description] end as Description, 
			a.ClaimFlag, a.InsuranceFlag, a.PrintFlag
			FROM dbo.tblBillTypeDefinitions a (NOLOCK)	
			WHERE VisibleFlag = @blnVisible
			--and a.PrintFlag = @blnPrint
			UNION
			SELECT '' As BTCode , '' As [Description], '' as ClaimFlag, '' as InsuranceFlag, '' as PrintFlag
			ORDER BY Description asc
		end
		else begin
			SELECT a.BTCode As Code, 
			Case When a.[Description] = '' then a.BTCode else a.[Description] end as Description,  
			a.ClaimFlag, a.InsuranceFlag, a.PrintFlag
			FROM dbo.tblBillTypeDefinitions a (NOLOCK)	
			WHERE (VisibleFlag = @blnVisible or a.PrintFlag = @blnPrint)
			UNION
			SELECT '' As BTCode , '' As [Description], '' as ClaimFlag, '' as InsuranceFlag, '' as PrintFlag
			ORDER BY Description asc
		end
	end
END
ELSE
BEGIN
	SELECT a.BTCode As Code, 
	Case When a.[Description] = '' then a.BTCode else a.[Description] end as Description
	FROM dbo.tblBillTypeDefinitions a (NOLOCK)	
	WHERE PrintFlag = 1
	UNION
	SELECT 'ALL' As BTCode , 'All Codes' As Description
	ORDER BY Description
END
END
GO
/****** Object:  StoredProcedure [dbo].[spGetCalculation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spGetCalculation] 
@CalculationID varchar(100) 
AS
BEGIN
SET NOCOUNT ON

Create table #tmpCalculation
(
txtResultTest varchar(20) NULL,
txtResultTestDesc varchar(100) NULL 
)

DECLARE   
	      @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @CurDesc varchar(100)
		, @FieldList varchar(4000)
		, @Iterator integer
		
Set @FieldList =''
Set @StartPos = 1
Set @EndPos = 1
Set @Iterator = 0
		
		SELECT @FieldList = Calculation
		FROM         tblResultedTestsDefinitions INNER JOIN
                      tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode AND 
                      tblResultedTestsDefinitions.Version = tblResultCodeVersions.CurrentVersion
		WHERE tblResultedTestsDefinitions.TestCode =  @CalculationID
		

 -- Start the looping operation
While @EndPos > 0
   Begin
      Set @EndPos = CharIndex('|', @FieldList, @StartPos)
      If @EndPos > 0
         Begin
         Set @Iterator =  @Iterator + 1
         -- Odd Row
			IF ABS(@Iterator) % 2 = 1
			   BEGIN
				 Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
			    END 
		-- Even Row
            IF ABS(@Iterator) % 2 = 0
			   BEGIN
			   Set @CurDesc = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
			       -- Add current row to TempTable
				Insert #tmpCalculation (txtResultTest,txtResultTestDesc ) Values (@CurVal, @CurDesc)
			   END 
            
            Set @StartPos = @EndPos + 1
         End
   
   
 END

SELECT txtResultTest, txtResultTestDesc FROM #tmpCalculation(nolock)

SELECT ISNULL(Decimals, 0) As Decimals from dbo.tblResultedTestsDefinitions(nolock)
WHERE TestCode = @CalculationID




END



GO
/****** Object:  StoredProcedure [dbo].[spGetCalculationInformation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetCalculationInformation] 
@TestCode varchar(100) 
AS
BEGIN
SET NOCOUNT ON

	
	SELECT     tblCalculationReference.id, tblCalculationReference.ParentCalculationID, tblCalculationReference.ChildCalculationID, tblResultedTestsDefinitions.TestCode, 
						  tblResultedTestsDefinitions.InternalName, tblResultedTestsDefinitions.ExternalName, tblResultedTestsDefinitions.Worksheet, 
						  tblResultedTestsDefinitions.Calculation, tblResultedTestsDefinitions.Formula 
	FROM         tblResultCodeVersions INNER JOIN
						  tblResultedTestsDefinitions ON tblResultCodeVersions.TestCode = tblResultedTestsDefinitions.TestCode AND 
						  tblResultCodeVersions.CurrentVersion = tblResultedTestsDefinitions.Version RIGHT OUTER JOIN
						  tblCalculationReference ON tblResultedTestsDefinitions.TestCode = tblCalculationReference.ParentCalculationID
	WHERE     (tblCalculationReference.ParentCalculationID = @TestCode)	



END



GO
/****** Object:  StoredProcedure [dbo].[spGetCalculationInformationForAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spGetCalculationInformationForAccession] 
@Accession varchar(100) 
AS
BEGIN
SET NOCOUNT ON


SELECT     tblResultedTests.id, tblResultedTests.Accession, tblResultedTests.PerformedTest, tblResultedTests.ResultTest, tblResultedTests.Result, 
                      tblResultedTests.ResultFlag, tblResultedTests.Status, tblResultedTests.Version, tblResultedTestsDefinitions.Formula
FROM         tblResultedTests INNER JOIN
                      tblResultedTestsDefinitions ON tblResultedTests.Version = tblResultedTestsDefinitions.Version AND 
                      tblResultedTests.ResultTest = tblResultedTestsDefinitions.TestCode
WHERE     (tblResultedTests.Accession = @Accession and Formula <> '')


END



GO
/****** Object:  StoredProcedure [dbo].[spGetCategory]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spGetCategory]
	
AS	
BEGIN
	SET NOCOUNT ON;
		select *
		from tblCategory
		ORDER BY id
END
GO
/****** Object:  StoredProcedure [dbo].[spGetChangedAccessionOrderedTestData2]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetChangedAccessionOrderedTestData2]   
@Accession varchar(50)  ,
@BillType varchar(100),
@ClientCode varchar (20), 
@Recombine bit = 0
AS  
BEGIN  

if OBJECT_ID('tempdb..#tmpResultTest') IS NOT NULL
drop table #tmpResultTest

if OBJECT_ID('tempdb..#tmpCPT') IS NOT NULL
drop table #tmpCPT

if OBJECT_ID('tempdb..#tmpGroupResultTest2') IS NOT NULL
drop table #tmpGroupResultTest2

if OBJECT_ID('tempdb..#tmpResultCodes') IS NOT NULL
drop table #tmpResultCodes

if OBJECT_ID('tempdb..#tmpFinal') IS NOT NULL
drop table #tmpFinal

DECLARE    
            @ResultTest varchar(100)
          , @NextBillDate datetime
          , @CPTCode varchar(100)
		  , @Modifier varchar(100)
          , @FeeDescription varchar(200)
          , @TotalFeeAmt decimal(18,4)
          , @ExpPaymentAmt decimal(18,4)
          , @BillTypeCode varchar(20)
          , @Units int
          , @BillableFlag varchar(20)
          , @Description varchar(200)
		  , @CollectionDate datetime
		  , @CPTCounter bigint
      --      , @BillOrderedTestCode varchar(100)

---Else Get data from fee definition and Ordered test  
CREATE TABLE #tmpResultTest
(
    ResultTest varchar(100) NOT NULL,
      Description varchar(200) NULL,      
      Billable varchar(100) NULL,
      GroupFlag bit null,
         BundleFlag bit null,
         Accession varchar(100) NULL
)  
CREATE TABLE #tmpCPT
(
    ResultTestCode varchar(100) NOT NULL,
      FeeDescription varchar(200) NULL,
      CPTCode varchar(100) NULL,
      Units int,
      Modifier varchar(100) NULL,
      Location varchar(100) NULL,
      Billable varchar(100) NULL,
      TotalFeeAmt decimal(18,2) NULL,
      ExpAmt decimal(18,2) NULL, 
      BillTypeCode varchar(20) NULL,
      Diagnosis varchar(100) NULL,
      GroupFlag bit,
         BundleFlag bit
)

 

CREATE TABLE #tmpGroupResultTest2
(
       ResultTest varchar(100) NOT NULL,
       GroupCPTCode varchar(100) NULL,
       GroupName varchar(max) NULL,
       Units integer NULL,
       Amount decimal(18,2) NULL,
       BundleFlag bit
)

--Set collection date for use later in selecting CPTs that are effective at the time of service
if exists(select Accession from tblBillAccessions where Accession = @Accession)
begin
       select @CollectionDate = CollectionDate from tblBillAccessions where Accession = @Accession
end
else
begin
       select @CollectionDate = CollectionDate from tblAccessions where Accession = @Accession
end

--Get result tests with group status
if exists (select accession from tblBill where accession = @Accession  and BTCode = @BillType) and @Recombine = 1
begin
       if exists (select GroupCPTCode from tblCPTGroups inner join tblbill 
                           on tblCPTGroups.GroupCPTCode = tblBill.CPTCode and tblCPTGroups.BillTypeCode = tblBill.BTCode
                           where tblBill.Accession = @Accession)
       begin
              Insert into #tmpGroupResultTest2
              Select tblBill.OrderedTestCode as ResultTest, tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName, 1 as Units, 
              case when tblCPTGroups.FeeAmt > 0 then tblCPTGroups.FeeAmt else tblCPTScaleMaintance.Amount end as Amount,
              CheckAll as BundleFlag
              from tblBill
              inner join tblCPTGroups
              on tblCPTGroups.ResultCodes = tblBill.OrderedTestCode
              and tblCPTGroups.GroupCPTCode = tblBill.CPTCode
              and tblCPTGroups.BillTypeCode = tblBill.BTCode
              --and tblCPTGroups.GroupName = tblBill.FeeDescription
              left outer join tblCPTScaleMaintance
              on tblCPTScaleMaintance.ConvertToCode = tblCPTGroups.GroupCPTCode
              and tblCPTScaleMaintance.InsuranceType = tblCPTGroups.BillTypeCode
              where tblBill.Accession = @Accession and tblCPTGroups.BillTypeCode = @BillType
              and tblCPTGroups.EffectiveDate <= @CollectionDate
              group by tblBill.OrderedTestCode, tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName, tblCPTGroups.FeeAmt, tblCPTScaleMaintance.Amount, 
              tblCPTGroups.CheckAll
       end
       --else begin
       Insert into #tmpGroupResultTest2
       Select tblBill.OrderedTestCode as ResultTest, tblCPTScaleMaintance.ConvertToCode, tblCPTGroups.GroupName, 1 as Units, 
       case when tblCPTGroups.FeeAmt > 0 then tblCPTGroups.FeeAmt else tblCPTScaleMaintance.Amount end as Amount,
       CheckAll as BundleFlag
       from tblBill
       inner join tblCPTGroups
       on tblCPTGroups.ResultCodes = tblBill.OrderedTestCode
       and tblCPTGroups.BillTypeCode = tblBill.BTCode
       --and tblCPTGroups.GroupName = tblBill.FeeDescription
       inner join tblCPTScaleMaintance 
       on tblBill.CPTCode = tblCPTScaleMaintance.ConvertToCode 
       and tblBill.BTCode = tblCPTScaleMaintance.InsuranceType
       where tblBill.Accession = @Accession and tblCPTGroups.BillTypeCode = @BillType
       and tblCPTGroups.EffectiveDate <= @CollectionDate
       group by tblBill.OrderedTestCode, tblCPTScaleMaintance.ConvertToCode, tblCPTGroups.GroupName, tblCPTGroups.FeeAmt, tblCPTScaleMaintance.Amount, 
              tblCPTGroups.CheckAll
end
else begin
       if exists (select accession from tblBill where accession = @Accession  and BTCode = @BillType) 
       begin
              Insert into #tmpGroupResultTest2
              Select tblResultedTests.ResultTest, /** isnull(tblCPTScaleMaintance.ConvertToCode, tblCPTGroups.GroupCPTCode) as GroupCPTCode **/
              tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName, 1 as Units, 
              case when tblCPTGroups.FeeAmt > 0 then tblCPTGroups.FeeAmt else tblCPTScaleMaintance.Amount end as Amount,
              CheckAll as BundleFlag
              from tblResultedTests
              inner join tblBill on tblBill.Accession = tblResultedTests.Accession
              and tblBill.BTCode = @BillType
              inner join tblCPTGroups 
              on tblCPTGroups.ResultCodes = tblResultedTests.ResultTest 
              left join tblCPTScaleMaintance
              on tblCPTScaleMaintance.CPTCode = tblCPTGroups.GroupCPTCode 
              and tblCPTScaleMaintance.InsuranceType = tblCPTGroups.BillTypeCode
              and (tblCPTScaleMaintance.ConvertToCode = tblBill.CPTCode or tblCPTScaleMaintance.CPTCode = tblCPTGroups.GroupCPTCode)
              where tblResultedTests.Accession = @Accession and tblCPTGroups.BillTypeCode = @BillType
              and tblCPTGroups.EffectiveDate < getdate()
              and tblResultedTests.Status <> 'Cancelled'
              and tblCPTGroups.EffectiveDate <= @CollectionDate
              group by tblResultedTests.ResultTest, tblCPTScaleMaintance.ConvertToCode, tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName, tblBill.Units, tblCPTGroups.FeeAmt, tblCPTScaleMaintance.Amount, 
              tblCPTGroups.CheckAll
       end
       else begin
              Insert into #tmpGroupResultTest2
              Select tblResultedTests.ResultTest, tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName, 1 as Units, 
              case when tblCPTGroups.FeeAmt > 0 then tblCPTGroups.FeeAmt else tblCPTScaleMaintance.Amount end as Amount,
              CheckAll as BundleFlag
              from tblResultedTests
              --inner join tblResultedTests
              --on tblResultedTests.Accession = tblResultTests.Accession
              --and tblResultedTests.PerformedTest = tblResultTests.PerformedTest
              inner join tblCPTGroups 
              on tblCPTGroups.ResultCodes = tblResultedTests.ResultTest 
              left outer join tblCPTScaleMaintance
              on tblCPTScaleMaintance.CPTCode = tblCPTGroups.GroupCPTCode 
              and tblCPTScaleMaintance.ConvertToCode = tblCPTGroups.GroupCPTCode
              and tblCPTScaleMaintance.InsuranceType = tblCPTGroups.BillTypeCode
              where tblResultedTests.Accession = @Accession and tblCPTGroups.BillTypeCode = @BillType
              and tblCPTGroups.EffectiveDate < getdate()
              and tblResultedTests.Status <> 'Cancelled'
              and tblCPTGroups.EffectiveDate <= @CollectionDate
              group by tblResultedTests.ResultTest, tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName, Units, tblCPTGroups.FeeAmt, tblCPTScaleMaintance.Amount,
              tblCPTGroups.CheckAll
       end
end
--for debugging
--select * from #tmpGroupResultTest2

INSERT INTO #tmpResultTest 
 SELECT   
 distinct rt.ResultTest, rtd.[ExternalName] as [Description], 
 case when exists 
       (select accession from tblBill where accession = @accession) then 
       isnull(bi.Status, 'DO NOT BILL') else 'DO NOT BILL' 
 end as Billable, 
 case when #tmpGroupResultTest2.ResultTest is null then 0 else 1 end as groupflag,
isnull(BundleFlag, 0), @Accession
FROM dbo.tblResultedTests rt (NOLOCK)
       INNER JOIN dbo.tblResultedTestsDefinitions rtd (NOLOCK)  
       ON rt.ResultTest = rtd.TestCode
       and rt.[Version] = rtd.[Version]
       left outer join #tmpGroupResultTest2
       on #tmpGroupResultTest2.ResultTest = rt.ResultTest
       left outer join tblBill bi on bi.Accession = rt.Accession and bi.OrderedTestCode = rt.ResultTest
WHERE 
rt.Accession = @Accession and
rt.Status <> 'Cancelled' 
order by  rt.ResultTest asc 

--for debugging
--select * from #tmpResultTest
    

DECLARE CPT_MAIN_CURSOR CURSOR READ_ONLY FOR 
      SELECT  ResultTest, Billable
      FROM #tmpResultTest    
      ORDER BY ResultTest 
      OPEN CPT_MAIN_CURSOR

      FETCH NEXT FROM CPT_MAIN_CURSOR
            INTO   @ResultTest , @BillableFlag
      WHILE @@FETCH_STATUS = 0
      BEGIN
            IF EXISTS (SELECT Top 1 OrderedTestCode FROM dbo.tblFeeDefinitions 
           WHERE OrderedTestCode = @ResultTest
           AND BillTypeCode = @BillType
           AND ClientCode = @ClientCode
                 AND EffectiveDate = 
                 (select max(effectivedate) from tblFeeDefinitions where OrderedTestCode = @ResultTest and billtypecode = @BillType 
                                                       and ClientCode = @ClientCode ) 
                 AND EffectiveDate <= @CollectionDate)
            BEGIN
				if OBJECT_ID('tempdb..#tmpCPTCode') IS NOT NULL
				drop table #tmpCPTCode
				--1. Get ALL CPTCodes and their latest effective date that is less than the collection date
                  Select CPTCode, max(EffectiveDate) as EffectiveDate into #tmpCPTCode from tblFeeDefinitions
					Where OrderedTestCode = @ResultTest
					And BillTypeCode = @BillType
					And ClientCode = @ClientCode
					And EffectiveDate <= @CollectionDate
					Group by CPTCode
				--2. Cycle through all records in the Fee Definitions table that match
                DECLARE CPT_CURSOR CURSOR READ_ONLY FOR 
				SELECT  fd.CPTCode, Modifier, FeeAmt,  Units, ExpPaymentAmt, [Description], BillTypeCode, CPTCounter
                  FROM dbo.tblFeeDefinitions fd
				  Inner join #tmpCPTCode cc
				  on cc.CPTCode = fd.CPTCode
				  and cc.EffectiveDate = fd.EffectiveDate
                  WHERE OrderedTestCode = @ResultTest
					AND BillTypeCode = @BillType
					AND ClientCode = @ClientCode                      
                  ORDER BY CPTCode 
                  OPEN CPT_CURSOR

                  FETCH NEXT FROM CPT_CURSOR
                        INTO   @CPTCode, @Modifier, @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description, @BillTypeCode, @CPTCounter
                  WHILE @@FETCH_STATUS = 0
                        BEGIN 
                              INSERT INTO #tmpCPT     (ResultTestCode, CPTCode, TotalFeeAmt, ExpAmt, FeeDescription, Units, Modifier, Location, Billable, BillTypeCode, GroupFlag, BundleFlag)
                              VALUES(@ResultTest ,  @CPTCode , @TotalFeeAmt, @ExpPaymentAmt, @Description, @Units, @Modifier, '', @BillableFlag, @BillTypeCode, 0, 0)
							  --Below puts CPTCounter into the Fee Description, probably for differentiating lines. For now, telling customers to make the descriptions different.
							  /** INSERT INTO #tmpCPT     (ResultTestCode, CPTCode, TotalFeeAmt, ExpAmt, FeeDescription, Units, Modifier, Location, Billable, BillTypeCode, GroupFlag, BundleFlag)
                              VALUES(@ResultTest ,  @CPTCode , @TotalFeeAmt, @ExpPaymentAmt, @Description + ' ' + cast(@CPTCounter as varchar(20)), @Units, '' , '', @BillableFlag, @BillTypeCode, 0, 0) **/
                              FETCH NEXT FROM CPT_CURSOR
                                    INTO   @CPTCode, @Modifier, @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description, @BillTypeCode, @CPTCounter
                        END
                  CLOSE CPT_CURSOR
                  DEALLOCATE CPT_CURSOR 
                    
            END
            ELSE IF EXISTS (SELECT OrderedTestCode FROM dbo.tblFeeDefinitions 
           WHERE OrderedTestCode = @ResultTest
           AND BillTypeCode = @BillType
           AND ClientCode = 'ALL' )
            BEGIN 
					if OBJECT_ID('tempdb..#tmpCPTCodeAll') IS NOT NULL
					drop table #tmpCPTCodeAll
					--1. Get ALL CPTCodes and their latest effective date that is less than the collection date
                  Select CPTCode, max(EffectiveDate) as EffectiveDate into #tmpCPTCodeAll from tblFeeDefinitions
					Where OrderedTestCode = @ResultTest
					And BillTypeCode = @BillType
					And ClientCode = 'ALL'
					And EffectiveDate <= @CollectionDate
					Group by CPTCode
					--2. Cycle through all records in the Fee Definitions table that match
                  DECLARE CPT_CURSOR CURSOR READ_ONLY FOR 
                  SELECT  fd.CPTCode, Modifier, FeeAmt, Units , ExpPaymentAmt, [Description], BillTypeCode, CPTCounter
                  FROM dbo.tblFeeDefinitions fd
				  Inner join #tmpCPTCodeAll cc
				  on cc.CPTCode = fd.CPTCode
				  and cc.EffectiveDate = fd.EffectiveDate
                  WHERE OrderedTestCode = @ResultTest
                    AND BillTypeCode = @BillType
                    AND ClientCode = 'ALL'         
                  ORDER BY CPTCode 
                  OPEN CPT_CURSOR

                  FETCH NEXT FROM CPT_CURSOR
                        INTO   @CPTCode, @Modifier, @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description, @BillTypeCode, @CPTCounter
                  WHILE @@FETCH_STATUS = 0
                        BEGIN 
                        Print @CPTCode
                        INSERT INTO #tmpCPT     (ResultTestCode, CPTCode, TotalFeeAmt, ExpAmt, FeeDescription, Units, Modifier, Location, Billable, BillTypeCode, GroupFlag, BundleFlag)
                              VALUES(@ResultTest ,  @CPTCode , @TotalFeeAmt, @ExpPaymentAmt, @Description, @Units, @Modifier, '', @BillableFlag, @BillTypeCode, 0, 0)
							  --Below puts CPTCounter into the Fee Description, probably for differentiating lines. For now, telling customers to make the descriptions different.
							  /** INSERT INTO #tmpCPT     (ResultTestCode, CPTCode, TotalFeeAmt, ExpAmt, FeeDescription, Units, Modifier, Location, Billable, BillTypeCode, GroupFlag, BundleFlag)
                              VALUES(@ResultTest ,  @CPTCode , @TotalFeeAmt, @ExpPaymentAmt, @Description + ' ' + cast(@CPTCounter as varchar(20)), @Units, '' , '', @BillableFlag, @BillTypeCode, 0, 0) **/
                              FETCH NEXT FROM CPT_CURSOR
                              INTO   @CPTCode, @Modifier, @TotalFeeAmt, @Units , @ExpPaymentAmt, @Description, @BillTypeCode, @CPTCounter
                        END
                  CLOSE CPT_CURSOR
                  DEALLOCATE CPT_CURSOR   
  
            END

                     --select * from #tmpCPT
            
            IF EXISTS(Select ResultTest from #tmpGroupResultTest2 where #tmpGroupResultTest2.ResultTest = @ResultTest)
            Begin
                Insert into #tmpCPT
                Select 
                #tmpGroupResultTest2.ResultTest as ResultTestCode, GroupName as FeeDescription, 
                GroupCPTCode as CPTCode, Units, '' as Modifier, '' as Location, 'BILL' as Billable, min(amount) as TotalFeeAmt, 
                        min(amount) as ExpAmt,  @BillType as BillTypeCode, '' as Diagnosis, '1' as GroupFlag, isnull(#tmpResultTest.BundleFlag, 0)
                from #tmpGroupResultTest2
                inner join #tmpResultTest on #tmpResultTest.ResultTest = #tmpGroupResultTest2.ResultTest
                           where #tmpGroupResultTest2.ResultTest = @ResultTest and #tmpGroupResultTest2.Amount is not null
                group by #tmpGroupResultTest2.ResultTest, GroupName, GroupCPTCode, Units, #tmpResultTest.BundleFlag
            End
            
      FETCH NEXT FROM CPT_MAIN_CURSOR
      INTO   @ResultTest , @BillableFlag
    END
    CLOSE CPT_MAIN_CURSOR
      DEALLOCATE CPT_MAIN_CURSOR

       /*** Get CPT's from group definitions if not defined in fee definitions (top gets only those defined in cpt scaling table) ***/
	   Insert into #tmpCPT
       select tblCPTGroups.ResultCodes as ResultTestCode
       , GroupName as FeeDescription, GroupCPTCode as CPTCode, '1' as Units,
       tblCPTGroups.Modifier, '' as Location, 'BILL' as Billable, tblCPTGroups.FeeAmt as TotalFeeAmt, tblCPTGroups.ExpPaymentAmt as ExpAmt,
       @BillType as BillTypeCode, '' as Diagnosis, '0' as GroupFlag, isnull(#tmpResultTest.BundleFlag, 0)
	   from #tmpResultTest
	   inner join tblCPTGroups
	   on tblCPTGroups.ResultCodes = #tmpResultTest.ResultTest
	   where #tmpResultTest.ResultTest not in (select ResultTestCode from #tmpCPT)
	   and tblCPTGroups.BillTypeCode = @BillType
	   and tblCPTGroups.EffectiveDate <= @CollectionDate
       
       /*** Get Modifier from Fee Definitions ***/
    Update #tmpCPT set Modifier = fd.Modifier
    from #tmpCPT
    inner join tblFeeDefinitions fd on fd.OrderedTestCode = #tmpCPT.ResultTestCode
       and fd.CPTcode = #tmpCPT.CPTCode and fd.Description + ' ' + cast(CPTCounter as varchar(20)) = #tmpCPT.FeeDescription
    where fd.BillTypeCode = @BillType and (fd.ClientCode = @ClientCode or Upper(fd.ClientCode) = 'ALL')

       /*** Get Modifier from CPT Groups ***/
    Update #tmpCPT set Modifier = cp.Modifier
    from #tmpCPT
    inner join tblCPTGroups cp on cp.ResultCodes = #tmpCPT.ResultTestCode
    where cp.BillTypeCode = @BillType and (#tmpCPT.Modifier is null or len(#tmpCPT.Modifier) = 0)

       /*** Update units if GroupFlag = 0 and line exists in tblBill ***/
       
       if @Recombine = 1 begin    
              Update #tmpCPT set Units = tblBill.Units --, TotalFeeAmt = #tmpCPT.TotalFeeAmt * tblBill.Units
              from #tmpCPT
              inner join tblBill on 
              tblBill.OrderedTestCode = #tmpCPT.ResultTestCode
              and #tmpCPT.GroupFlag = 0
              where tblBill.Accession = @Accession and tblBill.Units > 1
       end

       /*** Update billable to what's in tblBill if the lines have been combined ***/

       Update #tmpCPT set Billable = tblBill.Status
    from #tmpCPT
    inner join tblBill on 
       tblBill.OrderedTestCode = #tmpCPT.ResultTestCode or
       tblBill.CPTCode = #tmpCPT.CPTCode
    where tblBill.Accession = @Accession and tblBill.Units > 1
       and #tmpCPT.ResultTestCode not in 
       (select OrderedTestCode from tblBill where Accession = @Accession and tblBill.Units = 1 )

       /*** Get Modifier if previously saved in tblBill for non-S tests ONLY and ONLY if recombine = 1 ***/

       if @Recombine = 1
       begin

              /*** do single units first ***/
       
              Update #tmpCPT set Modifier = tblBill.Modifier
              from #tmpCPT
              inner join tblBill on 
              tblBill.OrderedTestCode = #tmpCPT.ResultTestCode 
              where tblBill.Accession = @Accession and substring(#tmpCPT.ResultTestCode, 0, 1) <> 'S' and tblBill.Units = 1

              /*** for combined, use or test in join between tblBill and #tmpCPT because combining lines for CPT's may have left two lines with the same modifier ***/
       
              Update #tmpCPT set Modifier = tblBill.Modifier
              from #tmpCPT
              inner join tblBill on 
              tblBill.OrderedTestCode = #tmpCPT.ResultTestCode or
              tblBill.CPTCode = #tmpCPT.CPTCode
              where tblBill.Accession = @Accession and substring(#tmpCPT.ResultTestCode, 0, 1) <> 'S' and tblBill.Units > 1
              and #tmpCPT.ResultTestCode not in 
              (select OrderedTestCode from tblBill where Accession = @Accession and substring(tblBill.OrderedTestCode, 0, 1) <> 'S' and tblBill.Units = 1 )
       end

       /*** Get diagnosis code if previously saved in tblBill ***/

       /*** do single units first ***/

    Update #tmpCPT set Diagnosis = tblBill.ICD9code 
    from #tmpCPT
    inner join tblBill on 
       tblBill.OrderedTestCode = #tmpCPT.ResultTestCode
       and tblBill.CPTCode = #tmpCPT.CPTCode
    where tblBill.Accession = @Accession and tblBill.Units = 1

       /*** for combined, use or test in join between tblBill and #tmpCPT because combining lines for CPT's may have left two lines with the same modifier ***/

       Update #tmpCPT set Diagnosis = tblBill.ICD9code 
    from #tmpCPT
    inner join tblBill on 
       (tblBill.OrderedTestCode = #tmpCPT.ResultTestCode
       or tblBill.CPTCode = #tmpCPT.CPTCode)
    where tblBill.Accession = @Accession and tblBill.Units > 1
       and #tmpCPT.CPTCode not in 
       (select OrderedTestCode from tblBill where Accession = @Accession and tblBill.Units = 1 )

       /*** set bill status properly in #tmpResultTest, taking account of previously saved values in tblBill ***/
       Update #tmpResultTest set Billable = 'BILL' 
       from #tmpResultTest
       inner join #tmpCPT on #tmpCPT.ResultTestCode = #tmpResultTest.ResultTest
       left join tblBill on tblBill.Accession = #tmpResultTest.Accession and
       tblBill.OrderedTestCode = #tmpResultTest.ResultTest
       where tblBill.OrderedTestCode is null

       /*** set bill status in #tmpCPT to value in #tmpResultTest; almost there... ***/
       Update #tmpCPT set #tmpCPT.Billable = #tmpResultTest.Billable
       from #tmpCPT
       inner join #tmpResultTest on #tmpCPT.ResultTestCode = #tmpResultTest.ResultTest

       /*** set to DO NOT BILL if no amount found regardless of the above. Means no fee/scaling found ***/
       Update #tmpCPT set #tmpCPT.Billable = 'DO NOT BILL' where #tmpCPT.TotalFeeAmt is null

       /*** Update with any amount that may be defined in tblCPTGroups ***/
       /*** This is for the 'bundling': amounts will only be defined for groups with the ALL box checked ***/

       update #tmpCPT
       set Billable = 'BILL', TotalFeeAmt = grp.FeeAmt, ExpAmt = grp.ExpPaymentAmt
       from #tmpCPT
       inner join tblCPTGroups grp on grp.ResultCodes = #tmpCPT.ResultTestCode and grp.BillTypeCode = #tmpCPT.BillTypeCode
       where #tmpCPT.Billable = 'DO NOT BILL'

       --select * from #tmpCPT

       /*** put result codes with dupes into a temp table ***/
       select ResultTestCode into #tmpResultCodes
       from #tmpCPT 
       group by ResultTestCode having count(*) > 1

       /*** find and destroy all dupes coming in because there is both a group and a fee where there is no amount in one of the lines ***/
       delete tp from #tmpCPT tp 
       inner join #tmpResultCodes on #tmpResultCodes.ResultTestCode = tp.ResultTestCode
       where Billable = 'DO NOT BILL' and (TotalFeeAmt = 0 or TotalFeeAmt is NULL)

       --delete dupes that aren't in tblBill if Recombine = 1; else leave them there for the recalculate
       if @Recombine = 1 begin
              if (select count(*) from tblBill where accession = @Accession) > 0
              begin
                     delete tp from #tmpCPT tp 
                     inner join #tmpResultCodes on #tmpResultCodes.ResultTestCode = tp.ResultTestCode
                     where tp.FeeDescription not in (select replace(FeeDescription, '&amp;', '&') from tblBill where accession = @accession)
                     and BundleFlag = 0
              end
       end

       /*** After all of the above, need to reset to actual status in tblBill ***/
       update #tmpCPT
       set #tmpCPT.Billable = tblBill.Status
       from #tmpCPT
       inner join tblBill on
       #tmpCPT.BillTypeCode = tblBill.BTCode and
       #tmpCPT.CPTCode = tblBill.CPTCode and
       #tmpCPT.Modifier = tblBill.Modifier
       where tblBill.accession = @accession and tblBill.BTCode = @BillType

       if @recombine = 1 
       begin
              /*** remove lines introduced in the above where units = 1 and result test code not saved in tblBill ***/
              if (select count(*) from tblBill where accession = @accession and BTcode = @BillType) > 0 
              begin
                     if (select count(*) from #tmpGroupResultTest2) = 0 
                     begin
                           truncate table #tmpResultCodes

                           insert into #tmpResultCodes
                           select OrderedTestCode as ResultTestCode from tblBill
                           where tblBill.Units = 1 and tblBill.Accession = @accession 
                           and tblBill.CPTCode in (select cptCode from #tmpCPT group by CPTCode having count(0) = 1)
       
                           delete tp from #tmpCPT tp
                           where tp.ResultTestCode not in (select ResultTestCode from #tmpResultCodes)
                           and tp.CPTCode in (select cptCode from #tmpCPT group by CPTCode having count(0) > 1)
                           and tp.ResultTestCode not in (select OrderedTestCode from tblBill where accession = @accession and btcode = @BillType)
                     
                           /**** set units properly ****/
                           update #tmpCPT set #tmpCPT.Units = tb.Units
                           from #tmpCPT
                           inner join tblBill tb on #tmpCPT.ResultTestCode = tb.OrderedTestCode
                                  and #tmpCPT.CPTCode = tb.CPTCode
                                  and #tmpCPT.Modifier = tb.Modifier
                                  and #tmpCPT.BillTypeCode = tb.BTCode
                           where tb.accession = @accession
                     end
                     else begin
                           select OrderedTestCode as ResultTestCode, tblBill.FeeDescription, tblBill.CPTCode, tblBill.Units, tblBill.Modifier, tblBill.Location, 
                                  [Status] as Billable, tblBill.TotalFeeAmt, tblBill.ExpAmt, BTCode as BillTypeCode, #tmpCPT.Diagnosis, tblBill.GroupFlag,
                                  isnull(#tmpCPT.BundleFlag, 0) as BundleFlag
                           into #tmpFinal 
                           from tblBill 
                           inner join #tmpCPT on OrderedTestCode = ResultTestCode
                           and #tmpCPT.CPTCode = tblBill.CPTCode
                           where Accession = @Accession and BTCode = @BillType
                           truncate table #tmpCPT
                           insert into #tmpCPT select * from #tmpFinal
                     end
              end
       end
  
    SELECT ResultTest, Description, Billable, GroupFlag, Accession from #tmpResultTest
                     Group by ResultTest, Description, Billable, GroupFlag, Accession
    SELECT * from #tmpCPT
       if @Recombine = 0 Begin
              SELECT SUM(TotalFeeAmt * Units) from #tmpCPT where BillTypeCode = @BillType and Billable = 'BILL'
       end
       else begin
              SELECT SUM(TotalFeeAmt) from tblBill where Accession = @Accession and btCode = @BillType and Status = 'BILL'
       end
    SELECT isnull(Mileage, 0) from tblBillAccessions where Accession = @Accession
       select isnull(sum(PaymentAmt) + sum(AdjustmentAmt), '0') as Paid from tblPayment where Accession = @Accession
       --if exists, this will be used as the CPT list
       select Accession, BTCode as BillTypeCode, CPTCode, OrderedTestCode as ResultTestCode, NextBillDate, FeeDescription, TotalFeeAmt, Units, 
       ExpAmt, Modifier, Location, Status as Billable, DiscountPercentage, FeeType, ICD9Code as Diagnosis, BillableFlag, GroupFlag, 0 as BundleFlag 
       from tblBill where Accession = @Accession and BTCode = @BillType
       select dbo.B_GetTotalBillBalance(@Accession) as Balance
	   --PA 3/18/2021 for COVID billing - get the finalize date from tblArchiveReviewAccession to use for testing against collection date
	select QSSFinalizedDate, ArchivedDate from tblArchiveReviewAccession where Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spGetClaimCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[spGetClaimCodes] 
	
AS
BEGIN
	
	SET NOCOUNT ON;


	SELECT ClaimCode, [Description]
	FROM dbo.tblClaimCodes 
	ORDER BY [Description] asc
END



GO
/****** Object:  StoredProcedure [dbo].[spGetClaimMaxCPT]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetClaimMaxCPT] 
AS
BEGIN
	
	SET NOCOUNT ON;
	select counter from tblCounter where countname = 'ClaimMaxCPT'
END
GO
/****** Object:  StoredProcedure [dbo].[spGetClientBillAccessionList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetClientBillAccessionList]

@BillTypeCode as varchar(50),
@StartDate as date = null,
@EndDate as date = null
	
AS
BEGIN
DECLARE @tomorrow DATETIME 
SET @tomorrow = convert(varchar,dateadd(d, 1,getdate()),101)
DECLARE @BillTypeToGet varchar(100)

create table #ClientBills
	(BillTypeCode varchar(50),
	BillToClientCode varchar(100),
	ClientCode varchar(100),
	ClientName varchar(max),
	PatientID varchar(100),
	PtLastName varchar(100),
	Accession varchar(100),
	Balance decimal(18,2),
	PrintFlag bit,
	ClientBillNumber varchar(100),
	CollectionDate datetime)
create table #BillTypesToGet
	(BillToCode varchar(100))
If @BillTypeCode <> 'ALL'
begin
	insert into #BillTypesToGet
	select BTCode from tblBillTypeDefinitions
	where PrintFlag = 1 and BTCode = @BillTypeCode
end
else
begin
	insert into #BillTypesToGet
	select BTCode from tblBillTypeDefinitions
	where PrintFlag = 1
end

DECLARE BILLTYPES_CURSOR CURSOR READ_ONLY FOR 
Select BillToCode from #BillTypesToGet
Open BILLTYPES_CURSOR
Fetch next From BILLTYPES_CURSOR Into @BillTypeToGet

WHILE @@FETCH_STATUS = 0
BEGIN 
	Insert into #ClientBills
	select  b.btcode, COALESCE(NULLIF(c.BillToCode,''), c.ClientCode), c.ClientCode, 
	COALESCE(NULLIF(Max(cbn.BillAsName), ''), c.ClientName), a.PatientID, p.ptLastName, a.Accession, 
		 ( (select sum(totalfeeamt) from tblBill where accession = a.Accession and Upper(substring([Status], 1, 4)) = 'BILL')
		-(select isnull(sum(PaymentAmt), 0) from tblPayment where Accession = a.Accession)
		-(select isnull(sum(AdjustmentAmt), 0) from tblPayment where Accession = a.Accession)) as Balance, 
		d.PrintFlag, '' as ClientBillNumber, a.CollectionDate
	 from tblBillAccessions a 
	 inner join tblClients c (nolock)
	on a.ClientCode = c.ClientCode
	inner join tblBill b (nolock)
	on b.Accession = a.Accession
	inner join tblBillTypeDefinitions d (nolock)
	on b.BTCode = d.BTCode
	inner join tblPatient p (nolock)
	on a.PatientId = p.PatientId
	left outer join tblClientBillAsName cbn
	on COALESCE(NULLIF(c.BillToCode,''), c.ClientCode) = cbn.ClientCode
	
	where  d.PrintFlag = 1 and d.BTCode = @BillTypeToGet
	 and Upper(substring(b.[Status], 1, 4)) = 'BILL'
	 and b.NextBillDate < @tomorrow
	 and a.Accession in (select Accession from tblArchiveReviewAccession where accession = a.Accession)
	and a.Accession not in (select Accession from tblMissingInformation where Accession = a.Accession)
	--check balance > 0
	and ( (select sum(totalfeeamt * Units) from tblBill where accession = a.Accession and Upper(substring([Status], 1, 4)) = 'BILL')
	-(select isnull(sum(PaymentAmt), 0) from tblPayment where Accession = a.Accession)
	-(select isnull(sum(AdjustmentAmt), 0) from tblPayment where Accession = a.Accession))>0
	--and Cast(a.CollectionDate as date) between '2018-09-30 23:59:59' and '2018-11-01 00:00:00'
	and Cast(a.CollectionDate as date) >= Cast(isnull(@StartDate, '20000101 00:00:00.000') as date)
	and Cast(a.CollectionDate as date) <= Cast(isnull(@EndDate, '20991231 00:00:00.000') as date)
	 
	 group by b.btcode, c.BillToCode, c.ClientCode, c.ClientName, p.ptLastName, a.PatientId, a.Accession, d.PrintFlag, a.CollectionDate
	 Fetch next From BILLTYPES_CURSOR Into @BillTypeToGet
End
CLOSE BILLTYPES_CURSOR
DEALLOCATE BILLTYPES_CURSOR

	 
 --Data set one, for list of accessions which will be needed to set the correct NextBillDate
 select * from #ClientBills
 order by BillToClientCode, BillTypeCode, Accession, CollectionDate, ptLastName, PatientId, ClientCode 
 
 --Data set two, for the grid view and for print of the client bills
 select BillTypeCode, BillToClientCode, max(ClientName) as ClientName, SUM(Balance) as Balance, count(0) as AccessionCount, 
	PrintFlag from #ClientBills
 group by BillTypeCode, BillToClientCode, PrintFlag
 order by ClientName, BillTypeCode
	
	
END










GO
/****** Object:  StoredProcedure [dbo].[spGetClientBillDefinition]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetClientBillDefinition]
	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT * from tblClientBillDefinition
END
GO
/****** Object:  StoredProcedure [dbo].[spGetClientBillReprintList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetClientBillReprintList]
	@ClientBillAccession as varchar(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	Declare @TotalPaid decimal (18, 2)
	Declare @TmpAccession as varchar(100)
	Declare @ClientBill as varchar(100) 
	set @ClientBill = @ClientBillAccession + '%'
	
	/*****************************************************************************************************************/
	/**** #ClientBills column names should match the names on gvClientBillAccessions grid view in ClientBill.aspx ****/
	/*****************************************************************************************************************/
	create table #ClientBills
		(BillTypeCode varchar(100),
		BillToClientCode varchar(100),
		ClientCode varchar(100),
		ClientName varchar(100),
		PatientId varchar(100),
		Accession varchar(100),
		Balance decimal(18,2),
		ClientBillNumber varchar(100),
		TotalPaid decimal(18,2)) --<<<< Added to the end: not in gvClientBillAccessions
	
	create table #ClientBillPayments
		(Accession varchar(100),
		TotalPaid decimal(18,2))
		
	insert into #ClientBillPayments
	select Accession, 0 from tblBillAccessions where Accession like @ClientBill

	DECLARE Paid_CURSOR CURSOR READ_ONLY FOR 
	Select Accession from #ClientBillPayments
	Open Paid_CURSOR
	Fetch Next From Paid_CURSOR Into @TmpAccession

	WHILE @@FETCH_STATUS = 0
	Begin
		select @TotalPaid = SUM(PaymentAmt) FROM tblPayment where Accession = @TmpAccession
		Update #ClientBillPayments
		set TotalPaid = @TotalPaid where Accession = @TmpAccession
		Fetch Next From Paid_CURSOR Into @TmpAccession
	End
	Close Paid_CURSOR
	Deallocate Paid_CURSOR

	/*********************************************************************************************************/
	/**** Column names here should match the names on gvClientBillAccessions grid view in ClientBill.aspx ****/
	/*********************************************************************************************************/
	
	insert into #ClientBills
	select  b.btcode as BillTypeCode, COALESCE(NULLIF(c.BillToCode,''), c.ClientCode) as BillToClientCode, c.ClientCode, 
	COALESCE(NULLIF(Max(cbn.BillAsName), ''), c.ClientName) as ClientName, a.PatientID, a.Accession, 
		 dbo.B_GetTotalBillBalance(a.Accession) as Balance,  
		isnull(a.ClientBillAccession, a.Accession) as ClientBillNumber, 0
	 from tblBillAccessions a 
	 inner join tblClients c (nolock)
	on a.ClientCode = c.ClientCode
	inner join tblBill b (nolock)
	on b.Accession = a.Accession
	inner join tblBillTypeDefinitions d (nolock)
	on b.BTCode = d.BTCode
	left outer join tblClientBillAsName cbn
	on COALESCE(NULLIF(c.BillToCode,''), c.ClientCode) = cbn.ClientCode
	
	where a.Accession like @ClientBill or ( a.ClientBillAccession like @ClientBill and d.PrintFlag = 1 )
	 
	 group by b.btcode, c.BillToCode, c.ClientCode, c.ClientName, a.PatientId, a.Accession, d.PrintFlag, a.ClientBillAccession
	 order by ClientBillNumber, a.PatientId, a.Accession
	 
	 update #ClientBills 
	 set TotalPaid = #ClientBillPayments.TotalPaid
	 from #ClientBills
	 inner join #ClientBillPayments
	 on #ClientBillPayments.Accession = #ClientBills.Accession
	 
	 select * from #ClientBills
END


GO
/****** Object:  StoredProcedure [dbo].[spGetClientInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetClientInfo] 	
	@ClientCode varchar(50)
AS
BEGIN
	
	SET NOCOUNT ON;

    
	SELECT *
	FROM tblClients with (NOLOCK)
	WHERE ClientCode = @ClientCode
	and ActiveFlag='True'
END
GO
/****** Object:  StoredProcedure [dbo].[spGetClientInfoMA]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetClientInfoMA] 
	
	@ClientCode varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT *
	FROM tblClients with (NOLOCK)
	WHERE ClientCode = @ClientCode
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetClientNameBillAs]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetClientNameBillAs]
	-- Add the parameters for the stored procedure here
	@ClientCode varchar(20)
AS
BEGIN
	SET NOCOUNT ON;

    SELECT ClientCode, BillAsName 
    from tblClientBillAsName
    where ClientCode = @ClientCode
    
END
GO
/****** Object:  StoredProcedure [dbo].[spGetClientReportingOptions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--PA 08/07/2017 - added get of current lab settings below

CREATE PROCEDURE [dbo].[spGetClientReportingOptions] 	
	@ClientCode varchar(20)
AS
BEGIN
	
	SET NOCOUNT ON;    
	--1) Get current client settings
	SELECT *
	FROM tblReportingOptions rr with (NOLOCK)
	WHERE ClientCode  = @ClientCode

	--2) Get current lab settings: determines if the options will be available to choose
	Select InHouse, IDoc, AutoFax, ElectronicInterface, LabHealth
	FROM tblLabs
	where VersionDate <= getdate() and versionnumber = (select max(VersionNumber) from tblLabs where VersionDate <= getdate())
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetClientRoutes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetClientRoutes] 	
	@ClientCode varchar(20)
AS
BEGIN
	
	SET NOCOUNT ON;    
	SELECT *
	FROM tblReportingOptions rr with (NOLOCK)
	
	WHERE ClientCode  = @ClientCode
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetClients]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetClients] 
	@ClientCode as varchar(100) = NULL,
	@ClientName as varchar(100) = NULL
	--@LabCode varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT ClientCode, ClientName, Address, City, State, Zip, Telephone, ClientCode + ' (' + ClientName + ') ' as ClientCodeName
	FROM tblClients with (NOLOCK)
	where DisplayInSearch='True'
	and ClientCode like isnull(@ClientCode, ClientCode) and ClientName like isnull(@ClientName, ClientName)
	ORDER BY ClientCode asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetClientsDataForNewiPowerDocSetup]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetClientsDataForNewiPowerDocSetup] 
	@LabCode varchar(20),	
	@ClientCode varchar(50)
AS
BEGIN
	
	SET NOCOUNT ON;    
	SELECT @LabCode as LabCode, c.ClientCode, c.ClientName, c.[Address], c.City, c.[State], c.Zip, c.Telephone  
	from tblClients c 
	where c.clientcode=@clientcode
	
	SELECT @LabCode as LabCode, a.ClientCode,  b.FullName,a.PhysicianCode
	 FROM tblClientsPhysicians a with (NOLOCK)
		INNER JOIN
	tblPhysicians  b with (NOLOCK)
	on a.PhysicianCode  = b.PhysicianCode 
	WHERE a.ClientCode  = @ClientCode
	ORDER BY a.PhysicianCode  asc
	
	
	--SELECT a.PhysicianCode, b.FirstName + ' ' + ISNULL( b.MiddleName,'')  as FirstName , b. LastName, b. NPI, b.License, b.UPIN, b.MedicareNumber, b.MedicaidNumber
	--FROM tblClientsPhysicians a with (NOLOCK)
	
	--INNER JOIN
	
	--tblPhysicians  b with (NOLOCK)
	--on a.PhysicianCode  = b.PhysicianCode 
	--WHERE a.ClientCode  = @ClientCode
	--ORDER BY a.PhysicianCode  asc

END
GO
/****** Object:  StoredProcedure [dbo].[spGetClientsEmails]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetClientsEmails] 	
	@ClientCode varchar(50)
AS
BEGIN
	
	SET NOCOUNT ON;    
	SELECT Email, [Description], ZipPassword, ID
	FROM tblClientsEmails a with (NOLOCK)
	
	WHERE ClientCode  = @ClientCode
	ORDER BY id  asc

END
GO
/****** Object:  StoredProcedure [dbo].[spGetClientsFaxNumbers]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetClientsFaxNumbers] 	
	@ClientCode varchar(50)
AS
BEGIN
	
	SET NOCOUNT ON;    
	SELECT FaxNumber, [Description], ID
	FROM tblClientsFaxNumbers a with (NOLOCK)
	
	WHERE ClientCode  = @ClientCode
	ORDER BY id  asc

END
GO
/****** Object:  StoredProcedure [dbo].[spGetClientsPhysicians]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetClientsPhysicians] 	
	@ClientCode varchar(50)
AS
BEGIN
	
	SET NOCOUNT ON;    
	SELECT a.PhysicianCode, b.FirstName + ' ' + ISNULL( b.MiddleName,'')  as FirstName , b. LastName, b. NPI, 
	b.License, b.UPIN, b.MedicareNumber, b.MedicaidNumber
	into #tmpPhysicians
	FROM tblClientsPhysicians a with (NOLOCK)
	
	INNER JOIN
	
	tblPhysicians  b with (NOLOCK)
	on a.PhysicianCode  = b.PhysicianCode 
	WHERE a.ClientCode  = @ClientCode
	ORDER BY a.PhysicianCode  asc

	Select #tmpPhysicians.PhysicianCode, 
	CASE when(Len(FirstName) = 0) then '.' Else FirstName end as FirstName,
	CASE when(Len(LastName) = 0) then '.' Else LastName end as LastName,
	NPI, License, UPIN, MedicareNumber, MedicaidNumber
	from #tmpPhysicians

END
GO
/****** Object:  StoredProcedure [dbo].[spGetClientsPhysiciansToSync]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetClientsPhysiciansToSync] 	
	@ClientCode varchar(50)
AS
BEGIN
	
	SET NOCOUNT ON;    
	SELECT tblPhysicians.PhysicianCode Code, tblPhysicians.FullName Detail
	FROM tblPhysicians
	inner join tblClientsPhysicians b on tblPhysicians.PhysicianCode = b.PhysicianCode
	WHERE b.ClientCode = @ClientCode;
END
GO
/****** Object:  StoredProcedure [dbo].[spGetClientsReportFormat]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetClientsReportFormat] 	
	@ClientCode varchar(20)
AS
BEGIN
	
	SET NOCOUNT ON;    
	Select ReportFormat from tblClients
	WHERE ClientCode  = @ClientCode

END
GO
/****** Object:  StoredProcedure [dbo].[spGetClientsSales]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetClientsSales] 	
	@ClientCode varchar(50)
AS
BEGIN
	
	SET NOCOUNT ON;    
	SELECT a.SalesmanCode, b.SalesmanName, a.Commission, b.Territory, b.SalesGroup, b.Specialty, b.Service
	FROM tblClientsSalesman a with (NOLOCK)
	
	INNER JOIN
	
	tblSalesman  b with (NOLOCK)
	on a.SalesmanCode  = b.SalesmanCode 
	WHERE a.ClientCode  = @ClientCode
	ORDER BY a.SalesmanCode  asc

END


 --******************************************************************
GO
/****** Object:  StoredProcedure [dbo].[spGetClientsToSync]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetClientsToSync]
AS
BEGIN
	SELECT * FROM tblClients with (nolock) 
	WHERE NeedsSync = 1
	
END

GO
/****** Object:  StoredProcedure [dbo].[spGetCollectorSettings]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create PROCEDURE [dbo].[spGetCollectorSettings]
	
	@UserID varchar(20)
AS
BEGIN
	SELECT distinct cbt.BillTypeCode, btd.Description as BTDescription
	from tblBillTypeDefinitions btd (nolock)
	INNER JOIN tblCollectorBillTypeCodes cbt (nolock)
	ON cbt.BillTypeCode = btd.BTcode
	where cbt.UserID = @UserID
	
	SELECT distinct cic.InsuranceCode, ic.Name as InsuranceName
	from tblInsuranceCompanies ic (nolock)
	INNER JOIN tblCollectorInsuranceCodes cic (nolock)
	ON cic.InsuranceCode = ic.InsuranceCode
	where cic.UserID = @UserID
	
END


GO
/****** Object:  StoredProcedure [dbo].[spGetCommentCodeInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetCommentCodeInfo] 
	@CommentCode varchar(50)
AS
BEGIN

	SET NOCOUNT ON


	SELECT Comment
	FROM dbo.tblLabCommentDefinitions (NOLOCK)
	WHERE  Code = @CommentCode
END
GO
/****** Object:  StoredProcedure [dbo].[spGetControlComments]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[spGetControlComments] 
	@OrderID as varchar(50),
	@GroupNumber as varchar(50)
AS

BEGIN
	SELECT Comment
	FROM dbo.tblQCcomments a (NOLOCK)	
	where OrderID = @OrderId and GroupNumber = @GroupNumber
END
GO
/****** Object:  StoredProcedure [dbo].[spGetControlGraphData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetControlGraphData]
	 @ControlID varchar(20)
	--,@LotNumber varchar(100) = null
	,@TestCode varchar(100)
	,@StartDate datetime
	,@EndDate datetime
	
AS
BEGIN
DECLARE @ID varchar(20)


--Retrieve ID of Control
	SELECT @ID = id   
  FROM tblQCOrderControls 
  WHERE ControlID =  @ControlID
  --AND   Lot       =  @LotNumber <<Get all lots for a graph.

--Retrieve Avg and STD
  --SELECT  @Average = Average , @STDDeviation = STDDeviation 
  --FROM tblQCResults 
  --WHERE ControlID =  @ControlID
  --AND   Lot       =  @LotNumber
  --AND   TestCode  = @TestCode 
  
  Declare @TestUnits varchar(10)
  set @TestUnits = (select distinct Units from tblResultedTestsDefinitions where TestCode = @TestCode and version = 
      (select max(version) from tblResultedTestsDefinitions where TestCode = @TestCode))


  IF @ID IS NOT NULL And @ID != 0
	  BEGIN
		SELECT  qcr.Lot, Result = case when qc.ResultAlphaFlag = 0 then 
						cast(qc.Result as varchar(max)) else qc.Result_AlphaNum end,
		qc.ResultDate, qc.ResultComment, @TestUnits as Units, qcc.ExpirationDate, qcc.InstrumentCode, 
		qcc.[Description], qc.QSSCreatedDate, qc.QSSCreatedById, qc.QCGroupNumber, qc.ResultAlphaFlag
		FROM dbo.tblQCResultValues (nolock) qc
		Inner Join tblQCOrderControls qcr on 
		qc.QCResultsID =  qcr.ID 
		Inner Join tblQCControls qcc on
		qcc.ControlID = qcr.ControlID and
		qcc.Lot = qcr.Lot
		WHERE qcr.ControlID =  @ControlID --AND   Lot  =  @LotNumber)
		AND qc.Status = 'Final'
		And qc.TestCode = @TestCode 
		AND DATEADD(dd, 0, DATEDIFF(dd, 0, ResultDate)) BETWEEN @StartDate AND @EndDate
		ORDER BY qcr.Lot, qc.ResultDate
		
	  END
END









GO
/****** Object:  StoredProcedure [dbo].[spGetControlModule]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetControlModule]
	
	@ControlID as varchar(20)
	,@LotNumber as varchar (100)
	
AS
BEGIN
	select id, ControlID, Lot, InstrumentCode, [Description], TestCodes, Average, Deviation, ExpirationDate, [Status]
	from tblQCControls with (nolock) 
	where 	ControlID = @ControlID AND Lot = @LotNumber
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetControlModulebyID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetControlModulebyID]
	
	@ID as varchar(20)
	
AS
BEGIN
	select *
	from tblControlModules with (nolock) where 
	ID = @ID
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetControlModuleReview]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetControlModuleReview]
	
	@ControlID as varchar(20)
	
AS
BEGIN

	
	select DISTINCT ot.OrderID as Accession, ot.QSSCreatedDate, cm.Lot as LotNumber, ot.QSSCreatedByID,
	
		'Status' = CASE
						WHEN EXISTS (SELECT rt.Status 
										FROM dbo.tblQCResultValues rtv (nolock)
										WHERE rt.id = rtv.QCResultsID and rtv.TestCode = rt.TestCode and  rt.Status = 'Pending'
								     ) THEN 'Pending'
						WHEN EXISTS (SELECT rt.Status FROM dbo.tblQCResultValues rtv (nolock)
										WHERE rt.id = rtv.QCResultsID and rtv.TestCode = rt.TestCode and  rt.Status = 'Hold') THEN 'Hold'
						WHEN EXISTS (SELECT rt.Status FROM dbo.tblQCResultValues rtv (nolock)
										WHERE rt.id = rtv.QCResultsID and rtv.TestCode = rt.TestCode and  rt.Status = 'Final') THEN 'Final'
						WHEN EXISTS (SELECT rt.Status FROM dbo.tblQCResultValues rtv (nolock)
										WHERE rt.id = rtv.QCResultsID and rtv.TestCode = rt.TestCode and  rt.Status = 'Cancelled') THEN 'Cancelled'
										
						ELSE 'New'
		                END 
	
	from  tblQCControls cm
	inner join tblQCOrderControls ot
	on cm.ControlID = ot.ControlID 
	inner join tblQCResults rt
	on rt.OrderID = ot.OrderID	
	where 
	cm.ControlID = @ControlID
	
	--UNION
	
	--select DISTINCT ot.Accession, ot.QSSCreatedDate, cme.LotNumber, ot.QSSCreatedByID,
	
	--	'Status' = CASE
	--					WHEN EXISTS (SELECT rt.Status 
	--									FROM dbo.tblResultedTests rt (nolock)
	--									WHERE rt.Accession = ot.Accession and rt.PerformedTest = cme.id and  rt.Status = 'Pending'
	--							     ) THEN 'Pending'
	--					WHEN EXISTS (SELECT rt.Status FROM dbo.tblResultedTests rt (nolock)
	--									WHERE rt.Accession = ot.Accession and rt.PerformedTest = cme.id and  rt.Status = 'Hold') THEN 'Hold'
	--					WHEN EXISTS (SELECT rt.Status FROM dbo.tblResultedTests rt (nolock)
	--									WHERE rt.Accession = ot.Accession and rt.PerformedTest = cme.id and  rt.Status = 'Final') THEN 'Final'
	--					WHEN EXISTS (SELECT rt.Status FROM dbo.tblResultedTests rt (nolock)
	--									WHERE rt.Accession = ot.Accession and rt.PerformedTest = cme.id and  rt.Status = 'Cancelled') THEN 'Cancelled'
	--	                END 
	
	--from  tblControlModulesExpired cme
	--inner join tblOrderedTests ot
	--on cme.ID = ot.OrderedTest and ot.PerformedTest = cme.ID
	--inner join tblResultedTests rt
	--on rt.Accession = ot.accession and rt.PerformedTest = ot.PerformedTest
	
	--where 
	--cme.ControlID = @ControlID
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetControlModules]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetControlModules]
	
	
	
AS
BEGIN
	select id, ControlID, Lot, InstrumentCode, [Description], TestCodes, Average, Deviation, ExpirationDate
	from tblQCControls with (nolock) 
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetControlModulesForOrder]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetControlModulesForOrder]
	
	@ControlOrderNumber varchar(20)
	
AS
BEGIN
	select con.ControlID As ControlOrderNumber, con.Lot , con.InstrumentCode, 
	       con.[Description], con.TestCodes, con.Average , con.Deviation, con.ExpirationDate
	from tblQCControls con (nolock) 
	INNER JOIN tblQCOrderControls oc (nolock)
	On con.ControlID = oc.ControlID
	AND con.Lot = oc.Lot
	INNER JOIN tblQCOrders ord (nolock)
	ON oc.OrderID = ord.OrderID
	where ord.OrderID = @ControlOrderNumber
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetControlOrder]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetControlOrder]
	@ControlOrderNumber as varchar(20)
	
AS
BEGIN
	SELECT OrderID, OrderDate, [Status], id
	FROM tblQCOrders (nolock) 
	WHERE OrderID =  @ControlOrderNumber
	
	SELECT con.ControlID, con.Lot, con.InstrumentCode, con.[Description], con.ExpirationDate, con.[Status], con.id, ctl.id as QCID
	FROM dbo.tblQCControls con (nolock)
	INNER JOIN dbo.tblQCOrderControls ctl (nolock)
	ON con.ControlID = ctl.ControlID
	AND con.Lot = ctl.Lot
	INNER JOIN dbo.tblQCOrders ord (nolock)
	ON ctl.OrderID = ord.OrderID
	AND ord.OrderID = @ControlOrderNumber
	 
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetControlOrders]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spGetControlOrders]
	
	
	
AS
BEGIN
	select ord.OrderID As ControlOrderNumber, ord.OrderDate, Ord.[Status], con.[Description]
	from tblQCOrders ord (nolock)
	INNER JOIN tblQCOrderControls oc (nolock)
	ON oc.OrderID = ord.OrderID 
	INNER JOIN tblQCControls con
	ON con.ControlID = oc.ControlID
	And con.Lot = oc.Lot
	order by ord.OrderID desc
	
END



GO
/****** Object:  StoredProcedure [dbo].[spGetControls]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[spGetControls]
	
AS
BEGIN
	select ControlID, max(expirationdate) as expirationdate, [Description]
	from tblQCControls with (nolock) group by ControlId, [Description]
	having max(expirationdate) >= GETDATE() order by controlid
END





GO
/****** Object:  StoredProcedure [dbo].[spGetControlTestCodeAvgSTD]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spGetControlTestCodeAvgSTD]	
	 @ControlID varchar(20)
	--,@LotNumber varchar(100)
	,@TestCode varchar(100)
	,@STDDeviation decimal (20,4) = NULL
	
AS
BEGIN

  IF @STDDeviation IS NULL OR @STDDeviation <= 0
   BEGIN
	  SELECT DISTINCT Lot, Average , STDDeviation
	  FROM tblQCResults 
	  WHERE ControlID =  @ControlID
	  --AND   Lot       =  @LotNumber
	  AND   TestCode  =  @TestCode 
	END
   ELSE
    BEGIN
      SELECT DISTINCT Lot, Average , STDDeviation
	  FROM tblQCResults 
	  WHERE ControlID =  @ControlID
	  --AND   Lot       =  @LotNumber
	  AND   TestCode  =  @TestCode 
	  AND   STDDeviation >= @STDDeviation
    END

 
END



GO
/****** Object:  StoredProcedure [dbo].[spGetControlTestCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spGetControlTestCodes]	
	 @ControlID varchar(20)
	,@LotNumber varchar(100) = null
	
AS
BEGIN
DECLARE   @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @FieldList varchar(2000)
		, @TestCodeList varchar(max)
		, @CurTest varchar(20)

Declare @TestCodes table (TestCodeList varchar(max))
Declare @tmpTestCodes table (TestCode varchar(20) NOT NULL)

SET @TestCodeList = ''
if LEN(@LotNumber) > 0 
Begin
	Insert into @TestCodes SELECT distinct con.TestCodes      
	from tblQCControls con (nolock)	
	where  con.ControlID = @ControlID
	   and con.Lot       = @LotNumber
end
else
begin
	Insert into @TestCodes SELECT distinct con.TestCodes      
	from tblQCControls con (nolock)	
	where  con.ControlID = @ControlID 
end

SELECT @TestCodeList = @TestCodeList + TestCodeList + '|'
FROM @TestCodes

IF @TestCodeList != ''
	BEGIN

	Set @FieldList =''
	Set @FieldList = @TestCodeList + '|'
	Set @StartPos = 1
	Set @EndPos = 1

		While @EndPos > 0
		   Begin
			  Set @EndPos = CharIndex('|', @FieldList, @StartPos)
			  If @EndPos > 0
				 Begin
					Set @CurTest = ''
					Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
					Set @CurTest = isnull((select TestCode from @tmpTestCodes where TestCode = @CurVal),'')
		            
		            if len(@CurTest) = 0 
		            Begin
						Insert @tmpTestCodes (TestCode) Values (@CurVal)
					End
					Set @StartPos = @EndPos + 1
				 End
		   
		   --PRINT @FieldList
		 END	
	 END
	SELECT tc.TestCode, rtd.ExternalName from @tmpTestCodes tc 
	INNER JOIN dbo.tblResultedTestsDefinitions rtd  with(nolock) 
	ON tc.TestCode = rtd.TestCode
	INNER JOIN dbo.tblResultCodeVersions rtv 
	ON rtv.TestCode = rtd.TestCode
	AND rtv.CurrentVersion = rtd.Version
	ORDER BY TestCode
	 --IF EXISTS (SELECT TOP 1 TestCode from #tmpTestCodes)
		-- BEGIN
		--	 SELECT 'ALL' AS TestCode
		--	 UNION
		--	 select TestCode from #tmpTestCodes
		--	 ORDER BY TestCode
		--END
END



GO
/****** Object:  StoredProcedure [dbo].[spGetCopiedClients]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCopiedClients] 
	
	@Accession varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT c.ClientCode , c.ClientName, (c.[Address] + c.Address2 + ', ' + c.City + ', ' + c.[State] + ', ' + c.Zip) As [Address], c.Telephone
	FROM tblAccessionsClients a(NOLOCK)
	INNER JOIN tblClients c (nolock)
	on a.ClientCode = c.ClientCode
	WHERE a.Accession = @Accession
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetCOVIDPatientEmailPortalEmailNotSentList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
    
CREATE PROCEDURE [dbo].[spGetCOVIDPatientEmailPortalEmailNotSentList]    
     
AS    
    
BEGIN    
 SELECT * from tblCOVIDPatientEmailPortal where PDFGenerated = 'True' and NeedSync = 'False' and EmailSent is NULL  
        
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetCOVIDPatientEmailPortalPDFNotGeneratedList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCOVIDPatientEmailPortalPDFNotGeneratedList]        
         
AS        
        
BEGIN        
 SELECT p.*, a.LabReportImage from tblCOVIDPatientEmailPortal p      
 inner join tblAccessions a      
 on a.Accession = p.Accession      
  where PDFGenerated = 'False'    
  and EmailAddress <> ''   
   -- and len(a.LabReportImage) > 100    
END  
GO
/****** Object:  StoredProcedure [dbo].[spGetCovidPatientEmailToSync]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
--2/24/2021 Sync tblCOVIDPatientEmailPortal - Server: SafeMedicalData2021
CREATE PROCEDURE [dbo].[spGetCovidPatientEmailToSync]
AS
BEGIN
	SET NOCOUNT ON;
	SELECT [Accession], [PatientID], [PatientLastName], [PatientFirstName], DateOfBirth, EmailAddress,
	[PhoneNumber], CollectionDate, OrderDate, ReportDate
	FROM [tblCOVIDPatientEmailPortal] 
	WHERE NeedSync = 1;
END
GO
/****** Object:  StoredProcedure [dbo].[spGetCovidReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spGetCovidReport]
as  
begin  

select upper(pat.ptLastName) as ptLastName, upper(pat.ptFirstName) as ptFirstName,-- pat.ptDateOfBirth,
 convert(varchar(8),cast( pat.ptDateOfBirth as date),112) ptDateOfBirth,
 pat.ptSex,'2131-1' as Race, 'U' as Ethnicity,
 Replace(replace(replace(replace(replace(replace(replace(replace(replace(Upper(pat.ptAddress1),':',' '),'^',' '),'\',' '),'#',' '),',',' '),'''',' '),'&',' '),'~',' '),'|',' ')  as ptAddress1,
 Replace(replace(replace(replace(replace(replace(replace(replace(replace(Upper(pat.ptAddress2),':',' '),'^',' '),'\',' '),'#',' '),',',' '),'''',' '),'&',' '),'~',' '),'|',' ') as ptAddress2, 
upper(pat.ptCity) as ptCity, upper(pat.ptState) as ptState, upper(pat.ptZip) as ptZip,
 --REPLACE(REPLACE(REPLACE(REPLACE(pat.PTContactHomePhone,'(',''),' ',''),'-',''),')','') as PTContactHomePhone ,
 --COALESCE(NULLIF(REPLACE(REPLACE(REPLACE(REPLACE(pat.PTContactHomePhone,'(',''),' ',''),'-',''),')',''),''), 'NOT PROVIDED') as PTContactHomePhone,
  COALESCE(NULLIF(REPLACE(REPLACE(REPLACE(REPLACE(pat.PTContactHomePhone,'(',''),' ',''),'-',''),')',''),''), '') as PTContactHomePhone,
a.Accession, upper(l.LabName) as LabName, l.CLIAnumber,--  a.CollectionDate,
convert (varchar(8),cast (a.CollectionDate as date),112) as CollectionDate, 
--upper(rtd.ExternalName) as ExternalName, r.LOINCcode '94500-6' as LOINC, 
CASE WHEN r.PerformedTest in ('LD300') THEN upper('SARS coronavirus 2 (COVID19) IgG Ab')
   when    r.PerformedTest in ('LD074') THEN upper(rtd.ExternalName) 
   when r.PerformedTest in('LD301') then upper('SARS coronavirus 2 (COVID19) IgM Ab')
   
   END as ExternalName, 
 
CASE WHEN r.PerformedTest in ('LD300') THEN '94563-4'
   when    r.PerformedTest in ('LD074') THEN '94500-6'
    WHEN r.PerformedTest in ('LD301') THEN '94564-2'
   
   END AS LOINC,
--upper(r.Result) as Result, 

case WHEN  IsNumeric(r.Result)= 1 and r.Result <= rtd.DynamicLowLimit   THEN  'NON-REACTIVE'
          WHEN  IsNumeric(r.Result)=1 and r.Result > rtd.DynamicHighLimit THEN  'REACTIVE'
		  when r.Result like 'Positive%' then  'REACTIVE'
		  when r.Result like 'negative%' then  'NON-REACTIVE'
		  when r.Result like '%REACTIVE%' then  'REACTIVE'
		  when r.Result like '%NON-REACTIVE%' then  'NON-REACTIVE'
           ELSE upper(r.Result)
       END AS Result,

--upper('Nasopharyngeal') as RESULT, upper(dbo.B_GetSpecimenCode(a.Accession)) as SpecimenType,    
CASE WHEN r.PerformedTest in ('LD300') THEN upper('serum')
   when    r.PerformedTest in ('LD074') THEN upper('Nasopharyngeal')
   when    r.PerformedTest in ('LD301') THEN upper('Serum')
   
   END AS SpecimenType, 
upper(c.ClientName) as ClientName,
 --upper(c.Address) as Address, upper(c.Address2) as Address2,
  upper(c.City) as city, upper(c.State) as State, upper(c.Zip) as Zip, REPLACE(REPLACE(REPLACE(REPLACE(c.Telephone,'(',''),' ',''),'-',''),')','')  as Telephone,    
upper(p.LastName) as LastName, upper(p.FirstName) as FirstName,
Replace(replace(replace(replace(replace(replace(replace(replace(replace(Upper(c.Address),':',' '),'^',' '),'\',' '),'#',' '),',',' '),'''',' '),'&',' '),'~',' '),'|',' ') as Address,
Replace(replace(replace(replace(replace(replace(replace(replace(replace(Upper(c.Address2),':',' '),'^',' '),'\',' '),'#',' '),',',' '),'''',' '),'&',' '),'~',' '),'|',' ') as Address2,
 upper(c.City)as city, upper(c.State) as State, upper(c.Zip)as zip, 
 REPLACE(REPLACE(REPLACE(REPLACE(c.Telephone,'(',''),' ',''),'-',''),')','')  as Telephone ,
 upper('') as Comments    
from tblAccessions a    
inner join tblCOVIDNJDOH cv on a.Accession =cv.Accession
join tblResultedTests r    
on a.Accession = r.Accession    
join tblResultedTestsDefinitions rtd    
on r.ResultTest = rtd.TestCode and r.Version = rtd.Version    
join tblPatient pat    
on a.PatientID = pat.PatientId    
join tblClients c    
on a.ClientCode = c.ClientCode    
join tblPhysicians p    
on a.PhysicianCode = p.PhysicianCode    
join tblLabs l    
on l.LabCode = l.LabCode    
left join tblArchiveReviewAccession ara    
on a.Accession = ara.Accession    
where r.PerformedTest in ( 'LD074' ,'LD300'  ,'LD301' )
--and pat.ptState = 'NJ'    
and  r.Result <> 'TNP'
and l.VersionNumber = '2'    
and r.Status = 'Final'    
and r.ResultTest in ('sars' ,'LD300','LD301')   and cv.Reported =0 and (c.State ='NJ' or pat.ptState='NJ') -- and cv.id < 8833
--and ArchivedDate > '2020-06-24 00:00:00'
order by ara.ArchivedDate 
  
end  
   

      




	  



 
 
GO
/****** Object:  StoredProcedure [dbo].[spGetCovidReport_backup]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spGetCovidReport_backup]  
as  
begin  

select upper(pat.ptLastName) as ptLastName, upper(pat.ptFirstName) as ptFirstName,-- pat.ptDateOfBirth,
 convert(varchar(8),cast( pat.ptDateOfBirth as date),112) ptDateOfBirth,
 pat.ptSex,'2131-1' as Race, 'U' as Ethnicity,
 Replace(replace(replace(replace(replace(replace(replace(replace(replace(Upper(pat.ptAddress1),':',' '),'^',' '),'\',' '),'#',' '),',',' '),'''',' '),'&',' '),'~',' '),'|',' ')  as ptAddress1,
 Replace(replace(replace(replace(replace(replace(replace(replace(replace(Upper(pat.ptAddress2),':',' '),'^',' '),'\',' '),'#',' '),',',' '),'''',' '),'&',' '),'~',' '),'|',' ') as ptAddress2, 
upper(pat.ptCity) as ptCity, upper(pat.ptState) as ptState, upper(pat.ptZip) as ptZip,
 --REPLACE(REPLACE(REPLACE(REPLACE(pat.PTContactHomePhone,'(',''),' ',''),'-',''),')','') as PTContactHomePhone ,
 --COALESCE(NULLIF(REPLACE(REPLACE(REPLACE(REPLACE(pat.PTContactHomePhone,'(',''),' ',''),'-',''),')',''),''), 'NOT PROVIDED') as PTContactHomePhone,
  COALESCE(NULLIF(REPLACE(REPLACE(REPLACE(REPLACE(pat.PTContactHomePhone,'(',''),' ',''),'-',''),')',''),''), '') as PTContactHomePhone,
a.Accession, upper(l.LabName) as LabName, l.CLIAnumber,--  a.CollectionDate,
convert (varchar(8),cast (a.CollectionDate as date),112) as CollectionDate, 
--upper(rtd.ExternalName) as ExternalName, r.LOINCcode '94500-6' as LOINC, 
CASE WHEN r.PerformedTest in ('LD300') THEN upper('SARS coronavirus 2 (COVID19) IgG Ab')
   when    r.PerformedTest in ('LD074') THEN upper(rtd.ExternalName) 
   when r.PerformedTest in('LD301') then upper('SARS coronavirus 2 (COVID19) IgM Ab')
   
   END as ExternalName, 
 
CASE WHEN r.PerformedTest in ('LD300') THEN '94563-4'
   when    r.PerformedTest in ('LD074') THEN '94500-6'
    WHEN r.PerformedTest in ('LD301') THEN '94564-2'
   
   END AS LOINC,
--upper(r.Result) as Result, 

case WHEN  IsNumeric(r.Result)= 1 and r.Result <= rtd.DynamicLowLimit   THEN  'NON-REACTIVE'
          WHEN  IsNumeric(r.Result)=1 and r.Result > rtd.DynamicHighLimit THEN  'REACTIVE'
		  when r.Result like 'Positive%' then  'REACTIVE'
		  when r.Result like 'negative%' then  'NON-REACTIVE'
		  when r.Result like '%REACTIVE%' then  'REACTIVE'
		  when r.Result like '%NON-REACTIVE%' then  'NON-REACTIVE'
           ELSE upper(r.Result)
       END AS Result,

--upper('Nasopharyngeal') as RESULT, upper(dbo.B_GetSpecimenCode(a.Accession)) as SpecimenType,    
CASE WHEN r.PerformedTest in ('LD300') THEN upper('serum')
   when    r.PerformedTest in ('LD074') THEN upper('Nasopharyngeal')
   when    r.PerformedTest in ('LD301') THEN upper('Serum')
   
   END AS SpecimenType, 
upper(c.ClientName) as ClientName,
 --upper(c.Address) as Address, upper(c.Address2) as Address2,
  upper(c.City) as city, upper(c.State) as State, upper(c.Zip) as Zip, REPLACE(REPLACE(REPLACE(REPLACE(c.Telephone,'(',''),' ',''),'-',''),')','')  as Telephone,    
upper(p.LastName) as LastName, upper(p.FirstName) as FirstName,
Replace(replace(replace(replace(replace(replace(replace(replace(replace(Upper(c.Address),':',' '),'^',' '),'\',' '),'#',' '),',',' '),'''',' '),'&',' '),'~',' '),'|',' ') as Address,
Replace(replace(replace(replace(replace(replace(replace(replace(replace(Upper(c.Address2),':',' '),'^',' '),'\',' '),'#',' '),',',' '),'''',' '),'&',' '),'~',' '),'|',' ') as Address2,
 upper(c.City)as city, upper(c.State) as State, upper(c.Zip)as zip, 
 REPLACE(REPLACE(REPLACE(REPLACE(c.Telephone,'(',''),' ',''),'-',''),')','')  as Telephone ,
 upper('') as Comments    
from tblAccessions a    
inner join tblCOVIDNJDOH cv on a.Accession =cv.Accession
join tblResultedTests r    
on a.Accession = r.Accession    
join tblResultedTestsDefinitions rtd    
on r.ResultTest = rtd.TestCode and r.Version = rtd.Version    
join tblPatient pat    
on a.PatientID = pat.PatientId    
join tblClients c    
on a.ClientCode = c.ClientCode    
join tblPhysicians p    
on a.PhysicianCode = p.PhysicianCode    
join tblLabs l    
on l.LabCode = l.LabCode    
left join tblArchiveReviewAccession ara    
on a.Accession = ara.Accession    
where r.PerformedTest in ( 'LD074' ,'LD300'  ,'LD301' )
--and pat.ptState = 'NJ'    
and  r.Result <> 'TNP'
and l.VersionNumber = '2'    
and r.Status = 'Final'    
and r.ResultTest in ('sars' ,'LD300','LD301')   and cv.Reported =0 and (c.State ='NJ' or pat.ptState='NJ') -- and cv.id < 8833
--and ArchivedDate > '2020-06-24 00:00:00'
order by ara.ArchivedDate 
  
end  
   

      




	  



 
 
GO
/****** Object:  StoredProcedure [dbo].[spGetCovidResultsReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE procedure[dbo].[spGetCovidResultsReport]
	-- Add the parameters for the stored procedure here
	@StartDate datetime = '2001-01-01 00:00:00',
	@EndDate datetime = getdate,
	@TestCode varchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

Select ac.accession, pt.ptFirstName + ', ' + pt.ptLastName as PatientName, convert(varchar, pt.ptDateOfBirth, 101)
as DateOfBirth, pt.ptSex, pt.ptAddress1, pt.ptCity + ', ' + pt.ptState + ' ' + pt.ptZip as CityStateZip, pt.ptContactHomePhone, pt.PTContactCellPhone, 
ac.ClientCode, cl.ClientName, cl.Address, cl.City + ', ' + cl.State + ' ' + cl.Zip as ClientCityStateZip, cl.Telephone,
ac.PhysicianCode, ph.FullName, ph.NPI, ac.CollectionDate, 
rt.ResultTest, rt.Result, substring(rt.ResultComment, 1, 130) as Comments, ar.QSSFinalizedDate
from tblAccessions ac
left join tblPatient pt
on ac.PatientID = pt.PatientId
left join tblPhysicians ph
on ph.PhysicianCode = ac.PhysicianCode
left join tblClients cl
on cl.ClientCode = ac.ClientCode
inner join tblArchiveReviewAccession ar
on ar.Accession = ac.Accession
and ar.QSSFinalizedDate between @StartDate and @EndDate
inner join tblResultedTests rt
on rt.Accession = ac.Accession
and rt.PerformedTest = @TestCode--SRC|SARS|COM1|COM2|COM3
and rt.Status = 'Final'
order by ac.Accession, rt.ResultTest

Select ac.accession, pt.ptFirstName + ', ' + pt.ptLastName as PatientName, convert(varchar, pt.ptDateOfBirth, 101)
as DateOfBirth, pt.ptSex, pt.ptAddress1, pt.ptCity + ', ' + pt.ptState + ' ' + pt.ptZip as CityStateZip, pt.ptContactHomePhone, pt.PTContactCellPhone, 
ac.ClientCode, cl.ClientName, cl.Address, cl.City + ', ' + cl.State + ' ' + cl.Zip as ClientCityStateZip, cl.Telephone,
ac.PhysicianCode, ph.FullName, ph.NPI, ac.CollectionDate, 
rt.ResultTest, rt.Result, substring(rt.ResultComment, 1, 130) as Comments, ar.QSSFinalizedDate
from tblAccessions ac
left join tblPatient pt
on ac.PatientID = pt.PatientId
left join tblPhysicians ph
on ph.PhysicianCode = ac.PhysicianCode
left join tblClients cl
on cl.ClientCode = ac.ClientCode
inner join tblArchiveReviewAccession ar
on ar.Accession = ac.Accession
and ar.QSSFinalizedDate between @StartDate and @EndDate
inner join tblResultedTests rt
on rt.Accession = ac.Accession
and rt.PerformedTest = 'LD300' --SRC|SARS|COM1|COM2|COM3
and rt.Status = 'Final'
order by ac.Accession, rt.ResultTest

Select ac.accession, pt.ptFirstName + ', ' + pt.ptLastName as PatientName, convert(varchar, pt.ptDateOfBirth, 101)
as DateOfBirth, pt.ptSex, pt.ptAddress1, pt.ptCity + ', ' + pt.ptState + ' ' + pt.ptZip as CityStateZip, pt.ptContactHomePhone, pt.PTContactCellPhone, 
ac.ClientCode, cl.ClientName, cl.Address, cl.City + ', ' + cl.State + ' ' + cl.Zip as ClientCityStateZip, cl.Telephone,
ac.PhysicianCode, ph.FullName, ph.NPI, ac.CollectionDate, 
rt.ResultTest, rt.Result, substring(rt.ResultComment, 1, 130) as Comments, ar.QSSFinalizedDate
from tblAccessions ac
left join tblPatient pt
on ac.PatientID = pt.PatientId
left join tblPhysicians ph
on ph.PhysicianCode = ac.PhysicianCode
left join tblClients cl
on cl.ClientCode = ac.ClientCode
inner join tblArchiveReviewAccession ar
on ar.Accession = ac.Accession
and ar.QSSFinalizedDate between @StartDate and @EndDate
inner join tblResultedTests rt
on rt.Accession = ac.Accession
and rt.PerformedTest = 'RPP' --SRC|SARS|COM1|COM2|COM3
and rt.Status = 'Final'
order by ac.Accession, rt.ResultTest

END
GO
/****** Object:  StoredProcedure [dbo].[spGetCPTCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetCPTCode] 
	@CPTCode as varchar(50)
AS
BEGIN
	
	SET NOCOUNT ON;


	SELECT *  
	FROM dbo.tblCPT a (NOLOCK)	
	where CPTCode = @CPTCode
END
GO
/****** Object:  StoredProcedure [dbo].[spGetCPTCountForAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCPTCountForAccession]   
      @OrderedTestsList varchar(4000),  
      @CPTCode as varchar(50),  
      @BillToType as varchar(100)  
AS  
BEGIN  
   
SET NOCOUNT ON;  
  
DECLARE   @StartPos smallint  
  , @EndPos smallint  
  , @CurVal varchar(20)  
  , @FieldList varchar(2000)  
  , @rOrderedTestsList varchar(500)  
  
if object_id('tempdb..#tempAccessionOrderedTests') is not null  
  
 drop table #tempAccessionOrderedTests  
   
create table #tempAccessionOrderedTests  
(   
  rOrderedTestCode varchar(20)     
)    
  
Set @rOrderedTestsList = @OrderedTestsList  
  
  
  Set @FieldList =''  
  Set @FieldList = @rOrderedTestsList + '|'  
  Set @StartPos = 1  
  Set @EndPos = 1  
   -- Start the looping operation  
  While @EndPos > 0  
     Begin  
     Set @EndPos = CharIndex('|', @FieldList, @StartPos)  
     If @EndPos > 0  
     Begin  
     Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))  
     -- Add current row to TempTable  
     Insert #tempAccessionOrderedTests (rOrderedTestCode) Values (@CurVal)  
     Set @StartPos = @EndPos + 1  
     End  
     End  
  
    Select Distinct * into #tempCPTCount from   
    
      #tempAccessionOrderedTests aot  
    INNER JOIN tblFeeDefinitions otd  
    on aot.rOrderedTestCode = otd.OrderedTestCode  
    and otd.BillTypeCode = @BillToType  
      
    select cptcode, count(1) as Count from #tempCPTCount  
    where cptcode = @cptcode  
    group by cptcode  
  
      
  
END  
GO
/****** Object:  StoredProcedure [dbo].[spGetCPTData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCPTData]     
@ResultTest as varchar(100),  
@BillType varchar(100),  
@ClientCode varchar (20),  
@CollectionDate as datetime  
  
AS    
BEGIN    
  
CREATE TABLE #tmpFeeCPT (  
 OrderedTestCode varchar(100) NOT NULL,  
 FeeDescription varchar(200) NULL,  
 CPTCode varchar(100) NULL,  
 Units int NULL,  
 Modifier varchar(100) NULL,  
 Location varchar(100) NULL,  
 Billable varchar(100) NULL ,  
 TotalFeeAmt decimal(18,2) NULL,  
 ExpAmt decimal(18,2) NULL,  
 CPTGroupName varchar(200) NULL,  
 BillTypeCode varchar(100) NULL,  
 CheckAll bit  
 )  
   
 --1 - Get Group info if it exists  
 Select tblCPTGroups.GroupName, tblCPTGroups.GroupCPTCode, tblCPTScaleMaintance.MaxUnitsSent,   
  tblCPTGroups.Modifier, tblCPTScaleMaintance.Amount, tblCPTGroups.FeeAmt, '' as CPTGroupName,  
  tblCPTGroups.BillTypeCode, tblCPTGroups.CheckAll  
  into #tmpGroupCPT  
 from tblCPTGroups  
 left outer join tblCPTScaleMaintance  
 on tblCPTScaleMaintance.CPTCode = tblCPTGroups.GroupCPTCode   
 and tblCPTScaleMaintance.ConvertToCode = tblCPTGroups.GroupCPTCode  
 and tblCPTScaleMaintance.InsuranceType = tblCPTGroups.BillTypeCode  
 where tblCPTGroups.GroupName = @ResultTest  
 and tblCPTGroups.BillTypeCode = @BillType  
 and tblCPTGroups.EffectiveDate = (select max(effectivedate) from tblCPTGroups where GroupName = @ResultTest  
          and tblCPTGroups.BillTypeCode = @BillType and effectivedate <= @CollectionDate)  
 group by tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName, MaxUnitsSent, tblCPTGroups.Modifier,  
 tblCPTScaleMaintance.Amount, tblCPTGroups.GroupName, tblCPTGroups.BillTypeCode, tblCPTGroups.FeeAmt, tblCPTGroups.CheckAll  
  
 --2 - Get Fee Definition info if it exists  
 insert into #tmpFeeCPT  
 SELECT  @ResultTest as OrderedTestCode, [Description] as FeeDescription, CPTCode, Units, Modifier,   
  Case When Modifier = '90' Then 'M' Else 'I' End as Location,  
  Case When FeeAmt > 0 Then 'BILL' else 'DO NOT BILL' End as Billable,  
  FeeAmt as TotalFeeAmt, ExpPaymentAmt as ExpAmt, '' as CPTGroupName, BillTypeCode, 0 as CheckAll   
 FROM dbo.tblFeeDefinitions  
 WHERE OrderedTestCode = @ResultTest  
   AND BillTypeCode = @BillType  
   AND ( ClientCode = @ClientCode or Upper(ClientCode) = 'ALL' )  
   AND EffectiveDate =   
   (select max(effectivedate) from tblFeeDefinitions where OrderedTestCode = @ResultTest and billtypecode = @BillType   
    and ( ClientCode = @ClientCode or Upper(ClientCode) = 'ALL' ) and EffectiveDate <= @CollectionDate)  
 ORDER BY CPTCode   
  
 --use GroupCPT info if it exists, else use fee info  
 if exists (select GroupCPTCode from #tmpGroupCPT)  
 begin  
  --template for column names is 2nd #tmpFeeCPT definition at top of procedure  
  select @ResultTest as OrderedTestCode, GroupName as FeeDescription, GroupCPTCode as CPTCode, isnull(MaxUnitsSent, 1) as Units,  
  Modifier,  
  Case When Modifier = '90' Then 'M' Else 'I' End as Location,  
  Case When isnull(Amount, 0) + isnull(FeeAmt, 0) > 0 Then 'BILL' else 'DO NOT BILL' End as Billable,  
  isnull(Amount, 0) as TotalFeeAmt,  isnull(FeeAmt, 0) as ExpAmt,   
   GroupName as CPTGroupName, BillTypeCode, CheckAll  
  from #tmpGroupCPT  
 end  
 else begin  
  select * from #tmpFeeCPT  
 end  
END  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetCPTGroupByEffectiveDate]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[spGetCPTGroupByEffectiveDate]  
  @GroupName As Varchar(200),  
  @BillTypeCode as varchar(100),  
  @EffectiveDate as datetime,  
  @LogicOperator as varchar(3)
AS  
    
 BEGIN   
  /*** get the latest CPTGroup records - those set to max(EffectiveDate) ***/  
  if @LogicOperator = '='  
  begin  
   Select * from tblCPTGroups where GroupName = @GroupName and BillTypeCode = @BillTypeCode  
   and EffectiveDate = @EffectiveDate  
   --and EffectiveDate = (Select max(EffectiveDate) from tblCPTGroups where GroupName = @GroupName and BillTypeCode = @BillTypeCode and EffectiveDate = @EffectiveDate)
  end  
  else  
  begin  
   Select * from tblCPTGroups where GroupName = @GroupName and BillTypeCode = @BillTypeCode  
   and EffectiveDate <= @EffectiveDate 
   --and EffectiveDate = (Select max(EffectiveDate) from tblCPTGroups where GroupName = @GroupName and BillTypeCode = @BillTypeCode and EffectiveDate <= @EffectiveDate) 
  end  
 END  
  
   
   
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetCPTGroupByName]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[spGetCPTGroupByName]  
  @GroupName As Varchar(200),  
  @BillTypeCode as varchar(100)  
AS  
    
 BEGIN   
  /*** get the latest CPTGroup records - those set to max(EffectiveDate) ***/  
  Select * from tblCPTGroups where GroupName = @GroupName and BillTypeCode = @BillTypeCode  
  and EffectiveDate =   
  (select max(effectivedate) from tblCPTGroups where   
   tblCPTGroups.GroupName = @GroupName and  
   tblCPTGroups.BillTypeCode = @BillTypeCode)  
  
  /*** get list of all effective dates for this name and bill type combination ***/  
  Select cast(EffectiveDate as date) as EffectiveDate from tblCPTGroups where GroupName = @GroupName and BillTypeCode = @BillTypeCode  
  Group by EffectiveDate  
  Order by EffectiveDate desc  
 END  
  
   
   
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetCPTGroupNames]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetCPTGroupNames]
	
AS
  
 
	BEGIN 

		select Distinct(GroupName)
		from tblCPTGroups 	Order By GroupName
    END

	
	


GO
/****** Object:  StoredProcedure [dbo].[spGetCPTGroupsByOrderList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[spGetCPTGroupsByOrderList]   
 @TestsTable as OrderedResultedTestsType ReadOnly, --NOTE: do "select * from sys.table_types" to get all table types available  
 @BillToType varchar (100)  
AS  
BEGIN  
   
 SET NOCOUNT ON;  
  
 SELECT distinct groupname, orderedtest, GroupCPTCode  
 FROM  @TestsTable AS aot INNER JOIN  
    
  tblCPTGroups ON aot.ResultedTest = tblCPTGroups.ResultCodes   
      
 where tblCPTGroups.BillTypeCode = @BillToType  
 order by OrderedTest, GroupName  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetCPTGroupsByResultList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[spGetCPTGroupsByResultList]   
 @TestsTable as OrderedResultedTestsType ReadOnly, --NOTE: do "select * from sys.table_types" to get all table types available  
 @BillToType varchar (100) --,
 --@CollectionDate as DateTime 
AS  
BEGIN  
   
 SET NOCOUNT ON;  
  
 SELECT distinct groupname, resultedtest, GroupCPTCode, CheckAll, FeeAmt  
 FROM  @TestsTable AS aot INNER JOIN  
    
  tblCPTGroups ON aot.ResultedTest = tblCPTGroups.ResultCodes   
  --and EffectiveDate <= @CollectionDate 
  --and EffectiveDate = (Select max(EffectiveDate) from tblCPTGroups where tblCPTGroups.ResultCodes = aot.ResultedTest 
  --and tblCPTGroups.BillTypeCode = @BillToType and EffectiveDate <= @CollectionDate)  
      
 where tblCPTGroups.BillTypeCode = @BillToType  
 order by ResultedTest, GroupName  
END  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetCPTLookupbyDiagCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCPTLookupbyDiagCode] 
	
	@OrderedTest varchar(100),
	@DiagCode varchar(100),
	@CPTCode varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	Select a.CPTCode, DiagnosisCode from tblCPTLookup a, tblFeeDefinitions b
	Where a.Cptcode = b.cptcode
	and b.BillTypeCode = 'MCR'
	and OrderedTestCode = @OrderedTest
	and DiagnosisCode = @DiagCode
	and a.CPTCode = @CPTCode
END
GO
/****** Object:  StoredProcedure [dbo].[spGetCPTLookupbyOrderedTest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCPTLookupbyOrderedTest] 
	
	@OrderedTest varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	Select Distinct(a.CPTCode) from tblCPTLookup a, tblFeeDefinitions b
	Where a.Cptcode = b.cptcode
	and b.BillTypeCode = 'MCR'
	and OrderedTestCode = @OrderedTest

END


GO
/****** Object:  StoredProcedure [dbo].[spGetCPTScaleByCPTCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCPTScaleByCPTCode]

	@CPTCode varchar(50),
	@BillToType varchar(50)

AS
  
 
BEGIN 

Select * from tblCPTScaleMaintance 
--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--!!!!!!!!! PA 1/9/2019 look ONLY for code to convert !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--where (CPTCode = @CPTCode or ConvertToCode = @CPTCode)
where CPTCode = @CPTCode
and InsuranceType = @BillToType
--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--!!!!!!!!! PA 11/30/2016 MUST BE IN DESCENDING ORDER FOR BILLING ENTRY LOGIC TO WORK !!!!!!!!!!
--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
order by CPTCode, MaxUnits desc


END
GO
/****** Object:  StoredProcedure [dbo].[spGetCPTScaleByInsuranceType]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetCPTScaleByInsuranceType]
	@InsuranceType varchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- This will get all CPTCodes and ConvertCodes from the CPT scaling table for an insurance type
	Select CPTCode, ConvertToCode from tblCPTScaleMaintance 
	where InsuranceType = @InsuranceType
	order by CPTCode, MaxUnits
END
GO
/****** Object:  StoredProcedure [dbo].[spGetCptsforCase]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCptsforCase]           
 @CaseNumber as varchar(100)        
AS          
BEGIN          
           
 SET NOCOUNT ON;          
          
        select R.TestCode  As Code,R.ExternalName as Description ,P.Units as Units
 FROM         tblPathologyBilling P Left join tblResultedTestsDefinitions R on P.ResultTest =R.TestCode     
  INNER JOIN    tblResultCodeVersions ON R.TestCode = tblResultCodeVersions.TestCode AND         
                      R.Version = tblResultCodeVersions.CurrentVersion        
  Where PathologyCase  = @CaseNumber    
                                 
                                
END    
GO
/****** Object:  StoredProcedure [dbo].[spGetCreatinineTest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCreatinineTest]	
	@Accession varchar(100)
AS
BEGIN
	select Accession,	ResultTest, Result FROM  tblResultedTests  rt
 inner join tblCreatinineTest ct
 on rt.ResultTest =  ct.TestCode
 where rt.Accession=@Accession
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetCriticalResultsReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetCriticalResultsReport] 
@StartDate datetime,
@EndDate datetime 
AS
BEGIN
SET NOCOUNT ON

Select rt.Accession , pat.ptLastName + ' ' + pat.ptFirstName as PatientName, rt.ResultTest, rt.Result
FROM dbo.tblResultedTests rt (nolock)
INNER JOIN dbo.tblAccessions ac (nolock)
ON rt.Accession = ac.Accession
INNER JOIN dbo.tblPatient pat(nolock)
ON ac.PatientID = pat.PatientId
WHERE rt.EntryDate BETWEEN @StartDate AND @EndDate
AND (rt.ResultFlag like '%Critical%')
Order by rt.Accession



	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetCustomReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetCustomReport] 
@StartDate datetime,
@EndDate datetime,
@ClientCode varchar(1000),
@InsuranceStatus varchar(12) 
AS
BEGIN
if (@ClientCode = '')
BEGIN
	if @InsuranceStatus<>''
	BEGIN
		SELECT 
		CONVERT(VARCHAR(10), tblAccessions.CollectionDate, 101) + ' ' + CONVERT(VARCHAR(10), tblAccessions.CollectionDate, 108) AS DateCollected,
		CONVERT(VARCHAR(10), tblAccessions.ReceiveDate, 101) AS DateReceived,
		LTRIM(RTRIM(tblAccessions.Accession)) as Accession,
		tblAccessions.PatientID as PatientID, 
		LTRIM(RTRIM((tblPatient.ptLastName + ', ' + tblPatient.ptFirstName + ' ' + tblPatient.ptMiddleName))) as Patient, 
		tblClients.ClientCode, 
		tblClients.ClientName as Clinic, 
		tblPatient.ptSex as Gender, 
		FLOOR(DATEDIFF(hour,tblPatient.ptDateOfBirth,GETDATE())/8766.0) AS Age,
		CONVERT(VARCHAR(10), tblPatient.ptDateOfBirth, 101) AS DOB,
		tblPatient.ptAddress1 as Address,
		tblPatient.ptCity as City,
		tblPatient.ptState as State,
		tblPatient.ptZip as Zip,
		'' as InsuranceName,
		'' as Policy,
		'' as [Group],
		tblPhysicians.PhysicianCode,
		tblPhysicians.FullName as Physician,
		'Final' as Reported,
		CONVERT(VARCHAR(10), tblArchiveReviewAccession.ArchivedDate, 101) + ' ' + CONVERT(VARCHAR(10), tblArchiveReviewAccession.ArchivedDate, 108) AS DateReported,
		--Get Diagnostic Codes
		 STUFF((SELECT distinct
              ', ' + fd.v.value('@code', 'varchar(max)')
           FROM 
              tblAccessions a1
           CROSS APPLY
              a1.DiagnosisDataXML.nodes('QSSLISOrderRecord/ICD9codes/ICD9codes') AS fd(v)
              where tblAccessions.accession=a1.accession
           FOR XML PATH('')
          ), 1, 1, '') as DiagnosticCodes
		,"TestsPerformed",
		Case when tblAccessionSigns.Accession is null then 'No' else 'Yes' end as Signed
		
		FROM tblAccessions 
		INNER JOIN tblPatient ON tblPatient.PatientID = tblAccessions.PatientID
		INNER JOIN tblClients ON tblClients.ClientCode = tblAccessions.ClientCode
		INNER JOIN tblPhysicians ON tblPhysicians.PhysicianCode = tblAccessions.PhysicianCode
		INNER JOIN tblArchiveReviewAccession ON tblArchiveReviewAccession.Accession = tblAccessions.Accession
		
		LEFT JOIN tblAccessionSigns on tblAccessionSigns.Accession =  tblAccessions.Accession
		
		LEFT JOIN
		(Select Main.Accession, Left(Main.Students,Len(Main.Students)-1) As "TestsPerformed"
		From
			(
				Select distinct ST2.Accession, 
					(
						Select ST1.PerformedTest + ';' AS [text()]
						From dbo.tblOrderedTests ST1
						Where ST1.Accession = ST2.Accession
						ORDER BY ST1.Accession
						For XML PATH ('')
					) [Students]
				From dbo.tblOrderedTests ST2
			) [Main]) aa ON aa.Accession = tblAccessions.Accession
		WHERE tblAccessions.ReceiveDate >= @StartDate and tblAccessions.ReceiveDate <= @EndDate
		and tblPatient.InsuranceStatus=@InsuranceStatus
	END
	Else
	Begin
		SELECT 
		CONVERT(VARCHAR(10), tblAccessions.CollectionDate, 101) + ' ' + CONVERT(VARCHAR(10), tblAccessions.CollectionDate, 108) AS DateCollected,
		CONVERT(VARCHAR(10), tblAccessions.ReceiveDate, 101) AS DateReceived,
		LTRIM(RTRIM(tblAccessions.Accession)) as Accession,
		tblAccessions.PatientID as PatientID, 
		LTRIM(RTRIM((tblPatient.ptLastName + ', ' + tblPatient.ptFirstName + ' ' + tblPatient.ptMiddleName))) as Patient, 
		tblClients.ClientCode, 
		tblClients.ClientName as Clinic, 
		tblPatient.ptSex as Gender, 
		FLOOR(DATEDIFF(hour,tblPatient.ptDateOfBirth,GETDATE())/8766.0) AS Age,
		CONVERT(VARCHAR(10), tblPatient.ptDateOfBirth, 101) AS DOB,
		tblPatient.ptAddress1 as Address,
		tblPatient.ptCity as City,
		tblPatient.ptState as State,
		tblPatient.ptZip as Zip,
		'' as InsuranceName,
		'' as Policy,
		'' as [Group],
		tblPhysicians.PhysicianCode,
		tblPhysicians.FullName as Physician,
		'Final' as Reported,
		CONVERT(VARCHAR(10), tblArchiveReviewAccession.ArchivedDate, 101) + ' ' + CONVERT(VARCHAR(10), tblArchiveReviewAccession.ArchivedDate, 108) AS DateReported,
		--Get Diagnostic Codes
		 STUFF((SELECT  distinct
              ', ' + fd.v.value('@code', 'varchar(max)')
           FROM 
              tblAccessions a1
           CROSS APPLY
              a1.DiagnosisDataXML.nodes('QSSLISOrderRecord/ICD9codes/ICD9codes') AS fd(v)
              where tblAccessions.accession=a1.accession
           FOR XML PATH('')
          ), 1, 1, '') as DiagnosticCodes
          
		,"TestsPerformed",
		Case when tblAccessionSigns.Accession is null then 'No' else 'Yes' end as Signed
		
		FROM tblAccessions 
		INNER JOIN tblPatient ON tblPatient.PatientID = tblAccessions.PatientID
		INNER JOIN tblClients ON tblClients.ClientCode = tblAccessions.ClientCode
		INNER JOIN tblPhysicians ON tblPhysicians.PhysicianCode = tblAccessions.PhysicianCode
		INNER JOIN tblArchiveReviewAccession ON tblArchiveReviewAccession.Accession = tblAccessions.Accession
		LEFT JOIN tblAccessionSigns on tblAccessionSigns.Accession =  tblAccessions.Accession
		
		LEFT JOIN
		(Select Main.Accession, Left(Main.Students,Len(Main.Students)-1) As "TestsPerformed"
		From
			(
				Select distinct ST2.Accession, 
					(
						Select ST1.PerformedTest + ';' AS [text()]
						From dbo.tblOrderedTests ST1
						Where ST1.Accession = ST2.Accession
						ORDER BY ST1.Accession
						For XML PATH ('')
					) [Students]
				From dbo.tblOrderedTests ST2
			) [Main]) aa ON aa.Accession = tblAccessions.Accession
		WHERE tblAccessions.ReceiveDate >= @StartDate and tblAccessions.ReceiveDate <= @EndDate
	END
END
ELSE
BEGIN
	If @InsuranceStatus<>''
	BEGIN
		SELECT 
		CONVERT(VARCHAR(10), tblAccessions.CollectionDate, 101) + ' ' + CONVERT(VARCHAR(10), tblAccessions.CollectionDate, 108) AS DateCollected,
		CONVERT(VARCHAR(10), tblAccessions.ReceiveDate, 101) AS DateReceived,
		LTRIM(RTRIM(tblAccessions.Accession)) as Accession, 
		tblAccessions.PatientID as PatientID,
		LTRIM(RTRIM((tblPatient.ptLastName + ', ' + tblPatient.ptFirstName + ' ' + tblPatient.ptMiddleName))) as Patient, 
		tblClients.ClientCode, 
		tblClients.ClientName as Clinic, 
		tblPatient.ptSex as Gender, 
		FLOOR(DATEDIFF(hour,tblPatient.ptDateOfBirth,GETDATE())/8766.0) AS Age,
		CONVERT(VARCHAR(10), tblPatient.ptDateOfBirth, 101) AS DOB,
		tblPatient.ptAddress1 as Address,
		tblPatient.ptCity as City,
		tblPatient.ptState as State,
		tblPatient.ptZip as Zip,
		'' as InsuranceName,
		'' as Policy,
		'' as [Group],
		tblPhysicians.PhysicianCode,
		tblPhysicians.FullName as Physician,
		'Final' as Reported,
		CONVERT(VARCHAR(10), tblArchiveReviewAccession.ArchivedDate, 101) + ' ' + CONVERT(VARCHAR(10), tblArchiveReviewAccession.ArchivedDate, 108) AS DateReported,
		--Get Diagnostic Codes
		 STUFF((SELECT distinct
              ', ' + fd.v.value('@code', 'varchar(max)')
           FROM 
              tblAccessions a1
           CROSS APPLY
              a1.DiagnosisDataXML.nodes('QSSLISOrderRecord/ICD9codes/ICD9codes') AS fd(v)
              where tblAccessions.accession=a1.accession
           FOR XML PATH('')
          ), 1, 1, '') as DiagnosticCodes
		,"TestsPerformed",
		Case when tblAccessionSigns.Accession is null then 'No' else 'Yes' end as Signed
		
		FROM tblAccessions 
		INNER JOIN tblPatient ON tblPatient.PatientID = tblAccessions.PatientID
		INNER JOIN tblClients ON tblClients.ClientCode = tblAccessions.ClientCode
		INNER JOIN tblPhysicians ON tblPhysicians.PhysicianCode = tblAccessions.PhysicianCode
		INNER JOIN tblArchiveReviewAccession ON tblArchiveReviewAccession.Accession = tblAccessions.Accession
		LEFT JOIN tblAccessionSigns on tblAccessionSigns.Accession =  tblAccessions.Accession
		
		LEFT JOIN
		(Select Main.Accession, Left(Main.Students,Len(Main.Students)-1) As "TestsPerformed"
		From
			(
				Select distinct ST2.Accession, 
					(
						Select ST1.PerformedTest + ';' AS [text()]
						From dbo.tblOrderedTests ST1
						Where ST1.Accession = ST2.Accession
						ORDER BY ST1.Accession
						For XML PATH ('')
					) [Students]
				From dbo.tblOrderedTests ST2
			) [Main]) aa ON aa.Accession = tblAccessions.Accession
		WHERE tblClients.ClientCode = @ClientCode and tblAccessions.ReceiveDate >= @StartDate and tblAccessions.ReceiveDate <= @EndDate
		and @InsuranceStatus=InsuranceStatus
	END
	ELSE
	BEGIN
		SELECT 
		CONVERT(VARCHAR(10), tblAccessions.CollectionDate, 101) + ' ' + CONVERT(VARCHAR(10), tblAccessions.CollectionDate, 108) AS DateCollected,
		CONVERT(VARCHAR(10), tblAccessions.ReceiveDate, 101) AS DateReceived,
		LTRIM(RTRIM(tblAccessions.Accession)) as Accession, 
		tblAccessions.PatientID as PatientID,
		LTRIM(RTRIM((tblPatient.ptLastName + ', ' + tblPatient.ptFirstName + ' ' + tblPatient.ptMiddleName))) as Patient, 
		tblClients.ClientCode, 
		tblClients.ClientName as Clinic, 
		tblPatient.ptSex as Gender, 
		FLOOR(DATEDIFF(hour,tblPatient.ptDateOfBirth,GETDATE())/8766.0) AS Age,
		CONVERT(VARCHAR(10), tblPatient.ptDateOfBirth, 101) AS DOB,
		tblPatient.ptAddress1 as Address,
		tblPatient.ptCity as City,
		tblPatient.ptState as State,
		tblPatient.ptZip as Zip,
		'' as InsuranceName,
		'' as Policy,
		'' as [Group],
		tblPhysicians.PhysicianCode,
		tblPhysicians.FullName as Physician,
		'Final' as Reported,
		CONVERT(VARCHAR(10), tblArchiveReviewAccession.ArchivedDate, 101) + ' ' + CONVERT(VARCHAR(10), tblArchiveReviewAccession.ArchivedDate, 108) AS DateReported,
		--Get Diagnostic Codes
		 STUFF((SELECT distinct
              ', ' + fd.v.value('@code', 'varchar(max)')
           FROM 
              tblAccessions a1
           CROSS APPLY
              a1.DiagnosisDataXML.nodes('QSSLISOrderRecord/ICD9codes/ICD9codes') AS fd(v)
              where tblAccessions.accession=a1.accession
           FOR XML PATH('')
          ), 1, 1, '') as DiagnosticCodes
		,"TestsPerformed",
		Case when tblAccessionSigns.Accession is null then 'No' else 'Yes' end as Signed
		
		FROM tblAccessions 
		INNER JOIN tblPatient ON tblPatient.PatientID = tblAccessions.PatientID
		INNER JOIN tblClients ON tblClients.ClientCode = tblAccessions.ClientCode
		INNER JOIN tblPhysicians ON tblPhysicians.PhysicianCode = tblAccessions.PhysicianCode
		INNER JOIN tblArchiveReviewAccession ON tblArchiveReviewAccession.Accession = tblAccessions.Accession
		LEFT JOIN tblAccessionSigns on tblAccessionSigns.Accession =  tblAccessions.Accession
		
		LEFT JOIN
		(Select Main.Accession, Left(Main.Students,Len(Main.Students)-1) As "TestsPerformed"
		From
			(
				Select distinct ST2.Accession, 
					(
						Select ST1.PerformedTest + ';' AS [text()]
						From dbo.tblOrderedTests ST1
						Where ST1.Accession = ST2.Accession
						ORDER BY ST1.Accession
						For XML PATH ('')
					) [Students]
				From dbo.tblOrderedTests ST2
			) [Main]) aa ON aa.Accession = tblAccessions.Accession
		WHERE tblClients.ClientCode = @ClientCode and tblAccessions.ReceiveDate >= @StartDate and tblAccessions.ReceiveDate <= @EndDate
	END
	
END

END





GO
/****** Object:  StoredProcedure [dbo].[spGetCytoCptsforCase]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCytoCptsforCase]             
 @CaseNumber as varchar(100)          
AS            
BEGIN            
             
 SET NOCOUNT ON;            
            
        select R.TestCode  As Code,R.ExternalName as Description ,P.Units as Units 
 FROM         tblCytologyBilling P Left join tblResultedTestsDefinitions R on P.ResultTest =R.TestCode       
  INNER JOIN    tblResultCodeVersions ON R.TestCode = tblResultCodeVersions.TestCode AND           
                      R.Version = tblResultCodeVersions.CurrentVersion          
  Where CytologyCase   = @CaseNumber      
                                   
                                  
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetCytoHeadingsforSource]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCytoHeadingsforSource]               
 @SourceID as integer        
AS              
BEGIN              
               
 SET NOCOUNT ON;              
              
 SELECT    HeadingCode ,Result           
 FROM         tblCytoHeadersForSource            
 Where SourceID = @SourceID           
                              
                                     
                                    
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetCytologists]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCytologists]        
      
AS        
BEGIN        
 select PhysicianCode, FirstName + ' ' + LastName As FullName       
 from tblCytologists      
        
          
END  
GO
/****** Object:  StoredProcedure [dbo].[spGetCytologyCase]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    


          
CREATE PROCEDURE [dbo].[spGetCytologyCase]              
 @CaseNumber as varchar(100)                
                
AS                
BEGIN                
                 
 SET NOCOUNT ON;                
                
SELECT     pc.id, pc.Accession, pc.casenumber,  pc.TestCode, pc.Status,pc.Signed,pc.isAbnormal,pc.StainsDataXML,pc.DiagnosisDataXML,pc.CPTDataXML,pc.Notes             
     ,acc.CollectionDate, acc.ClientCode, acc.PhysicianCode               
     ,ptd.ExternalDescription as TestDescription              
     ,pth.LastName + ' ' + pth.firstName  as CytologistName, pth.PhysicianCode as CytologistCode              
     ,pt.ptLastName + ' ' + pt.ptFirstName AS PatientName, pt.PatientId,pt.ptFirstName, pt.ptLastName, pt.ptMiddleName, pt.ptSex                
     ,phy.FullName as physicianName              
     ,cl.ClientName  ,pc.QSSUpdateDate    , pc.Jars,pc.Cassettes,pc.Sources  ,  pc.Abnormal ,    pc.Slides,pc.ClientCaseNumber    
                   
FROM       tblCytologyCases pc INNER JOIN                
     tblAccessions acc on acc.Accession=pc.Accession                 
     Inner join               
           tblPatient pt ON acc.PatientID = pt.PatientId               
      INNER JOIN                
           tblClients cl ON acc.ClientCode = cl.ClientCode                
     Inner join               
           tblPerformedTestsDefinitions ptd on ptd.performedTest=pc.TestCode                 
     inner join              
     tblPhysicians phy on phy.PhysicianCode=acc.PhysicianCode              
     left outer JOIN                
           tblCytologists  pth ON pc.Cytologist = pth.PhysicianCode                     
                           
 Where pc.CaseNumber = @CaseNumber                                            
                                       
                                      
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetCytologyCasesByAccessionOnly]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetCytologyCasesByAccessionOnly]                   
 @Accession as varchar(100)                  
                  
AS                  
BEGIN                  
                   
 SET NOCOUNT ON;                  
                  
SELECT     pc.id, pc.Accession, pc.casenumber,  pc.TestCode, pc.Status,pc.Signed,pc.isAbnormal,pc.StainsDataXML,pc.DiagnosisDataXML,pc.CPTDataXML,pc.Notes                
     ,acc.CollectionDate, acc.ClientCode, acc.PhysicianCode                 
     ,ptd.ExternalDescription as TestDescription                
     ,pth.LastName + ' ' + pth.firstName  as PathologistName, pth.PhysicianCode as CytologistCode                
     ,pt.ptLastName + ' ' + pt.ptFirstName AS PatientName, pt.PatientId,pt.ptFirstName, pt.ptLastName, pt.ptMiddleName, pt.ptSex                  
     ,phy.FullName as physicianName                
     ,cl.ClientName   , acc.DiagnosisDataXML as ACCDiagnosisDataXML , pc.Jars,pc.Cassettes,pc.Sources  ,pc.abnormal   ,pc.Slides,pc.ClientCaseNumber         
                     
FROM       tblCytologycases pc INNER JOIN                  
     tblAccessions acc on acc.Accession=pc.Accession                   
     Inner join                 
           tblPatient pt ON acc.PatientID = pt.PatientId                 
      INNER JOIN                  
           tblClients cl ON acc.ClientCode = cl.ClientCode                  
     Inner join                 
           tblPerformedTestsDefinitions ptd on ptd.performedTest=pc.TestCode                   
     inner join                
     tblPhysicians phy on phy.PhysicianCode=acc.PhysicianCode                
     left outer JOIN                  
           tblCytologists  pth ON pc.Cytologist = pth.PhysicianCode                       
                             
 Where pc.Accession = @Accession                                              
                                         
                                        
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetCytologyCptCodeInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCytologyCptCodeInfo]       
 @Code varchar(100)     
AS      
BEGIN      
      
 SET NOCOUNT ON      
   select tblResultedTestsDefinitions.TestCode  As Code,ExternalName as [Description]    
 FROM         tblResultedTestsDefinitions WITH (nolock) INNER JOIN        
                      tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode AND         
                      tblResultedTestsDefinitions.Version = tblResultCodeVersions.CurrentVersion        
 where tblResultedTestsDefinitions.TestCode  LIKE ISNULL(@Code, tblResultedTestsDefinitions.TestCode)        
  and Worksheet='billing'      
 order by tblResultedTestsDefinitions.TestCode     
      
    
END  
GO
/****** Object:  StoredProcedure [dbo].[spGetCytologySourcesforCase]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCytologySourcesforCase]           
 @CaseNumber as varchar(100)        
AS          
BEGIN          
           
 SET NOCOUNT ON;          
          
 SELECT     *        
 FROM         tblCytologySources        
 Where CaseNumber = @CaseNumber        
 order by id                             
                                 
                                
END         
    
GO
/****** Object:  StoredProcedure [dbo].[spGetCytologySourcesforCaseGrosserForm]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spGetCytologySourcesforCaseGrosserForm]    
@caseNumber varchar(100)    
as    
begin    
 select CaseNumber,Accession,TestCode,Status,ClientCaseNumber from tblCytologyCases where CaseNumber=@CaseNumber    
 end    
GO
/****** Object:  StoredProcedure [dbo].[spGetCytologyStainRequest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[spGetCytologyStainRequest]    
@CaseNumber varchar(100)    
as    
begin    
select StainRequest from tblCytoStains where caseNumber=@CaseNumber    
end  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetCytologyUpdateType]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[spGetCytologyUpdateType]  
@casenumber varchar(100)  
as  
begin  
select CaseNumber,Accession,TestCode,UpdateType,Reason,Cytologist,convert(varchar, SignedDateTime, 22) as SignedDateTime from tblCytologyCaseUpdates where CaseNumber=@casenumber order by SignedDateTime desc  
end
GO
/****** Object:  StoredProcedure [dbo].[spGetCytoMicroScope]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spGetCytoMicroScope]           
           
AS          
BEGIN          
           
 SET NOCOUNT ON;          
    
 SELECT MicroScopeID,MicroScopeName,MicroScopePath       
 FROM dbo.tblCytoMicroScope            
       
    
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetCytoNextSourceID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCytoNextSourceID]        
        
As        
BEGIN        
    Update tblCounter set counter = isNull(counter,1000) + 1        
 WHERE CountName = 'CytoSourceID'        
         
 SELECT counter, countprefix        
 FROM tblCounter with (NOLOCK)        
 WHERE Countname = 'CytoSourceID'        
END   
GO
/****** Object:  StoredProcedure [dbo].[spGetCytoNextStainID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetCytoNextStainID]          
          
As          
BEGIN          
    Update tblCounter set counter = isNull(counter,1000) + 1          
 WHERE CountName = 'CytoStainID'          
           
 SELECT counter, countprefix          
 FROM tblCounter with (NOLOCK)          
 WHERE Countname = 'CytoStainID'          
END  
GO
/****** Object:  StoredProcedure [dbo].[spGetCytoSlideLabelList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[spGetCytoSlideLabelList]  
@CaseNumber varchar(100)  
as  
begin  
  
select c.Accession,c.CaseNumber,ClientCaseNumber,CollectionDate,a.PatientID,T.ptLastName,T.ptFirstName,cs.Source,s.StainRequest  from tblCytologyCases c   
Left Join tblAccessions a on c.Accession =a.Accession  
 Left join tblPatient T on  T.PatientID =a.PatientID   
  Left join tblCytologySources cs on cs.caseNumber = c.caseNumber   
  Left Join tblCytoStains s on c.CaseNumber =s.CaseNumber  where c.CaseNumber =@CaseNumber  
  
end
GO
/****** Object:  StoredProcedure [dbo].[spGetCytoSourcesforCase]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetCytoSourcesforCase]           
 @CaseNumber as varchar(100)        
AS          
BEGIN          
           
 SET NOCOUNT ON;          
          
 SELECT     *        
 FROM         tblCytologySources        
 Where CaseNumber = @CaseNumber        
 order by id                             
                                 
                                
END         
    
GO
/****** Object:  StoredProcedure [dbo].[spGetCytoStainsforCase]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetCytoStainsforCase]         
 @CaseNumber as varchar(100)      
AS        
BEGIN        
         
 SET NOCOUNT ON;        
        
 SELECT     *      
 FROM         tblCytoStains      
 Where CaseNumber = @CaseNumber                            
                               
                              
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetDataForAbnormalIndexFile]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetDataForAbnormalIndexFile] 
	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT     rr.id, rr.Accession, rr.ClientCode, rr.ClientName, rr.PhysicianCode, rr.PhysicianName, rr.LastName, rr.FirstName, rr.CollectionDate, rr.Status, rr.DateOfBirth, rr.Sex, 
						  rr.PreAccession, rr.ReleaseDate, rr.ReleasedBy, rr.Interface, CASE WHEN EXISTS
							  (SELECT     rt.Status
								FROM          dbo.tblResultedTests rt(nolock)
								WHERE      rt.Accession = rr.Accession AND rt.Outcome = 'I') THEN 'I' ELSE 'C' END AS 'Consistency', CASE WHEN EXISTS
							  (SELECT     rt.Status
								FROM          dbo.tblResultedTests rt(nolock)
								WHERE      rt.Accession = rr.Accession AND rt.ResultFlag = 'Positive') THEN 'P' ELSE 'N' END AS 'Outcome', vAbnormalValues.ResultTestsList, 
						  vAbnormalValues.ResultValuesList, vAbnormalValues.NormalRange
	FROM         tblReleasedForReview AS rr WITH (NOLOCK) INNER JOIN
						  vAbnormalValues ON rr.Accession = vAbnormalValues.Accession
	WHERE     (rr.ClientCode IN
							  (SELECT     ClientCode
								FROM          tbliPowerDoc)) AND (rr.Interface = 'iPowerDoc')
	ORDER BY rr.ClientCode, rr.Accession DESC



		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetDataForConsistancy]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetDataForConsistancy]	
	@Accession varchar(50),
	@TestCode varchar(50)
AS
BEGIN
	
	
	SELECT     tblResultedTestsDefinitions.UseCutoffLimit, tblResultedTestsDefinitions.CutoffLowLimit, tblResultedTestsDefinitions.CutoffHighLimit, 
						  tblResultedTestsDefinitions.MedicationData, a.MedicationsDataXML, tblResultedTestsDefinitions.MedicationDataIndirect, tblResultedTests.NormalRange
	FROM         tblResultedTestsDefinitions INNER JOIN
						  tblAccessions AS a WITH (nolock) ON @Accession = a.Accession FULL OUTER JOIN
						  tblResultedTests ON a.Accession = tblResultedTests.Accession
	WHERE     (@Testcode = tblResultedTestsDefinitions.TestCode and tblResultedTests.ResultTest = @Testcode)
		
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetDataForCriticalIndexFile]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetDataForCriticalIndexFile] 
	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT     rr.id, rr.Accession, rr.ClientCode, rr.ClientName, rr.PhysicianCode, rr.PhysicianName, rr.LastName, rr.FirstName, rr.CollectionDate, rr.Status, rr.DateOfBirth, rr.Sex, 
						  rr.PreAccession, rr.ReleaseDate, rr.ReleasedBy, rr.Interface, CASE WHEN EXISTS
							  (SELECT     rt.Status
								FROM          dbo.tblResultedTests rt(nolock)
								WHERE      rt.Accession = rr.Accession AND rt.Outcome = 'I') THEN 'I' ELSE 'C' END AS 'Consistency', CASE WHEN EXISTS
							  (SELECT     rt.Status
								FROM          dbo.tblResultedTests rt(nolock)
								WHERE      rt.Accession = rr.Accession AND rt.ResultFlag = 'Positive') THEN 'P' ELSE 'N' END AS 'Outcome', vCriticalValues.ResultTestsList, 
						  vCriticalValues.ResultValuesList, vCriticalValues.NormalRange 
	FROM         tblReleasedForReview AS rr WITH (NOLOCK) INNER JOIN
						  vCriticalValues ON rr.Accession = vCriticalValues.Accession
	WHERE     (rr.ClientCode IN
							  (SELECT     ClientCode
								FROM          tbliPowerDoc)) AND (rr.Interface = 'iPowerDoc')
	ORDER BY rr.ClientCode, rr.Accession DESC


		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetDataForIndexFile]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
    
-- =============================================    
-- <11/12/2019><Gladson> Added optional parameter @ClientCode    
-- =============================================      
CREATE PROCEDURE [dbo].[spGetDataForIndexFile]           
 @ClientCode varchar(20) = NULL    
AS    
BEGIN    
SET NOCOUNT ON;    
IF @ClientCode IS NULL    
    
 Select rr.* ,    
   'Consistency' = CASE    
            WHEN EXISTS (SELECT rt.Status     
        FROM dbo.tblResultedTests rt (nolock)    
           WHERE rt.Accession = rr.Accession  and  rt.Outcome = 'I')  THEN 'I'    
       ELSE 'C'    
             END,    
   'Outcome' = CASE    
            WHEN EXISTS (SELECT rt.Status     
        FROM dbo.tblResultedTests rt (nolock)    
           WHERE rt.Accession = rr.Accession  and  (rt.ResultFlag in  ('RL','RH','CLRL','CHRH','Critical High','Critical Low') or (rt.ResultTest = 'sars' and rt.ResultFlag in  ('Positive','Abnormal','RL','RH','CLRL','CHRH','Critical High','Critical Low')))
		   )  THEN 'P' 
       ELSE 'N'   
             END        
         
 , STUFF(    
         (SELECT '|' + cast(otd.description as varchar(100))    
          FROM tblorderedtestsdefinitions otd    
          where orderedtest in (select distinct orderedtest from tblorderedtests ot where rr.Accession = ot.Accession)    
          FOR XML PATH (''))    
          , 1, 1, '')  AS orderedtests ,isnull(a.ProblemComments,'') as IPowerDocComment    
      
 FROM tblReleasedForReview rr with (NOLOCK)    
 JOIN tblAccessions a ON rr.Accession = a.Accession   
 WHERE rr.clientcode IN (select clientcode from tbliPowerDoc)    
 and rr.interface = 'iPowerDoc'    
 ORDER BY rr.ClientCode, rr.Accession desc    
ELSE    
 Select rr.* ,    
   'Consistency' = CASE    
            WHEN EXISTS (SELECT rt.Status     
        FROM dbo.tblResultedTests rt (nolock)    
           WHERE rt.Accession = rr.Accession  and  rt.Outcome = 'I')  THEN 'I'    
       ELSE 'C'    
             END,    
   'Outcome' = CASE    
            WHEN EXISTS (SELECT rt.Status     
        FROM dbo.tblResultedTests rt (nolock)    
            WHERE rt.Accession = rr.Accession  and  (rt.ResultFlag in  ('RL','RH','CLRL','CHRH','Critical High','Critical Low') or (rt.ResultTest = 'sars' and rt.ResultFlag in  ('Positive','Abnormal','RL','RH','CLRL','CHRH','Critical High','Critical Low')))
		   )  THEN 'P' 
       ELSE 'N'    
             END                 
 , STUFF(    
         (SELECT '|' + cast(otd.description as varchar(100))    
          FROM tblorderedtestsdefinitions otd    
          where orderedtest in (select distinct orderedtest from tblorderedtests ot where rr.Accession = ot.Accession)    
          FOR XML PATH (''))    
          , 1, 1, '')  AS orderedtests,isnull(a.ProblemComments,'') as IPowerDocComment    
      
 FROM tblReleasedForReview rr with (NOLOCK)   
 JOIN tblAccessions a ON rr.Accession = a.Accession     
 WHERE rr.clientcode = @ClientCode AND rr.interface = 'iPowerDoc'    
 ORDER BY rr.Accession desc    
      
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetDataForIndexFile1]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- <11/12/2019><Gladson> Added optional parameter @ClientCode
-- =============================================  
CREATE PROCEDURE [dbo].[spGetDataForIndexFile1]       
	@ClientCode varchar(20) = NULL
AS
BEGIN
SET NOCOUNT ON;
IF @ClientCode IS NULL

	Select rr.* ,
			'Consistency' = CASE
				        WHEN EXISTS (SELECT rt.Status 
							 FROM dbo.tblResultedTests rt (nolock)
						     WHERE rt.Accession = rr.Accession  and  rt.Outcome = 'I')  THEN 'I'
						 ELSE 'C'
	            END,
			'Outcome' = CASE
				        WHEN EXISTS (SELECT rt.Status 
							 FROM dbo.tblResultedTests rt (nolock)
						      WHERE rt.Accession = rr.Accession  and  rt.ResultFlag in ('A','Abnormal','C','Critical High','Critical Low','H','HH','High','L','LL','Low','Positive'))  THEN 'P'
						 ELSE 'N'
	            END	            
	, STUFF(
         (SELECT '|' + cast(otd.description as varchar(100))
          FROM tblorderedtestsdefinitions otd
          where orderedtest in (select distinct orderedtest from tblorderedtests ot where rr.Accession = ot.Accession)
          FOR XML PATH (''))
          , 1, 1, '')  AS orderedtests
  
	FROM tblReleasedForReview rr with (NOLOCK)
	WHERE rr.clientcode IN (select clientcode from tbliPowerDoc)
	and rr.interface = 'iPowerDoc'
	ORDER BY rr.ClientCode, rr.Accession desc
ELSE
	Select rr.* ,
			'Consistency' = CASE
				        WHEN EXISTS (SELECT rt.Status 
							 FROM dbo.tblResultedTests rt (nolock)
						     WHERE rt.Accession = rr.Accession  and  rt.Outcome = 'I')  THEN 'I'
						 ELSE 'C'
	            END,
			'Outcome' = CASE
				        WHEN EXISTS (SELECT rt.Status 
							 FROM dbo.tblResultedTests rt (nolock)
						      WHERE rt.Accession = rr.Accession  and  rt.ResultFlag in ('A','Abnormal','C','Critical High','Critical Low','H','HH','High','L','LL','Low','Positive'))  THEN 'P'
						 ELSE 'N'
	            END	            
	, STUFF(
         (SELECT '|' + cast(otd.description as varchar(100))
          FROM tblorderedtestsdefinitions otd
          where orderedtest in (select distinct orderedtest from tblorderedtests ot where rr.Accession = ot.Accession)
          FOR XML PATH (''))
          , 1, 1, '')  AS orderedtests
  
	FROM tblReleasedForReview rr with (NOLOCK)
	WHERE rr.clientcode = @ClientCode AND rr.interface = 'iPowerDoc'
	ORDER BY rr.Accession desc
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetDataForIndexFile2]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetDataForIndexFile2] 
	
--	@ClientCodes varchar(100)
AS
BEGIN
	SET NOCOUNT ON;
	
	--select the accessions from tbliPowerDoc

	SELECT *
	FROM tblReleasedForReview with (NOLOCK)
	WHERE clientcode IN (select clientcode from tbliPowerDoc)
	ORDER BY ClientCode, Accession desc
--	WHERE Code = @Code
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetDataForNFform]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetDataForNFform]	
	@Accession varchar(50)
AS
BEGIN
	DECLARE @PatID varchar(50)
	DECLARE @PriInsuredID varchar(50)
	DECLARE @SecInsuredID varchar(50)

	SET @PatID = (select PatientID from tblBillAccessions where Accession = @Accession)
	SET @PriInsuredID = '*' + @PatID + 'P'
	SET @SecInsuredID = '*' + @PatID + 'S'
	
	SELECT acc.Accession, acc.CollectionDate, acc.ClientCode, c.ClientName, c.Address as ClientAddress, c.Address2 as ClientAddress2, c.City as ClientCity, c.State as ClientState, 
	c.Zip as ClientZip, c.Telephone as ClientTelephone,
	acc.PhysicianCode, phy.FirstName as PhysicianFirstName, phy.LastName as PhysicianLastName, 
	phy.FullName, phy.NPI, acc.CurrentBillTo, acc.DiagnosisDataXML, 
	pat.ptFirstName, pat.ptMiddleName, pat.ptLastName, pat.ptAddress1 , pat.ptAddress2, pat.ptCity, pat.ptState, pat.ptZip,
	pat.ptSSN, pat.ptSex, pat.ptDateOfBirth,
	COALESCE(aii.PrimaryInsuranceID, pat.PrimaryInsuranceID) as PrimaryInsuranceID, COALESCE(aii.PrimaryPatRelationtoIns, pat.PrimaryPatRelationtoIns) as PrimaryPatRelationtoIns, 
	COALESCE(aii.SecondaryInsuranceID, pat.SecondaryInsuranceID) as SecondaryInsuranceID, COALESCE(aii.SecondaryPatRelationtoIns, pat.SecondaryPatRelationtoIns) as SecondaryPatRelationtoIns, 
	acc.InjuryType, acc.State as InjuryState, isnull(acc.SymptomAccidentDate, '') as SymptomAccidentDate
	from dbo.tblBillAccessions  acc (nolock) 
		INNER JOIN dbo.tblPatient pat(nolock)
		ON acc.PatientID = pat.PatientId
		INNER JOIN dbo.tblClients c (nolock)
		ON acc.ClientCode = c.ClientCode
		LEFT JOIN dbo.tblPhysicians phy (nolock)
		ON acc.PhysicianCode = phy.PhysicianCode
		left outer join tblAccessionInsuranceInfo aii (nolock)
		on aii.Accession = acc.Accession
		left outer join tblInsuranceCompanies ic
		on ic.InsuranceCode = aii.PrimaryInsuranceID
		where acc.Accession = @Accession
		
	IF EXISTS( SELECT Accession from tblAccessionInsuranceInfo WHERE  Accession = @Accession)
	BEGIN
		--get information for primary insurance
		select @PriInsuredID as PrimaryInsuredID, PrimaryPlan as [Plan] , PrimaryPolicy as Policy, PrimaryGroup as [Group], PrimaryCopay as Copay,  PrimaryEmployer as Employer,
		PrimaryInsuranceID as InsuranceID, 
			PrimaryFirstName as FirstName ,	PrimaryMiddleName as MiddleName, PrimaryLastName as LastName, PrimaryAddress1 as Address1 ,	PrimaryAddress2 as Address2, PrimaryCity as City , 
			PrimaryState as [State] ,	PrimaryZip as Zip ,
			PrimaryHomePhone as HomePhone ,	PrimaryWorkPhone as WorkPhone ,	PrimaryCellPhone as CellPhone,	PrimaryEmail as Email ,	PrimaryFax as Fax ,	PrimaryDateOfBirth as DateOfBirth ,	
			PrimarySex as Sex ,	PrimarySSN as SSN ,
			ic.Name as InsuranceCoName, ic.Address as InsuranceCoAddress, ic.Address2 as InsuranceCoAddress2, ic.City as InsuranceCoCity, ic.State as InsuranceCoState,
			ic.Zip as InsuranceCoZip, ic.Telephone as InsuranceCoTelephone
		from tblAccessionInsuranceInfo aii (nolock) 
		inner join tblInsuranceCompanies ic
		on ic.InsuranceCode = aii.PrimaryInsuranceID
		where Accession = @Accession
		
		--get information for secondary insurance
		select @SecInsuredID as SecondaryInsuredID, SecondaryPlan as [Plan] , SecondaryPolicy as Policy, SecondaryGroup as [Group], SecondaryCopay as Copay,  SecondaryEmployer as Employer,
		SecondaryInsuranceID as InsuranceID, 
			SecondaryFirstName as FirstName ,	SecondaryMiddleName as MiddleName, SecondaryLastName as LastName, SecondaryAddress1 as Address1 ,	SecondaryAddress2 as Address2, SecondaryCity as City , 
			SecondaryState as [State] ,	SecondaryZip as Zip ,
			SecondaryHomePhone as HomePhone ,	SecondaryWorkPhone as WorkPhone ,	SecondaryCellPhone as CellPhone,	SecondaryEmail as Email ,	SecondaryFax as Fax ,	SecondaryDateOfBirth as DateOfBirth ,	
			SecondarySex as Sex ,	SecondarySSN as SSN , 
			ic.Name as InsuranceCoName, ic.Address as InsuranceCoAddress, ic.Address2 as InsuranceCoAddress2, ic.City as InsuranceCoCity, ic.State as InsuranceCoState,
			ic.Zip as InsuranceCoZip, ic.Telephone as InsuranceCoTelephone
		from tblAccessionInsuranceInfo aii (nolock)  
		inner join tblInsuranceCompanies ic
		on ic.InsuranceCode = aii.SecondaryInsuranceID
		where Accession = @Accession
	END
	ELSE
	BEGIN
		
		
		--get information for primary insurance
		select ii.InsuredID as PrimaryInsuredID, ii.[Plan] , ii.Policy, ii.[Group], ii.Copay,  ii.Employer ,
		ii.InsuranceID, 
			ii.FirstName ,	ii.MiddleName ,	ii.LastName ,		ii.Address1 ,	ii.Address2 ,	ii.City ,	ii.[State] ,	ii.Zip ,
			ii.HomePhone ,	ii.WorkPhone ,	ii.CellPhone,	ii.Email ,	ii.Fax ,	ii.DateOfBirth ,	ii.Sex ,	ii.SSN ,
			ic.Name as InsuranceCoName, ic.Address as InsuranceCoAddress, ic.Address2 as InsuranceCoAddress2, ic.City as InsuranceCoCity, ic.State as InsuranceCoState,
			ic.Zip as InsuranceCoZip, ic.Telephone as InsuranceCoTelephone
		from dbo.tblInsuredInfo ii(nolock) 
		inner join tblInsuranceCompanies ic
		on ic.InsuranceCode = ii.InsuranceID
		where InsuredID = @PriInsuredID 
		
		
		--get information for secondary insurance
		select ii.InsuredID as SecondaryInsuredID, ii.[Plan] , ii.Policy, ii.[Group], ii.Copay,  ii.Employer ,
		ii.InsuranceID, 
		--ic.Name as InsuranceName,
			ii.FirstName ,	ii.MiddleName ,	ii.LastName ,		ii.Address1 ,	ii.Address2 ,	ii.City ,	ii.[State] ,	ii.Zip ,
			ii.HomePhone ,	ii.WorkPhone ,	ii.CellPhone,	ii.Email ,	ii.Fax ,	ii.DateOfBirth ,	ii.Sex ,	ii.SSN ,
			ic.Name as InsuranceCoName, ic.Address as InsuranceCoAddress, ic.Address2 as InsuranceCoAddress2, ic.City as InsuranceCoCity, ic.State as InsuranceCoState,
			ic.Zip as InsuranceCoZip, ic.Telephone as InsuranceCoTelephone
		from dbo.tblInsuredInfo ii(nolock) 
		inner join tblInsuranceCompanies ic
		on ic.InsuranceCode = ii.InsuranceID
	--	INNER JOIN dbo.tblInsuranceCompanies ic (nolock)
	--	ON ic.InsuranceCode = ii.InsuranceID
		where InsuredID = @SecInsuredID 
	END
	
		-- PA 5/3/2017 - get Work Related Injury Date and Auto Related Injury Date from tblInsuredInfo regardless
	select ii.WorkRelatedInjuryDate, ii.AutoRelatedInjuryDate
	from dbo.tblInsuredInfo ii(nolock) 
	where InsuredID = @PriInsuredID 
	
	select ii.WorkRelatedInjuryDate, ii.AutoRelatedInjuryDate
	from dbo.tblInsuredInfo ii(nolock) 
	where InsuredID = @SecInsuredID 
	
	
END

GO
/****** Object:  StoredProcedure [dbo].[spGetDataForTestResult]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Update 8/1/2017 Gladson	- Modified AlphaDecodeFlag to return matching tblResultedTestDecodes.Flag
-- Update 3/26/2019 Paul	- Encapsulated all in udf_GetDataForTestResult because also needed in
--							- spAddToAutoReleaseQueue
-- =============================================
CREATE PROCEDURE [dbo].[spGetDataForTestResult]         
                @Accession varchar(100),
                @TestCode varchar(100),
                @Result varchar(100)
AS
BEGIN

--call function that will return table of data for the test code and result sent in
select * from dbo.udf_GetDataForTestResult(@Accession, @TestCode, @Result)
                
END
GO
/****** Object:  StoredProcedure [dbo].[spGetDataForTestResultForInstrument]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Update 8/1/2017 Gladson - Modified AlphaDecodeFlag to return matching tblResultedTestDecodes.Flag
-- =============================================
CREATE PROCEDURE [dbo].[spGetDataForTestResultForInstrument]         
                @Accession varchar(100),
                @TestCode varchar(100),
                @Result varchar(100)
AS
BEGIN


Declare @Age as int

Select  @Age  = DATEDIFF(year,pat.ptDateOfBirth, getDate()) 
from tblPatient pat (nolock)
INNER JOIN tblAccessions acc (nolock)
ON pat.PatientId = acc.PatientID
Where acc.Accession = @Accession
                
SELECT top 1  CASE WHEN EXISTS  
                          (SELECT     Flag  
                            FROM          tblResultedTestDecodes rt1(nolock)  
                            WHERE      rt1.TestCode = @TestCode AND rt1.Flag <> '' AND (rt1.decode = @Result or rt1.Code=@Result)) THEN 'True' ELSE 'False' END AS 'AlphaDecodeFlag',    
                      tblPatient.ptSex, DATEDIFF(year,tblPatient.ptDateOfBirth, getDate()) as PatientAge, 
                      tblResultedTestsDefinitions.UseCutoffLimit, tblResultedTestsDefinitions.UseRangeLimits, tblResultedTests.Version AS TestVersion, 
                      tblResultedTestsDefinitions.MedicationData, a.MedicationsDataXML, tblResultedTestsDefinitions.MedicationDataIndirect, tblResultedTests.NormalRange, 
                      tblResultedTestsDefinitions.UseAlpha, tblResultedTestsDefinitions.DecodedFlagRequired, tblResultedTestsDefinitions.CutoffLowLimit, 
                      tblResultedTestsDefinitions.CutoffHighLimit, tblResultedTestsDefinitions.ReportNormalRangeLow, tblResultedTestsDefinitions.ReportNormalRangeHigh, 
                      tblResultedTestsDefinitions.DynamicLowLimit, tblResultedTestsDefinitions.DynamicHighLimit, tblResultedTestsDefinitions.ReportAs, tblResultedTestsDefinitions.LowReportAs, 
                      tblResultedTestsDefinitions.TestCode, tblResultedTestsDefinitions.Version AS Expr1, tblResultedTestsParams.LowLimit , 
                      tblResultedTestsParams.HighLimit , tblResultedTestsParams.NormalLowLimit AS 'Range_NormalLow', 
                      tblResultedTestsParams.NormalHighLimit AS 'Range_NormalHigh', tblResultedTestsParams.CriticalLowLimit AS 'Range_CriticalLow', 
                      tblResultedTestsParams.CriticalHighLimit AS 'Range_CriticalHigh',
					  -- tblResultedTestsParams.ReviewLowLimit AS 'Range_ReviewLow', 
                     -- tblResultedTestsParams.ReviewHighLimit AS 'Range_ReviewHigh',
					   tblResultedTestsParams.DisplayResultAs, 
                      tblResultedTestsParams.DynamicLow AS Range_DynamicLow, tblResultedTestsParams.DynamicLowReportAs AS Range_DynamicLowReportAs, 
                      tblResultedTestsParams.DynamicHigh AS Range_DynamicHigh, tblResultedTestsParams.DynamicHighReportAs AS Range_DynamicHighReportAs, 
                      tblResultedTestsParams.MinAge AS 'Range_MinAge', tblResultedTestsParams.MaxAge AS 'Range_MaxAge',tblResultedTestsDefinitions.Decimals,
					    (SELECT  top 1    Flag  
                       FROM       tblResultedTestDecodes rt1(nolock)  
                       WHERE      rt1.TestCode = @TestCode AND rt1.Flag <> '' AND (rt1.decode = @Result or rt1.Code=@Result))  AS 'AlphaDecode'
FROM         tblResultedTestsDefinitions INNER JOIN
                      tblAccessions AS a WITH (nolock) ON @Accession = a.Accession INNER JOIN
                      tblPatient ON a.PatientID = tblPatient.PatientId INNER JOIN
                      tblResultedTestsParams ON tblResultedTestsDefinitions.TestCode = tblResultedTestsParams.ResultedTest AND 
                      tblResultedTestsDefinitions.Version = tblResultedTestsParams.Version AND tblPatient.ptSex = tblResultedTestsParams.Sex FULL OUTER JOIN
                      tblResultedTests ON tblResultedTestsDefinitions.Version = tblResultedTests.Version AND a.Accession = tblResultedTests.Accession
WHERE     (@TestCode = tblResultedTestsDefinitions.TestCode) AND (tblResultedTests.ResultTest = @TestCode) and @Age BETWEEN tblResultedTestsParams.MinAge and tblResultedTestsParams.MaxAge
                
END

GO
/****** Object:  StoredProcedure [dbo].[spGetDefaultCytoMicroScope]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetDefaultCytoMicroScope]             
@UserID  varchar(20)             
AS            
BEGIN            
             
 SET NOCOUNT ON;            
      
SELECT MicroScopeID,m.MicroScopeName,MicroScopePath       
FROM dbo.tblCytoMicroScope m Left join tblUsersID u on    u.MicroscopeName =m.MicroScopeName  where u.UserID =@UserID            
         
      
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetDefaultMicroScope]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetDefaultMicroScope]         
@UserID  varchar(20)         
AS        
BEGIN        
         
 SET NOCOUNT ON;        
  
SELECT MicroScopeID,m.MicroScopeName,MicroScopePath   
FROM dbo.tblMicroScope m Left join tblUsersID u on    u.MicroscopeName =m.MicroScopeName  where u.UserID =@UserID        
     
  
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetDenialCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:                            <Author,,Name>
-- Create date: <Create Date,,>
-- Description:    <Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetDenialCodes]
                @Code as varchar(100) = Null
AS
BEGIN
                if @Code is null 
                begin
                                select distinct DenialCode, DenialDescription, DenialAction, BillType, MessageCode, isnull(m.Description, '') as BillMessage 
                                                from tblDenialDefinitions d
                                                left outer join tblBillMessages m
                                                on m.Code = d.MessageCode
                                                Order by DenialCode asc
                end
                else
                begin
                                select distinct DenialCode, DenialDescription, DenialAction, BillType, MessageCode, isnull(m.Description, '') as BillMessage 
                                                from tblDenialDefinitions d
                                                left outer join tblBillMessages m
                                                on m.Code = d.MessageCode
                                                where DenialCode = @Code
                end
END

GO
/****** Object:  StoredProcedure [dbo].[spGetDenialsReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetDenialsReport]
		
AS
BEGIN

	SET NOCOUNT ON
	SELECT br.Accession, br.ptLastName + ', ' + br.ptFirstName as PatientName, br.CheckNumber, convert(varchar,br.CheckDate, 101) As CheckDate, 
	--convert(varchar, a.ReceiveDate, 101) As ServiceDate,
	br.CPT_Code, br.Modifier,
	br.Units, br.CPT_Charge, br.CPT_Paid, br.AdjustmentCode, br.AdjustmentReason, br.AdjustmentAmount
	from tblBillingTempRemit br (NOLOCK)
	--inner join tblAccessions a (NOLOCK)
	--on a.Accession = br.Accession
	--where AdjustmentCode<>''
	where CPT_Paid=0.00
END

GO
/****** Object:  StoredProcedure [dbo].[spGetDiagCodeInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Batch submitted through debugger: SQLQuery4.sql|7|0|C:\Documents and Settings\Administrator\Local Settings\Temp\~vsF31.sql
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetDiagCodeInfo] 
	@LabCode as varchar(50),
	@DiagCode as varchar(50)
AS
BEGIN
	select *  from tblDiagnosticCodes  with (nolock)
	 where labcode = @LabCode  and DiagnosticCode =@DiagCode
END
GO
/****** Object:  StoredProcedure [dbo].[spGetDiagCodesFavoritesBoxes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Batch submitted through debugger: SQLQuery4.sql|7|0|C:\Documents and Settings\Administrator\Local Settings\Temp\~vs1735.sql
-- Batch submitted through debugger: SQLQuery7.sql|7|0|C:\Users\Lana\AppData\Local\Temp\~vsAA7E.sql
-- Batch submitted through debugger: SQLQuery4.sql|7|0|C:\Users\Lana\AppData\Local\Temp\~vs4973.sql
-- Batch submitted through debugger: SQLQuery2.sql|7|0|C:\Users\Lana\AppData\Local\Temp\~vsE4C4.sql
-- =============================================
-- Author:		<Author		: Lana>
-- Create date: <Create Date: 11/11/2010>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetDiagCodesFavoritesBoxes]
	@LabCode varchar(20),
	@ClientCode varchar(20) = NULL,
	@RequestingPhysicianCode varchar(20) =  NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	
SET NOCOUNT ON;
CREATE   table #tmpDiagFavoriteCodes    
( RowID int identity(1,1) not null   
, DiagnosticCode   varchar(50) null    
, Description  varchar(250) null
, IsPanel bit    null
   
)


CREATE   table #tmpGridDiagFavoriteCodesA    
(  RowID int identity(1,1) not null  
, DiagCodeA   varchar(50) null    
, DescriptionA  varchar(250) null
, IsPanelA bit    null
)
CREATE   table #tmpGridDiagFavoriteCodesB   
(  RowID int identity(1,1) not null
,  DiagCodeB   varchar(50) null    
, DescriptionB  varchar(250) null
, IsPanelB bit    null
 
)
CREATE   table #tmpGridDiagFavoriteCodesC   
(   RowID int identity(1,1) not null
,  DiagCodeC   varchar(50) null    
, DescriptionC  varchar(250) null
, IsPanelC bit    null
)

CREATE   table #tmpGridDiagFavoriteCodesD   
(   RowID int identity(1,1) not null
,  DiagCodeD   varchar(50) null   DEFAULT '' 
, DescriptionD  varchar(250) null DEFAULT ''
, IsPanelD bit    null DEFAULT 0
)
DECLARE 
        @RowTotal int
       ,@ColumnRowA int   
       ,@ColumnRowB int
       ,@ColumnRowC int
       ,@ColumnRowD int       
       ,@RowRemainder decimal(10,2) 
       ,@DecimalRemainder decimal(10,2)   
       ,@DiagnosticCode varchar(50)  
       
    
    INSERT INTO #tmpDiagFavoriteCodes(DiagnosticCode, Description, IsPanel)
	SELECT a.DiagnosticCode, rtrim(a.DiagnosticCode) + '  ' + RTRIM( b.Description)  As Description, IsNull(a.IsPanel,0) As IsPanel from tblDiagCodesFavoritesBoxes a (nolock) 
	inner join tblDiagnosticCodes b
	on a.DiagnosticCode = b.DiagnosticCode
		where a.LabCode = @LabCode
		and a.ClientCode = @ClientCode
		and a.RequestingPhysicianCode = @RequestingPhysicianCode
	order by a.IsPanel desc, a.DiagnosticCode asc
	
SELECT @RowTotal = COUNT(*) from  #tmpDiagFavoriteCodes(nolock)
SET @RowRemainder = @RowTotal/4.00
SET @DecimalRemainder = @RowRemainder - FLOOR(@RowRemainder)

IF @DecimalRemainder=0 
BEGIN   

	SET @ColumnRowA = FLOOR(@RowRemainder)
END 
ELSE 
BEGIN 

	SET @ColumnRowA = @RowRemainder + 1
END

SET  @ColumnRowB = @ColumnRowA * 2
SET  @ColumnRowC = @ColumnRowA * 3
--SET  @ColumnRowD = @ColumnRowA * 4

INSERT INTO #tmpGridDiagFavoriteCodesA(DiagCodeA, DescriptionA,IsPanelA)
SELECT DiagnosticCode, Description, IsPanel from #tmpDiagFavoriteCodes
WHERE RowID <= @ColumnRowA

INSERT INTO #tmpGridDiagFavoriteCodesB(DiagCodeB, DescriptionB,IsPanelB)
SELECT DiagnosticCode, Description, IsPanel from #tmpDiagFavoriteCodes
WHERE RowID > @ColumnRowA AND RowID <= @ColumnRowB

INSERT INTO #tmpGridDiagFavoriteCodesC(DiagCodeC, DescriptionC,IsPanelC)
SELECT DiagnosticCode, Description, IsPanel from #tmpDiagFavoriteCodes
WHERE RowID > @ColumnRowB AND RowID <= @ColumnRowC

INSERT INTO #tmpGridDiagFavoriteCodesD(DiagCodeD, DescriptionD,IsPanelD)
SELECT ISNULL(DiagnosticCode,''), ISNULL(Description,''), ISNULL(IsPanel,0) from #tmpDiagFavoriteCodes
WHERE RowID > @ColumnRowC 

SELECT 
ISNULL(a.DiagCodeA, '') as DiagCodeA, ISNULL(a.DescriptionA , '') as DescriptionA, ISNULL(a.IsPanelA,0) as IsPanelA, 
ISNULL(b.DiagCodeB, '') as DiagCodeB, ISNULL(b.DescriptionB , '') as DescriptionB, ISNULL(b.IsPanelB,0) as IsPanelB, 
ISNULL(c.DiagCodeC, '') as DiagCodeC, ISNULL(c.DescriptionC , '') as DescriptionC, ISNULL(c.IsPanelC,0) as IsPanelC,
ISNULL(d.DiagCodeD, '') as DiagCodeD, ISNULL(d.DescriptionD , '') as DescriptionD, ISNULL(d.IsPanelD,0) as IsPanelD FROM #tmpGridDiagFavoriteCodesA a(nolock)
LEFT JOIN  #tmpGridDiagFavoriteCodesB b(nolock)
ON a.RowID = b.RowID
LEFT JOIN  #tmpGridDiagFavoriteCodesC c(nolock)
ON b.RowID = c.RowID
LEFT JOIN  #tmpGridDiagFavoriteCodesD d(nolock)
ON c.RowID = d.RowID

END

IF object_id('tempdb..#tmpDiagFavoriteCodes') is not null  
  DROP TABLE #tmpDiagFavoriteCodes
IF object_id('tempdb..#tmpGridDiagFavoriteCodesA') is not null  
  DROP TABLE #tmpGridDiagFavoriteCodesA
IF object_id('tempdb..#tmpGridDiagFavoriteCodesB') is not null  
  DROP TABLE #tmpGridDiagFavoriteCodesB
IF object_id('tempdb..#tmpGridDiagFavoriteCodesC') is not null  
  DROP TABLE #tmpGridDiagFavoriteCodesC
IF object_id('tempdb..#tmpGridDiagFavoriteCodesD') is not null  
  DROP TABLE #tmpGridDiagFavoriteCodesD
GO
/****** Object:  StoredProcedure [dbo].[spGetDiagnosisInfoForRequisitionEntry]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetDiagnosisInfoForRequisitionEntry] 
      @DiagnosisCodesList varchar(1000)
AS
BEGIN
	
SET NOCOUNT ON;

DECLARE   @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @FieldList varchar(2000)
		, @rDiagnosisCodesList varchar(500)

if object_id('tempdb..#tempAccessionDiagnosisCodes') is not null

	drop table #tempAccessionDiagnosisCodes
	
create table #tempAccessionDiagnosisCodes
( 
	 rDiagnosisCode varchar(20)   
)  

Set @rDiagnosisCodesList = @DiagnosisCodesList


		Set @FieldList =''
		Set @FieldList = @rDiagnosisCodesList + '|'
		Set @StartPos = 1
		Set @EndPos = 1
		 -- Start the looping operation
		While @EndPos > 0
		   Begin
			  Set @EndPos = CharIndex('|', @FieldList, @StartPos)
			  If @EndPos > 0
				 Begin
					Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
					-- Add current row to TempTable
					Insert #tempAccessionDiagnosisCodes (rDiagnosisCode) Values (@CurVal)
					Set @StartPos = @EndPos + 1
				 End
		   End

		  
		  SELECT DiagnosisCode, Description
	       
		  
				  
		  from  #tempAccessionDiagnosisCodes aot
		  INNER JOIN tblDiagnosis otd
		  on aot.rDiagnosisCode = otd.DiagnosisCode
		  order by DiagnosisCode
END
GO
/****** Object:  StoredProcedure [dbo].[spGetDiagnosisInfoMA]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetDiagnosisInfoMA] 
	
	@Code varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT *
	FROM tblDiagnosis with (NOLOCK)
	WHERE DiagnosisCode = @Code
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetDiagnosticCodeInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetDiagnosticCodeInfo] 
	@DiagnosticCode varchar(50)
AS
BEGIN

	SET NOCOUNT ON


	SELECT DiagnosisCode, Description
	FROM dbo.tblDiagnosis  (NOLOCK)
	WHERE DiagnosisCode = @DiagnosticCode
END
GO
/****** Object:  StoredProcedure [dbo].[spGetDiagnosticCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetDiagnosticCodes]
	@LabCode as varchar(50)
AS
BEGIN
	select diagnosticcode, [description] from tblDiagnosticCodes with (nolock) where labcode = @LabCode
	order by diagnosticcode asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetDiagnosticCodesFavorites]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Batch submitted through debugger: SQLQuery4.sql|7|0|C:\Documents and Settings\Administrator\Local Settings\Temp\~vsEE6.sql
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetDiagnosticCodesFavorites]
	@LabCode varchar(20),
	@ClientCode varchar(20),
	@PhysicianCode varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT a.diagnosticcode, b.description from tblDiagnosticCodesFavorites a 
	inner join tblDiagnosticCodes b
	on a.diagnosticcode =  b.diagnosticcode
		where a.LabCode = @LabCode
		and a.ClientCode = @ClientCode
		and a.RequestingPhysicianCode = @PhysicianCode
	order by a.diagnosticcode asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetDiagnosticCodesForDropdown]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Anthony Romero
-- Create date: 6/12/10
-- =============================================
CREATE PROCEDURE [dbo].[spGetDiagnosticCodesForDropdown]
	@LabCode as varchar(50)
AS
BEGIN
		Select
		DiagnosticCode, 
		DiagnosticCode + ' - ' + description  as [description]
		from tblDiagnosticCodes  (nolock)
		where labcode = @labcode 
		order by diagnosticcode

	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetDuplicatePreAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetDuplicatePreAccession] 
       @PreAccession varchar(50)
AS
BEGIN

       SET NOCOUNT ON

       SELECT Accession
       FROM tblAccessions
       WHERE PreAccession = @PreAccession
END
GO
/****** Object:  StoredProcedure [dbo].[spGetElectronicClaimSubmissionInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetElectronicClaimSubmissionInfo] 
	@ClaimSubmissionID as varchar(50), 
	@Clearinghouse as varchar(100) = NULL
AS
BEGIN
	if @Clearinghouse is NULL select top 1 * from tblElectronicClaimSubmission  with (nolock)
	where ClaimSubmissionID = @ClaimSubmissionID
	else begin
		select *  from tblElectronicClaimSubmission  with (nolock)
		where ClaimSubmissionID = @ClaimSubmissionID and NM1R_ReceiverName like @Clearinghouse + '%'
	end
END

GO
/****** Object:  StoredProcedure [dbo].[spGetEmailListForPDF]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
CREATE PROCEDURE [dbo].[spGetEmailListForPDF]
	
AS
	SET NOCOUNT ON;

	SELECT a.Accession, b.LabReportImage, c.ClientCode, c.Email, c.[Description] ClientName, c.ZipPassword 
	FROM tblAutoEmail a
	INNER JOIN tblAccessions b ON a.Accession = b.Accession
	INNER JOIN tblClientsEmails c ON a.ClientCode = c.ClientCode;
GO
/****** Object:  StoredProcedure [dbo].[spGetEMRAthenaPatientIDFromLIS]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE Procedure [dbo].[spGetEMRAthenaPatientIDFromLIS]
(
	@PatientIDLIS varchar(50)
)
As
BEGIN
	SELECT PatientIDEMR FROM tblEMRAthenaPatientID WHERE (PatientIDLIS = @PatientIDLIS)
END

GO
/****** Object:  StoredProcedure [dbo].[spGetEMRChangeHealthcarePatientIDFromLIS]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE Procedure [dbo].[spGetEMRChangeHealthcarePatientIDFromLIS]
(
	@PatientIDLIS varchar(50)
)
As
BEGIN
	SELECT PatientIDEMR FROM tblEMRChangeHealthcarePatientID WHERE (PatientIDLIS = @PatientIDLIS)
END


GO
/****** Object:  StoredProcedure [dbo].[spGetEMRCureMDPatientIDFromLIS]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE Procedure [dbo].[spGetEMRCureMDPatientIDFromLIS]
(
	@PatientIDLIS varchar(50)
)
As
BEGIN
	SELECT PatientIDEMR FROM tblEMRCureMDPatientID WHERE (PatientIDLIS = @PatientIDLIS)
END

GO
/****** Object:  StoredProcedure [dbo].[spGetEMREClinicalPatientIDFromLIS]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE Procedure [dbo].[spGetEMREClinicalPatientIDFromLIS]
(
	@PatientIDLIS varchar(50)
)
As
BEGIN
	SELECT PatientIDEMR FROM tblEMREClinicalPatientID WHERE (PatientIDLIS = @PatientIDLIS)
END


GO
/****** Object:  StoredProcedure [dbo].[spGetEMREHIPatientIDFromLIS]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[spGetEMREHIPatientIDFromLIS]
(
	@PatientIDLIS varchar(50)
)
As
BEGIN
	SELECT PatientIDEMR FROM tblEMREHIPatientID WHERE (PatientIDLIS = @PatientIDLIS)
END

GO
/****** Object:  StoredProcedure [dbo].[spGetEMRElationPatientIDFromLIS]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[spGetEMRElationPatientIDFromLIS]
(
	@PatientIDLIS varchar(50)
)
As
BEGIN
	SELECT PatientIDEMR FROM tblEMRElationPatientID WHERE (PatientIDLIS = @PatientIDLIS)
END

GO
/****** Object:  StoredProcedure [dbo].[spGetEMRMDLANDPatientIDFromLIS]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE Procedure [dbo].[spGetEMRMDLANDPatientIDFromLIS]
(
	@PatientIDLIS varchar(50)
)
As
BEGIN
	SELECT PatientIDEMR FROM tblEMRMDLANDPatientID WHERE (PatientIDLIS = @PatientIDLIS)
END


GO
/****** Object:  StoredProcedure [dbo].[spGetEMRMedGenPatientIDFromLIS]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[spGetEMRMedGenPatientIDFromLIS]
(
	@PatientIDLIS varchar(50)
)
As
BEGIN
	SELECT PatientIDEMR FROM tblEMRMedGenPatientID WHERE (PatientIDLIS = @PatientIDLIS)
END

GO
/****** Object:  StoredProcedure [dbo].[spGetEMRNextGenPatientIDFromLIS]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE Procedure [dbo].[spGetEMRNextGenPatientIDFromLIS]
(
	@PatientIDLIS varchar(50)
)
As
BEGIN
	SELECT PatientIDEMR FROM tblEMRNextGenPatientID WHERE (PatientIDLIS = @PatientIDLIS)
END


GO
/****** Object:  StoredProcedure [dbo].[spGetEMROptiMantraPatientIDFromLIS]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[spGetEMROptiMantraPatientIDFromLIS]
(
	@PatientIDLIS varchar(50)
)
As
BEGIN
	SELECT PatientIDEMR FROM tblEMROptiMantraPatientID WHERE (PatientIDLIS = @PatientIDLIS)
END

GO
/****** Object:  StoredProcedure [dbo].[spGetEMROutputOrderedTestClientsList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetEMROutputOrderedTestClientsList] 
	
AS
BEGIN
	SET NOCOUNT ON;
		SELECT ClientCode
		FROM tblEMROutputOrderedTestClientsList 
		
END

GO
/****** Object:  StoredProcedure [dbo].[spGetEMRPatientIDFromLIS]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[spGetEMRPatientIDFromLIS]
(
	@PatientIDLIS varchar(50)
)
As
BEGIN
	SELECT PatientIDEMR FROM tblEMRPatientID WHERE (PatientIDLIS = @PatientIDLIS)
END

GO
/****** Object:  StoredProcedure [dbo].[spGetEMRPracticeFusionPatientIDFromLIS]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[spGetEMRPracticeFusionPatientIDFromLIS]
(
	@PatientIDLIS varchar(50)
)
As
BEGIN
	SELECT PatientIDEMR FROM tblEMRPracticeFusionPatientID WHERE (PatientIDLIS = @PatientIDLIS)
END

GO
/****** Object:  StoredProcedure [dbo].[spGetFactSheetInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetFactSheetInfo]	
	@Accession varchar(50)
AS
BEGIN
	select
	
a.Accession,
a.PreAccession,
a.CollectionDate, 
a.OrderDate ,
a.ReceiveDate ,
a.FinalReportDate ,
a.ordertype,
a.ClientCode , 
c.ClientName,
c.Address,
c.Address2,
c.City ,
c.State ,
c.Zip,
c.Telephone, 
a.PatientID,  
p.ptFirstName as FirstName, 
p.ptLastName As LastName, 
p.ptMiddleName as MiddleName, 
p.ptSex as Sex, 
p.ptDateofBirth as DOB,	
p.ptAddress1, 
p.ptAddress2, 
p.ptCity, 
p.ptState, 
p.ptZip,
a.PhysicianCode,
phy.FullName  as PhysName,
phy.NPI, 

ara.ArchivedDate as ReleasedDate,
a.OrderedTests, 
CurrentBillType, 
a.InternalComment as InternalComment,
a.AddScannedPaperWork,

 
'Status' = CASE
				        WHEN EXISTS (SELECT rt.Status 
							 FROM dbo.tblResultedTests rt (nolock)
						     WHERE rt.Accession = @Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold')) THEN 'Pending'
						 ELSE 'Final'
	            END,
 btd.description  as BillType
	
    from tblAccessions a (nolock) 
	inner join tblClients c (nolock)
	on a.ClientCode = c.ClientCode
	
	inner join tblPatient p (nolock)
	on a.PatientID = p.PatientId
	
	inner join tblPhysicians phy (nolock)
	on a.PhysicianCode = phy.PhysicianCode
	
	 left join dbo.tblbillTypeDefinitions btd (nolock)
				on a.currentbilltype = btd.btcode
	
	LEFT OUTER JOIN dbo.tblArchiveReviewAccession ara (NOLOCK)
			ON ara.Accession = @Accession

	
	where a.Accession = @Accession
	
	
END



GO
/****** Object:  StoredProcedure [dbo].[spGetFavoriteDiagnosticCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Anthony Romero
-- Create date: 6/12/10
-- =============================================
CREATE PROCEDURE [dbo].[spGetFavoriteDiagnosticCodes]
	@LabCode as varchar(50),
	@ClientCode as varchar(50),
	@RequestingPhysicianCode as varchar(20)
AS
BEGIN
	select top 30 
		a.DiagnosticCode, 
		a.description  as [description]

		from tblDiagnosticCodes a with (nolock)
		
		left outer join tblDiagnosticCodesFavorites b with (nolock)
		on a.diagnosticCode = b.diagnosticCode

		where a.labcode = @labcode and
			ClientCode = @ClientCode and 
			RequestingPhysicianCode = @RequestingPhysicianCode

		order by b.lastused desc, a.description

	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetFavoriteTestCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Anthony Romero
-- Create date: 6/12/10
-- =============================================
CREATE PROCEDURE [dbo].[spGetFavoriteTestCodes]
	@LabCode as varchar(50),
	@ClientCode as varchar(50),
	@RequestingPhysicianCode as varchar(20)
AS
BEGIN
	select top 30 a.testcode,  a.description as [description]
		
		from tblTestCodes  a with (nolock)
		
		left outer join tblTestCodesFavorites b with (nolock)
		on a.testcode = b.testcode

		where 
			a.labcode = @labcode and
			ClientCode = @ClientCode and 
			RequestingPhysicianCode = @RequestingPhysicianCode

		order by b.lastused desc, a.description
END
GO
/****** Object:  StoredProcedure [dbo].[spGetFaxListForPDF]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetFaxListForPDF]
	
AS
BEGIN
	SET NOCOUNT ON;
		select a.Accession, a.FaxName, a.FaxNumber, a.ClientCode, c.FaxTimes, acc.LabReportImage
		from tblAutoFax a
		inner join tblClients c
		on a.ClientCode = c.ClientCode
		INNER JOIN tblAccessions acc
		ON a.Accession = acc.Accession
END



GO
/****** Object:  StoredProcedure [dbo].[spGetFeeDefinition]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetFeeDefinition]
	
	@OrderedTestCode as varchar(100),
	@BillTypeCode as varchar(100),
	@ClientCode as varchar(100), 
	@Billing as bit = 0,
	@CPTCode as varchar(100) = NULL,
	@CollectionDate as datetime = NULL
	
AS
BEGIN

if @OrderedTestCode = '' and @CPTCode is not null and @CollectionDate is not null begin
	if exists(
	SELECT  OrderedTestCode, CPTCode, FeeAmt, Units , ExpPaymentAmt, [Description], BillTypeCode
	FROM dbo.tblFeeDefinitions
	WHERE CPTcode = @CPTCode
		AND BillTypeCode = @BillTypeCode
		AND ClientCode = @ClientCode
		AND EffectiveDate =
			(select max(EffectiveDate) from tblFeeDefinitions
				WHERE CPTcode = @CPTCode
				AND BillTypeCode = @BillTypeCode
				AND ClientCode = @ClientCode
				AND EffectiveDate <= @CollectionDate))
	
		SELECT  OrderedTestCode, CPTCode, FeeAmt, Units , ExpPaymentAmt, [Description], BillTypeCode
		FROM dbo.tblFeeDefinitions
		WHERE CPTcode = @CPTCode
			AND BillTypeCode = @BillTypeCode
			AND ClientCode = @ClientCode
			AND EffectiveDate =
			(select max(EffectiveDate) from tblFeeDefinitions
				WHERE CPTcode = @CPTCode
				AND BillTypeCode = @BillTypeCode
				AND ClientCode = @ClientCode
				AND EffectiveDate <= @CollectionDate)
	
	else
	SELECT  OrderedTestCode, CPTCode, FeeAmt, Units , ExpPaymentAmt, [Description], BillTypeCode
	FROM dbo.tblFeeDefinitions
	WHERE CPTcode = @CPTCode
		AND BillTypeCode = @BillTypeCode
		AND ClientCode = 'ALL'
		AND EffectiveDate =
			(select max(EffectiveDate) from tblFeeDefinitions
				WHERE CPTcode = @CPTCode
				AND BillTypeCode = @BillTypeCode
				AND ClientCode = @ClientCode
				AND EffectiveDate <= @CollectionDate)
end
else begin
declare @iCount as int
select @iCount = count(*) from tblFeeDefinitions where OrderedTestCode = @OrderedTestCode and BillTypeCode = @billtypecode and  ClientCode = @clientcode

	if @iCount > 0
		begin
	select OrderedTestCode, BillTypeCode, ClientCode, CPTcode, [Description], FeeAmt, ExpPaymentAmt, Units, CPTCounter, DiagnosisCode, Modifier, 
		EffectiveDate
		from tblFeeDefinitions with (nolock) where 
		OrderedTestCode = @OrderedTestCode and
		BillTypeCode = @BillTypeCode and
		ClientCode = @ClientCode
		order by CPTCode, EffectiveDate, CPTCounter
	end	
	else
	begin
		if exists (select OrderedTestCode from tblFeeDefinitions where Upper(OrderedTestCode) = Upper(@OrderedTestCode) and BillTypeCode = @billtypecode and  ClientCode = 'All')
		begin
			select OrderedTestCode, BillTypeCode, @ClientCode as ClientCode, CPTcode, [Description], FeeAmt, ExpPaymentAmt, Units, CPTCounter, DiagnosisCode, Modifier, 
			EffectiveDate
			from tblFeeDefinitions with (nolock) where 
			Upper(OrderedTestCode) = Upper(@OrderedTestCode) and
			BillTypeCode = @BillTypeCode and
			ClientCode = 'All'
			order by CPTCode, EffectiveDate, CPTCounter
		end
		else 
		if @Billing = 1
		begin
			select tblCPTGroups.ResultCodes as OrderedTestCode, BillTypeCode, 'All' as ClientCode, GroupCPTCode as CPTCode, ResultDecription as [Description],
				FeeAmt, ExpPaymentAmt, '1' as Units, '1' as CPTCounter, '' as DiagnosisCode, Modifier, EffectiveDate
			from tblCPTGroups where
			Upper(tblCPTGroups.ResultCodes) = Upper(@OrderedTestCode) and
			BillTypeCode = @BillTypeCode
			Order by GroupCPTCode
		end
	end
		end
		--else
		--begin
		--	--if defined in CPTGroups, get the code from there
		--	Create table #tmpPerformedList
		--			(OrderedTest varchar(100) not null,
		--			PerformedTest varchar(100) not null)

		--	Create table #tmpResultList
		--			(OrderedTest varchar(100) not null,
		--			PerformedTest varchar(100) not null,
		--			ResultTest varchar(100) not null,
		--			CPTCode varchar(20) not null,
		--			GroupName varchar(200) not null)

		--	--get performed tests for ordered tests
		--	insert into #tmpPerformedList
		--	select tblOrderedTestsDefinitions.OrderedTest, performedList.Value from tblOrderedTestsDefinitions 
		--	cross apply SplitString(tblOrderedTestsDefinitions.PerformedTestCode, '|') performedList
		--	where tblOrderedTestsDefinitions.OrderedTest = @OrderedTestCode
		--	group by performedList.Value, tblOrderedTestsDefinitions.OrderedTest

		--	--get result tests for performed tests
		--	insert into #tmpResultList
		--	select #tmpPerformedList.OrderedTest, tblPerformedTestsDefinitions.PerformedTest, resultList.Value, 
		--	tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName
		--	from tblPerformedTestsDefinitions
		--	cross apply SplitString(tblPerformedTestsDefinitions.ResultTestCode, '|') resultList
		--	inner join #tmpPerformedList on 
		--	tblPerformedTestsDefinitions.PerformedTest = #tmpPerformedList.PerformedTest
		--	inner join tblCPTGroups on
		--	tblCPTGroups.ResultCodes = resultList.Value
		--	where tblCPTGroups.BillTypeCode = @BillTypeCode
		--	group by resultList.Value, tblPerformedTestsDefinitions.PerformedTest, #tmpPerformedList.OrderedTest, 
		--		tblCPTGroups.GroupCPTCode, tblCPTGroups.GroupName

		--	select #tmpResultList.OrderedTest as OrderedTestCode, @BillTypeCode as BillType, @ClientCode as ClientCode,
		--		#tmpResultList.CPTCode, #tmpResultList.GroupName as FeeDescription, 0 as FeeAmt, 0 as ExpPaymentAmt, 
		--		1 as Units, 1 as CPTCounter, '' as DiagnosisCode 
		--	from #tmpResultList
		--	group by #tmpResultList.OrderedTest, #tmpResultList.CPTCode, #tmpResultList.GroupName
		--	order by CPTCode, CPTCounter
  
		--end
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetFeeDefinitionBillTypeCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  <Author,,Name>  
-- Create date: <Create Date,,>  
-- Description: <Description,,>  
-- =============================================  
CREATE PROCEDURE [dbo].[spGetFeeDefinitionBillTypeCode]    
 @BillTypeCode varchar(100)  
AS  
BEGIN  
   
 SET NOCOUNT ON;  
  
      
 SELECT *  
 FROM tblBillTypeDefinitions with (NOLOCK)  
 WHERE BTcode = @BillTypeCode  
END  
GO
/****** Object:  StoredProcedure [dbo].[spGetFeeDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetFeeDefinitions]
	
	@OrderedTestCode as varchar(100),
	@BillTypeCode as varchar(100),
	@ClientCode as varchar(100)
	
AS
BEGIN
	select Description, FeeAmt, CPTcode, ExpPaymentAmt, OrderedTestCode, BillTypeCode, ClientCode
	from tblFeeDefinitions with (nolock) where 
	OrderedTestCode = @OrderedTestCode and
	BillTypeCode = @BillTypeCode and
	ClientCode = @ClientCode
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetFeeDefinitionsReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetFeeDefinitionsReport]
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT OrderedTestCode, BillTypeCode, ClientCode, CPTcode, Description, FeeAmt, ExpPaymentAmt, CPTCounter
	FROM tblFeeDefinitions
END
GO
/****** Object:  StoredProcedure [dbo].[spGetFeeDefsbyOrderCodeList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[spGetFeeDefsbyOrderCodeList]   
 @TestsTable as OrderedResultedTestsType ReadOnly, --NOTE: do "select * from sys.table_types" to get all table types available  
 @BillToType varchar (100)  
AS  
BEGIN  
   
 SET NOCOUNT ON;  
  
 SELECT Distinct *  
 FROM  @TestsTable AS aot INNER JOIN  
  tblFeeDefinitions AS otd ON aot.OrderedTest = otd.OrderedTestCode LEFT OUTER JOIN  
  tblCPTGroups ON aot.ResultedTest = tblCPTGroups.ResultCodes AND otd.BillTypeCode = tblCPTGroups.BillTypeCode  
      
 where otd.BillTypeCode = @BillToType  
 order by OrderedTestCode  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetFinalReReleaseAccessions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- <12/10/2019><Gladson>Check to see whether this is an accession re-release
-- =============================================
CREATE PROCEDURE [dbo].[spGetFinalReReleaseAccessions]  
	@AccessionTable MOTests READONLY
AS  
BEGIN  
	SET NOCOUNT ON;

	SELECT Accession, ExternalComments, ptLastName + ', ' + ptFirstName AS PatientName
	FROM dbo.tblAccessions a
	JOIN dbo.tblPatient p ON a.PatientID = p.PatientId
	WHERE Accession IN (SELECT DISTINCT b.Accession
			FROM @AccessionTable a
			JOIN dbo.tblReleasedForReview b ON rTestCode = b.Accession
			WHERE Status = 'Final');
END
GO
/****** Object:  StoredProcedure [dbo].[spGetFinancialReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[spGetFinancialReport]	

@StartDate Datetime = null,
@EndDate Datetime = null,
@SortDate varchar(2) = null
	
AS

BEGIN
	
	--exec spGetDataStream
If @StartDate is null
begin
    SELECT DISTINCT 
    a.Accession, 
    p.ptLastName + ', ' + p.ptFirstName AS PatientName, 
	CONVERT(varchar, p.ptDateOfBirth, 101) AS DateOfBirth,
    ISNULL(i.Name, '') AS InsuranceCompany, 
    a.ClientCode, 
    c.ClientName, 
	phy.PhysicianCode, 
	phy.FullName AS PhysicianName, 
	CONVERT(varchar, a.CollectionDate, 101) AS DateOfService, 
	ISNULL(dbo.B_GetSpecimenType(a.Accession), '') TypeOfService,
	CONVERT(varchar, min(b.QSSUpdateDate), 101) as ChargeDate,
	CONVERT(varchar, dbo.B_GetPaymentDate(a.Accession), 101) PaymentDate,
	CONVERT(varchar, dbo.B_GetAdjustmentDate(a.Accession), 101) AdjustmentDate,
	dbo.B_GetAmountBilledTotal(a.Accession) Charge,
	dbo.B_GetPaymentsTotal(a.Accession) Payment, 
	dbo.B_GetAdjustmentsTotal(a.Accession) Adjustment,
	dbo.B_GetTotalBillBalance(a.Accession) Balance,
	dbo.B_GetAgingDaysDOS(a.Accession) AgingDaysFromDOS,
	dbo.B_GetAgingDaysBilling(a.Accession) AgingDaysFromBilling
	FROM tblBillAccessions AS a 
	left outer join tblAccessions acc
	on acc.Accession = a.Accession
	INNER JOIN dbo.tblPatient AS p 
	ON a.PatientID = p.PatientId 
			
	inner join tblAccessionInsuranceInfo aii
	on aii.Accession = acc.Accession
		
	LEFT OUTER JOIN dbo.tblInsuranceCompanies AS i 
	ON i.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' THEN aii.PrimaryInsuranceID ELSE aii.SecondaryInsuranceID END 
	--INNER JOIN dbo.tblInsuredInfo AS ii 
	--ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END 
	
	INNER JOIN dbo.tblClients AS c 
	ON c.ClientCode = a.ClientCode 
	INNER JOIN dbo.tblPhysicians AS phy 
	ON phy.PhysicianCode = a.PhysicianCode 
	INNER JOIN dbo.tblBill AS b 
	ON a.Accession = b.Accession 
	AND a.CurrentBillType = b.BTcode
	 --INNER JOIN
     --dbo.tblArchiveReviewAccession AS r ON a.Accession = r.Accession
    WHERE (substring(b.[Status], 1, 4) = 'BILL') 
    --AND (a.Accession NOT IN
    --                      (SELECT     Accession
    --                        FROM          dbo.tblMissingInformation
    --                        WHERE      (Accession = a.Accession))) 
                       --     AND (dbo.B_GetTotalBillBalance(a.Accession) <> 0)
   group by 
	a.Accession, 
	p.ptLastName,
	p.ptFirstName, 
	p.ptDateOfBirth,
	i.Name,
	a.ClientCode, 
	c.ClientName, 
	phy.PhysicianCode, 
	phy.FullName,
	a.CollectionDate                      
end
else
begin
	set @startdate = @startdate + ' 00:00:00'
	set @enddate = @enddate + ' 23:59:59'
	if @SortDate = 'SD'
	begin
		SELECT DISTINCT 
		a.Accession, 
		p.ptLastName + ', ' + p.ptFirstName AS PatientName, 
		CONVERT(varchar, p.ptDateOfBirth, 101) AS DateOfBirth,
		ISNULL(i.Name, '') AS InsuranceCompany, 
		a.ClientCode, 
		c.ClientName, 
		phy.PhysicianCode, 
		phy.FullName AS PhysicianName, 
		CONVERT(varchar, a.CollectionDate, 101) AS DateOfService, 
		ISNULL(dbo.B_GetSpecimenType(a.Accession), '') TypeOfService,
		CONVERT(varchar, min(b.QSSUpdateDate), 101) as ChargeDate,
		CONVERT(varchar, dbo.B_GetPaymentDate(a.Accession), 101) PaymentDate,
		CONVERT(varchar, dbo.B_GetAdjustmentDate(a.Accession), 101) AdjustmentDate,
		dbo.B_GetAmountBilledTotal(a.Accession) Charge,
		dbo.B_GetPaymentsTotal(a.Accession) Payment, 
		dbo.B_GetAdjustmentsTotal(a.Accession) Adjustment,
		dbo.B_GetTotalBillBalance(a.Accession) Balance,
		dbo.B_GetAgingDaysDOS(a.Accession) AgingDaysFromDOS,
		dbo.B_GetAgingDaysBilling(a.Accession) AgingDaysFromBilling
		FROM tblBillAccessions AS a 
		left outer join tblAccessions acc
		on acc.Accession = a.Accession
		INNER JOIN dbo.tblPatient AS p 
		ON a.PatientID = p.PatientId 
				
	inner join tblAccessionInsuranceInfo aii
	on aii.Accession = acc.Accession
		
		LEFT OUTER JOIN dbo.tblInsuranceCompanies AS i 
		ON i.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' THEN aii.PrimaryInsuranceID ELSE aii.SecondaryInsuranceID END 
		--INNER JOIN dbo.tblInsuredInfo AS ii 
		--ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END 
		INNER JOIN dbo.tblClients AS c 
		ON c.ClientCode = a.ClientCode 
		INNER JOIN dbo.tblPhysicians AS phy 
		ON phy.PhysicianCode = a.PhysicianCode 
		INNER JOIN dbo.tblBill AS b 
		ON a.Accession = b.Accession 
		AND a.CurrentBillType = b.BTcode
		 --INNER JOIN
		 --dbo.tblArchiveReviewAccession AS r ON a.Accession = r.Accession
		WHERE (substring(b.[Status], 1, 4) = 'BILL') 
		AND a.CollectionDate between @StartDate and @EndDate
		--AND (a.Accession NOT IN
		--					  (SELECT     Accession
		--						FROM          dbo.tblMissingInformation
		--						WHERE      (Accession = a.Accession))) 
								--AND (dbo.B_GetTotalBillBalance(a.Accession) <> 0)
	   group by 
		a.Accession, 
		p.ptLastName,
		p.ptFirstName, 
		p.ptDateOfBirth,
		i.Name,
		a.ClientCode, 
		c.ClientName, 
		phy.PhysicianCode, 
		phy.FullName,
		a.CollectionDate     
	end
	--else 
	if @SortDate = 'CD'
	begin
		SELECT DISTINCT 
		a.Accession, 
		p.ptLastName + ', ' + p.ptFirstName AS PatientName, 
		CONVERT(varchar, p.ptDateOfBirth, 101) AS DateOfBirth,
		ISNULL(i.Name, '') AS InsuranceCompany, 
		a.ClientCode, 
		c.ClientName, 
		phy.PhysicianCode, 
		phy.FullName AS PhysicianName, 
		CONVERT(varchar, a.CollectionDate, 101) AS DateOfService, 
		ISNULL(dbo.B_GetSpecimenType(a.Accession), '') TypeOfService,
		CONVERT(varchar, min(b.QSSUpdateDate), 101) as ChargeDate,
		CONVERT(varchar, dbo.B_GetPaymentDate(a.Accession), 101) PaymentDate,
		CONVERT(varchar, dbo.B_GetAdjustmentDate(a.Accession), 101) AdjustmentDate,
		dbo.B_GetAmountBilledTotal(a.Accession) Charge,
		dbo.B_GetPaymentsTotal(a.Accession) Payment, 
		dbo.B_GetAdjustmentsTotal(a.Accession) Adjustment,
		dbo.B_GetTotalBillBalance(a.Accession) Balance,
		dbo.B_GetAgingDaysDOS(a.Accession) AgingDaysFromDOS,
		dbo.B_GetAgingDaysBilling(a.Accession) AgingDaysFromBilling
		FROM tblBillAccessions AS a 
		left outer join tblAccessions acc
		on acc.Accession = a.Accession
		INNER JOIN dbo.tblPatient AS p 
		ON a.PatientID = p.PatientId 
				
	inner join tblAccessionInsuranceInfo aii
	on aii.Accession = acc.Accession
		
		LEFT OUTER JOIN dbo.tblInsuranceCompanies AS i 
		ON i.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' THEN aii.PrimaryInsuranceID ELSE aii.SecondaryInsuranceID END 
		--INNER JOIN dbo.tblInsuredInfo AS ii 
		--ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END 
		INNER JOIN dbo.tblClients AS c 
		ON c.ClientCode = a.ClientCode 
		INNER JOIN dbo.tblPhysicians AS phy 
		ON phy.PhysicianCode = a.PhysicianCode 
		INNER JOIN dbo.tblBill AS b 
		ON a.Accession = b.Accession 
		AND a.CurrentBillType = b.BTcode
		 --INNER JOIN
		 --dbo.tblArchiveReviewAccession AS r ON a.Accession = r.Accession
		WHERE (substring(b.[Status], 1, 4) = 'BILL') 
		--AND min(b.QSSUpdateDate) between @StartDate and @EndDate
		--AND (a.Accession NOT IN
		--					  (SELECT     Accession
		--						FROM          dbo.tblMissingInformation
		--						WHERE      (Accession = a.Accession))) 
								--AND (dbo.B_GetTotalBillBalance(a.Accession) <> 0)
	   group by 
		a.Accession, 
		p.ptLastName,
		p.ptFirstName, 
		p.ptDateOfBirth,
		i.Name,
		a.ClientCode, 
		c.ClientName, 
		phy.PhysicianCode, 
		phy.FullName,
		a.CollectionDate   
		HAVING   min(b.QSSUpdateDate) between @StartDate and @EndDate
	end	
	--else 
	if @SortDate = 'PD'
	begin
		--SELECT DISTINCT 
		--a.Accession, 
		--p.ptLastName + ', ' + p.ptFirstName AS PatientName, 
		--CONVERT(varchar, p.ptDateOfBirth, 101) AS DateOfBirth,
		--ISNULL(i.Name, '') AS InsuranceCompany, 
		--a.ClientCode, 
		--c.ClientName, 
		--phy.PhysicianCode, 
		--phy.FullName AS PhysicianName, 
		--CONVERT(varchar, a.CollectionDate, 101) AS DateOfService, 
		--ISNULL(dbo.B_GetSpecimenType(a.Accession), '') TypeOfService,
		--CONVERT(varchar, min(b.QSSUpdateDate), 101) as ChargeDate,
		--CONVERT(varchar, dbo.B_GetPaymentDate(a.Accession), 101) PaymentDate,
		--CONVERT(varchar, dbo.B_GetAdjustmentDate(a.Accession), 101) AdjustmentDate,
		--dbo.B_GetAmountBilledTotal(a.Accession) Charge,
		--dbo.B_GetPaymentsTotal(a.Accession) Payment, 
		--dbo.B_GetAdjustmentsTotal(a.Accession) Adjustment,
		--dbo.B_GetTotalBillBalance(a.Accession) Balance,
		--dbo.B_GetAgingDaysDOS(a.Accession) AgingDaysFromDOS,
		--dbo.B_GetAgingDaysBilling(a.Accession) AgingDaysFromBilling
		--FROM tblBillAccessions AS a 
		--left outer join tblAccessions acc
		--on acc.Accession = a.Accession
		--INNER JOIN dbo.tblPatient AS p 
		--ON a.PatientID = p.PatientId 
		--LEFT OUTER JOIN dbo.tblInsuranceCompanies AS i 
		--ON i.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' THEN p.PrimaryInsuranceID ELSE p.SecondaryInsuranceID END 
		--INNER JOIN dbo.tblInsuredInfo AS ii 
		--ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END 
		--INNER JOIN dbo.tblClients AS c 
		--ON c.ClientCode = a.ClientCode 
		--INNER JOIN dbo.tblPhysicians AS phy 
		--ON phy.PhysicianCode = a.PhysicianCode 
		--INNER JOIN dbo.tblBill AS b 
		--ON a.Accession = b.Accession 
		--AND a.CurrentBillType = b.BTcode
		-- --INNER JOIN
		-- --dbo.tblArchiveReviewAccession AS r ON a.Accession = r.Accession
		--WHERE (b.Status = 'BILL') 
		--AND CONVERT(varchar, ISNULL(dbo.B_GetPaymentDate(a.Accession), ''), 101) between @StartDate and @EndDate
		----AND (a.Accession NOT IN
		----					  (SELECT     Accession
		----						FROM          dbo.tblMissingInformation
		----						WHERE      (Accession = a.Accession))) 
		--						--AND (dbo.B_GetTotalBillBalance(a.Accession) <> 0)
	 --  group by 
		--a.Accession, 
		--p.ptLastName,
		--p.ptFirstName, 
		--p.ptDateOfBirth,
		--i.Name,
		--a.ClientCode, 
		--c.ClientName, 
		--phy.PhysicianCode, 
		--phy.FullName,
		--a.CollectionDate  
		
		
		SELECT DISTINCT 
		a.Accession, 
		p.ptLastName + ', ' + p.ptFirstName AS PatientName, 
		CONVERT(varchar, p.ptDateOfBirth, 101) AS DateOfBirth,
		ISNULL(i.Name, '') AS InsuranceCompany, 
		a.ClientCode, 
		c.ClientName, 
		phy.PhysicianCode, 
		phy.FullName AS PhysicianName, 
		CONVERT(varchar, a.CollectionDate, 101) AS DateOfService, 
		ISNULL(dbo.B_GetSpecimenType(a.Accession), '') TypeOfService,
		CONVERT(varchar, min(b.QSSUpdateDate), 101) as ChargeDate,
		CONVERT(varchar, dbo.B_GetPaymentDate_byPaymentDate(a.Accession, @StartDate, @EndDate), 101) PaymentDate,
		CONVERT(varchar, dbo.B_GetAdjustmentDate_byPaymentDate(a.Accession, @StartDate, @EndDate), 101) AdjustmentDate,
		dbo.B_GetAmountBilledTotal(a.Accession) Charge,
		dbo.B_GetPaymentsTotal_byPaymentDate(a.Accession, @StartDate, @EndDate) Payment, 
		dbo.B_GetAdjustmentsTotal_byPaymentDate(a.Accession, @StartDate, @EndDate) Adjustment,
		dbo.B_GetTotalBillBalance(a.Accession) Balance,
		dbo.B_GetAgingDaysDOS(a.Accession) AgingDaysFromDOS,
		dbo.B_GetAgingDaysBilling(a.Accession) AgingDaysFromBilling
		FROM tblBillAccessions AS a 
		left outer join tblAccessions acc
		on acc.Accession = a.Accession
		INNER JOIN dbo.tblPatient AS p 
		ON a.PatientID = p.PatientId 
				
	inner join tblAccessionInsuranceInfo aii
	on aii.Accession = acc.Accession
		
		LEFT OUTER JOIN dbo.tblInsuranceCompanies AS i 
		ON i.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' THEN aii.PrimaryInsuranceID ELSE aii.SecondaryInsuranceID END 
		--INNER JOIN dbo.tblInsuredInfo AS ii 
		--ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END 
		INNER JOIN dbo.tblClients AS c 
		ON c.ClientCode = a.ClientCode 
		INNER JOIN dbo.tblPhysicians AS phy 
		ON phy.PhysicianCode = a.PhysicianCode 
		INNER JOIN dbo.tblBill AS b 
		ON a.Accession = b.Accession 
		AND a.CurrentBillType = b.BTcode
		 --INNER JOIN
		 --dbo.tblArchiveReviewAccession AS r ON a.Accession = r.Accession
		WHERE (substring(b.[Status], 1, 4) = 'BILL') 
		AND CONVERT(varchar, ISNULL(dbo.B_GetPaymentDate_byPaymentDate(a.Accession, @StartDate, @EndDate), ''), 101) between @StartDate and @EndDate
		--AND (a.Accession NOT IN
		--					  (SELECT     Accession
		--						FROM          dbo.tblMissingInformation
		--						WHERE      (Accession = a.Accession))) 
								--AND (dbo.B_GetTotalBillBalance(a.Accession) <> 0)
	   group by 
		a.Accession, 
		p.ptLastName,
		p.ptFirstName, 
		p.ptDateOfBirth,
		i.Name,
		a.ClientCode, 
		c.ClientName, 
		phy.PhysicianCode, 
		phy.FullName,
		a.CollectionDate     
	end	
end
    
END

GO
/****** Object:  StoredProcedure [dbo].[spGetGeneratedLabReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetGeneratedLabReport] 
      
      @SQL varchar(max)
AS
BEGIN
      SET NOCOUNT ON;
      
      --SELECT DISTINCT  a.Accession AS Accession, p.ptLastName + ', ' + p.ptFirstName AS PatientName, a.ClientCode AS ClientCode, c.ClientName AS ClientName, CONVERT(varchar, a.ReceiveDate, 101) AS DateOfService, ot.OrderedTest AS Test, a.PhysicianCode AS PhysicianCode, phy.FullName AS FullName FROM tblAccessions a (nolock)  INNER JOIN tblClients c (nolock) on a.ClientCode = c.ClientCode  INNER JOIN tblPatient p (nolock) on p.PatientID = a.PatientID  INNER JOIN tblPhysicians phy (nolock) on a.PhysicianCode = phy.PhysicianCode  INNER JOIN tblOrderedTests ot (nolock) on a.Accession = ot.Accession  WHERE (a.ReceiveDate between '12/1/2015 00:00:00' and '12/16/2015 23:59:59')  GROUP BY  a.Accession, a.ReceiveDate, p.ptLastName, p.ptFirstName, a.ClientCode, c.ClientName, ot.OrderedTest, a.PhysicianCode, phy.FullName
      
      exec (@SQL)
END

GO
/****** Object:  StoredProcedure [dbo].[spGetGeneratedReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[spGetGeneratedReport] 
	
	@SQL varchar(max)
AS
BEGIN
	SET NOCOUNT ON;
	exec (@SQL)
END
GO
/****** Object:  StoredProcedure [dbo].[spGetGuarantorInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetGuarantorInfo]
	 			@Accession varchar(100) 
	 	
AS
BEGIN

declare @InsuranceType varchar(10)

select @InsuranceType = a.currentbillto from 
tblaccessions a
where a.accession = @accession 

	
SELECT		 ii.InsuredID, ii.FirstName, ii.MiddleName, ii.LastName, ii.InsuranceID, ii.Address1, ii.Address2, ii.City, ii.[State], ii.Zip, 
	ii.DateOfBirth, ii.Sex, ii.Policy, ii.[Group], ii.[Plan],ii.HomePhone,
	ic.Name AS InsCo_Name, ic.Address AS InsCo_Address1, ic.Address2 AS InsCo_Address2, ic.City AS InsCo_City, ic.State AS InsCo_State, 
	ic.Zip as InsCo_ZipCode, ic.NEICNumber,p.PrimaryPatRelationtoIns, p.SecondaryPatRelationtoIns, isnull(@InsuranceType,'') As 'InsuranceType'
			
	FROM         tblPatient p 
				INNER JOIN tblAccessions a 
				ON p.PatientId = a.PatientID 
			
		
		
				left outer join tblInsuredInfo  ii 
				ON ii.InsuredID = CASE WHEN (@InsuranceType is not null and @InsuranceType = 'Secondary' )THEN '*' + p.PatientId + 'S' ELSE '*' + p.PatientId + 'P' END 
				
				 LEFT OUTER JOIN tblInsuranceCompanies ic 
				on ic.InsuranceCode = CASE WHEN (@InsuranceType is not null and @InsuranceType = 'Secondary' ) THEN p.SecondaryInsuranceID ELSE p.PrimaryInsuranceID END 

				 
				where a.Accession = @Accession and (ii.InsuredID is not null or ii.InsuredID='')

	  
	
	
END







GO
/****** Object:  StoredProcedure [dbo].[spGetHeaderMsg]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetHeaderMsg] 
	@LabCode varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT ISNULL(WebSiteMsg, '')
	FROM tblLabs with (NOLOCK)
	WHERE LabCode = @LabCode
END
GO
/****** Object:  StoredProcedure [dbo].[spGetHeaderResultCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetHeaderResultCodes]
	 @Header As Varchar(200)
AS
  
 
	BEGIN 
		if object_id('tempdb..#tmpResultCodes ') is not null drop table #tmpResultCodes 
		create table #tmpResultCodes  
		(   
		ResultCode varchar(20)  
		)  
		DECLARE   @StartPos smallint
				, @EndPos smallint
				, @CurVal varchar(20)
				, @FieldList varchar(2000)
				, @Codes varchar(max)
				
		SELECT @Codes = ResultCodes  FROM dbo.tblTestsReportOrder (NOLOCK)
		WHERE Header = @Header
		
		Set @FieldList =''
		Set @FieldList = @Codes + '|'
		Set @StartPos = 1
		Set @EndPos = 1
	 -- Start the looping operation
		While @EndPos > 0
		   Begin
			  Set @EndPos = CharIndex('|', @FieldList, @StartPos)
			  If @EndPos > 0
				 Begin
					Set @CurVal = Convert(varchar(50), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
					-- Add current row to TempTable
					Insert #tmpResultCodes  (ResultCode) Values (@CurVal)
					Set @StartPos = @EndPos + 1
				 End
		      End
		   END
		   
		IF EXISTS ( SELECT ResultCode FROM  #tmpResultCodes)
			BEGIN
			   SELECT a.ResultCode as ResultCode, b.ExternalName as ResultDescription
			   FROM #tmpResultCodes a (nolock)
			   INNER JOIN dbo.tblResultedTestsDefinitions b (nolock)
			   ON a.ResultCode = b.TestCode
			   
			  INNER JOIN  tblResultCodeVersions ON b.TestCode = tblResultCodeVersions.TestCode AND 
				b.Version = tblResultCodeVersions.CurrentVersion
			   
			END
GO
/****** Object:  StoredProcedure [dbo].[spGetHeadings]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spGetHeadings]      
    
AS      
BEGIN      
 select HeadingCode, Heading  
 from tblHeadings    
      
        
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetHeadingsforReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetHeadingsforReport]        
      
AS        
BEGIN        
 select HeadingCode, Heading    
 from tblHeadings      
 order by ReportOrder 
          
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetHeadingsforSource]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetHeadingsforSource]         
 @SourceID as integer  
AS        
BEGIN        
         
 SET NOCOUNT ON;        
        
 SELECT    HeadingCode ,Result     
 FROM         tblHeadersForSource      
 Where SourceID = @SourceID     
                        
                               
                              
END
GO
/****** Object:  StoredProcedure [dbo].[spGetHFusionBillingForInterface]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetHFusionBillingForInterface] 
	
AS
BEGIN
	SET NOCOUNT ON;
		Select * from tblProcessHFusionBilling where HasProcessed = 0
END
GO
/****** Object:  StoredProcedure [dbo].[spGetHL7Orders]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetHL7Orders]
	@MailOutLabCode varchar(20)
AS
BEGIN
	SET NOCOUNT ON;
		select *
		from tblMailoutOrders 
		where MailOutLabCode = @MailOutLabCode
		and SentBatchID <> '0'
		and Status = 'Waiting'
		
	
END







GO
/****** Object:  StoredProcedure [dbo].[spGetICD10byICD9]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetICD10byICD9]
	@Code as varchar(10)
AS
BEGIN
	SELECT [ICD10Code]
		  ,[ICD10Description]
	FROM [tbl9to10Conversion] with (nolock) 
	WHERE [ICD9Code] = @Code
	ORDER BY [ICD10Code] ASC
	
END



GO
/****** Object:  StoredProcedure [dbo].[spGetInactiveClient]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spGetInactiveClient]  
@StartDate as datetime,  
@EndDate as datetime  
as  
begin  
select c.ClientCode,ClientName,dbo.getInterface(r.ElectronicInterface) as EMRInterface from tblClients c Left join tblReportingOptions r on c.ClientCode=r.ClientCode   
where c.ClientCode not in (select distinct ClientCode   from tblAccessions where CollectionDate between @StartDate and @EndDate)  
end  
GO
/****** Object:  StoredProcedure [dbo].[spGetInhouseTestCodesForRequisitionForm]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetInhouseTestCodesForRequisitionForm]   
 @Accession varchar(100)
AS  
begin
  SELECT distinct ot.PerformedTest as OrderedTest, ptd.ExternalDescription as Description  
  from  tblOrderedTests ot  
  INNER JOIN tblPerformedTestsDefinitions ptd  
  on ot.PerformedTest = ptd.PerformedTest  
  where ot.Accession = @Accession  
  and ptd.MailoutFlag = 'I'  
 
  
END  
GO
/****** Object:  StoredProcedure [dbo].[spGetInReviewCount]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetInReviewCount] 
AS
BEGIN

	
				SELECT 1 as ID , 'Not Released' as Description, Count(*) as PendingCount FROM (

		SELECT     ra.Accession, p.ptLastName + ',' + p.ptFirstName AS Name, c.ClientCode, c.ClientName, ra.QSSLastUpdatedByID, CASE WHEN EXISTS
							  (SELECT     rt.Status
								FROM          dbo.tblResultedTests rt(nolock)
								WHERE      rt.Accession = a.Accession AND (rt.Status = 'Pending' OR
													   rt.Status = 'Hold')) THEN 'Pending' ELSE 'Final' END AS 'Status', a.PreAccession, ph.PhysicianCode, ph.FullName AS PhysicianName, a.CollectionDate, 
						  p.ptDateOfBirth AS DOB, p.ptSex, c.Interface, p.PatientId
		
		from dbo.tblReviewAccession ra (nolock)
		inner join tblAccessions a (nolock)
		on ra.Accession=a.Accession
		inner join tblPatient p (nolock)
		on a.PatientID = p.PatientId
		inner join tblClients c 
		on a.ClientCode = c.ClientCode
		
		inner join tblPhysicians ph
		on a.PhysicianCode  = ph.PhysicianCode
             ) A
		


END
GO
/****** Object:  StoredProcedure [dbo].[spGetInstrument]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetInstrument] --2,2,''    
 @PageSize int,    
 @PageIndex int,    
 @Description varchar(500)    
AS    
BEGIN    
    
 SET NOCOUNT ON;    
    
    -- Insert statements for procedure here    
    DECLARE @TotalRows int    
    DECLARE @TempInstrument table(ID int Identity,  
    [InstrumentCode] [varchar](200) NOT NULL,  
    [Description] [varchar](500) NOT NULL,  
 [SerialNumber] [varchar](200) NULL,  
 [InstallDate] [datetime] NULL)    
    INSERT into @TempInstrument    
 SELECT InstrumentCode,[Description],SerialNumber,InstallDate from tblInstrumentDefinitions     
  where ([Description] like '%'+@Description+'%' or  [Description]=null)    
  select @TotalRows=COUNT(*) from @TempInstrument    
  SELECT CEILING((CAST(@TotalRows as decimal)/CAST(@PageSize as decimal))) as TotalPageCount,InstrumentCode,[Description],SerialNumber,InstallDate
  from @TempInstrument where (ID > (@PageSize * ( @PageIndex - 1 )) ) And (ID <= ( @PageSize * @PageIndex ))    
   
END
GO
/****** Object:  StoredProcedure [dbo].[spGetInstrumentAccessionQuery]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetInstrumentAccessionQuery]
 
	
AS
BEGIN
	SELECT accession
		FROM dbo.tblInstrumentAccessionQuery(NOLOCK) 

		
			
END
GO
/****** Object:  StoredProcedure [dbo].[spGetInstrumentAccessionQueryDXI]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spGetInstrumentAccessionQueryDXI]
 
	
AS
BEGIN
	SELECT accession
		FROM dbo.tblInstrumentAccessionQueryDXI(NOLOCK) 

		
			
END
GO
/****** Object:  StoredProcedure [dbo].[spGetInstrumentCentaurOrder]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
CREATE PROCEDURE [dbo].[spGetInstrumentCentaurOrder] 
	
AS
BEGIN
	SET NOCOUNT ON;
	SELECT TOP 1 Accession FROM tblInstrumentCentaurOrders;
END
GO
/****** Object:  StoredProcedure [dbo].[spGetInstrumentCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spGetInstrumentCode] --'BBB'    
 -- Add the parameters for the stored procedure here    
 @InstrumentCode varchar(200),
 @ResultCode varchar(200)    
AS    
BEGIN    
  
 SET NOCOUNT ON;    
    
    -- Insert statements for procedure here    
SELECT InstrumentCD
FROM tblInstrumentElements ids (NOLOCK)	
WHERE InstrumentCode = @InstrumentCode and ResultTest = @ResultCode 
END
GO
/****** Object:  StoredProcedure [dbo].[spGetInstrumentCount]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








--=============================================
-- <9/8/2017><Gladson><Count of pending Accessions for Instruments>
 --=============================================
CREATE PROCEDURE [dbo].[spGetInstrumentCount] 
AS
BEGIN

	SET NOCOUNT ON;

	SELECT ids.InstrumentCode ID, [Description], COUNT(DISTINCT rt.Accession) As PendingCount FROM tblInstrumentDefinitions ids 
	INNER JOIN tblInstrumentElements ie ON ids.InstrumentCode = ie.InstrumentCode
	INNER JOIN tblResultedTests rt ON rt.ResultTest = ie.ResultTest
	WHERE [Status] = 'Pending' OR [Status] = 'Hold'
	GROUP BY ids.InstrumentCode, [Description]
	ORDER BY ids.InstrumentCode;
END
GO
/****** Object:  StoredProcedure [dbo].[spGetInstrumentInfo2]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetInstrumentInfo2] --'BBB'    
 -- Add the parameters for the stored procedure here    
 @InstrumentCode varchar(200)    
AS    
BEGIN    
  
 SET NOCOUNT ON;    
    
	SELECT ids.InstrumentCode, ids.[Description], ids.SerialNumber, CONVERT(VARCHAR(10), ids.InstallDate, 101) AS InstallDate, ids.PortNumber, ids.LogonName, 
	ids.AutoFinalizeRes, ids.ReviewSentRes, ids.UpdateDailyRes, rtd.TestCode, rtd.ExternalName, ie.InstrumentCD, ie.[Type]
	FROM tblInstrumentDefinitions ids (NOLOCK)	
	INNER JOIN tblInstrumentElements ie
	ON ids.InstrumentCode=ie.InstrumentCode
	INNER JOIN tblResultedTestsDefinitions rtd
	ON rtd.TestCode=ie.ResultTest

	INNER JOIN  tblResultCodeVersions ON rtd.TestCode = tblResultCodeVersions.TestCode AND 
	rtd.Version = tblResultCodeVersions.CurrentVersion	

	WHERE ie.InstrumentCode=@InstrumentCode  
	Order by ExternalName asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetInstrumentPendingData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=============================================
-- <9/8/2017><Gladson><List of pending Accessions for Instruments>
 --=============================================
CREATE PROCEDURE [dbo].[spGetInstrumentPendingData] 
	 @InstrumentCode varchar(200) 
AS
BEGIN

	SET NOCOUNT ON;

	SELECT rt.Accession , MAX(acc.PatientID) As PatientID, MAX((pat.ptLastName + ',' + pat.ptFirstName)) As Name , MAX(rt.[Status]) As [Status]
	FROM tblInstrumentDefinitions ids 
	INNER JOIN tblInstrumentElements ie ON ids.InstrumentCode = ie.InstrumentCode
	INNER JOIN tblResultedTests rt ON rt.ResultTest = ie.ResultTest
	INNER JOIN dbo.tblAccessions acc ON rt.Accession = acc.Accession
	INNER JOIN dbo.tblPatient pat ON acc.PatientID = pat.PatientId
	WHERE ids.InstrumentCode = @InstrumentCode AND (rt.[Status] = 'Pending' OR [Status] = 'Hold')
	GROUP BY rt.Accession;
END
GO
/****** Object:  StoredProcedure [dbo].[spGetInstrumentResultTranslation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetInstrumentResultTranslation] --'BBB'    
 -- Add the parameters for the stored procedure here    
 @InstrumentCode varchar(200),
 @InstrumentCD varchar(200)    
AS    
BEGIN    
  
 SET NOCOUNT ON;    
    
      -- Insert statements for procedure here    
SELECT ResultTest, rtd.Decimals
FROM tblInstrumentElements ids (NOLOCK)	
inner join tblResultedTestsDefinitions rtd 
on ids.ResultTest = rtd.TestCode
inner join tblResultCodeVersions rcv
on rcv.CurrentVersion=rtd.Version and rcv.TestCode=rtd.TestCode
WHERE InstrumentCode = @InstrumentCode and InstrumentCD = @InstrumentCD  
END
GO
/****** Object:  StoredProcedure [dbo].[spGetInstrumentsAll]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetInstrumentsAll] 
AS
BEGIN

	SELECT InstrumentCode,  Description
		FROM dbo.tblInstrumentDefinitions (NOLOCK)
		
		order by  InstrumentCode asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetInstrumentsBySerial]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetInstrumentsBySerial] 
 @SerialNumber varchar(500) 
AS
BEGIN

	SELECT * FROM dbo.tblInstrumentDefinitions (NOLOCK)
	WHERE SerialNumber = @SerialNumber

END
GO
/****** Object:  StoredProcedure [dbo].[spGetInsuranceCompanyInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetInsuranceCompanyInfo]
	@InsuranceCode as varchar(20)
AS
BEGIN
	select insurancecode, [name], [address], address2, city, [state], zip, isnull(Telephone, '') as Telephone, Attention, ContactName, ContactPhone,
		DiagnosisRequired, FormRequired, SubmitDays, Note1, Note2, LaborpCode, ClaimType, NEICNumber, ProviderNumber, InsuranceType, 
		PendingWriteOff, ExpectedAMT, LabLink, HCFABills, BillType, isnull(HCFA23, 'Standard') AS HCFA23, isnull(HCFA23Override, '') AS HCFA23Override
		, isnull(HCFA24i, 'Standard') AS HCFA24i, isnull(HCFA24iOverride, '') AS HCFA24iOverride
		, isnull(HCFA24j, 'Standard') AS HCFA24j, isnull(HCFA24jOverride, '') AS HCFA24jOverride
		, isnull(HCFA33, 'Standard') AS HCFA33, isnull(HCFA33Override, '') AS HCFA33Override
		, isnull(HCFA33a, 'Standard') AS HCFA33a, isnull(HCFA33aOverride, '') AS HCFA33aOverride
		, isnull(HCFA33b, 'Standard') AS HCFA33b, isnull(HCFA33bOverride, '') AS HCFA33bOverride
	from tblinsurancecompanies where 
		insurancecode = @insurancecode
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetInsuranceInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetInsuranceInfo]
	 			@Accession varchar(100) ,
	 			@InsuranceType varchar(10)
AS
BEGIN


	
SELECT		 ii.InsuredID, ii.FirstName, ii.MiddleName, ii.LastName, ii.InsuranceID, ii.Address1, ii.Address2, ii.City, ii.[State], ii.Zip, 
	ii.DateOfBirth, ii.Sex, ii.Policy, ii.[Group], ii.[Plan],
	ic.Name AS InsCo_Name, ic.Address AS InsCo_Address1, ic.Address2 AS InsCo_Address2, ic.City AS InsCo_City, ic.State AS InsCo_State, 
	ic.Zip as InsCo_ZipCode, ic.NEICNumber,p.PrimaryPatRelationtoIns, p.SecondaryPatRelationtoIns
			
	FROM         tblPatient p 
				INNER JOIN tblAccessions a 
				ON p.PatientId = a.PatientID 
			
		
		
				left outer join tblInsuredInfo  ii 
				ON ii.InsuredID = CASE WHEN @InsuranceType = 'P' THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END 
				
				 LEFT OUTER JOIN tblInsuranceCompanies ic 
				on ic.InsuranceCode = CASE WHEN @InsuranceType = 'P'  THEN p.PrimaryInsuranceID ELSE p.SecondaryInsuranceID END 

				 
				where a.Accession = @Accession and (ii.InsuredID is not null or ii.InsuredID='')

	  
	
	
END






GO
/****** Object:  StoredProcedure [dbo].[spGetiPowerDocClientList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- <11/12/2019><Gladson> Sending Service
-- =============================================
CREATE PROCEDURE [dbo].[spGetiPowerDocClientList]
AS
BEGIN
	SET NOCOUNT ON;
	SELECT DISTINCT ClientCode FROM tbliPowerDoc;
END
GO
/****** Object:  StoredProcedure [dbo].[spGetiPowerDocListForPDF]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- <11/12/2019><Gladson> Added parameter @ClientCode
-- =============================================
CREATE PROCEDURE [dbo].[spGetiPowerDocListForPDF] 
	@ClientCode varchar(20)
AS
BEGIN
	SET NOCOUNT ON;
	SELECT i.id, i.Accession, LabReportImage
	FROM tbliPowerDoc i INNER JOIN tblAccessions a ON i.Accession = a.Accession
	WHERE i.clientcode = @ClientCode;
END
GO
/****** Object:  StoredProcedure [dbo].[spGetLabCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetLabCode]
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    Select LabCode from tblLabs 
END
GO
/****** Object:  StoredProcedure [dbo].[spGetLabDefinitionsA]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetLabDefinitionsA] 	
	@id int
AS
BEGIN
	
	SET NOCOUNT ON;

    
	SELECT a_LabName, a_LabAdmin, a_LabAddress1, a_LabAddress2, a_LabCity, a_LabState, a_LabZip, a_LabPhone, a_LabMedicare,
		   a_LabMedicaid, a_TaxpayerID, a_LabNPI, a_LabNameonForm
	FROM tblLabDefinitions with (NOLOCK)
	WHERE id = @id
END
GO
/****** Object:  StoredProcedure [dbo].[spGetLabDefinitionsP]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetLabDefinitionsP] 	
	@id int
AS
BEGIN
	
	SET NOCOUNT ON;

    
	SELECT p_LabName, p_LabAdmin, p_LabAddress1, p_LabAddress2, p_LabCity, p_LabState, p_LabZip, p_LabPhone, p_LabMedicare,
		   p_LabMedicaid, p_TaxpayerID, p_LabNPI, p_LabNameonForm
	FROM tblLabDefinitions with (NOLOCK)
	WHERE id = @id
END
GO
/****** Object:  StoredProcedure [dbo].[spGetLabInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetLabInfo]
	@LabCode varchar(20),
	@VersionDate datetime = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	Declare @Version as integer

	if @VersionDate is null
	begin
		Select * from tblLabs where labcode = @LabCode and VersionNumber = (Select max(VersionNumber) from tblLabs)
	end
	else
	begin
		Select * from tblLabs where labcode = @LabCode and VersionDate <= @VersionDate and versionnumber = (select max(VersionNumber) from tblLabs where VersionDate <= @VersionDate)
	end
END


GO
/****** Object:  StoredProcedure [dbo].[spGetLabNotes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetLabNotes] 
	
	@Accession varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	Select TestComment from tblOrderedTests where  accession = @Accession and TestComment <> ''
END
GO
/****** Object:  StoredProcedure [dbo].[spGetLabSetup]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetLabSetup] 	
	@LabCode varchar(20)
AS
BEGIN
	
	SET NOCOUNT ON;

    
	SELECT *
	FROM tblLabs with (NOLOCK)
	WHERE LabCode = @LabCode
END	
GO
/****** Object:  StoredProcedure [dbo].[spGetLatestMSHDate]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetLatestMSHDate] 
	
	@Accession varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT LatestMSHDate
	FROM tblAccessionMOResultsMSHDate with (NOLOCK)
	WHERE Accession = @Accession
END





GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicGeneratePDF]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetListForElectronicGeneratePDF] 
	
AS
BEGIN
	SET NOCOUNT ON;
		SELECT tblAccessions.QuantumBatchID, tblElectronicGeneratePDF.Accession, tblAccessions.Pregnant, tblAccessions.RecurrentBV, tblAccessions.RecurrentCandida, tblAccessions.RecurrentTrich, tblPatient.ptSex as Sex, tblPatient.ptDateofBirth as DOB, tblPatient.ptFirstName as FirstName, tblPatient.ptLastName as LastName, tblPhysicians.NPI, tblClients.ClientName, tblClients.City as ClientCity, tblClients.State as ClientState, tblAccessions.CollectionDate as CollectedDate, tblAccessions.ReceiveDate as ReceivedDate, 'UR' as Specimen
		FROM tblElectronicGeneratePDF 
		INNER JOIN tblAccessions on tblAccessions.Accession = tblElectronicGeneratePDF.Accession
		INNER JOIN tblPatient on tblAccessions.PatientID = tblPatient.PatientID
		INNER JOIN tblPhysicians on tblAccessions.PhysicianCode = tblPhysicians.PhysicianCode
		INNER JOIN tblClients on tblAccessions.ClientCode = tblClients.ClientCode
		WHERE not tblAccessions.QuantumBatchID is null
END
GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterface]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetListForElectronicInterface] 
	
AS
BEGIN
	SET NOCOUNT ON;
	SELECT '0' as ID, 'None' as Interface
	UNION
	SELECT ID, [Interface] FROM tblEMRInterfaces ORDER BY ID

END

GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterfaceAthena]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  
CREATE PROCEDURE [dbo].[spGetListForElectronicInterfaceAthena]   
   
AS  
BEGIN  
 SET NOCOUNT ON;  
  select tblElectronicInterfaceAthena.Accession, tblAccessions.LabReportImage, tblAccessions.ClientCode from tblElectronicInterfaceAthena inner join tblAccessions on tblAccessions.Accession = tblElectronicInterfaceAthena.Accession  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterfaceChangeHealthcare]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetListForElectronicInterfaceChangeHealthcare] 
	
AS
BEGIN
	SET NOCOUNT ON;
		select tblElectronicInterfaceChangeHealthcare.Accession, tblAccessions.LabReportImage, tblAccessions.ClientCode from tblElectronicInterfaceChangeHealthcare inner join tblAccessions on tblAccessions.Accession = tblElectronicInterfaceChangeHealthcare.Accession
END


GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterfaceCureMD]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
CREATE PROCEDURE [dbo].[spGetListForElectronicInterfaceCureMD]   
   
AS  
BEGIN  
 SET NOCOUNT ON;  
  select tblElectronicInterfaceCureMD.Accession, tblAccessions.LabReportImage, tblAccessions.ClientCode from tblElectronicInterfaceCureMD inner join tblAccessions on tblAccessions.Accession = tblElectronicInterfaceCureMD.Accession  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterfaceEClinical]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



  
CREATE PROCEDURE [dbo].[spGetListForElectronicInterfaceEClinical]   
   
AS  
BEGIN  
 SET NOCOUNT ON;  
  select tblElectronicInterfaceEClinical.Accession, tblAccessions.LabReportImage, tblAccessions.ClientCode from tblElectronicInterfaceEClinical inner join tblAccessions on tblAccessions.Accession = tblElectronicInterfaceEClinical.Accession  
END  
  
  

GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterfaceEHI]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
CREATE PROCEDURE [dbo].[spGetListForElectronicInterfaceEHI]   
   
AS  
BEGIN  
 SET NOCOUNT ON;  
  select tblElectronicInterfaceEHI.Accession, tblAccessions.LabReportImage, tblAccessions.ClientCode from tblElectronicInterfaceEHI inner join tblAccessions on tblAccessions.Accession = tblElectronicInterfaceEHI.Accession  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterfaceElation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  
CREATE PROCEDURE [dbo].[spGetListForElectronicInterfaceElation]   
   
AS  
BEGIN  
 SET NOCOUNT ON;  
  select tblElectronicInterfaceElation.Accession, tblAccessions.LabReportImage, tblAccessions.ClientCode from tblElectronicInterfaceElation inner join tblAccessions on tblAccessions.Accession = tblElectronicInterfaceElation.Accession  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterfaceGADOH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create Procedure [dbo].[spGetListForElectronicInterfaceGADOH]

 AS

 BEGIN
	SET NOCOUNT ON;
	select tblElectronicInterfaceGADOH.Accession, tblAccessions.LabReportImage, tblAccessions.ClientCode 
	from tblElectronicInterfaceGADOH inner join tblAccessions on tblAccessions.Accession = tblElectronicInterfaceGADOH.Accession;

END

GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterfaceMDLAND]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetListForElectronicInterfaceMDLAND] 
	
AS
BEGIN
	SET NOCOUNT ON;
		select tblElectronicInterfaceMDLAND.Accession, tblAccessions.LabReportImage, tblAccessions.ClientCode from tblElectronicInterfaceMDLAND inner join tblAccessions on tblAccessions.Accession = tblElectronicInterfaceMDLAND.Accession
END


GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterfaceMedGen]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
CREATE PROCEDURE [dbo].[spGetListForElectronicInterfaceMedGen]   
   
AS  
BEGIN  
 SET NOCOUNT ON;  
  select tblElectronicInterfaceMedGen.Accession, tblAccessions.LabReportImage, tblAccessions.ClientCode from tblElectronicInterfaceMedGen inner join tblAccessions on tblAccessions.Accession = tblElectronicInterfaceMedGen.Accession  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterfaceNextGen]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spGetListForElectronicInterfaceNextGen] 
	
AS
BEGIN
	SET NOCOUNT ON;
		select tblElectronicInterfaceNextGen.Accession, tblAccessions.LabReportImage, tblAccessions.ClientCode from tblElectronicInterfaceNextGen inner join tblAccessions on tblAccessions.Accession = tblElectronicInterfaceNextGen.Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterfaceNYSDOH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



  
create PROCEDURE [dbo].[spGetListForElectronicInterfaceNYSDOH]   
   
AS  
BEGIN  
 SET NOCOUNT ON;  
  select tblElectronicInterfaceNYSDOH.Accession, tblAccessions.LabReportImage, tblAccessions.ClientCode from tblElectronicInterfaceNYSDOH
   inner join tblAccessions on tblAccessions.Accession = tblElectronicInterfaceNYSDOH.Accession  
END  
  
  

GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterfaceOptiMantra]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
CREATE PROCEDURE [dbo].[spGetListForElectronicInterfaceOptiMantra]   
   
AS  
BEGIN  
 SET NOCOUNT ON;  
  select tblElectronicInterfaceOptiMantra.Accession, tblAccessions.LabReportImage, tblAccessions.ClientCode from tblElectronicInterfaceOptiMantra inner join tblAccessions on tblAccessions.Accession = tblElectronicInterfaceOptiMantra.Accession  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicInterfacePracticeFusion]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[spGetListForElectronicInterfacePracticeFusion]   
   
AS  
BEGIN  
 SET NOCOUNT ON;  
  select tblElectronicInterfacePracticeFusion.Accession, tblAccessions.LabReportImage, tblAccessions.ClientCode from tblElectronicInterfacePracticeFusion inner join tblAccessions on tblAccessions.Accession = tblElectronicInterfacePracticeFusion.Accession  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetListForElectronicReq]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spGetListForElectronicReq] 
	
AS
BEGIN
	SET NOCOUNT ON;
		SELECT tblElectronicReq.Accession, tblAccessions.Pregnant, tblAccessions.RecurrentBV, tblAccessions.RecurrentCandida, tblAccessions.RecurrentTrich, tblPatient.ptSex as Sex, tblPatient.ptDateofBirth as DOB, tblPatient.ptFirstName as FirstName, tblPatient.ptLastName as LastName, tblPhysicians.NPI, tblClients.ClientName, tblClients.City as ClientCity, tblClients.State as ClientState, tblAccessions.CollectionDate as CollectedDate, tblAccessions.ReceiveDate as ReceivedDate, 'UR' as Specimen
		FROM tblElectronicReq 
		INNER JOIN tblAccessions on tblAccessions.Accession = tblElectronicReq.Accession
		INNER JOIN tblPatient on tblAccessions.PatientID = tblPatient.PatientID
		INNER JOIN tblPhysicians on tblAccessions.PhysicianCode = tblPhysicians.PhysicianCode
		INNER JOIN tblClients on tblAccessions.ClientCode = tblClients.ClientCode
END


GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutBatch]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMailoutBatch] 
@SentBatchID varchar(20) 
AS
BEGIN
	select mo.MailOutLabCode as labcode, mol.name as labname, pt.ptLastName + ', ' + pt.ptFirstName as ptName, pt.ptDateOfBirth as dob, mo.MOAccession as accession, a.CollectionDate as tdate, mo.MailoutOrderSetCode as test
	from tblMailoutOrders  mo
	
	Inner Join dbo.tblMailoutLabs mol
	on mol.LabCode = mo.MailOutLabCode
	
	Inner Join dbo.tblPatient pt
	on mo.PatientID = pt.PatientID
	
	Inner Join dbo.tblAccessions a
	on a.Accession = REPLACE(mo.MOAccession, 'NL_', '')
		
	where SentBatchID = @SentBatchID
			
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutClientSetup]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetMailoutClientSetup]
(
	@MailoutLabCode varchar(20)
)
As
BEGIN

	SELECT * 
	FROM dbo.tblMailoutClientSetup with (NOLOCK)
	WHERE MailoutLabCode = @MailoutLabCode

END
GO
/****** Object:  StoredProcedure [dbo].[spGetMailOutCount]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMailOutCount] 
AS
BEGIN

	
	SELECT distinct rt.PerformedTest As ID  , ptd.ExternalDescription As Name , 
	'Status' = CASE
						WHEN EXISTS (SELECT rt.Status 
										FROM dbo.tblResultedTests rt (nolock)
										WHERE rt.PerformedTest = ptd.PerformedTest and  rt.Status = 'Pending'
								     ) THEN 'Pending'
						WHEN EXISTS (SELECT rt.Status FROM dbo.tblResultedTests rt (nolock)
										WHERE  rt.PerformedTest = ptd.PerformedTest and  rt.Status = 'Hold') THEN 'Hold'
						WHEN EXISTS (SELECT rt.Status FROM dbo.tblResultedTests rt (nolock)
										WHERE  rt.PerformedTest = ptd.PerformedTest and  rt.Status = 'Final') THEN 'Final'
						WHEN EXISTS (SELECT rt.Status FROM dbo.tblResultedTests rt (nolock)
										WHERE  rt.PerformedTest = ptd.PerformedTest and  rt.Status = 'Cancelled') THEN 'Cancelled'
		                END 	
	
		FROM dbo.tblResultedTests  rt (NOLOCK)
		INNER JOIN dbo.tblPerformedTestsDefinitions ptd (NOLOCK)
		ON rt.PerformedTest = ptd.PerformedTest
		and ptd.MailoutFlag = 'True'			
		order by rt.PerformedTest asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutforPanel]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spGetMailoutforPanel]     
@OrderedTest varchar(100)   
AS    
BEGIN    
  
SELECT * 
  FROM [tblOrderedTestsdefinitions] ord
  inner join [tblPerformedTestsDefinitions] prf
  on ord.performedtestcode=prf.performedtest
  
  where MailoutFlag='m'
  and orderedtest=@OrderedTest

END  
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutHL7OrderInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--CBS Interface
CREATE PROCEDURE [dbo].[spGetMailoutHL7OrderInfo]	
	@Accession varchar(50)
AS
BEGIN
	select
	distinct
    a.Accession,
    a.PatientID, 
    isnull(p.ptFirstName, '') AS FirstName, 
    isnull(p.ptLastName, '') AS LastName, 
    isnull(p.ptAddress1, '') AS ptAddress1,
    isnull(p.ptAddress2, '') AS ptAddress2,
    isnull(p.ptCity, '') AS ptCity,
    isnull(p.ptState, '') AS ptState,
    isnull(p.ptZip, '') AS ptZip,
    isnull(p.ptSSN, '') as SSN,
    p.ptSex AS Sex, 
    p.ptDateofBirth AS DOB,	
    isnull(p.PTContactHomePhone, '') AS ptTelephone,
	a.PhysicianCode,
	isnull(phs.LastName, '')  AS PhysLastName,
	isnull(phs.FirstName, '')  AS PhysFirstName,
	isnull(phs.MiddleName, '')  AS PhysMiddleName,
    a.CollectionDate, 
    a.ReceiveDate 
    , mcs.MailoutOrderSetCode
    , mcs.MailoutLabCode
	, a.OrderType
    from tblAccessions a (nolock) 
	inner join tblPatient p (nolock)
	on a.PatientID = p.PatientId
	
	inner join tblPhysicians phs (nolock)
	on a.PhysicianCode = phs.PhysicianCode
	
	inner join tblOrderedTests ot (nolock)
	on a.Accession = ot.Accession 
	
	inner join tblMailoutClientSetup mcs (nolock)
	on ot.OrderedTest = mcs.OrderSetCode
	
	--where a.Accession = '150323-0002'
	where a.Accession = @Accession
	--and mcs.MailoutLabCode = 'CBS'
		
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutHL7OrderInfoACCUREFERENCE]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--ACCUREFERENCE Interface  
CREATE PROCEDURE [dbo].[spGetMailoutHL7OrderInfoACCUREFERENCE]

 @Accession varchar(50)  
AS  
BEGIN  
 select  
 --top 1  
 --distinct  
    a.Accession,  
    a.PatientID,   
    c.ClientName,  
    c.ClientCode,  
    isnull(p.ptFirstName, '') AS FirstName,   
    isnull(p.ptLastName, '') AS LastName,  
 isnull(p.ptMiddleName, '') AS MiddleName,   
    isnull(p.ptAddress1, '') AS ptAddress1,  
    isnull(p.ptAddress2, '') AS ptAddress2,  
    isnull(p.ptCity, '') AS ptCity,  
    isnull(p.ptState, '') AS ptState,  
    isnull(p.ptZip, '') AS ptZip,  
    isnull(p.ptSSN, '') as SSN,  
    p.ptSex AS Sex,   
    p.ptDateofBirth AS DOB,   
    isnull(p.PTContactHomePhone, '') AS ptTelephone,  
 a.PhysicianCode,  
 isnull(phs.LastName, '')  AS PhysLastName,  
 isnull(phs.FirstName, '')  AS PhysFirstName,  
 isnull(phs.MiddleName, '')  AS PhysMiddleName,  
 isnull(phs.NPI, '') AS NPI,  
    a.CollectionDate,   
    a.ReceiveDate   
    , ot.OrderedTest as ordertest  
    , mo.MailoutLabCode  
  
 , a.OrderType  
 , p.PrimaryPatRelationtoIns  
 , p.SecondaryPatRelationtoIns  
 , p.TertiaryPatRelationtoIns  
 --, otd.Description  
 , ptd.ExternalDescription as Description  
 , a.InternalComment  
 , NULL as ReqFormImage ,ptd.PerformedTest as MailoutOrderSetCode
 from tblAccessions a (nolock)   
 inner join tblPatient p (nolock)  
 on a.PatientID = p.PatientId  
   
 inner join tblClients c (nolock)  
 on a.ClientCode = c.ClientCode  
   
 inner join tblPhysicians phs (nolock)  
 on a.PhysicianCode = phs.PhysicianCode  
   
 inner join tblOrderedTests ot (nolock)  
 on a.Accession = ot.Accession   
   
 inner join tblMailoutOrders mo (nolock)  
 on mo.MOAccession = a.Accession  
   
   
 inner join tblPerformedTestsDefinitions ptd  
 on ptd.PerformedTest = ot.PerformedTest  
 
    
 where a.Accession = @Accession  
 and mo.MailoutLabcode = 'ACCUREFERENCE'  
 and ptd.MailoutLab = 'ACCUREFERENCE' 
 and ptd.MailoutFlag = 'M'
   
 select DiagnosisDataXML, MedicationsDataXML from tblAccessions where Accession = @Accession    
   
END  
  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutHL7OrderInfoSML]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--COMPTRON Interface (Accu-Reference)    
CREATE PROCEDURE [dbo].[spGetMailoutHL7OrderInfoSML]     
 @Accession varchar(50)    
AS    
BEGIN    
 select    
 --top 1    
 distinct    
    a.Accession,    
    a.PatientID,     
    c.ClientName,    
    c.ClientCode,    
    isnull(p.ptFirstName, '') AS FirstName,     
    isnull(p.ptLastName, '') AS LastName,    
 isnull(p.ptMiddleName, '') AS MiddleName,     
    isnull(p.ptAddress1, '') AS ptAddress1,    
    isnull(p.ptAddress2, '') AS ptAddress2,    
    isnull(p.ptCity, '') AS ptCity,    
    isnull(p.ptState, '') AS ptState,    
    isnull(p.ptZip, '') AS ptZip,    
    isnull(p.ptSSN, '') as SSN,    
    p.ptSex AS Sex,     
    p.ptDateofBirth AS DOB,     
    isnull(p.PTContactHomePhone, '') AS ptTelephone,    
 a.PhysicianCode,    
 isnull(phs.LastName, '')  AS PhysLastName,    
 isnull(phs.FirstName, '')  AS PhysFirstName,    
 isnull(phs.MiddleName, '')  AS PhysMiddleName,    
 isnull(phs.NPI, '') AS NPI,    
    a.CollectionDate,     
    a.ReceiveDate     
    , ot.OrderedTest as MailoutOrderSetCode    
    , mo.MailoutLabCode    
    
 , a.OrderType    
 , p.PrimaryPatRelationtoIns    
 , p.SecondaryPatRelationtoIns    
 , p.TertiaryPatRelationtoIns    
 --, otd.Description    
 , ptd.ExternalDescription as Description    
 , a.InternalComment    
 , NULL as ReqFormImage    
 ,a.SpecimenSource    
 ,a.LMP  
  ,isnull(a.currentbilltype,'') as billtype      
 from tblAccessions a (nolock)     
 inner join tblPatient p (nolock)    
 on a.PatientID = p.PatientId    
     
 inner join tblClients c (nolock)    
 on a.ClientCode = c.ClientCode    
     
 inner join tblPhysicians phs (nolock)    
 on a.PhysicianCode = phs.PhysicianCode    
     
 inner join tblOrderedTests ot (nolock)    
 on a.Accession = ot.Accession     
     
 inner join tblMailoutOrders mo (nolock)    
 on mo.MOAccession = a.Accession    
     
     
 inner join tblPerformedTestsDefinitions ptd    
 on ptd.PerformedTest = ot.PerformedTest    
      
 where a.Accession = @Accession    
 and mo.MailoutLabcode = 'SUNRISE'    
 and ptd.MailoutLab = 'SUNRISE'    
     
 select DiagnosisDataXML, MedicationsDataXML from tblAccessions where Accession = @Accession      
     
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutLabAccountNumber]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMailoutLabAccountNumber]     
 
 @mailoutlab varchar(50)   
AS    
BEGIN    
 select  Accountnumber from tblMailoutLabs (nolock)  where labcode=@mailoutlab
 
     
     
END    
    
GO
/****** Object:  StoredProcedure [dbo].[spGetMailOutLabCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetMailOutLabCodes]
	@OrderedTest as varchar(100)
	
AS
BEGIN
SET NOCOUNT ON
DECLARE   @PerformedTestCode as varchar(100)
	    , @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @FieldList varchar(2000)
		, @PerformedTest varchar(20)
		

SELECT @PerformedTestCode = PerformedTestCode from tblOrderedTestsDefinitions
                        where OrderedTest = @OrderedTest

		
	
CREATE TABLE #tmpPerformedTest
(
    PerformedTest varchar(20) NOT NULL
)

Set @FieldList =''
Set @FieldList = @PerformedTestCode + '|'
Set @StartPos = 1
Set @EndPos = 1
 -- Start the looping operation
While @EndPos > 0
   Begin
      Set @EndPos = CharIndex('|', @FieldList, @StartPos)
      If @EndPos > 0
         Begin
            Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
			 
            -- Add current row to TempTable
            Insert #tmpPerformedTest (PerformedTest) Values (@CurVal)
            Set @StartPos = @EndPos + 1
         End
   
   --PRINT @FieldList
 END
 
 
 select PerformedBy from tblPerformedTestsDefinitions
where MailoutFlag = 'M'
and PerformedTest in (select PerformedTest from #tmpPerformedTest)
 
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutLabInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMailoutLabInfo] 
	
	@LabCode varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT *
	FROM tblMailoutLabs with (NOLOCK)
	WHERE LabCode = @LabCode
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutLabs]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMailoutLabs] 
AS
BEGIN

	SELECT LabCode,  Name, LabCode + ' - (' + Name + ')' as LabIdName
		FROM dbo.tblMailoutLabs (NOLOCK)
		
		order by  LabCode asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMailOutLabsList2]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMailOutLabsList2] 
	@MailOutLabCode varchar (100)
AS
BEGIN
	select mo.MailOutLabCode as labcode, mol.name as labname, pt.ptLastName + ', ' + pt.ptFirstName as ptName, pt.ptDateOfBirth as dob, mo.MOAccession as accession, a.CollectionDate as tdate, mo.MailoutOrderSetCode as test
	from tblMailoutOrders  mo
	
	Inner Join dbo.tblMailoutLabs mol
	on mol.LabCode = mo.MailOutLabCode
	
	Inner Join dbo.tblPatient pt
	on mo.PatientID = pt.PatientID
	
	Inner Join dbo.tblAccessions a
	on a.Accession = REPLACE(mo.MOAccession, 'NL_', '')
		
	where SentBatchID = '0'
	and mo.MailOutLabCode = @MailOutLabCode

			
END








GO
/****** Object:  StoredProcedure [dbo].[spGetMailOutLabsList3]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetMailOutLabsList3] 
	@MailOutLabCode varchar (100) = NULL,
	@BatchID varchar (200) = NULL
AS
BEGIN
	IF @BatchID is NOT NULL
	BEGIN
			select mo.MailOutLabCode as labcode, mol.name as labname, RTRIM(LTRIM(pt.ptLastName)) + ', ' + RTRIM(LTRIM(pt.ptFirstName)) as ptName, pt.ptDateOfBirth as dob, 
			mo.MOAccession as accession, a.CollectionDate as tdate, mo.MailoutOrderSetCode as test, mo.MailoutComment
			from tblMailoutOrders  mo
	
			Inner Join dbo.tblMailoutLabs mol
			on mol.LabCode = mo.MailOutLabCode
	
			Inner Join dbo.tblPatient pt
			on mo.PatientID = pt.PatientID
	
			Inner Join dbo.tblAccessions a
			on a.Accession = mo.MOAccession
		
			where SentBatchID = @BatchID
	END
	ELSE
	BEGIN
			select mo.MailOutLabCode as labcode, mol.name as labname, RTRIM(LTRIM(pt.ptLastName)) + ', ' + RTRIM(LTRIM(pt.ptFirstName)) as ptName, pt.ptDateOfBirth as dob, 
			mo.MOAccession as accession, a.CollectionDate as tdate, mo.MailoutOrderSetCode as test, mo.MailoutComment
			from tblMailoutOrders  mo
	
			Inner Join dbo.tblMailoutLabs mol
			on mol.LabCode = mo.MailOutLabCode
	
			Inner Join dbo.tblPatient pt
			on mo.PatientID = pt.PatientID
	
			Inner Join dbo.tblAccessions a
			on a.Accession = mo.MOAccession
		
			where SentBatchID = '0'
			and mo.MailOutLabCode LIKE ISNULL(@MailOutLabCode, MailOutLabCode) 
			
	END
 END
GO
/****** Object:  StoredProcedure [dbo].[spGetMailOutLabsListALL2]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMailOutLabsListALL2] 

AS
BEGIN
	select mo.MailOutLabCode as labcode, mol.name as labname, pt.ptLastName + ', ' + pt.ptFirstName as ptName, pt.ptDateOfBirth as dob, mo.MOAccession as accession, a.CollectionDate as tdate, mo.MailoutOrderSetCode as test
	from tblMailoutOrders  mo
	
	Inner Join dbo.tblMailoutLabs mol
	on mol.LabCode = mo.MailOutLabCode
	
	Inner Join dbo.tblPatient pt
	on mo.PatientID = pt.PatientID
	
	Inner Join dbo.tblAccessions a
	on a.Accession = REPLACE(mo.MOAccession, 'NL_', '')
		
	where SentBatchID = '0'
			
END





GO
/****** Object:  StoredProcedure [dbo].[spGetMailOutLabsListByBatchID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMailOutLabsListByBatchID] 
	@BatchID varchar (200)
AS
BEGIN
SELECT     mo.MailoutLabCode AS labcode, mol.Name AS labname, pt.ptLastName + ', ' + pt.ptFirstName AS ptName, pt.ptDateOfBirth AS dob, mo.MOAccession AS accession, 
                      a.CollectionDate AS tdate, mo.MailoutOrderSetCode AS OrderedTest, mo.OrderSetCode AS PerfromedTest, mo.OrderSetCode AS test, pt.PatientId, 
                      tblPhysicians.FullName, a.DateCreated AS AccessionDate
FROM         tblMailoutOrders AS mo INNER JOIN
                      tblMailoutLabs AS mol ON mol.LabCode = mo.MailoutLabCode INNER JOIN
                      tblPatient AS pt ON mo.PatientID = pt.PatientId INNER JOIN
                      tblAccessions AS a ON a.Accession = REPLACE(mo.MOAccession, 'NL_', '') INNER JOIN
                      tblPhysicians ON a.PhysicianCode = tblPhysicians.PhysicianCode
		
	where SentBatchID = @BatchID
	
			
END


GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutResultTranslation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetMailoutResultTranslation]  
 -- Add the parameters for the stored procedure here    
 @MailoutLabCode varchar(20),
 @MailoutCD varchar(100)    
AS    
BEGIN    
  
 SET NOCOUNT ON;    
    
    -- Insert statements for procedure here    
SELECT ResultTest, rtd.Decimals
FROM tblMailoutElements ids (NOLOCK)	
inner join tblResultedTestsDefinitions rtd 
on ids.ResultTest = rtd.TestCode
WHERE MailoutLabCode = @MailoutLabCode and MailoutCD = @MailoutCD  
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutStatus]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- =============================================  
create PROCEDURE [dbo].[spGetMailoutStatus]   
      @OrderedTestCode varchar(20)  
AS  
BEGIN  
   
SET NOCOUNT ON;  
  
DECLARE   @StartPos smallint  
  , @EndPos smallint  
  , @CurVal varchar(20)  
  , @FieldList varchar(2000)  
  , @PTestsList varchar(500)  
  , @iPos smallint  
  
if object_id('tempdb..#PrfTests') is not null  
  
 drop table #PrfTests  
   
create table #PrfTests  
(   
  pTestCode varchar(20),  
  iPos smallint     
)    
  
Set @PTestsList = (SELECT PerformedTestCode FROM dbo.tblOrderedTestsDefinitions WHERE OrderedTest = @OrderedTestCode)  
  
IF @PTestsList IS NULL OR @PTestsList =''  
 BEGIN  
     SELECT OrderedTest,[Description],ActiveFlag ,InSearchFlag ,'' as pTestCode , '' as ExternalDescription,  
   ReportFlag, '', '' as MailoutFlag, '' as MailoutLab, UTI  
     FROM dbo.tblOrderedTestsDefinitions  
     WHERE OrderedTest = @OrderedTestCode  
  --SELECT ClientCode, ClientName FROM dbo.tblClients   
 END  
   
ELSE  
  
 BEGIN  
  Set @FieldList =''  
  Set @FieldList = @PTestsList + '|'  
  Set @StartPos = 1  
  Set @EndPos = 1  
  Set @iPos = 1  
   -- Start the looping operation  
  While @EndPos > 0  
     Begin  
     Set @EndPos = CharIndex('|', @FieldList, @StartPos)  
     If @EndPos > 0  
     Begin  
     Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))  
     -- Add current row to TempTable  
     Insert #PrfTests (pTestCode, iPos) Values (@CurVal, @iPos)  
     Set @StartPos = @EndPos + 1  
     Set @iPos = @iPos + 1  
     End  
     End  
  
      
    SELECT o.OrderedTest,o.[Description],o.ActiveFlag ,o.InSearchFlag ,cl.pTestCode, c.ExternalDescription, o.InstrumentCode,  
   o.ReportFlag, cl.iPos, c.PerformedTest, isnull(c.MailoutFlag, '') as MailoutFlag, isnull(c.MailoutLab, '') as MailoutLab, UTI  
      
    from  #PrfTests cl  
      
    INNER JOIN tblPerformedTestsDefinitions c  
    ON cl.pTestCode = c.PerformedTest  
      
    INNER JOIN tblOrderedTestsDefinitions o  
    ON o.OrderedTest = @OrderedTestCode  where MailoutFlag ='M'  
    
   END  
END  
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutTestCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMailoutTestCode]    
 -- Add the parameters for the stored procedure here      

 @TestCode varchar(100)
 
     
AS      
BEGIN      
    
 SET NOCOUNT ON;      
 
  SELECT MailoutTestCode FROM tblMailoutTestCodes   
  WHERE  TestCode = @TestCode  
  
       
END  
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutTestCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:      <Author,,Name>
-- Create date: <Create Date,,>
-- Description:    <Description,,>
-- =============================================
create PROCEDURE [dbo].[spGetMailoutTestCodes]
              @MailoutLabCode varchar(20)
AS
BEGIN
              select ISNULL(MailoutTestCode, '') as MailoutTestCode  ,
 TestCode as LabTestCode ,  
 MailoutLabCode as MailoutLab
	from tblMailoutTestCodes
	where MailoutLabCode = @MailoutLabCode
	order by LabTestCode  
 --   select ISNULL(mtc.MailoutTestCode, '') as MailoutTestCode  ,
 --ptd.PerformedTest as LabTestCode ,  
 --ptd.MailoutLab
	--from tblMailoutTestCodes mtc
	--right outer join tblPerformedTestsDefinitions ptd
	--on ptd.PerformedTest = mtc.TestCode
	--and ptd.MailoutLab = mtc.MailoutLabCode
	--where ptd.MailoutLab = @MailoutLabCode
	--order by LabTestCode
                
END




GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutTestCodesForRequisitionForm]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMailoutTestCodesForRequisitionForm]   
 @Accession varchar(100),  
 @MailOutLabCode varchar(20)  
AS  
BEGIN  
 declare @count as int = 0  
 select @count = count(ot.PerformedTest) from tblOrderedTests ot   
 inner join tblPerformedTestsDefinitions ptd   
 on ptd.PerformedTest = ot.PerformedTest   
 and ptd.MailoutFlag = 'M'  
 and ptd.MailoutLab = @MailOutLabCode  
 and ot.Accession = @Accession  
  
 if @count>0  
 begin  
  SELECT distinct ot.PerformedTest as OrderedTest, ptd.ExternalDescription as Description  
  from  tblOrderedTests ot  
  INNER JOIN tblPerformedTestsDefinitions ptd  
  on ot.PerformedTest = ptd.PerformedTest  
  where ot.Accession = @Accession  
  and ptd.MailoutFlag = 'M'  
  and ptd.MailoutLab = @MailOutLabCode  
  order by ot.PerformedTest  
 end  
 else  
 begin  
  SELECT distinct ot.PerformedTest as OrderedTest, ptd.ExternalDescription as Description  
  from  tblOrderedTests ot  
  INNER JOIN tblOrderedTestsDefinitions otd  
  on ot.OrderedTest = otd.OrderedTest  
  INNER JOIN tblPerformedTestsDefinitions ptd  
  on ot.PerformedTest = ptd.PerformedTest  
  where ot.Accession = @Accession  
  and ptd.MailoutFlag = 'M'  
  order by OrderedTest  
 end  
   
  
  
  
  
 --declare @count as int = 0  
 --declare @countYHL as int = 0  
 --select @count = count(ot.PerformedTest) from tblOrderedTests ot   
 --inner join tblPerformedTestsDefinitions ptd   
 --on ptd.PerformedTest = ot.PerformedTest   
 --and ptd.MailoutFlag = 'M'  
 --and ptd.PerformedBy = 'ACCUREFERENCE'  
 --and ot.Accession = @Accession  
   
 --select @countYHL = count(ot.PerformedTest) from tblOrderedTests ot   
 --inner join tblPerformedTestsDefinitions ptd   
 --on ptd.PerformedTest = ot.PerformedTest   
 --and ptd.MailoutFlag = 'M'  
 --and ptd.PerformedBy = 'YHL'  
 --and ot.Accession = @Accession  
   
 --if (@count > 0 or @countYHL > 0) --ACCUREFERENCE panel included, only get ACCUREFERENCE performed test for req  
 --begin  
 -- Declare @PerformedBy as varchar(100)  
 -- if @count > 0  
 -- begin  
 --  Set @PerformedBy = 'ACCUREFERENCE'  
 -- end  
 -- if @countYHL > 0  
 -- begin  
 --  Set @PerformedBy = 'YHL'  
 -- end  
    
 -- SELECT distinct ot.PerformedTest as OrderedTest, ptd.ExternalDescription as Description  
 -- from  tblOrderedTests ot  
 -- INNER JOIN tblPerformedTestsDefinitions ptd  
 -- on ot.PerformedTest = ptd.PerformedTest  
 -- where ot.Accession = @Accession  
 -- and ptd.MailoutFlag = 'M'  
 -- and ptd.PerformedBy = @PerformedBy  
 -- order by ot.PerformedTest  
 --end  
 --else  
 --begin  
 -- SELECT distinct ot.OrderedTest, Description  
 -- from  tblOrderedTests ot  
 -- INNER JOIN tblOrderedTestsDefinitions otd  
 -- on ot.OrderedTest = otd.OrderedTest  
 -- where ot.Accession = @Accession  
 -- order by OrderedTest  
 --end      
   
END  
  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutTestCodeTranslation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMailoutTestCodeTranslation]        
 -- Add the parameters for the stored procedure here    
 
 @MailoutLabCode varchar(20),      
 @TestCode varchar(100),      
 @PerformedTestCodeName varchar(100) = NULL,      
 @FromLIScodeToMOcode bit,      
 @FromMOcodeToLIScode bit      
         
AS          
BEGIN          
        
 SET NOCOUNT ON;          
 --For Orders:      
  IF @FromLIScodeToMOcode = 1      
  BEGIN      
    
  SELECT MailoutTestCode FROM tblMailoutTestCodes       
  WHERE MailoutLabCode = @MailoutLabCode and TestCode = @TestCode      
  END      
  --For Results      
  IF @FromMOcodeToLIScode = 1      
  BEGIN      
  --Log missing translation mailout codes here:      
  IF (SELECT Count(*) FROM tblMailoutTestCodes WHERE MailoutLabCode = 'ACCUREFERENCE' and MailoutTestCode = @TestCode) = 0      
  BEGIN      
   IF (SELECT Count(*) FROM tblMissingTransaltionCode WHERE MailoutLabCode = @MailoutLabCode and TestCode = @TestCode) = 0      
   BEGIN      
    INSERT INTO tblMissingTransaltionCode (TestCode, TestCodeName, MailoutLabCode)      
    VALUES (@TestCode, @PerformedTestCodeName,  @MailoutLabCode)      
   END      
  END      
  --END Log      
  SELECT TestCode FROM tblMailoutTestCodes       
  WHERE MailoutLabCode = @MailoutLabCode and MailoutTestCode = @TestCode      
  END      
           
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutTestCodeTranslationSUNRISE]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMailoutTestCodeTranslationSUNRISE]      
 -- Add the parameters for the stored procedure here        
 @MailoutLabCode varchar(20),    
 @TestCode varchar(100),    
 @PerformedTestCodeName varchar(100) = NULL,    
 @FromLIScodeToMOcode bit,    
 @FromMOcodeToLIScode bit    
       
AS        
BEGIN        
      
 SET NOCOUNT ON;        
 --For Orders:    
  IF @FromLIScodeToMOcode = 1    
  BEGIN    
  SELECT MailoutTestCode FROM tblMailoutTestCodes     
  WHERE MailoutLabCode = @MailoutLabCode and TestCode = @TestCode    
  END    
  --For Results    
  IF @FromMOcodeToLIScode = 1    
  BEGIN    
  --Log missing translation mailout codes here:    
  IF (SELECT Count(*) FROM tblMailoutTestCodes WHERE MailoutLabCode = @MailoutLabCode and MailoutTestCode = @TestCode) = 0    
  BEGIN    
   IF (SELECT Count(*) FROM tblMissingTransaltionCode WHERE MailoutLabCode = @MailoutLabCode and TestCode = @TestCode) = 0    
   BEGIN    
    INSERT INTO tblMissingTransaltionCode (TestCode, TestCodeName, MailoutLabCode)    
    VALUES (@TestCode, @PerformedTestCodeName,  @MailoutLabCode)    
   END    
  END    
  --END Log    
  SELECT TestCode FROM tblMailoutTestCodes     
  WHERE MailoutLabCode = @MailoutLabCode and MailoutTestCode = @TestCode    
  END    
         
END    
GO
/****** Object:  StoredProcedure [dbo].[spGetMailoutTranslationCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:      <Author,,Name>
-- Create date: <Create Date,,>
-- Description:    <Description,,>
-- =============================================
create PROCEDURE [dbo].[spGetMailoutTranslationCode]
              @MailoutLabCode varchar(20),
			  @TestCode VARCHAR(100)
AS
BEGIN
              select MailoutTestCode
	from tblMailoutTestCodes
	where MailoutLabCode = @MailoutLabCode
	AND TestCode = @TestCode
	
END



GO
/****** Object:  StoredProcedure [dbo].[spGetManualHoldReasons]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetManualHoldReasons] 
	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT Reason
	FROM tblManualHoldReasons
	order by Reason
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMasterPatientInsuredInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMasterPatientInsuredInfo] 
	@mpatID varchar(20)
AS
BEGIN
	DECLARE @InsuredMasterID varchar(50)
	       , @InsuredPrimary varchar(50)
	       , @InsuredSecondary varchar(50)
	       , @InsuredTertiary varchar(50)
	SET @InsuredMasterID =  '*' + @mpatID + '%'
	SET @InsuredPrimary =  '*' +@mpatID + 'P'
	SET @InsuredSecondary =  '*' +@mpatID + 'S'
	SET @InsuredTertiary = '*' + @mpatID + 'T'
	PRINT @InsuredPrimary
	 
	SELECT  ins.InsuredID, com.Name, ins.Policy , ins.[Plan] , ins.[Group] , ins.Employer , ins.Copay ,
	 ins.FirstName, ins.MiddleName, ins.LastName, ins.InsuranceID, ins.Address1, ins.Address2, ins.City,
	 ins.[State], ins.Zip, ins.HomePhone, ins.WorkPhone, ins.CellPhone, ins.Email, Fax, 
     ins.DateOfBirth, ins.Sex, ins.SSN, ins.WorkRelatedInjuryDate, ins.AutoRelatedInjuryDate,
	 com.Address as ins_address, com.Address2 as ins_address2, com.City as ins_city, com.State as ins_state,
     com.Zip as ins_zip, com.Telephone as ins_phone, com.providernumber,
	
	
	Case When ins.InsuredID = @InsuredPrimary then 'Primary' 
	     When ins.InsuredID = @InsuredSecondary then 'Secondary'
	     When ins.InsuredID = @InsuredTertiary then 'Tertiary'	
	End  As InsuranceType
	FROM dbo.tblInsuredInfo ins (nolock)
	LEFT JOIN dbo.tblInsuranceCompanies com (nolock)
	ON ins.InsuranceID = com.InsuranceCode
	where ins.InsuredID = @InsuredPrimary or ins.InsuredID = @InsuredSecondary
	ORDER BY ins.InsuredID
	
END





--***************************RESULTS****************

GO
/****** Object:  StoredProcedure [dbo].[spGetMatchingAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetMatchingAccession] 
                
                @PatientLastName varchar(100),
				@PatientFirstName varchar(100),
				@PatientDOB datetime,
				@CollectionDate datetime,
				@Accession varchar(100)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT @Accession = Accession
	From tblAccessions a
	inner join tblPatient p
	on p.PatientId = a.PatientID
	where p.ptLastName = @PatientLastName and p.ptFirstName = @PatientFirstName 
	AND CONVERT(varchar, p.ptDateOfBirth, 101) = CONVERT(varchar, @PatientDOB, 101)
	AND CONVERT(varchar, a.CollectionDate, 101) = CONVERT(varchar, @CollectionDate, 101)
	--and p.ptDateOfBirth = @PatientDOB and a.CollectionDate = @CollectionDate

	declare @medcode as varchar(20)
	declare @meddesc as varchar(100)
	declare @tempSql as nvarchar(1000)
	declare @ParmDef as nvarchar(500)
	declare @iter as integer = 0
	declare @medString as varchar(200) = ''

	set @ParmDef=N'@accessionOut varchar(100) OUTPUT, @medcodeOut varchar(20) OUTPUT, @meddescOut varchar(100) OUTPUT';

	While (1=1)
	Begin
		set @iter = @iter + 1
		set @tempSql = 'SELECT @medcodeOut = MedicationsDataXML.value(''(/QSSLISOrderRecord/medicationcodes/medicationcode/@code)[' + cast(@iter as varchar(3)) + ']'', ''varchar(20)''),
		@meddescOut = DiagnosisDataXML.value(''(/QSSLISOrderRecord/ICD9codes/ICD9codes/@description)[' + cast(@iter as varchar(3)) + ']'', ''varchar(20)'') 
		from tblAccessions where Accession = ' + @accession
		EXECUTE sp_executesql @tempSql, @ParmDef, @accessionOut = @accession OUTPUT, @medcodeOut = @medcode OUTPUT, @meddescOut = @meddesc OUTPUT;
		--print @tempSql
		if @medcode is null break;
		set @medString = @medString + @medcode + ' '
	end

	select @accession as accession, @medstring as medicationcode
END






GO
/****** Object:  StoredProcedure [dbo].[spGetMatchingPerformedTestCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetMatchingPerformedTestCode]     
                    
 @Performedtestcode varchar(100)    
        
AS    
BEGIN    
   select * from tblMailoutTestCodes where testcode=@Performedtestcode  and mailoutlabcode='Sunrise'  
      
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMatchingSunrisePerformedTestCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
-- =============================================    
-- Author:      <Author,,Name>    
-- Create date: <Create Date,,>    
-- Description:    <Description,,>    
-- =============================================    
CREATE PROCEDURE [dbo].[spGetMatchingSunrisePerformedTestCode]    
              @MailoutLabCode varchar(20)='Sunrise',    
     @Performedtestcode VARCHAR(100)    
AS    
BEGIN    
              select MailoutTestCode  as mailoutlabtestcode  
 from tblMailoutTestCodes    
 where MailoutLabCode = @MailoutLabCode    
 AND TestCode = @Performedtestcode    
     
END    
    
    
GO
/****** Object:  StoredProcedure [dbo].[spGetMedicatioInfoForRequisitionEntry]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMedicatioInfoForRequisitionEntry] 
      @MedicationCodesList varchar(1000)
AS
BEGIN
       
SET NOCOUNT ON;

DECLARE   @StartPos smallint
              , @EndPos smallint
              , @CurVal varchar(20)
              , @FieldList varchar(2000)
              , @rMedicationCodesList varchar(500)

if object_id('tempdb..#tempAccessionMedicationCodes') is not null

       drop table #tempAccessionMedicationCodes
       
create table #tempAccessionMedicationCodes
( 
        rMedicationCode varchar(20)   
)  

Set @rMedicationCodesList = @MedicationCodesList


              Set @FieldList =''
              Set @FieldList = @rMedicationCodesList + '|'
              Set @StartPos = 1
              Set @EndPos = 1
              -- Start the looping operation
              While @EndPos > 0
                 Begin
                       Set @EndPos = CharIndex('|', @FieldList, @StartPos)
                       If @EndPos > 0
                           Begin
                                  Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
                                  -- Add current row to TempTable
                                  Insert #tempAccessionMedicationCodes (rMedicationCode) Values (@CurVal)
                                  Set @StartPos = @EndPos + 1
                           End
                 End

                
                SELECT MedicationCode, Description
              
                
                             
                from  #tempAccessionMedicationCodes aot
                INNER JOIN tblMedications otd
                on aot.rMedicationCode = otd.MedicationCode
                order by MedicationCode
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMedicationCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetMedicationCode] 
	@MedicationName varchar(100)
AS
BEGIN

	SET NOCOUNT ON


	SELECT MedicationCode 
	FROM tblMedications (NOLOCK)
	WHERE Description = @MedicationName or MedicationCode = @MedicationName
END


GO
/****** Object:  StoredProcedure [dbo].[spGetMedicationCodeInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetMedicationCodeInfo] 
	@Code varchar(50)
AS
BEGIN

	SET NOCOUNT ON


	SELECT Description, GenericName
	FROM tblMedications (NOLOCK)
	WHERE MedicationCode = @Code
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMedicationForResultCodeMA]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMedicationForResultCodeMA] 
      @MedicationList varchar(max)
AS
BEGIN
	
SET NOCOUNT ON;

DECLARE   @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @FieldList varchar(2000)
		, @rMedicationList varchar(max)

if object_id('tempdb..#tempRsltTestMedications') is not null

	drop table #tempRsltTestMedications
	
create table #tempRsltTestMedications
( 
	 rMedicationCode varchar(20)   
)  

Set @rMedicationList = @MedicationList


		Set @FieldList =''
		Set @FieldList = @rMedicationList + '|'
		Set @StartPos = 1
		Set @EndPos = 1
		 -- Start the looping operation
		While @EndPos > 0
		   Begin
			  Set @EndPos = CharIndex('|', @FieldList, @StartPos)
			  If @EndPos > 0
				 Begin
					Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
					-- Add current row to TempTable
					Insert #tempRsltTestMedications (rMedicationCode) Values (@CurVal)
					Set @StartPos = @EndPos + 1
				 End
		   End

		  
		  SELECT MedicationCode, Description
	       
		  
				  
		  from  #tempRsltTestMedications tm
		  INNER JOIN tblMedications m
		  on tm.rMedicationCode = m.MedicationCode
		  order by MedicationCode
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMedicationInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetMedicationInfo] 
	
	@Code varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT Description
	FROM tblMedications with (NOLOCK)
	WHERE 	Category <> 'X' AND MedicationCode = @Code
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMedications]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetMedications]
	
AS
BEGIN
	select Description, MedicationCode   from tblMedications with (nolock) 
	
	Union Select ' [Please Select]' as Description, '' as MedicationCode
	order by Description
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMicrobioTestAntibioticsByAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetMicrobioTestAntibioticsByAccession] 
	@Accession as varchar(100)

AS
BEGIN
	
	SET NOCOUNT ON;


	Select * from tblMicroTestAntibiotics
	                      
	Where Accession = @Accession                     
	                      
                      
END





GO
/****** Object:  StoredProcedure [dbo].[spGetMicrobioTestAntibioticsByID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetMicrobioTestAntibioticsByID] 
	@Accession as varchar(100),
	@MicroTestOrganismID as varchar(100)
AS
BEGIN
	
	SET NOCOUNT ON;


	Select * from tblMicroTestAntibiotics
	                      
	Where Accession = @Accession and MicroTestOrganismID = @MicroTestOrganismID                     
	                      
                      
END





GO
/****** Object:  StoredProcedure [dbo].[spGetMicrobioTestByAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetMicrobioTestByAccession] 
	@Accession as varchar(100),
	@TestCode as varchar(100)
AS
BEGIN
	
	SET NOCOUNT ON;

SELECT     tblMicroTests.id, tblMicroTests.Accession, tblMicroTests.CollectionDate, tblMicroTests.TestCode, tblMicroTests.TestDescription, 
				SpecimenSource = 
				Case When len(tblMicroTests.SpecimenSource) > 0 then tblMicroTests.SpecimenSource
				Else (Select SpecimenSource from tblAccessions acc where acc.Accession = @Accession) end,
                tblMicroTests.Status, tblPhysicians.FullName, tblPatient.ptLastName + ' ' + tblPatient.ptFirstName AS PatientName, tblMicroTests.ClientCode, tblClients.ClientName, 
                tblMicroTests.Comment, tblPatient.PatientId,  tblMicroTests.PhysicianCode, tblPatient.ptFirstName, tblPatient.ptLastName, tblPatient.ptMiddleName, tblPatient.ptSex
FROM         tblMicroTests INNER JOIN
                tblPatient ON tblMicroTests.PatientID = tblPatient.PatientId INNER JOIN
                tblPhysicians ON tblMicroTests.PhysicianCode = tblPhysicians.PhysicianCode INNER JOIN
                tblClients ON tblMicroTests.ClientCode = tblClients.ClientCode
	                      
	Where Accession = @Accession  and TestCode = @TestCode                     
	                      
                      
END


GO
/****** Object:  StoredProcedure [dbo].[spGetMicrobioTestByAccessionOnly]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetMicrobioTestByAccessionOnly] 
	@Accession as varchar(100)

AS
BEGIN
	
	SET NOCOUNT ON;

SELECT     tblMicroTests.id, tblMicroTests.Accession, tblMicroTests.CollectionDate, tblMicroTests.TestCode, tblMicroTests.TestDescription, tblMicroTests.SpecimenSource, 
                      tblMicroTests.Status, tblPhysicians.FullName, tblPatient.ptLastName + ' ' + tblPatient.ptFirstName AS PatientName, tblMicroTests.ClientCode, tblClients.ClientName, 
                      tblMicroTests.Comment, tblPatient.PatientId,  tblMicroTests.PhysicianCode, tblPatient.ptFirstName, tblPatient.ptLastName, tblPatient.ptMiddleName, tblPatient.ptSex
FROM         tblMicroTests INNER JOIN
                      tblPatient ON tblMicroTests.PatientID = tblPatient.PatientId INNER JOIN
                      tblPhysicians ON tblMicroTests.PhysicianCode = tblPhysicians.PhysicianCode INNER JOIN
                      tblClients ON tblMicroTests.ClientCode = tblClients.ClientCode
	                      
	Where Accession = @Accession                 
	                      
                      
END


GO
/****** Object:  StoredProcedure [dbo].[spGetMicrobioTestForTextFile]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetMicrobioTestForTextFile] 
 @Accession varchar(100)  
AS
BEGIN
	
	SET NOCOUNT ON;


SELECT     tblMicroTests.id, tblMicroTests.Accession, tblMicroTests.PatientID, tblMicroTests.ClientCode, tblMicroTests.PhysicianCode, tblMicroTests.CollectionDate, 
                      tblMicroTests.SpecimenSource, tblMicroTests.Status, tblMicroTestOrganisms.OrganismName, tblPatient.ptLastName, tblPatient.ptFirstName, 
                      tblMicroTestOrganisms.ColonyCount, tblPatient.ptAddress2
FROM         tblMicroTests INNER JOIN
                      tblMicroTestOrganisms ON tblMicroTests.Accession = tblMicroTestOrganisms.Accession AND tblMicroTests.id = tblMicroTestOrganisms.MicroTestID INNER JOIN
                      tblPatient ON tblMicroTests.PatientID = tblPatient.PatientId
WHERE tblMicroTests.accession =  @Accession                    

                      
                      
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMicrobioTestOrganismByAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetMicrobioTestOrganismByAccession] 
	@Accession as varchar(100),
	@MicroTestID int
AS
BEGIN
	
	SET NOCOUNT ON;


	Select * from tblMicroTestOrganisms
	                      
	Where Accession = @Accession and MicroTestID =  @MicroTestID                    
	                      
                      
END





GO
/****** Object:  StoredProcedure [dbo].[spGetMicrobioTestOrganismByID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetMicrobioTestOrganismByID] 
	@Accession as varchar(100),
	@MicroTestOrganismID as varchar(100)
AS
BEGIN
	
	SET NOCOUNT ON;


	Select * from tblMicroTestOrganisms
	                      
	Where Accession = @Accession and MicroTestOrganismID = @MicroTestOrganismID                     
	                      
                      
END





GO
/****** Object:  StoredProcedure [dbo].[spGetMicrobioTests]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetMicrobioTests] 

AS
BEGIN
	
	SET NOCOUNT ON;


SELECT     tblMicroTests.id, tblMicroTests.Accession, tblMicroTests.CollectionDate, tblMicroTests.TestCode, tblMicroTests.TestDescription, tblMicroTests.SpecimenSource, 
                      tblMicroTests.Status, tblPhysicians.FullName, tblPatient.ptLastName + ' ' + tblPatient.ptFirstName AS PatientName, tblMicroTests.ClientCode, 
                      tblClients.ClientName
FROM         tblMicroTests INNER JOIN
                      tblPatient ON tblMicroTests.PatientID = tblPatient.PatientId INNER JOIN
                      tblPhysicians ON tblMicroTests.PhysicianCode = tblPhysicians.PhysicianCode INNER JOIN
                      tblClients ON tblMicroTests.ClientCode = tblClients.ClientCode
                      
                      
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMicroScope]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spGetMicroScope]         
         
AS        
BEGIN        
         
 SET NOCOUNT ON;        
  
 SELECT MicroScopeID,MicroScopeName,MicroScopePath     
 FROM dbo.tblMicroScope          
     
  
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetMileageCPTData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetMileageCPTData]
	@BillTypeCode varchar(100),
	@CPTcode varchar(100)

AS
  
 
BEGIN 



	Select top 1 OrderedTestCode, BillTypeCode,  CPTcode, Description, FeeAmt, ExpPaymentAmt, Units from tblFeeDefinitions 
	Where BillTypeCode = @BillTypeCode and CPTcode = @CPTcode


END
GO
/****** Object:  StoredProcedure [dbo].[spGetMissingInformation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetMissingInformation]
	@Client as varchar(50),
	@StartDate as datetime, 
	@EndDate as datetime,
	@Setting as varchar(50), 
	@Count as bit = 0
AS
BEGIN
	--for below assumption is that @Setting = 'Both' or @Setting = '' and Client is not set
	if @Count = 1 
	begin
		if @StartDate is not null and @enddate is not null
		begin
			select count(*)
			from tblMissingInformation mi with (nolock)
			inner join tblBillAccessions ba on ba.Accession = mi.accession
			inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType   
			where entrydate >= @StartDate and entrydate <= @EndDate 
			and bt.ClaimFlag = '1'	
		end
		else begin
			select count(*)
			from tblMissingInformation mi with (nolock)
			inner join tblBillAccessions ba on ba.Accession = mi.accession
			inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType 
			where bt.ClaimFlag = '1'
		end
	end
	else begin
		if @Setting = 'Both' or @Setting = ''
			begin
				if @Client is not null
					if @StartDate is not null and @enddate is not null
						begin
							select mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.clientcode, mi.ClientName
							from tblMissingInformation mi with (nolock)
							inner join tblBillAccessions ba on ba.Accession = mi.accession
							inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType   
							where entrydate >= @StartDate and entrydate <= @EndDate and mi.clientcode = @client
							and bt.ClaimFlag = '1'
							order by mi.accession
						end
					else
						begin
							select mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.clientcode , mi.ClientName
							from tblMissingInformation mi with (nolock)
							inner join tblBillAccessions ba on ba.Accession = mi.accession
							inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType 
							where mi.clientcode = @client
							and bt.ClaimFlag = '1'
							order by mi.accession
						end
				else
				if @StartDate is not null and @enddate is not null
					begin
						select mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.clientcode , mi.ClientName
						from tblMissingInformation mi with (nolock)
						inner join tblBillAccessions ba on ba.Accession = mi.accession
						inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType 
						where entrydate >= @StartDate and entrydate <= @EndDate
						and bt.ClaimFlag = '1'
						order by mi.accession
					end
				else
					begin
						select mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.clientcode , mi.ClientName
						from tblMissingInformation mi with (nolock)
						inner join tblBillAccessions ba on ba.Accession = mi.accession
						inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType 
						where bt.ClaimFlag = '1'
						order by mi.accession
					end
			end
		else
			begin
				if @Client is not null
					if @StartDate is not null and @enddate is not null
						begin
							select mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.clientcode , mi.ClientName
							from tblMissingInformation mi with (nolock)
							inner join tblBillAccessions ba on ba.Accession = mi.accession
							inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType 
							where entrydate >= @StartDate and entrydate <= @EndDate and mi.clientcode = @client and @Setting = setting
							and bt.ClaimFlag = '1'
							order by mi.accession
						end
					else
				
						begin
							select mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.clientcode , mi.ClientName
							from tblMissingInformation mi with (nolock)
							inner join tblBillAccessions ba on ba.Accession = mi.accession
							inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType
							where mi.clientcode = @client and @Setting = setting
							and bt.ClaimFlag = '1'
							order by mi.accession
						end
				else
				if @StartDate is not null and @enddate is not null
					begin
						select mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.clientcode , mi.ClientName
						from tblMissingInformation mi with (nolock)
						inner join tblBillAccessions ba on ba.Accession = mi.accession
						inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType 
						where entrydate >= @StartDate and entrydate <= @EndDate and @Setting = setting
						and bt.ClaimFlag = '1'
						order by mi.accession
					end
				else
					begin
						select mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.clientcode , mi.ClientName
						from tblMissingInformation mi with (nolock)
						inner join tblBillAccessions ba on ba.Accession = mi.accession
						inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType 
						where @Setting = setting
						and bt.ClaimFlag = '1'
						order by mi.accession
					end
			end
		end	
END

GO
/****** Object:  StoredProcedure [dbo].[spGetMissingInformation2]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spGetMissingInformation2]
      @StartDate as datetime, 
      @EndDate as datetime,
      @Setting as varchar(50), 
      @Count as bit = 0
AS
BEGIN
      if @Count = 1 
      begin
            if @StartDate is not null and @enddate is not null
            begin
                  select count(distinct mi.accession)
                  from tblMissingInformation mi with (nolock)
                  inner join tblBillAccessions ba on ba.Accession = mi.accession
                   inner join tblClients c on ba.ClientCode = c.ClientCode
                        
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode
                  --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType 
                  inner join tblAccessions a on mi.Accession = a.Accession    
                  --where mi.entrydate >= @StartDate and mi.entrydate <= @EndDate 
                  where a.ReceiveDate >= @StartDate and a.ReceiveDate <= @EndDate 
                  --and bt.ClaimFlag = '1'-- or bt.PatientBill = '1'
            end
            else begin
                  select count(distinct mi.accession)
                  from tblMissingInformation mi with (nolock)
                  inner join tblBillAccessions ba on ba.Accession = mi.accession
                  inner join tblClients c on ba.ClientCode = c.ClientCode
                        
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode
                  --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType 
                  --where bt.ClaimFlag = '1'-- or bt.PatientBill = '1'
            end
      end
      else begin
            if @StartDate is not null and @enddate is not null
                  begin
                        select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.ClientCode, 
                        ba.QSSUpdateDate As BillDate, c.ClientName , isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode, sm.SalesmanName,
                        DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName
						, btd.Description as BillType, af.AccessionCurrentBalance as BillBalance
                        from tblMissingInformation mi with (nolock)
                        inner join tblBillAccessions ba on ba.Accession = mi.accession
                        inner join tblClients c on ba.ClientCode = c.ClientCode
                        
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode
                        
                        --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType 
						--and bt.ClaimFlag = '1'-- or bt.PatientBill = '1'
                        inner join tblAccessions a on mi.Accession = a.Accession   
                        left outer join tblClientsSalesman cs
                        on c.ClientCode  = cs.ClientCode
                        left outer join tblSalesman sm
                        on sm.SalesmanCode  = cs.SalesmanCode 
                        --where mi.entrydate >= @StartDate and mi.entrydate <= @EndDate
						left outer join tblAccessionsFinancials af
						on af.Accession = mi.Accession
						left outer join tblBillTypeDefinitions btd
						on btd.BTcode = ba.CurrentBillType
                        where  a.ReceiveDate >= @StartDate and  a.ReceiveDate <= @EndDate
                        
                        order by mi.accession
                  end
            else
                  begin
                        select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.ClientCode, 
                        ba.QSSUpdateDate as BillDate, c.ClientName , isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode, sm.SalesmanName,
                        DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName
						, btd.Description as BillType, af.AccessionCurrentBalance as BillBalance
                        from tblMissingInformation mi with (nolock)
                        inner join tblBillAccessions ba on ba.Accession = mi.accession
                        inner join tblClients c on ba.ClientCode = c.ClientCode
                        
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode
                        
                        --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType
						--and bt.ClaimFlag = '1' -- or bt.PatientBill = '1'
                        left outer join tblClientsSalesman cs
                        on c.ClientCode  = cs.ClientCode
                        left outer join tblSalesman sm
                        on sm.SalesmanCode  = cs.SalesmanCode 
						left outer join tblAccessionsFinancials af
						on af.Accession = mi.Accession
						left outer join tblBillTypeDefinitions btd
						on btd.BTcode = ba.CurrentBillType
                        order by mi.accession
                  end
      end
END
GO
/****** Object:  StoredProcedure [dbo].[spGetMissingInformation3]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
  
CREATE PROCEDURE [dbo].[spGetMissingInformation3]  
      @StartDate as datetime,   
      @EndDate as datetime,  
      @Setting as varchar(50),   
      @Count as bit = 0  
AS  
BEGIN  
      if @Count = 1   
      begin  
            if @StartDate is not null and @enddate is not null  
            begin  
                  select count(distinct mi.accession)  
                  from tblMissingInformation mi with (nolock)  
                  inner join tblBillAccessions ba on ba.Accession = mi.accession  
                   inner join tblClients c on ba.ClientCode = c.ClientCode  
                          
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode  
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode  
                  --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType   
                  inner join tblAccessions a on mi.Accession = a.Accession      
                  --where mi.entrydate >= @StartDate and mi.entrydate <= @EndDate   
                  where a.ReceiveDate >= @StartDate and a.ReceiveDate <= @EndDate   
                  --and bt.ClaimFlag = '1'-- or bt.PatientBill = '1'  
            end  
            else begin  
                  select count(distinct mi.accession)  
                  from tblMissingInformation mi with (nolock)  
                  inner join tblBillAccessions ba on ba.Accession = mi.accession  
                  inner join tblClients c on ba.ClientCode = c.ClientCode  
                          
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode  
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode  
                  --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType   
                  --where bt.ClaimFlag = '1'-- or bt.PatientBill = '1'  
            end  
      end  
      else begin  
            if @StartDate is not null and @enddate is not null  
                  begin  
                        select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.ClientCode,   
                        ba.QSSUpdateDate As BillDate, c.ClientName , isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode, sm.SalesmanName,  
                        DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName  
      , btd.Description as BillType, af.AccessionCurrentBalance as BillBalance 
	   , CASE WHEN (select count(*) from tblbillAudit where Accession = mi.Accession and notetype in ('ClientBill', 'ElectronicClaim', 'HCFA', 'PatientBill')) > 0 THEN 'True' ELSE 'False' END as SentToClaim 

                        from tblMissingInformation mi with (nolock)  
                        inner join tblBillAccessions ba on ba.Accession = mi.accession  
                        inner join tblClients c on ba.ClientCode = c.ClientCode  
                          
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode  
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode  
                          
                        --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType   
      --and bt.ClaimFlag = '1'-- or bt.PatientBill = '1'  
                        inner join tblAccessions a on mi.Accession = a.Accession     
                        left outer join tblClientsSalesman cs  
                        on c.ClientCode  = cs.ClientCode  
                        left outer join tblSalesman sm  
                        on sm.SalesmanCode  = cs.SalesmanCode   
                        --where mi.entrydate >= @StartDate and mi.entrydate <= @EndDate  
      left outer join tblAccessionsFinancials af  
      on af.Accession = mi.Accession  
      left outer join tblBillTypeDefinitions btd  
      on btd.BTcode = ba.CurrentBillType  
                        where  a.ReceiveDate >= @StartDate and  a.ReceiveDate <= @EndDate  
                          
                        order by mi.accession  
                  end  
            else  
                  begin  
  select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.ClientCode,   
                        ba.QSSUpdateDate as BillDate, c.ClientName , isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode, sm.SalesmanName,  
                        DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName  
      , btd.Description as BillType, af.AccessionCurrentBalance as BillBalance 
	  , CASE WHEN (select count(*) from tblbillAudit where Accession = mi.Accession and notetype in ('ClientBill', 'ElectronicClaim', 'HCFA', 'PatientBill')) > 0 THEN 'True' ELSE 'False' END as SentToClaim 
 
                        from tblMissingInformation mi with (nolock)  
                        inner join tblBillAccessions ba on ba.Accession = mi.accession  
                        inner join tblClients c on ba.ClientCode = c.ClientCode  
                          
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode  
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode  
                          
                        --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType  
      --and bt.ClaimFlag = '1' -- or bt.PatientBill = '1'  
                        left outer join tblClientsSalesman cs  
                        on c.ClientCode  = cs.ClientCode  
                        left outer join tblSalesman sm  
                        on sm.SalesmanCode  = cs.SalesmanCode   
      left outer join tblAccessionsFinancials af  
      on af.Accession = mi.Accession  
      left outer join tblBillTypeDefinitions btd  
      on btd.BTcode = ba.CurrentBillType  
                        order by mi.accession  
                  end  
      end  
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetMissingInformation3_OLD]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
  
CREATE PROCEDURE [dbo].[spGetMissingInformation3_OLD]  
      @StartDate as datetime,   
      @EndDate as datetime,  
      @Setting as varchar(50),   
      @Count as bit = 0  
AS  
BEGIN  
      if @Count = 1   
      begin  
            if @StartDate is not null and @enddate is not null  
            begin  
                  select count(distinct mi.accession)  
                  from tblMissingInformation mi with (nolock)  
                  inner join tblBillAccessions ba on ba.Accession = mi.accession  
                   inner join tblClients c on ba.ClientCode = c.ClientCode  
                          
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode  
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode  
                  --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType   
                  inner join tblAccessions a on mi.Accession = a.Accession      
                  --where mi.entrydate >= @StartDate and mi.entrydate <= @EndDate   
                  where a.ReceiveDate >= @StartDate and a.ReceiveDate <= @EndDate   
                  --and bt.ClaimFlag = '1'-- or bt.PatientBill = '1'  
            end  
            else begin  
                  select count(distinct mi.accession)  
                  from tblMissingInformation mi with (nolock)  
                  inner join tblBillAccessions ba on ba.Accession = mi.accession  
                  inner join tblClients c on ba.ClientCode = c.ClientCode  
                          
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode  
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode  
                  --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType   
                  --where bt.ClaimFlag = '1'-- or bt.PatientBill = '1'  
            end  
      end  
      else begin  
            if @StartDate is not null and @enddate is not null  
                  begin  
                        select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.ClientCode,   
                        ba.QSSUpdateDate As BillDate, c.ClientName , isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode, sm.SalesmanName,  
                        DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName  
      , btd.Description as BillType, af.AccessionCurrentBalance as BillBalance 
	   , CASE WHEN (select count(*) from tblbillAudit where Accession = mi.Accession and notetype in ('ClientBill', 'ElectronicClaim', 'HCFA', 'PatientBill')) > 0 THEN 'True' ELSE 'False' END as SentToClaim 

                        from tblMissingInformation mi with (nolock)  
                        inner join tblBillAccessions ba on ba.Accession = mi.accession  
                        inner join tblClients c on ba.ClientCode = c.ClientCode  
                          
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode  
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode  
                          
                        --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType   
      --and bt.ClaimFlag = '1'-- or bt.PatientBill = '1'  
                        inner join tblAccessions a on mi.Accession = a.Accession     
                        left outer join tblClientsSalesman cs  
                        on c.ClientCode  = cs.ClientCode  
                        left outer join tblSalesman sm  
                        on sm.SalesmanCode  = cs.SalesmanCode   
                        --where mi.entrydate >= @StartDate and mi.entrydate <= @EndDate  
      left outer join tblAccessionsFinancials af  
      on af.Accession = mi.Accession  
      left outer join tblBillTypeDefinitions btd  
      on btd.BTcode = ba.CurrentBillType  
                        where  a.ReceiveDate >= @StartDate and  a.ReceiveDate <= @EndDate  
                          
                        order by mi.accession  
                  end  
            else  
                  begin  
  select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name, mi.reason, mi.ClientCode,   
                        ba.QSSUpdateDate as BillDate, c.ClientName , isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode, sm.SalesmanName,  
                        DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName  
      , btd.Description as BillType, af.AccessionCurrentBalance as BillBalance 
	  , CASE WHEN (select count(*) from tblbillAudit where Accession = mi.Accession and notetype in ('ClientBill', 'ElectronicClaim', 'HCFA', 'PatientBill')) > 0 THEN 'True' ELSE 'False' END as SentToClaim 
 
                        from tblMissingInformation mi with (nolock)  
                        inner join tblBillAccessions ba on ba.Accession = mi.accession  
                        inner join tblClients c on ba.ClientCode = c.ClientCode  
                          
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode  
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode  
                          
                        --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType  
      --and bt.ClaimFlag = '1' -- or bt.PatientBill = '1'  
                        left outer join tblClientsSalesman cs  
                        on c.ClientCode  = cs.ClientCode  
                        left outer join tblSalesman sm  
                        on sm.SalesmanCode  = cs.SalesmanCode   
      left outer join tblAccessionsFinancials af  
      on af.Accession = mi.Accession  
      left outer join tblBillTypeDefinitions btd  
      on btd.BTcode = ba.CurrentBillType  
                        order by mi.accession  
                  end  
      end  
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetMissingInformation3OneLinePerAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
    
    
CREATE PROCEDURE [dbo].[spGetMissingInformation3OneLinePerAccession]    
      @StartDate as datetime,     
      @EndDate as datetime,    
      @Setting as varchar(50),     
      @Count as bit = 0    
AS    
BEGIN    
      if @Count = 1     
      begin    
            if @StartDate is not null and @enddate is not null    
            begin    
                  select count(distinct mi.accession)    
                  from tblMissingInformation mi with (nolock)    
                  inner join tblBillAccessions ba on ba.Accession = mi.accession    
                   inner join tblClients c on ba.ClientCode = c.ClientCode    
                            
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode    
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode    
                  --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType     
                  inner join tblAccessions a on mi.Accession = a.Accession        
                  --where mi.entrydate >= @StartDate and mi.entrydate <= @EndDate     
                  where a.ReceiveDate >= @StartDate and a.ReceiveDate <= @EndDate     
                  --and bt.ClaimFlag = '1'-- or bt.PatientBill = '1'    
            end    
            else begin    
                  select count(distinct mi.accession)    
                  from tblMissingInformation mi with (nolock)    
                  inner join tblBillAccessions ba on ba.Accession = mi.accession    
                  inner join tblClients c on ba.ClientCode = c.ClientCode    
                            
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode    
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode    
                  --inner join tblBillTypeDefinitions bt on bt.BTCode = ba.CurrentBillType     
                  --where bt.ClaimFlag = '1'-- or bt.PatientBill = '1'    
            end    
      end    
      else begin    
            if @StartDate is not null and @enddate is not null    
                  begin    
                        select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name,   
       'Reason' =       
   STUFF((SELECT distinct '|' +CAST( mi1.Reason as varchar(max))          
    FROM         tblMissingInformation mi1           
    --  on cs.SalesmanCode = b.SalesmanCode          
    WHERE mi1.Accession = ba.Accession                         
     FOR XML PATH('')), 1, 1, ''),   
      --mi.reason,  
       LTRIM(RTRIM(mi.ClientCode)) as clientcode,     
                        ba.QSSUpdateDate As BillDate, c.ClientName ,   
  
       'SalesmanCode' =       
   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanCode as varchar(max))          
    FROM         tblSalesman sm1     
 inner join tblClientsSalesman cs1        
     on cs1.SalesmanCode = sm1.SalesmanCode          
    WHERE cs1.ClientCode  = c.ClientCode                        
     FOR XML PATH('')), 1, 1, ''),  
  'SalesmanName' =       
   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanName as varchar(max))          
    FROM         tblSalesman sm1     
 inner join tblClientsSalesman cs1        
     on cs1.SalesmanCode = sm1.SalesmanCode          
    WHERE cs1.ClientCode  = c.ClientCode                       
     FOR XML PATH('')), 1, 1, ''),  
     'CPTCodesAll' =       
   STUFF((SELECT distinct '|' +CAST( bi.CPTcode as varchar(max))  + '|' +CAST( bi.FeeDescription as varchar(max))  + '|' +CAST( bi.ICD9Code as varchar(max))         
    FROM         tblBill bi           
    WHERE bi.Accession = ba.Accession                         
     FOR XML PATH('')), 1, 1, '') ,
          --isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode,   
      --sm.SalesmanName,    
                        DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName    , a.ReceiveDate, a.preaccession 
      , btd.Description as BillType, af.AccessionCurrentBalance as BillBalance   
    , CASE WHEN (select count(*) from tblbillAudit where Accession = mi.Accession and notetype in ('ClientBill', 'ElectronicClaim', 'HCFA', 'PatientBill')) > 0 THEN 'True' ELSE 'False' END as SentToClaim   
  , STUFF((SELECT distinct ', ' + fd.v.value('@code', 'varchar(max)')FROM tblaccessions a1
                            CROSS APPLY a1.DiagnosisDataXML.nodes('QSSLISOrderRecord/ICD9codes/ICD9codes') AS fd(v)
                            where a.accession=a1.accession
                            FOR XML PATH('')), 1, 1, '') as ICD9codes
                          ,c.telephone  as Clientphone, a.patientID as patientID, p.ptDateOfBirth, ins.name as InsName
, (SELECT  top 1 [Note]
     
  FROM [tblBillAudit] ba
  where accession=a.Accession
  order by id desc) as note
                        from tblMissingInformation mi with (nolock)    
                        inner join tblBillAccessions ba on ba.Accession = mi.accession  
						and (ba.CurrentBillType <> 'NB' 
						or ba.Accession in (select Accession from tblBill where Status = 'BILL'))
                        inner join tblClients c on ba.ClientCode = c.ClientCode    
                            
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode    
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode    
                            
                        inner join tblAccessions a on mi.Accession = a.Accession       
                        inner join tblpatient p on p.patientID=a.patientid        
      left outer join tblAccessionsFinancials af    
      on af.Accession = mi.Accession    
      left outer join tblBillTypeDefinitions btd    
      on btd.BTcode = ba.CurrentBillType   
       left outer join tblInsuranceCompanies ins    
      on ins.InsuranceCode = p.primaryinsuranceid 
                        where  a.ReceiveDate >= @StartDate and  a.ReceiveDate <= @EndDate  
						and ISNULL(ba.ManualSuspension, 'False') <> 'True'  
                            
                        order by mi.accession    
                  end    
            else    
                  begin    
  select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name,  
    'Reason' =       
   STUFF((SELECT distinct '|' +CAST( mi1.Reason as varchar(max))          
    FROM         tblMissingInformation mi1           
    --  on cs.SalesmanCode = b.SalesmanCode          
    WHERE mi1.Accession = ba.Accession                         
     FOR XML PATH('')), 1, 1, ''),   
  -- mi.reason,  
    LTRIM(RTRIM(mi.ClientCode)) as clientcode,     
                        ba.QSSUpdateDate as BillDate, c.ClientName ,   
        
  'SalesmanCode' =       
   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanCode as varchar(max))          
    FROM         tblSalesman sm1     
 inner join tblClientsSalesman cs1        
     on cs1.SalesmanCode = sm1.SalesmanCode          
    WHERE cs1.ClientCode  = c.ClientCode                        
     FOR XML PATH('')), 1, 1, ''),  
  'SalesmanName' =       
   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanName as varchar(max))          
    FROM         tblSalesman sm1     
 inner join tblClientsSalesman cs1        
     on cs1.SalesmanCode = sm1.SalesmanCode          
    WHERE cs1.ClientCode  = c.ClientCode                       
     FOR XML PATH('')), 1, 1, ''), 
     'CPTCodesAll' =       
   STUFF((SELECT distinct '|' +CAST( bi.CPTcode as varchar(max))  + '|' +CAST( bi.FeeDescription as varchar(max))  + '|' +CAST( bi.ICD9Code as varchar(max))         
    FROM         tblBill bi           
    WHERE bi.Accession = ba.Accession                         
     FOR XML PATH('')), 1, 1, '') ,
          -- isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode, sm.SalesmanName,    
                        DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName    , a.ReceiveDate, a.preaccession    
      , btd.Description as BillType, af.AccessionCurrentBalance as BillBalance   
   , CASE WHEN (select count(*) from tblbillAudit where Accession = mi.Accession and notetype in ('ClientBill', 'ElectronicClaim', 'HCFA', 'PatientBill')) > 0 THEN 'True' ELSE 'False' END as SentToClaim   
, STUFF((SELECT distinct ', ' + fd.v.value('@code', 'varchar(max)')FROM tblaccessions a1
                            CROSS APPLY a1.DiagnosisDataXML.nodes('QSSLISOrderRecord/ICD9codes/ICD9codes') AS fd(v)
                            where a.accession=a1.accession
                            FOR XML PATH('')), 1, 1, '') as ICD9codes
                          ,c.telephone  as Clientphone, a.patientID as patientID, p.ptDateOfBirth, ins.name as InsName, (SELECT  top 1 [Note]
     
  FROM [tblBillAudit] ba
  where accession=a.Accession
  order by id desc) as note
                        from tblMissingInformation mi with (nolock)    
                        inner join tblBillAccessions ba on ba.Accession = mi.accession 
						and (ba.CurrentBillType <> 'NB' 
						or ba.Accession in (select Accession from tblBill where Status = 'BILL'))
                        inner join tblClients c on ba.ClientCode = c.ClientCode    
                            
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode    
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode    
                         inner join tblAccessions a on mi.Accession = a.Accession       
                       inner join tblpatient p on p.patientID=a.patientid     
      left outer join tblAccessionsFinancials af    
      on af.Accession = mi.Accession    
      left outer join tblBillTypeDefinitions btd    
      on btd.BTcode = ba.CurrentBillType 
      left outer join tblInsuranceCompanies ins    
      on ins.InsuranceCode = p.primaryinsuranceid   
	  where ISNULL(ba.ManualSuspension, 'False') <> 'True'   
                        order by mi.accession    
                  end    
      end    
END 


GO
/****** Object:  StoredProcedure [dbo].[spGetMissingInformation3OneLinePerAccessionManualHold]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[spGetMissingInformation3OneLinePerAccessionManualHold]    
      @StartDate as datetime,     
      @EndDate as datetime
AS    
BEGIN    
        
if @StartDate is not null and @enddate is not null    
                  begin    
                        select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name,   
       'Reason' =       
   STUFF((SELECT distinct '|' +CAST( mi1.Reason as varchar(max))          
    FROM         tblMissingInformation mi1           
    --  on cs.SalesmanCode = b.SalesmanCode          
    WHERE mi1.Accession = ba.Accession                         
     FOR XML PATH('')), 1, 1, ''),   
      --mi.reason,  
       LTRIM(RTRIM(mi.ClientCode)) as clientcode,     
                        ba.QSSUpdateDate As BillDate, c.ClientName ,   
  
       'SalesmanCode' =       
   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanCode as varchar(max))          
    FROM         tblSalesman sm1     
 inner join tblClientsSalesman cs1        
     on cs1.SalesmanCode = sm1.SalesmanCode          
    WHERE cs1.ClientCode  = c.ClientCode                        
     FOR XML PATH('')), 1, 1, ''),  
  'SalesmanName' =       
   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanName as varchar(max))          
    FROM         tblSalesman sm1     
 inner join tblClientsSalesman cs1        
     on cs1.SalesmanCode = sm1.SalesmanCode          
    WHERE cs1.ClientCode  = c.ClientCode                       
     FOR XML PATH('')), 1, 1, ''),  
     'CPTCodesAll' =       
   STUFF((SELECT distinct '|' +CAST( bi.CPTcode as varchar(max))  + '|' +CAST( bi.FeeDescription as varchar(max))  + '|' +CAST( bi.ICD9Code as varchar(max))         
    FROM         tblBill bi           
    WHERE bi.Accession = ba.Accession                         
     FOR XML PATH('')), 1, 1, '') ,
          --isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode,   
      --sm.SalesmanName,    
                        DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName    , a.ReceiveDate, a.preaccession 
      , btd.Description as BillType, af.AccessionCurrentBalance as BillBalance   
    , CASE WHEN (select count(*) from tblbillAudit where Accession = mi.Accession and notetype in ('ClientBill', 'ElectronicClaim', 'HCFA', 'PatientBill')) > 0 THEN 'True' ELSE 'False' END as SentToClaim   
  , STUFF((SELECT distinct ', ' + fd.v.value('@code', 'varchar(max)')FROM tblaccessions a1
                            CROSS APPLY a1.DiagnosisDataXML.nodes('QSSLISOrderRecord/ICD9codes/ICD9codes') AS fd(v)
                            where a.accession=a1.accession
                            FOR XML PATH('')), 1, 1, '') as ICD9codes
                          ,c.telephone  as Clientphone, a.patientID as patientID, p.ptDateOfBirth, ins.name as InsName
, (SELECT  top 1 [Note]
     
  FROM [tblBillAudit] ba
  where accession=a.Accession
  order by id desc) as note
                        from tblMissingInformation mi with (nolock)    
                        inner join tblBillAccessions ba on ba.Accession = mi.accession  
						and (ba.CurrentBillType <> 'NB' 
						or ba.Accession in (select Accession from tblBill where Status = 'BILL'))
                        inner join tblClients c on ba.ClientCode = c.ClientCode    
                            
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode    
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode    
                            
                        inner join tblAccessions a on mi.Accession = a.Accession       
                        inner join tblpatient p on p.patientID=a.patientid        
      left outer join tblAccessionsFinancials af    
      on af.Accession = mi.Accession    
      left outer join tblBillTypeDefinitions btd    
      on btd.BTcode = ba.CurrentBillType   
       left outer join tblInsuranceCompanies ins    
      on ins.InsuranceCode = p.primaryinsuranceid 
                        where  a.ReceiveDate >= @StartDate and  a.ReceiveDate <= @EndDate  
						and ISNULL(ba.ManualSuspension, 'False') = 'True'  
                            
                        order by mi.accession    
                  end    
            else    
                  begin    
  select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name,  
    'Reason' =       
   STUFF((SELECT distinct '|' +CAST( mi1.Reason as varchar(max))          
    FROM         tblMissingInformation mi1           
    --  on cs.SalesmanCode = b.SalesmanCode          
    WHERE mi1.Accession = ba.Accession                         
     FOR XML PATH('')), 1, 1, ''),   
  -- mi.reason,  
    LTRIM(RTRIM(mi.ClientCode)) as clientcode,     
                        ba.QSSUpdateDate as BillDate, c.ClientName ,   
        
  'SalesmanCode' =       
   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanCode as varchar(max))          
    FROM         tblSalesman sm1     
 inner join tblClientsSalesman cs1        
     on cs1.SalesmanCode = sm1.SalesmanCode          
    WHERE cs1.ClientCode  = c.ClientCode                        
     FOR XML PATH('')), 1, 1, ''),  
  'SalesmanName' =       
   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanName as varchar(max))          
    FROM         tblSalesman sm1     
 inner join tblClientsSalesman cs1        
     on cs1.SalesmanCode = sm1.SalesmanCode          
    WHERE cs1.ClientCode  = c.ClientCode                       
     FOR XML PATH('')), 1, 1, ''), 
     'CPTCodesAll' =       
   STUFF((SELECT distinct '|' +CAST( bi.CPTcode as varchar(max))  + '|' +CAST( bi.FeeDescription as varchar(max))  + '|' +CAST( bi.ICD9Code as varchar(max))         
    FROM         tblBill bi           
    WHERE bi.Accession = ba.Accession                         
     FOR XML PATH('')), 1, 1, '') ,
          -- isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode, sm.SalesmanName,    
                        DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName    , a.ReceiveDate, a.preaccession    
      , btd.Description as BillType, af.AccessionCurrentBalance as BillBalance   
   , CASE WHEN (select count(*) from tblbillAudit where Accession = mi.Accession and notetype in ('ClientBill', 'ElectronicClaim', 'HCFA', 'PatientBill')) > 0 THEN 'True' ELSE 'False' END as SentToClaim   
, STUFF((SELECT distinct ', ' + fd.v.value('@code', 'varchar(max)')FROM tblaccessions a1
                            CROSS APPLY a1.DiagnosisDataXML.nodes('QSSLISOrderRecord/ICD9codes/ICD9codes') AS fd(v)
                            where a.accession=a1.accession
                            FOR XML PATH('')), 1, 1, '') as ICD9codes
                          ,c.telephone  as Clientphone, a.patientID as patientID, p.ptDateOfBirth, ins.name as InsName, (SELECT  top 1 [Note]
     
  FROM [tblBillAudit] ba
  where accession=a.Accession
  order by id desc) as note
                        from tblMissingInformation mi with (nolock)    
                        inner join tblBillAccessions ba on ba.Accession = mi.accession 
						and (ba.CurrentBillType <> 'NB' 
						or ba.Accession in (select Accession from tblBill where Status = 'BILL'))
                        inner join tblClients c on ba.ClientCode = c.ClientCode    
                            
                        inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode    
                        inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode    
                         inner join tblAccessions a on mi.Accession = a.Accession       
                       inner join tblpatient p on p.patientID=a.patientid     
      left outer join tblAccessionsFinancials af    
      on af.Accession = mi.Accession    
      left outer join tblBillTypeDefinitions btd    
      on btd.BTcode = ba.CurrentBillType 
      left outer join tblInsuranceCompanies ins    
      on ins.InsuranceCode = p.primaryinsuranceid   
	  where ISNULL(ba.ManualSuspension, 'False') = 'True'   
                        order by mi.accession    
                  end    
 
END 

GO
/****** Object:  StoredProcedure [dbo].[spGetMissingInformation3Reasons]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


     
CREATE PROCEDURE [dbo].[spGetMissingInformation3Reasons]  
      @StartDate as datetime,   
      @EndDate as datetime
AS  
BEGIN  
     
            if @StartDate is not null and @enddate is not null  
                  begin  
                        select distinct mi.Reason
                        from tblMissingInformation mi with (nolock)  
                        inner join tblAccessions a on mi.Accession = a.Accession     
                        where  a.ReceiveDate >= @StartDate and  a.ReceiveDate <= @EndDate 
						and reason not like 'On Manual Hold. %' 
                        order by mi.Reason  
                  end  
            else  
                  begin  
						select distinct mi.Reason
                        from tblMissingInformation mi with (nolock)  
                        inner join tblAccessions a on mi.Accession = a.Accession     
						where reason not like 'On Manual Hold. %' 
                        order by mi.Reason  
                  end  

END 
    
GO
/****** Object:  StoredProcedure [dbo].[spGetMissingInformation3SalesmanList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
  
create PROCEDURE [dbo].[spGetMissingInformation3SalesmanList]  
      @StartDate as datetime,   
      @EndDate as datetime
AS  
BEGIN  
     
            if @StartDate is not null and @enddate is not null  
                  begin  
                        select distinct isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode, sm.SalesmanName
                        from tblMissingInformation mi with (nolock)  
                        inner join tblBillAccessions ba on ba.Accession = mi.accession  
                        inner join tblClients c on ba.ClientCode = c.ClientCode  
                        --inner join tblAccessions a on mi.Accession = a.Accession 
                        left outer join tblClientsSalesman cs  
                        on c.ClientCode  = cs.ClientCode  
                        left outer join tblSalesman sm  
                        on sm.SalesmanCode  = cs.SalesmanCode   
                        where  ba.ReceiveDate >= @StartDate and  ba.ReceiveDate <= @EndDate  
                          and sm.salesmanname is not null and sm.salesmanname <> ''
                        order by sm.SalesmanName
                  end  
            else  
                  begin  
   
                        select distinct isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode, sm.SalesmanName
                        from tblMissingInformation mi with (nolock)  
                        inner join tblBillAccessions ba on ba.Accession = mi.accession  
                        inner join tblClients c on ba.ClientCode = c.ClientCode  
                        --inner join tblAccessions a on mi.Accession = a.Accession 
                        left outer join tblClientsSalesman cs  
                        on c.ClientCode  = cs.ClientCode  
                        left outer join tblSalesman sm  
                        on sm.SalesmanCode  = cs.SalesmanCode   
                      --  where  ba.ReceiveDate >= @StartDate and  ba.ReceiveDate <= @EndDate  
                          where sm.salesmanname is not null and sm.salesmanname <> ''
                        order by sm.SalesmanName    
                  end  
    
END  
GO
/****** Object:  StoredProcedure [dbo].[spGetMissingInformationClients]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetMissingInformationClients]
	
AS
BEGIN
select DISTINCT  Clientcode, clientname from tblmissinginformation order by clientname


END
GO
/****** Object:  StoredProcedure [dbo].[spGetMissingInformationPhysicians]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spGetMissingInformationPhysicians]
	@ClientCode varchar(50)
AS
BEGIN
SET NOCOUNT ON;    
	if @ClientCode = 'All'
	begin
		SELECT distinct  a.PhysicianCode, b.FullName as  PhysicianName
		FROM tblClientsPhysicians a with (NOLOCK)
		INNER JOIN
		tblPhysicians  b with (NOLOCK)
		on a.PhysicianCode  = b.PhysicianCode 
		inner join tblMissingInformation mi
		on mi.ClientCode = a.ClientCode
		ORDER BY PhysicianName  asc
	end
	else
	begin
		SELECT distinct a.PhysicianCode, b.FullName as  PhysicianName
		FROM tblClientsPhysicians a with (NOLOCK)
		INNER JOIN
		tblPhysicians  b with (NOLOCK)
		on a.PhysicianCode  = b.PhysicianCode 
		inner join tblMissingInformation mi
		on mi.ClientCode = a.ClientCode
		WHERE a.ClientCode  = @ClientCode
		ORDER BY PhysicianName  asc
	end


	

END



GO
/****** Object:  StoredProcedure [dbo].[spGetMissingInformationtype]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
    
    
create PROCEDURE [dbo].[spGetMissingInformationtype]    
      @type as varchar(50)
AS    
BEGIN     
   select reason from tblMissingInformationtype  
   where reporttype=@type
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetMissingInformationWithSpecialReports]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





       
        
             
      
      
CREATE PROCEDURE [dbo].[spGetMissingInformationWithSpecialReports]      
      @StartDate as datetime,       
      @EndDate as datetime  ,
	  @ReportType as varchar(3),
	  @Count as bit = 0   
	  --GEN" or "DEN" Or "PTB" Or "CLB" Or "NOB"
AS      
BEGIN     
if @StartDate is NULL
begin
	Set @StartDate = '2010-01-01'
end 
if @EndDate is NULL
begin
	Set @EndDate = GetDate()
end
	IF @ReportType = 'GEN'
	BEGIN
			select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name,     
			'Reason' =         
			   STUFF((SELECT distinct '|' +CAST( mi1.Reason as varchar(max))            
				FROM         tblMissingInformation mi1             
				--  on cs.SalesmanCode = b.SalesmanCode            
				WHERE mi1.Accession = ba.Accession                           
				 FOR XML PATH('')), 1, 1, ''),     
				  --mi.reason,    
			LTRIM(RTRIM(mi.ClientCode)) as clientcode, ba.QSSUpdateDate As BillDate, c.ClientName ,     
			'SalesmanCode' =         
			   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanCode as varchar(max))            
				FROM         tblSalesman sm1       
				inner join tblClientsSalesman cs1          
				 on cs1.SalesmanCode = sm1.SalesmanCode            
				WHERE cs1.ClientCode  = c.ClientCode                          
				 FOR XML PATH('')), 1, 1, ''),    
			'SalesmanName' =         
			   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanName as varchar(max))            
				FROM         tblSalesman sm1       
				inner join tblClientsSalesman cs1          
				 on cs1.SalesmanCode = sm1.SalesmanCode            
				WHERE cs1.ClientCode  = c.ClientCode                         
				 FOR XML PATH('')), 1, 1, ''),    
			'CPTCodesAll' =         
			   STUFF((SELECT distinct '|' +CAST( bi.CPTcode as varchar(max))  + '|' +CAST( bi.FeeDescription as varchar(max))  + '|' +CAST( bi.ICD9Code as varchar(max))           
				FROM         tblBill bi             
				WHERE bi.Accession = ba.Accession                           
				 FOR XML PATH('')), 1, 1, '') ,  
					  --isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode,     
				  --sm.SalesmanName,      
			DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName    , a.ReceiveDate, a.preaccession   
			, btd.Description as BillType, af.AccessionCurrentBalance as BillBalance     
			, CASE WHEN (select count(*) from tblbillAudit where Accession = mi.Accession and notetype in ('ClientBill', 'ElectronicClaim', 'HCFA', 'PatientBill')) > 0 THEN 'True' ELSE 'False' END as SentToClaim     
			, STUFF((SELECT distinct ', ' + fd.v.value('@code', 'varchar(max)')FROM tblaccessions a1  
										CROSS APPLY a1.DiagnosisDataXML.nodes('QSSLISOrderRecord/ICD9codes/ICD9codes') AS fd(v)  
										where a.accession=a1.accession  
										FOR XML PATH('')), 1, 1, '') as ICD9codes  
			,c.telephone  as Clientphone, a.patientID as patientID, p.ptDateOfBirth, ins.name as InsName  
			, (SELECT  top 1 [Note]  
			   FROM [tblBillAudit] ba  
			  where accession=a.Accession  
			  order by id desc) as note  
									from tblMissingInformation mi with (nolock)      
									inner join tblBillAccessions ba on ba.Accession = mi.accession      
									inner join tblClients c on ba.ClientCode = c.ClientCode      
									inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode      
									inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode      
									inner join tblAccessions a on mi.Accession = a.Accession         
									inner join tblpatient p on p.patientID=a.patientid          
									left outer join tblAccessionsFinancials af on af.Accession = mi.Accession      
									left outer join tblBillTypeDefinitions btd on btd.BTcode = ba.CurrentBillType     
									left outer join tblInsuranceCompanies ins on ins.InsuranceCode = p.primaryinsuranceid   
									where  a.ReceiveDate >= @StartDate and  a.ReceiveDate <= @EndDate 
									and  ISNULL(ba.ManualSuspension, 'False') <> 'True'   
									and ba.CurrentBillType not in ('Cash', 'NB')  
									and btd.description not like '%client%'   and mi.reason <> 'On Manual Hold. 3'
									and mi.Reason not like '%DenialCode%'       
									order by mi.accession 
	END
	IF @ReportType = 'DEN'
	BEGIN
			select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name,     
			'Reason' =         
			   STUFF((SELECT distinct '|' +CAST( mi1.Reason as varchar(max))            
				FROM         tblMissingInformation mi1             
				--  on cs.SalesmanCode = b.SalesmanCode            
				WHERE mi1.Accession = ba.Accession                           
				 FOR XML PATH('')), 1, 1, ''),     
				  --mi.reason,    
			LTRIM(RTRIM(mi.ClientCode)) as clientcode, ba.QSSUpdateDate As BillDate, c.ClientName ,     
			'SalesmanCode' =         
			   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanCode as varchar(max))            
				FROM         tblSalesman sm1       
				inner join tblClientsSalesman cs1          
				 on cs1.SalesmanCode = sm1.SalesmanCode            
				WHERE cs1.ClientCode  = c.ClientCode                          
				 FOR XML PATH('')), 1, 1, ''),    
			'SalesmanName' =         
			   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanName as varchar(max))            
				FROM         tblSalesman sm1       
				inner join tblClientsSalesman cs1          
				 on cs1.SalesmanCode = sm1.SalesmanCode            
				WHERE cs1.ClientCode  = c.ClientCode                         
				 FOR XML PATH('')), 1, 1, ''),    
			'CPTCodesAll' =         
			   STUFF((SELECT distinct '|' +CAST( bi.CPTcode as varchar(max))  + '|' +CAST( bi.FeeDescription as varchar(max))  + '|' +CAST( bi.ICD9Code as varchar(max))           
				FROM         tblBill bi             
				WHERE bi.Accession = ba.Accession                           
				 FOR XML PATH('')), 1, 1, '') ,  
					  --isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode,     
				  --sm.SalesmanName,      
			DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName    , a.ReceiveDate, a.preaccession   
			, btd.Description as BillType, af.AccessionCurrentBalance as BillBalance     
			, CASE WHEN (select count(*) from tblbillAudit where Accession = mi.Accession and notetype in ('ClientBill', 'ElectronicClaim', 'HCFA', 'PatientBill')) > 0 THEN 'True' ELSE 'False' END as SentToClaim     
			, STUFF((SELECT distinct ', ' + fd.v.value('@code', 'varchar(max)')FROM tblaccessions a1  
										CROSS APPLY a1.DiagnosisDataXML.nodes('QSSLISOrderRecord/ICD9codes/ICD9codes') AS fd(v)  
										where a.accession=a1.accession  
										FOR XML PATH('')), 1, 1, '') as ICD9codes  
			,c.telephone  as Clientphone, a.patientID as patientID, p.ptDateOfBirth, ins.name as InsName  
			, (SELECT  top 1 [Note]  
			   FROM [tblBillAudit] ba  
			  where accession=a.Accession  
			  order by id desc) as note  
									from tblMissingInformation mi with (nolock)      
									inner join tblBillAccessions ba on ba.Accession = mi.accession      
									inner join tblClients c on ba.ClientCode = c.ClientCode      
									inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode      
									inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode      
									inner join tblAccessions a on mi.Accession = a.Accession         
									inner join tblpatient p on p.patientID=a.patientid          
									left outer join tblAccessionsFinancials af on af.Accession = mi.Accession      
									left outer join tblBillTypeDefinitions btd on btd.BTcode = ba.CurrentBillType     
									left outer join tblInsuranceCompanies ins on ins.InsuranceCode = p.primaryinsuranceid   
									where  a.ReceiveDate >= @StartDate and  a.ReceiveDate <= @EndDate 
									and  ISNULL(ba.ManualSuspension, 'False') <> 'True'  
									and mi.Reason like '%DenialCode%'     
									order by mi.accession 
	END
	IF @ReportType = 'PTB'
	BEGIN
			select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name,     
			'Reason' =         
			   STUFF((SELECT distinct '|' +CAST( mi1.Reason as varchar(max))            
				FROM         tblMissingInformation mi1             
				--  on cs.SalesmanCode = b.SalesmanCode            
				WHERE mi1.Accession = ba.Accession                           
				 FOR XML PATH('')), 1, 1, ''),     
				  --mi.reason,    
			LTRIM(RTRIM(mi.ClientCode)) as clientcode, ba.QSSUpdateDate As BillDate, c.ClientName ,     
			'SalesmanCode' =         
			   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanCode as varchar(max))            
				FROM         tblSalesman sm1       
				inner join tblClientsSalesman cs1          
				 on cs1.SalesmanCode = sm1.SalesmanCode            
				WHERE cs1.ClientCode  = c.ClientCode                          
				 FOR XML PATH('')), 1, 1, ''),    
			'SalesmanName' =         
			   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanName as varchar(max))            
				FROM         tblSalesman sm1       
				inner join tblClientsSalesman cs1          
				 on cs1.SalesmanCode = sm1.SalesmanCode            
				WHERE cs1.ClientCode  = c.ClientCode                         
				 FOR XML PATH('')), 1, 1, ''),    
			'CPTCodesAll' =         
			   STUFF((SELECT distinct '|' +CAST( bi.CPTcode as varchar(max))  + '|' +CAST( bi.FeeDescription as varchar(max))  + '|' +CAST( bi.ICD9Code as varchar(max))           
				FROM         tblBill bi             
				WHERE bi.Accession = ba.Accession                           
				 FOR XML PATH('')), 1, 1, '') ,  
					  --isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode,     
				  --sm.SalesmanName,      
			DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName    , a.ReceiveDate, a.preaccession   
			, btd.Description as BillType, af.AccessionCurrentBalance as BillBalance     
			, CASE WHEN (select count(*) from tblbillAudit where Accession = mi.Accession and notetype in ('ClientBill', 'ElectronicClaim', 'HCFA', 'PatientBill')) > 0 THEN 'True' ELSE 'False' END as SentToClaim     
			, STUFF((SELECT distinct ', ' + fd.v.value('@code', 'varchar(max)')FROM tblaccessions a1  
										CROSS APPLY a1.DiagnosisDataXML.nodes('QSSLISOrderRecord/ICD9codes/ICD9codes') AS fd(v)  
										where a.accession=a1.accession  
										FOR XML PATH('')), 1, 1, '') as ICD9codes  
			,c.telephone  as Clientphone, a.patientID as patientID, p.ptDateOfBirth, ins.name as InsName  
			, (SELECT  top 1 [Note]  
			   FROM [tblBillAudit] ba  
			  where accession=a.Accession  
			  order by id desc) as note  
									from tblMissingInformation mi with (nolock)      
									inner join tblBillAccessions ba on ba.Accession = mi.accession      
									inner join tblClients c on ba.ClientCode = c.ClientCode      
									inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode      
									inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode      
									inner join tblAccessions a on mi.Accession = a.Accession         
									inner join tblpatient p on p.patientID=a.patientid          
									left outer join tblAccessionsFinancials af on af.Accession = mi.Accession      
									inner join tblBillTypeDefinitions btd on btd.BTcode = ba.CurrentBillType     
									left outer join tblInsuranceCompanies ins on ins.InsuranceCode = p.primaryinsuranceid   
									where  a.ReceiveDate >= @StartDate and  a.ReceiveDate <= @EndDate   
									and  ISNULL(ba.ManualSuspension, 'False') <> 'True'  
									and ba.CurrentBillType in ('Cash')   
									order by mi.accession 
	END
	IF @ReportType = 'CLB'
	BEGIN
		select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name,     
			'Reason' =         
			   STUFF((SELECT distinct '|' +CAST( mi1.Reason as varchar(max))            
				FROM         tblMissingInformation mi1             
				--  on cs.SalesmanCode = b.SalesmanCode   
				WHERE mi1.Accession = ba.Accession                           
				 FOR XML PATH('')), 1, 1, ''),     
				  --mi.reason,    
			LTRIM(RTRIM(mi.ClientCode)) as clientcode, ba.QSSUpdateDate As BillDate, c.ClientName ,     
			'SalesmanCode' =         
			   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanCode as varchar(max))            
				FROM         tblSalesman sm1       
				inner join tblClientsSalesman cs1          
				 on cs1.SalesmanCode = sm1.SalesmanCode            
				WHERE cs1.ClientCode  = c.ClientCode                          
				 FOR XML PATH('')), 1, 1, ''),    
			'SalesmanName' =         
			   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanName as varchar(max))            
				FROM         tblSalesman sm1       
				inner join tblClientsSalesman cs1          
				 on cs1.SalesmanCode = sm1.SalesmanCode            
				WHERE cs1.ClientCode  = c.ClientCode                         
				 FOR XML PATH('')), 1, 1, ''),    
			'CPTCodesAll' =         
			   STUFF((SELECT distinct '|' +CAST( bi.CPTcode as varchar(max))  + '|' +CAST( bi.FeeDescription as varchar(max))  + '|' +CAST( bi.ICD9Code as varchar(max))           
				FROM         tblBill bi             
				WHERE bi.Accession = ba.Accession                           
				 FOR XML PATH('')), 1, 1, '') ,  
					  --isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode,     
				  --sm.SalesmanName,      
			DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName    , a.ReceiveDate, a.preaccession   
			, btd.Description as BillType, af.AccessionCurrentBalance as BillBalance     
			, CASE WHEN (select count(*) from tblbillAudit where Accession = mi.Accession and notetype in ('ClientBill', 'ElectronicClaim', 'HCFA', 'PatientBill')) > 0 THEN 'True' ELSE 'False' END as SentToClaim     
			, STUFF((SELECT distinct ', ' + fd.v.value('@code', 'varchar(max)')FROM tblaccessions a1  
										CROSS APPLY a1.DiagnosisDataXML.nodes('QSSLISOrderRecord/ICD9codes/ICD9codes') AS fd(v)  
										where a.accession=a1.accession  
										FOR XML PATH('')), 1, 1, '') as ICD9codes  
			,c.telephone  as Clientphone, a.patientID as patientID, p.ptDateOfBirth, ins.name as InsName  
			, (SELECT  top 1 [Note]  
			   FROM [tblBillAudit] ba  
			  where accession=a.Accession  
			  order by id desc) as note  
									from tblMissingInformation mi with (nolock)      
									inner join tblBillAccessions ba on ba.Accession = mi.accession      
									inner join tblClients c on ba.ClientCode = c.ClientCode      
									inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode      
									inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode      
									inner join tblAccessions a on mi.Accession = a.Accession         
									inner join tblpatient p on p.patientID=a.patientid          
									left outer join tblAccessionsFinancials af on af.Accession = mi.Accession      
									inner join tblBillTypeDefinitions btd on btd.BTcode = ba.CurrentBillType     
									left outer join tblInsuranceCompanies ins on ins.InsuranceCode = p.primaryinsuranceid   
									where  a.ReceiveDate >= @StartDate and  a.ReceiveDate <= @EndDate 
									 and ISNULL(ba.ManualSuspension, 'False') <> 'True'  
									and (btd.description like '%client%'   or mi.reason = 'On Manual Hold. 3' )  
									order by mi.accession 
	END
	IF @ReportType = 'NOB'
	BEGIN
			select distinct mi.accession, mi.plastname + ', ' + mi.pfirstname as name,     
			'Reason' =         
			   STUFF((SELECT distinct '|' +CAST( mi1.Reason as varchar(max))            
				FROM         tblMissingInformation mi1             
				--  on cs.SalesmanCode = b.SalesmanCode            
				WHERE mi1.Accession = ba.Accession                           
				 FOR XML PATH('')), 1, 1, ''),     
				  --mi.reason,    
			LTRIM(RTRIM(mi.ClientCode)) as clientcode, ba.QSSUpdateDate As BillDate, c.ClientName ,     
			'SalesmanCode' =         
			   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanCode as varchar(max))            
				FROM         tblSalesman sm1       
				inner join tblClientsSalesman cs1          
				 on cs1.SalesmanCode = sm1.SalesmanCode            
				WHERE cs1.ClientCode  = c.ClientCode                          
				 FOR XML PATH('')), 1, 1, ''),    
			'SalesmanName' =         
			   STUFF((SELECT distinct '|' +CAST( sm1.SalesmanName as varchar(max))            
				FROM         tblSalesman sm1       
				inner join tblClientsSalesman cs1          
				 on cs1.SalesmanCode = sm1.SalesmanCode            
				WHERE cs1.ClientCode  = c.ClientCode                         
				 FOR XML PATH('')), 1, 1, ''),    
			'CPTCodesAll' =         
			   STUFF((SELECT distinct '|' +CAST( bi.CPTcode as varchar(max))  + '|' +CAST( bi.FeeDescription as varchar(max))  + '|' +CAST( bi.ICD9Code as varchar(max))           
				FROM         tblBill bi             
				WHERE bi.Accession = ba.Accession                           
				 FOR XML PATH('')), 1, 1, '') ,  
					  --isnull(NULLIF(sm.SalesmanCode, ''), 'NA') as SalesmanCode,     
				  --sm.SalesmanName,      
			DATEDIFF(DAY, ba.QSSUpdateDate, GETDATE())AS BillAge, phy.PhysicianCode, phy.FullName as  PhysicianName    , a.ReceiveDate, a.preaccession   
			, btd.Description as BillType, af.AccessionCurrentBalance as BillBalance     
			, CASE WHEN (select count(*) from tblbillAudit where Accession = mi.Accession and notetype in ('ClientBill', 'ElectronicClaim', 'HCFA', 'PatientBill')) > 0 THEN 'True' ELSE 'False' END as SentToClaim     
			, STUFF((SELECT distinct ', ' + fd.v.value('@code', 'varchar(max)')FROM tblaccessions a1  
										CROSS APPLY a1.DiagnosisDataXML.nodes('QSSLISOrderRecord/ICD9codes/ICD9codes') AS fd(v)  
										where a.accession=a1.accession  
										FOR XML PATH('')), 1, 1, '') as ICD9codes  
			,c.telephone  as Clientphone, a.patientID as patientID, p.ptDateOfBirth, ins.name as InsName  
			, (SELECT  top 1 [Note]  
			   FROM [tblBillAudit] ba  
			  where accession=a.Accession  
			  order by id desc) as note  
									from tblMissingInformation mi with (nolock)      
									inner join tblBillAccessions ba on ba.Accession = mi.accession      
									inner join tblClients c on ba.ClientCode = c.ClientCode      
									inner join tblClientsPhysicians cph on cph.ClientCode = c.ClientCode      
									inner join tblPhysicians phy on phy.PhysicianCode = ba.PhysicianCode      
									inner join tblAccessions a on mi.Accession = a.Accession         
									inner join tblpatient p on p.patientID=a.patientid          
									left outer join tblAccessionsFinancials af on af.Accession = mi.Accession      
									left outer join tblBillTypeDefinitions btd on btd.BTcode = ba.CurrentBillType     
									left outer join tblInsuranceCompanies ins on ins.InsuranceCode = p.primaryinsuranceid   
									where  a.ReceiveDate >= @StartDate and  a.ReceiveDate <= @EndDate 
									and ISNULL(ba.ManualSuspension, 'False') <> 'True'  
									and ba.CurrentBillType in ('NB')         
									order by mi.accession 
	END
	
END 

GO
/****** Object:  StoredProcedure [dbo].[spGetMissingMailoutTranslationCodeReportData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetMissingMailoutTranslationCodeReportData] 
	@MailoutLabCode varchar(20)
AS
BEGIN

	SELECT *
		FROM dbo.tblMissingTransaltionCode (NOLOCK)
		where MailoutLabCode = @MailoutLabCode
		
		order by  TestCode asc
END



GO
/****** Object:  StoredProcedure [dbo].[spGetModuleTestCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetModuleTestCodes]	
	 @ControlOrderNumber varchar(20)
	,@ControlID varchar(20)
	,@LotNumber varchar(100)
	
AS
BEGIN
	select res.id, res.TestCode, res.Result  , res.NormalRange, res.ResultDate, 
	res.STDDeviation, res.[Status]	, res.Comment
	from tblQCResults res (nolock)	
	--left join tblQCResultValues val (nolock)
	--on res.id = val.QCResultsID
	where res.OrderID = @ControlOrderNumber
	and res.ControlID = @ControlID
	and res.Lot       = @LotNumber
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetNextAccessionNumber]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spGetNextAccessionNumber]
(
	@LabCode varchar(20)
)
As
BEGIN
DECLARE @prefix varchar(50)	
	
select 	@prefix = countPrefix from tblCounter
where CountName = 'accessionCounter'
	
--dateadd(dd, -90, getdate())

IF @prefix = SUBSTRING(REPLACE(CONVERT(VARCHAR, dateadd(hh, -5, getdate()), 120), '-', ''), 3,6) --IF it's the same day as the last accession was created
BEGIN	
	update tblCounter set counter = isNull(counter,11000) + 1, CountPrefix = SUBSTRING(REPLACE(CONVERT(VARCHAR, dateadd(hh, -5, getdate()), 120), '-', ''), 3,6)
	where CountName = 'accessionCounter'

END
ELSE --If it's another day, reset counter to 10001
BEGIN	
	
	update tblCounter set counter = 11000 + 1, CountPrefix = SUBSTRING(REPLACE(CONVERT(VARCHAR, dateadd(hh, -5, getdate()), 120), '-', ''), 3,6)
	where CountName = 'accessionCounter'
END
	select 
	countPrefix +  SUBSTRING(CONVERT(VARCHAR, [counter], 20), 2, 4)
	--[counter], countPrefix
	from tblCounter  with (NOLOCK)
	where CountName = 'accessionCounter'
	
END



GO
/****** Object:  StoredProcedure [dbo].[spGetNextBillMessageNumber]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetNextBillMessageNumber]

As
BEGIN
    Update tblCounter set counter = isNull(counter,10000) + 1
	WHERE CountName = 'billMessage'
	
	SELECT counter, countprefix
	FROM tblCounter with (NOLOCK)
	WHERE Countname = 'billMessage'
END
GO
/****** Object:  StoredProcedure [dbo].[spGetNextClientBillAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetNextClientBillAccession]

As
BEGIN
    Update tblCounter set [counter] = isNull([counter], 1000000) + 1
	WHERE CountName = 'ClientBill'
	
	SELECT countprefix, [counter]
	FROM tblCounter with (NOLOCK)
	WHERE Countname = 'ClientBill'
END


GO
/****** Object:  StoredProcedure [dbo].[spGetNextID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Batch submitted through debugger: SQLQuery63.sql|7|0|C:\Documents and Settings\Administrator\Local Settings\Temp\~vs69E.sql
CREATE PROCEDURE [dbo].[spGetNextID]
(
@TypeOfID varchar(20)
)
As
BEGIN
		Update tblCounter set [Counter] = [Counter] + 1
		WHERE CountName = @TypeOfID
		
		SELECT (Convert(varchar(100),CountPrefix) + Convert(varchar(100),Counter)) as [Counter] 
		FROM tblCounter with (NOLOCK)
		WHERE CountName = @TypeOfID
END
GO
/****** Object:  StoredProcedure [dbo].[spGetNextModuleNumber]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetNextModuleNumber]

As
BEGIN
    Update tblCounter set counter = isNull(counter,10000) + 1
	WHERE CountName = 'controlModule'
	
	SELECT counter, countprefix
	FROM tblCounter with (NOLOCK)
	WHERE Countname = 'controlModule'
END
GO
/****** Object:  StoredProcedure [dbo].[spGetNextOrderNumber]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetNextOrderNumber]

As
BEGIN
    Update tblCounter set counter = isNull(counter,1000) + 1
	WHERE CountName = 'orderControl'
	
	SELECT counter, countprefix
	FROM tblCounter with (NOLOCK)
	WHERE Countname = 'orderControl'
END
GO
/****** Object:  StoredProcedure [dbo].[spGetNextQCGroupNumber]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spGetNextQCGroupNumber]

As
BEGIN
    Update tblCounter set counter = isNull(counter,10) + 1
	WHERE CountName = 'QCGroupCounter'
	
	SELECT counter
	FROM tblCounter with (NOLOCK)
	WHERE Countname = 'QCGroupCounter'
END
GO
/****** Object:  StoredProcedure [dbo].[spGetNextSourceID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetNextSourceID]    
    
As    
BEGIN    
    Update tblCounter set counter = isNull(counter,1000) + 1    
 WHERE CountName = 'SourceID'    
     
 SELECT counter, countprefix    
 FROM tblCounter with (NOLOCK)    
 WHERE Countname = 'SourceID'    
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetNextStainID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetNextStainID]      
      
As      
BEGIN      
    Update tblCounter set counter = isNull(counter,1000) + 1      
 WHERE CountName = 'StainID'      
       
 SELECT counter, countprefix      
 FROM tblCounter with (NOLOCK)      
 WHERE Countname = 'StainID'      
END 

GO
/****** Object:  StoredProcedure [dbo].[spGetOrderCodeforRequisitionForm]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetOrderCodeforRequisitionForm]	
	@Accession varchar(50)
AS
BEGIN

	declare @count as int = 0
	declare @countYHL as int = 0
	select @count = count(ot.PerformedTest) from tblOrderedTests ot 
	inner join tblPerformedTestsDefinitions ptd 
	on ptd.PerformedTest = ot.PerformedTest 
	and ptd.MailoutFlag = 'M'
	and ptd.PerformedBy = 'ACCUREFERENCE'
	and ot.Accession = @Accession
	
	select @countYHL = count(ot.PerformedTest) from tblOrderedTests ot 
	inner join tblPerformedTestsDefinitions ptd 
	on ptd.PerformedTest = ot.PerformedTest 
	and ptd.MailoutFlag = 'M'
	and ptd.PerformedBy = 'YHL'
	and ot.Accession = @Accession
	
	if (@count > 0 or @countYHL > 0) --ACCUREFERENCE panel included, only get ACCUREFERENCE performed test for req
	begin
		Declare @PerformedBy as varchar(100)
		if @count > 0
		begin
			Set @PerformedBy = 'ACCUREFERENCE'
		end
		if @countYHL > 0
		begin
			Set @PerformedBy = 'YHL'
		end
		
		SELECT distinct ot.PerformedTest as OrderedTest, ptd.ExternalDescription as Description
		from  tblOrderedTests ot
		INNER JOIN tblPerformedTestsDefinitions ptd
		on ot.PerformedTest = ptd.PerformedTest
		where ot.Accession = @Accession
		and ptd.MailoutFlag = 'M'
		and ptd.PerformedBy = @PerformedBy
		order by ot.PerformedTest
	end
	else
	begin
		SELECT distinct ot.OrderedTest, Description
		from  tblOrderedTests ot
		INNER JOIN tblOrderedTestsDefinitions otd
		on ot.OrderedTest = otd.OrderedTest
		where ot.Accession = @Accession
		order by OrderedTest
	end		  
	
END






GO
/****** Object:  StoredProcedure [dbo].[spGetOrderCodeforRequisitionFormLocal]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  CREATE PROCEDURE [dbo].[spGetOrderCodeforRequisitionFormLocal]     
   
 @Accession varchar(50)       
AS        
BEGIN        
       
  SELECT distinct     
  ot.PerformedTest as OrderedTest,    
 -- ot.OrderedTest    
 ptd.ExternalDescription as Description, 'performedby'=case when mailoutflag='i' and ptd.performedby='' then 'Inhouse'  else ptd.performedby end ,  
  --Description ,    
  ptd.MailoutFlag,'mailoutlab'=case when mailoutflag='i' and ptd.mailoutflag='i' then 'Inhouse'  else ptd.mailoutlab end       
  from  tblOrderedTests ot        
  INNER JOIN tblOrderedTestsDefinitions otd        
  on ot.OrderedTest = otd.OrderedTest        
  INNER JOIN tblPerformedTestsDefinitions ptd        
  on ot.PerformedTest = ptd.PerformedTest        
 where ot.Accession = @Accession     and    ptd.MailoutFlag='M'  
  order by  ptd.ExternalDescription    
  -- Description        
 end            
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- =============================================  
CREATE PROCEDURE [dbo].[spGetOrderData]   
 @Accession varchar(50)  
AS  
BEGIN  
SELECT     acc.Accession, acc.ClientCode, cl.ClientName, acc.PatientID, acc.PhysicianCode, acc.ReceiveDate, acc.CollectionDate, acc.OrderType,   
    acc.ProblemSpec, acc.PrimaryInsuranceID, acc.PreAccession, acc.CurrentBillType, acc.InternalComment, acc.PatientStatus,   
    acc.SpecimenDataXML, acc.OrderedTests, acc.DiagnosisDataXML, acc.MedicationsDataXML, acc.QSSCreatedByID, acc.QSSCreatedDate,   
    acc.QSSLastUpdateID, acc.QSSUpdateDate, acc.QSSVersion, acc.POCTests, acc.POCResults, acc.ConfirmAllTests, acc.ConfirmAllMeds,   
    acc.SubmittedSex, acc.SubmittedDOB,acc.ConfirmConsistancy, acc.MailoutDate, acc.ShippedDate, acc.AddScannedPaperWork,   
    acc.SpecimenSource, acc.LMP, acc.LMPVolume, acc.Fasting, Breastfeeding, Pregnant, RecurrentCandida, RecurrentTrich, RecurrentBV  ,acc.ExternalComments , acc.ProblemComments
FROM         tblAccessions AS acc WITH (nolock) INNER JOIN  
                      tblClients AS cl WITH (nolock) ON cl.ClientCode = acc.ClientCode  
WHERE     (acc.Accession = @Accession)  
   
END  



GO
/****** Object:  StoredProcedure [dbo].[spGetOrderDataForResultEntry]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetOrderDataForResultEntry]	
	@Accession varchar(50)
AS
BEGIN
	select a.Accession, a.ClientCode , c.ClientName,c.Telephone, a.PatientID,  
	p.ptFirstName as FirstName, p.ptLastName As LastName, p.ptSex as Sex,
	a.PhysicianCode
    from tblAccessions a (nolock) 
	inner join tblClients c (nolock)
	on a.ClientCode = c.ClientCode
	inner join tblPatient p (nolock)
	on a.PatientID = p.PatientId
	where a.Accession = @Accession
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderDataForResultEntry2]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetOrderDataForResultEntry2]     
 @Accession varchar(50)    
AS    
BEGIN    
    
SELECT     a.Accession, a.ClientCode, c.ClientName, c.Telephone, a.PatientID, p.ptFirstName AS FirstName, p.ptLastName AS LastName,p.ptMiddleName AS MiddleName, p.ptSex AS Sex, a.PhysicianCode,     
                      a.MedicationsDataXML, tblArchiveReviewAccession.ArchivedDate  as ReleasedDate, a.InternalComment,a.ExternalComments, a.PlateID, a.WellPosition, p.ptDateOfBirth    , a.CollectionDate   
FROM         tblAccessions AS a WITH (nolock) INNER JOIN    
                      tblClients AS c WITH (nolock) ON a.ClientCode = c.ClientCode INNER JOIN    
                      tblPatient AS p WITH (nolock) ON a.PatientID = p.PatientId LEFT OUTER JOIN    
                      tblArchiveReviewAccession ON a.Accession = tblArchiveReviewAccession.Accession    
WHERE a.Accession = @Accession    
     
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedInstrumentTests]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetOrderedInstrumentTests] 
@InstrumentCode varchar(20),
@Accession varchar(50)
AS
BEGIN
	DECLARE @TESTS VARCHAR(MAX) 
	SELECT @TESTS = COALESCE(@TESTS, '') + ie.InstrumentCD from tblInstrumentElements ie

		  
		   LEFT JOIN dbo.tblResultedTests rt (NOLOCK)
		   ON rt.ResultTest = ie.ResultTest
		
		WHERE rt.ResultTest = ie.ResultTest and @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and Status not in ( 'Final','Cancelled')
		
		
SELECT @TESTS
END
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedInstrumentTestsASTM]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetOrderedInstrumentTestsASTM] 
@InstrumentCode varchar(20),
@Accession varchar(50)
AS
BEGIN
	DECLARE @TESTS VARCHAR(MAX) 
	SELECT @TESTS = COALESCE(@TESTS, '') +  ie.InstrumentCD +'|'from tblInstrumentElements ie

		  
		   LEFT JOIN dbo.tblResultedTests rt (NOLOCK)
		   ON rt.ResultTest = ie.ResultTest
		
		WHERE rt.ResultTest = ie.ResultTest and @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and Status not in( 'Final','Cancelled')
		
		if @InstrumentCode='DXI800'
	begin
		 insert into tblInstrumentDXITestOrderSent (Accession,ResultTest)
		 select rt.accession, rt.resulttest from tblInstrumentElements ie (nolock)
		 LEFT JOIN dbo.tblResultedTests rt (NOLOCK)  
		 ON rt.ResultTest = ie.ResultTest    
		  left join dbo.tblInstrumentDXITestOrderSent s (nolock)
		 on rt.Accession = s.Accession and rt.ResultTest=s.ResultTest
		  WHERE rt.ResultTest = ie.ResultTest and ie.InstrumentCode ='DXI800' 
		  and rt.Accession = @Accession and Status not in ('Final','cancelled') and ie.InstrumentCD<>''
		  and s.ResultTest is null

	end

SELECT @TESTS
END
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedInstrumentTestsDxH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetOrderedInstrumentTestsDxH] 
@InstrumentCode varchar(20),
@Accession varchar(50)
AS
BEGIN
	DECLARE @TESTS VARCHAR(MAX) 
	--check RETIC
	if EXISTS (SELECT InstrumentCD from tblInstrumentElements ie
		  
				inner join  dbo.tblResultedTests rt (NOLOCK)
				ON rt.ResultTest = ie.ResultTest
				inner join  dbo.tblinstrumentDXHOrderPanel op (NOLOCK)
				ON op.test = ie.instrumentCD			
				WHERE @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and rt.Status <> 'Final' and op.PanelName = 'RETIC') 
	 --HAS RETIC
	 begin
							
							--CHECK CDR
							if EXISTS (SELECT InstrumentCD from tblInstrumentElements ie
		  
							inner join  dbo.tblResultedTests rt (NOLOCK)
							ON rt.ResultTest = ie.ResultTest
							inner join  dbo.tblinstrumentDXHOrderPanel op (NOLOCK)
							ON op.test = ie.instrumentCD	
							WHERE @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and rt.Status <> 'Final' and op.PanelName = 'CD' ) 
							begin 
								set @TESTS = 'CDR'
							end
						
						else
							--check CR
						begin
							
								if EXISTS (SELECT InstrumentCD from tblInstrumentElements ie
		  
									inner join  dbo.tblResultedTests rt (NOLOCK)
									ON rt.ResultTest = ie.ResultTest
									inner join  dbo.tblinstrumentDXHOrderPanel op (NOLOCK)
									ON op.test = ie.instrumentCD	
									WHERE @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and rt.Status <> 'Final' and op.PanelName = 'CBC' ) 
								begin 
										set @TESTS = 'CR'
								end
						
							else
								--R
							begin
								set @TESTS = 'RETIC'
													
							end
							
						end
	end
	ELSE 
	-- check CD
	begin
						if EXISTS (SELECT InstrumentCD from tblInstrumentElements ie
		  
							inner join  dbo.tblResultedTests rt (NOLOCK)
							ON rt.ResultTest = ie.ResultTest
							inner join  dbo.tblinstrumentDXHOrderPanel op (NOLOCK)
							ON op.test = ie.instrumentCD	
							WHERE @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and rt.Status <> 'Final'  and op.PanelName = 'CD') 
								begin
								 set @TESTS =  'CD'
								 end
							
							else 
							-- check BFC
								begin
							
								 --if EXISTS (SELECT InstrumentCD from tblInstrumentElements ie	  
									--inner join  dbo.tblResultedTests rt (NOLOCK)
									--ON rt.ResultTest = ie.ResultTest			
									--WHERE @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and rt.Status <> 'Final' and ie.instrumentCD in ('TNC','RBC')) 
								 
									--begin
									--	set @TESTS =  'BFC'
									--end
									--else
									--begin
									--CHECK CBC
										if EXISTS (SELECT InstrumentCD from tblInstrumentElements ie
		  
													inner join  dbo.tblResultedTests rt (NOLOCK)
													ON rt.ResultTest = ie.ResultTest
												inner join  dbo.tblinstrumentDXHOrderPanel op (NOLOCK)
													ON op.test = ie.instrumentCD	
													WHERE @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and rt.Status <> 'Final' and op.PanelName = 'CBC') 
										begin 
											set @TESTS = 'CBC'
										end
							
										ELSE
										BEGIN
											set @TESTS = ''
										
										END
									
									--end
								 
						end
						
							
	END

	
		
		
		SELECT @TESTS
END
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedInstrumentTestsUniCellDxH]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetOrderedInstrumentTestsUniCellDxH] 
@InstrumentCode varchar(20),
@Accession varchar(50)
AS
BEGIN
	DECLARE @TESTS VARCHAR(MAX) 
	--check RETIC
	if EXISTS (SELECT InstrumentCD from tblInstrumentElements ie
		  
				inner join  dbo.tblResultedTests rt (NOLOCK)
				ON rt.ResultTest = ie.ResultTest
				inner join  dbo.tblinstrumentUnicelOrderPanel op (NOLOCK)
				ON op.test = ie.instrumentCD			
				WHERE @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and rt.Status not in ( 'Final','Cancelled') and op.PanelName = 'RETIC') 
	 --HAS RETIC
	 begin
							
							--CHECK DIFF
							if EXISTS (SELECT InstrumentCD from tblInstrumentElements ie
		  
							inner join  dbo.tblResultedTests rt (NOLOCK)
							ON rt.ResultTest = ie.ResultTest
							inner join  dbo.tblinstrumentUnicelOrderPanel op (NOLOCK)
							ON op.test = ie.instrumentCD	
							WHERE @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and rt.Status not in ( 'Final','Cancelled') and op.PanelName = 'DIFF' ) 
							begin 
								set @TESTS = 'RETIC|DIFF'
							end
						
						else
							--check CBC
						begin
							
								if EXISTS (SELECT InstrumentCD from tblInstrumentElements ie
		  
									inner join  dbo.tblResultedTests rt (NOLOCK)
									ON rt.ResultTest = ie.ResultTest
									inner join  dbo.tblinstrumentUnicelOrderPanel op (NOLOCK)
									ON op.test = ie.instrumentCD	
									WHERE @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and rt.Status not in ( 'Final','Cancelled')  and op.PanelName = 'CBC' ) 
								begin 
										set @TESTS = 'RETIC|CBC'
								end
						
							else
								--R
							begin
								set @TESTS = 'RETIC'
													
							end
							
						end
	end
	ELSE 
	-- check DIFF
	begin
						if EXISTS (SELECT InstrumentCD from tblInstrumentElements ie
		  
							inner join  dbo.tblResultedTests rt (NOLOCK)
							ON rt.ResultTest = ie.ResultTest
							inner join  dbo.tblinstrumentUnicelOrderPanel op (NOLOCK)
							ON op.test = ie.instrumentCD	
							WHERE @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and rt.Status not in ( 'Final','Cancelled')   and op.PanelName = 'DIFF') 
								begin
								 set @TESTS =  'DIFF'
								 end
							
							else 
							-- check CBC
								begin
							
								 --if EXISTS (SELECT InstrumentCD from tblInstrumentElements ie	  
									--inner join  dbo.tblResultedTests rt (NOLOCK)
									--ON rt.ResultTest = ie.ResultTest			
									--WHERE @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and rt.Status <> 'Final' and ie.instrumentCD in ('TNC','RBC')) 
								 
									--begin
									--	set @TESTS =  'BFC'
									--end
									--else
									--begin
									--CHECK CBC
										if EXISTS (SELECT InstrumentCD from tblInstrumentElements ie
		  
													inner join  dbo.tblResultedTests rt (NOLOCK)
													ON rt.ResultTest = ie.ResultTest
												inner join  dbo.tblinstrumentUnicelOrderPanel op (NOLOCK)
													ON op.test = ie.instrumentCD	
													WHERE @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and rt.Status not in ( 'Final','Cancelled')  and op.PanelName = 'CBC') 
										begin 
											set @TESTS = 'CBC'
										end
							
										ELSE
										BEGIN
											set @TESTS = ''
										
										END
									
									--end
								 
						end
						
							
	END

	
		
		
		SELECT @TESTS
END
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedInstrumentTestsWorksheetASTM]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetOrderedInstrumentTestsWorksheetASTM] 
@InstrumentCode varchar(20),
@Accession varchar(50),
@WorkSheetSuffix varchar(50) = ''
AS
BEGIN
DECLARE @TESTS VARCHAR(MAX),
		 @worksheet varchar(100)

	if @WorkSheetSuffix = ''
	begin
		
		SELECT @TESTS = COALESCE(@TESTS, '') +  ie.InstrumentCD +'|'from tblInstrumentElements ie

			  
			   LEFT JOIN dbo.tblResultedTests rt (NOLOCK)
			   ON rt.ResultTest = ie.ResultTest
			
			WHERE rt.ResultTest = ie.ResultTest and @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and Status <> 'Final'
	end
	else
	begin
	
	--select @Worksheet = wkcode from tblWorkSheetsDefinitions (nolock)
	--where suffix = @WorkSheetSuffix
	
	
	SELECT @TESTS = COALESCE(@TESTS, '') +  ie.InstrumentCD +'|'from tblInstrumentElements ie

			  
			   LEFT JOIN dbo.tblResultedTests rt (NOLOCK)
			   ON rt.ResultTest = ie.ResultTest
			     inner join tblWorkSheetsDefinitions  wsd(nolock)
			   on rt.worksheet = wsd.wkcode
			
			WHERE rt.ResultTest = ie.ResultTest and @InstrumentCode = ie.InstrumentCode and rt.Accession = @Accession and Status <> 'Final'
			--and rt.Worksheet = @Worksheet
			and wsd.suffix = @WorkSheetSuffix
		
	
	
	
	end		
		
SELECT @TESTS
END
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedQCInstrumentTests]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetOrderedQCInstrumentTests] 
@ID varchar(20),
@InstrumentCode varchar(50)
AS
BEGIN
	
	SELECT qc.InstrumentCodes from tblQCControls QC
	
		   LEFT JOIN dbo.tblQCOrderControls QCO (NOLOCK)
		   ON QC.ControlID = QCO.ControlID
		
		WHERE  QC.ControlID = QCO.ControlID and @InstrumentCode = QC.InstrumentCode and qco.id = @id
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedQCInstrumentTestsASTM]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetOrderedQCInstrumentTestsASTM] 
@ID varchar(20),
@InstrumentCode varchar(50)
AS
BEGIN
	
	 DECLARE @QCTestCode varchar(max)  
 DECLARE @Averages varchar(max)  
 DECLARE @Deviations varchar(max)  
 
 SELECT TOP(1) @Averages = Average,  
 @QCTestCode = TestCodes,  
 @Deviations = Deviation   
 FROM tblControlOrders  
 Where OrderID = @ID  
 Order by CreateDateTime Desc  

 CREATE TABLE #tmpTestCodes
(
      TestCode varchar(100),
      Mean float,
      Deviation float

   
)   
     insert into #tmpTestCodes
      select * from udf_TestCodeInfo(@QCTestCode,@Averages, @Deviations)
      
 	DECLARE @TESTS VARCHAR(MAX) 
	SELECT @TESTS = COALESCE(@TESTS, '') + tblInstrumentElements.InstrumentCD+'|' FROM   #tmpTestCodes t INNER JOIN
               tblInstrumentElements ON t.TestCode = tblInstrumentElements.ResultTest
				Where InstrumentCode  = @InstrumentCode
				
		
		
SELECT @TESTS
		
      
END
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedQCResultTestByOrderID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetOrderedQCResultTestByOrderID] 
@ID varchar(100)

AS
BEGIN
	
DECLARE @QCTestCode varchar(max)  
 DECLARE @Averages varchar(max)  
 DECLARE @Deviations varchar(max)  
 
 SELECT TOP(1) @Averages = Average,  
 @QCTestCode = TestCodes,  
 @Deviations = Deviation   
 FROM tblControlOrders  
 Where OrderID = @ID  
 Order by CreateDateTime Desc  



 select TestCode from udf_TestCodeInfo(@QCTestCode,@Averages, @Deviations)
      
 	
		
      
END
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedTestByPerformedTest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spGetOrderedTestByPerformedTest] 
	@PerformedTestCode varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT *
	FROM tblOrderedTestsDefinitions with (NOLOCK)
	WHERE PerformedTestCode =@PerformedTestCode order by  ReportFlag desc , ActiveFlag desc
		
END





GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedTestByPerformedTestandAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[spGetOrderedTestByPerformedTestandAccession] 
	@PerformedTestCode varchar(100),
	@Accession varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT *
	FROM tblAccessions A with (NOLOCK) 
	INNER JOIN tblOrderedTestsDefinitions B on  
	A.OrderedTests like '%|' + B.OrderedTest + '|%' or 
	A.OrderedTests like '%|' + B.OrderedTest or 
	A.OrderedTests like '%|' + B.OrderedTest or 
	A.OrderedTests = B.OrderedTest
	WHERE A.Accession = @Accession
	ORDER BY  ReportFlag desc , ActiveFlag desc
		
		
		
END






GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedTestByPerformedTestNew]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spGetOrderedTestByPerformedTestNew] 
	@PerformedTestCode varchar(100),
	@Accession varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT *
	FROM tblAccessions a with (NOLOCK)
	INNER JOIN tblOrderedTestsDefinitions o on  ('|' + o.PerformedTestCode + '|') like '%|' + @PerformedTestCode + '|%' and '|' +  a.OrderedTests  + '|'  like '%|' + o.OrderedTest + '|%'
	WHERE Accession = @Accession
	
		
END






GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedTestCount]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetOrderedTestCount] 
	@clientCode as varchar(MAX),
	@numberClients as varchar(100),
	@outputType as varChar(100),
	@StartDate datetime,
	@EndDate datetime
	
AS
BEGIN
SET NOCOUNT ON
CREATE TABLE #tempOrderTestCount
(
    clientcode varchar(MAX),
    clientname varchar(100),
    testcode varchar(100),
	testname varchar(100),
	PerformedTest varchar(100),
	count int
)

if @numberClients like 'ALL'
	Begin

		SET NOCOUNT ON;
		if @outputType like 'D'
		
		INSERT INTO #tempOrderTestCount
		
			SELECT distinct cl.ClientCode as clientcode, cl.ClientName as clientname, otd.OrderedTest as testcode, otd.Description testname, ot.PerformedTest, COUNT(ot.OrderedTest) as count
		
				FROM dbo.tblOrderedTests  ot (NOLOCK)
				Inner Join dbo.tblOrderedTestsDefinitions otd
				on ot.OrderedTest = otd.orderedtest
			
				Inner Join dbo.tblAccessions acc
				on ot.Accession = acc.Accession
			
				Inner Join dbo.tblClients cl (NOLOCK)
				on acc.ClientCode = cl.ClientCode
				
				AND  (acc.CollectionDate between @startdate and @enddate)
				
				group by cl.ClientName, cl.Clientcode, otd.OrderedTest, otd.Description, ot.PerformedTest
				order by cl.ClientName asc
		else
		
		INSERT INTO #tempOrderTestCount
		
			SELECT distinct '', '', otd.OrderedTest as testcode, otd.Description testname, ot.PerformedTest, COUNT(ot.OrderedTest) as count
		
				FROM dbo.tblOrderedTests  ot (NOLOCK)
				Inner Join dbo.tblOrderedTestsDefinitions otd
				on ot.OrderedTest = otd.orderedtest
			
				Inner Join dbo.tblAccessions acc
				on ot.Accession = acc.Accession
			
				Inner Join dbo.tblClients cl (NOLOCK)
				on acc.ClientCode = cl.ClientCode
				
				AND  (acc.CollectionDate between @startdate and @enddate)
				
				group by otd.OrderedTest, otd.Description, ot.PerformedTest
				order by otd.OrderedTest asc
	End

else
	BEGIN
		SET NOCOUNT ON;
	
	
		CREATE TABLE #TempList
		(
			cID varChar(100)
		)

		DECLARE @cID varchar(10), @Pos int
		SET @clientCode = LTRIM(RTRIM(@clientCode))+ '|'
		SET @Pos = CHARINDEX('|', @clientCode, 1)
		IF REPLACE(@ClientCode, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@ClientCode, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempList (cID) VALUES (@cID)
				END
				SET @ClientCode = RIGHT(@ClientCode, LEN(@ClientCode) - @Pos)
				SET @Pos = CHARINDEX('|', @ClientCode, 1)

			END
		END	
		if @outputType like 'D'
		
		INSERT INTO #tempOrderTestCount
		
			SELECT distinct cl.ClientCode as clientcode, cl.ClientName as clientname, otd.OrderedTest as testcode, otd.Description testname, ot.PerformedTest, COUNT(ot.OrderedTest) as count
			 
				FROM dbo.tblOrderedTests  ot (NOLOCK)
				Inner Join dbo.tblOrderedTestsDefinitions otd
				on ot.OrderedTest = otd.orderedtest
			
				Inner Join dbo.tblAccessions acc
				on ot.Accession = acc.Accession
				
				Inner Join dbo.tblClients cl (NOLOCK)
				on acc.ClientCode = cl.ClientCode
				
				JOIN 
				#TempList t
				ON cl.Clientcode = t.cID 
				
				AND  (acc.CollectionDate between @startdate and @enddate)
				
				group by cl.ClientName, cl.Clientcode, otd.OrderedTest, otd.Description, ot.PerformedTest
				order by cl.ClientName asc
		else
		
		INSERT INTO #tempOrderTestCount
		
			SELECT distinct '', '', otd.OrderedTest as testcode, otd.Description testname, ot.PerformedTest, COUNT(ot.OrderedTest) as count
			 
				FROM dbo.tblOrderedTests  ot (NOLOCK)
				Inner Join dbo.tblOrderedTestsDefinitions otd
				on ot.OrderedTest = otd.orderedtest
			
				Inner Join dbo.tblAccessions acc
				on ot.Accession = acc.Accession
				
				Inner Join dbo.tblClients cl (NOLOCK)
				on acc.ClientCode = cl.ClientCode
				
				JOIN 
				#TempList t
				ON cl.Clientcode = t.cID 
				
				AND  (acc.CollectionDate between @startdate and @enddate)
				
				group by otd.OrderedTest, otd.Description, ot.PerformedTest
				order by otd.OrderedTest asc
	END
	SELECT distinct clientcode, clientname, testcode, testname, count
FROM #tempOrderTestCount

DROP TABLE #tempOrderTestCount
	End
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedTestInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetOrderedTestInfo] 
	
	@OrderedTest varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT *
	FROM tblOrderedTestsDefinitions with (NOLOCK)
	WHERE OrderedTest = @OrderedTest
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedTestNames]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetOrderedTestNames] 
	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT OrderedTest, Description
	FROM tblOrderedTestsDefinitions with (NOLOCK)
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderedTestsForRequisitionEntry]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetOrderedTestsForRequisitionEntry] 
      @OrderedTestsList varchar(1000)
AS
BEGIN
	
SET NOCOUNT ON;

DECLARE   @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @FieldList varchar(2000)
		, @rOrderedTestsList varchar(500)

if object_id('tempdb..#tempAccessionOrderedTests') is not null

	drop table #tempAccessionOrderedTests
	
create table #tempAccessionOrderedTests
( 
	 rOrderedTestCode varchar(20)   
)  

Set @rOrderedTestsList = @OrderedTestsList


		Set @FieldList =''
		Set @FieldList = @rOrderedTestsList + '|'
		Set @StartPos = 1
		Set @EndPos = 1
		 -- Start the looping operation
		While @EndPos > 0
		   Begin
			  Set @EndPos = CharIndex('|', @FieldList, @StartPos)
			  If @EndPos > 0
				 Begin
					Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
					-- Add current row to TempTable
					Insert #tempAccessionOrderedTests (rOrderedTestCode) Values (@CurVal)
					Set @StartPos = @EndPos + 1
				 End
		   End

		  
		  SELECT OrderedTest, Description
	       
		  
				  
		  from  #tempAccessionOrderedTests aot
		  INNER JOIN tblOrderedTestsDefinitions otd
		  on aot.rOrderedTestCode = otd.OrderedTest
		  order by OrderedTest
END
GO
/****** Object:  StoredProcedure [dbo].[spGetOrderSetDataStructure]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetOrderSetDataStructure] 
@OrderSet varchar(20)
AS
BEGIN

	
	SELECT OrderedTest, [Description], PerformedTestCode FROM tblOrderedTestsDefinitions 
	--WHERE OrderedTest=@OrderSet
	--create temp table to store PerformedTestCode and loop through to get their drescriptions
	
	SELECT PerformedTest, ExternalDescription, ResultTestCode FROM tblPerformedTestsDefinitions
	SELECT TestCode, ExternalName FROM tblResultedTestsDefinitions
	
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetOrganisms]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetOrganisms] 

AS
BEGIN
	
	SET NOCOUNT ON;
		
	Select ROW_NUMBER() OVER (ORDER BY Description) AS ID, Description FROM (
	Select  Description from tblOrganisms
	Union
	Select  Distinct(OrganismName) as Description from  tblMicroTestOrganisms) A

                      
END


GO
/****** Object:  StoredProcedure [dbo].[spGetPathologists]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPathologists]    
  
AS    
BEGIN    
 select PhysicianCode, FirstName + ' ' + LastName As FullName   
 from tblPathologists  
    
      
END 

GO
/****** Object:  StoredProcedure [dbo].[spGetPathologyCase]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
CREATE PROCEDURE [dbo].[spGetPathologyCase]             
 @CaseNumber as varchar(100)            
            
AS            
BEGIN            
             
 SET NOCOUNT ON;            
            
SELECT     pc.id, pc.Accession, pc.casenumber,  pc.TestCode, pc.Status,pc.Signed,pc.isAbnormal,pc.StainsDataXML,pc.DiagnosisDataXML,pc.CPTDataXML,pc.Notes         
     ,acc.CollectionDate, acc.ClientCode, acc.PhysicianCode           
     ,ptd.ExternalDescription as TestDescription          
     ,pth.LastName + ' ' + pth.firstName  as PathologistName, pth.PhysicianCode as PathologistCode          
     ,pt.ptLastName + ' ' + pt.ptFirstName AS PatientName, pt.PatientId,pt.ptFirstName, pt.ptLastName, pt.ptMiddleName, pt.ptSex            
     ,phy.FullName as physicianName          
     ,cl.ClientName  ,pc.QSSUpdateDate    , pc.Jars,pc.Cassettes,pc.Sources  ,  pc.Abnormal  ,pc.Slides,pc.ClientCaseNumber   
               
FROM       tblPathologyCases pc INNER JOIN            
     tblAccessions acc on acc.Accession=pc.Accession             
     Inner join           
           tblPatient pt ON acc.PatientID = pt.PatientId           
      INNER JOIN            
           tblClients cl ON acc.ClientCode = cl.ClientCode            
     Inner join           
           tblPerformedTestsDefinitions ptd on ptd.performedTest=pc.TestCode             
     inner join          
     tblPhysicians phy on phy.PhysicianCode=acc.PhysicianCode          
     left outer JOIN            
           tblPathologists  pth ON pc.Pathologist = pth.PhysicianCode                 
                       
 Where pc.CaseNumber = @CaseNumber                                        
                                   
                                  
END   
GO
/****** Object:  StoredProcedure [dbo].[spGetPathologyCasesByAccessionOnly]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[spGetPathologyCasesByAccessionOnly]             
 @Accession as varchar(100)            
            
AS            
BEGIN            
             
 SET NOCOUNT ON;            
            
SELECT     pc.id, pc.Accession, pc.casenumber,  pc.TestCode, pc.Status,pc.Signed,pc.isAbnormal,pc.StainsDataXML,pc.DiagnosisDataXML,pc.CPTDataXML,pc.Notes          
     ,acc.CollectionDate, acc.ClientCode, acc.PhysicianCode           
     ,ptd.ExternalDescription as TestDescription          
     ,pth.LastName + ' ' + pth.firstName  as PathologistName, pth.PhysicianCode as PathologistCode          
     ,pt.ptLastName + ' ' + pt.ptFirstName AS PatientName, pt.PatientId,pt.ptFirstName, pt.ptLastName, pt.ptMiddleName, pt.ptSex            
     ,phy.FullName as physicianName          
     ,cl.ClientName   , acc.DiagnosisDataXML as ACCDiagnosisDataXML , pc.Jars,pc.Cassettes,pc.Sources  ,pc.abnormal  , pc.Slides,pc.ClientCaseNumber   
               
FROM       tblPathologyCases pc INNER JOIN            
     tblAccessions acc on acc.Accession=pc.Accession             
     Inner join           
           tblPatient pt ON acc.PatientID = pt.PatientId           
      INNER JOIN            
           tblClients cl ON acc.ClientCode = cl.ClientCode            
     Inner join           
           tblPerformedTestsDefinitions ptd on ptd.performedTest=pc.TestCode             
     inner join          
     tblPhysicians phy on phy.PhysicianCode=acc.PhysicianCode          
     left outer JOIN            
           tblPathologists  pth ON pc.Pathologist = pth.PhysicianCode                 
                       
 Where pc.Accession = @Accession                                        
                                   
                                  
END     
GO
/****** Object:  StoredProcedure [dbo].[spGetPathologyCptCodeInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE PROCEDURE [dbo].[spGetPathologyCptCodeInfo]       
 @Code varchar(100)     
AS      
BEGIN      
      
 SET NOCOUNT ON      
   select tblResultedTestsDefinitions.TestCode  As Code,ExternalName as [Description]    
 FROM         tblResultedTestsDefinitions WITH (nolock) INNER JOIN        
                      tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode AND         
                      tblResultedTestsDefinitions.Version = tblResultCodeVersions.CurrentVersion        
 where tblResultedTestsDefinitions.TestCode  LIKE ISNULL(@Code, tblResultedTestsDefinitions.TestCode)        
  and Worksheet='BILLING'      
 order by tblResultedTestsDefinitions.TestCode     
      
    
END      
    
GO
/****** Object:  StoredProcedure [dbo].[spGetPathologyResultTemplatesInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[spGetPathologyResultTemplatesInfo]
@Code varchar(10)
as
begin

select id,Results,Code,Heading,Abnormal from tblPathologyResultTemplates where code=@Code

end
GO
/****** Object:  StoredProcedure [dbo].[spGetPathologyUpdateType]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spGetPathologyUpdateType]  
@casenumber varchar(100)  
as  
begin  
select CaseNumber,Accession,TestCode,UpdateType,Reason,Pathologist,convert(varchar, SignedDateTime, 22) as SignedDateTime from tblPathologycaseupdates where CaseNumber=@casenumber order by SignedDateTime desc  
end  
  
  
  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetPatient]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetPatient]
 
	@PatientId as varchar(20)
AS
BEGIN
	SELECT a.PatientId, a.ptLastName as LastName, a.ptFirstName as Firstname, a.ptMiddleName as MiddleName, a.ptDateOfBirth as DateofBirth , a.ptAddress1 as Address1, a.ptAddress2 as Address2, a.ptCity as City, 
			a.ptState as State, a.ptZip as Zip , a.ptSex As Sex, a.ptSSN as SSN, a.PTContactHomePhone, a.PTContactWorkPhone, a.PTContactCellPhone, a.PTContactEmail, a.PTContactFax,
			a.PrimaryInsuranceID, a.PrimaryInsuredID, a.PrimaryPatRelationtoIns, a.SecondaryInsuranceID, a.SecondaryInsuredID, a.SecondaryPatRelationtoIns
			

		FROM dbo.tblPatient a (NOLOCK) 

		
			WHERE a.PatientId = @Patientid
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientAccessions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetPatientAccessions]

                @CurrentAccession as varchar(100)
AS
BEGIN
                DECLARE @PatientID as varchar(100)
                SELECT @PatientID = PatientID from tblBillAccessions where Accession = @CurrentAccession
                
                SELECT Accession
                FROM tblBillAccessions 
                WHERE PatientId = @Patientid
                and Accession <> @CurrentAccession
END

GO
/****** Object:  StoredProcedure [dbo].[spGetPatientAccessionsByPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetPatientAccessionsByPatientID]

                @PatientID as varchar(100)
AS
BEGIN
                
                SELECT Accession
                FROM tblBillAccessions 
                WHERE PatientId = @Patientid
                --and Accession <> @CurrentAccession
END

GO
/****** Object:  StoredProcedure [dbo].[spGetPatientAgebyAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetPatientAgebyAccession] 
@Accession varchar(100) 
AS
BEGIN
SET NOCOUNT ON

	SELECT     cast(DATEDIFF(dayofyear, tblPatient.ptDateOfBirth, getDate())/365.2425 as integer) as PatientAge
	FROM         tblAccessions INNER JOIN
						  tblPatient ON tblAccessions.PatientID = tblPatient.PatientId
	                      
	Where Accession = @Accession                  


END



GO
/****** Object:  StoredProcedure [dbo].[spGetPatientAgeSexbyAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetPatientAgeSexbyAccession] 
@Accession varchar(100) 
AS
BEGIN
SET NOCOUNT ON

	SELECT cast(DATEDIFF(dayofyear, tblPatient.ptDateOfBirth, getDate())/365.2425 as integer) as PatientAge, tblPatient.ptSex  as PatientSex
	FROM         tblAccessions INNER JOIN
						  tblPatient ON tblAccessions.PatientID = tblPatient.PatientId
	                      
	Where Accession = @Accession                  


END



GO
/****** Object:  StoredProcedure [dbo].[spGetPatientBillingCommentsByPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetPatientBillingCommentsByPatientID]

                @PatientID as varchar(100)
AS
BEGIN
                SELECT Accession, QSSCreatedDate as BillDate, Isnull(InternalComment, '') as BillingComment
                from tblBillAccessions 
                where PatientID = @PatientID
                and Isnull(InternalComment, '') <> ''
                order by QSSCreatedDate
                
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientBillingSummaryByPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetPatientBillingSummaryByPatientID] 
                
                @PatientID varchar(100)
AS
BEGIN
                SELECT  SUM(dbo.B_GetAmountBilledTotal(Accession)) BillTotal,
                SUM(dbo.B_PaidAmount(Accession)) TotalPaid, 
                SUM(dbo.B_GetAdjustmentsTotal(Accession)) TotalAdjusted, 
                SUM(dbo.B_GetTotalBillBalance(Accession)) Balance
                from tblBillAccessions 
                where accession in (select accession from tblBillaccessions where PatientID = @PatientID)
END





GO
/****** Object:  StoredProcedure [dbo].[spGetPatientCPTbyAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPatientCPTbyAccession]
                           @Accession varchar(50) 
              
AS
BEGIN

SELECT     b.id, b.Accession, b.BTcode, b.CPTcode, b.OrderedTestCode, b.NextBillDate, 
                     b.FeeDescription, 
                     b.TotalFeeAmt, 
                     b.Units, 
                     dbo.B_GetCPTBalance(b.Accession, b.CPTcode, b.OrderedTestCode, isnull(b.Modifier, ''), b.GroupFlag) as CPTBalance,
                     
                     b.ExpAmt, 
                     isnull(b.Modifier, '') AS Modifier, 
                     b.Location, 
                     b.Status, 
                     b.DiscountPercentage, 
                     b.FeeType, 
                     b.ICD9code, 
                     b.BillableFlag, b.QSSCreatedByID, 
            b.QSSCreatedDate, b.QSSLastUpdateID, b.QSSUpdateDate, b.QSSVersion, 
            a.CollectionDate, 
            --b.ICD9Code,
	b.GroupFlag, 
	Case When isnull(b.Modifier, '') <> 90 then
		0
	Else
		1
	End as MailoutFlag,   
	Case When isnull(b.modifier, '') = 90 then 
	   ISNULL(NULLIF(mol.Name, ''), (select top 1 LabName from tbllabs))
	Else
	   (select top 1 LabName from tbllabs)
	End as PerformedBy,
	Case When isnull(b.modifier, '') = 90 then 
	   ISNULL(NULLIF(mol.LabNPI, ''), (select top 1 LabNPInumber from tbllabs))  
	Else
	   (select top 1 LabNPInumber from tbllabs)
	End as NPI,
	  
	Case When isnull(b.modifier, '') = 90 then 
	   ISNULL(NULLIF(mol.Address + mol.Address2, ''), (select top 1 LabAddress from tbllabs))
	Else
	   (select top 1 LabAddress from tbllabs)
	End as Address1,
	Case When isnull(b.modifier, '') = 90 then 
	   ISNULL(NULLIF((mol.City + ', ' + mol.State + ', ' + mol.Zip), ''), (select top 1 (LabCity + ', ' + LabState + ', ' + LabZip) from tbllabs))
	Else
	   (select top 1 (LabCity + ', ' + LabState + ', ' + LabZip) from tbllabs)
	End as Address2,
	Case When isnull(b.modifier, '') = 90 then 
	   ISNULL(NULLIF(mol.ProviderID, ''), (select top 1 CLIAnumber from tbllabs))
	Else
	   (select top 1 CLIAnumber from tbllabs)
	End as CLIA, 
    dbo.B_GetCPTPaidAmt(b.Accession, b.CPTcode, b.OrderedTestCode, isnull(b.Modifier, ''), b.GroupFlag) AS CPTPaid    
   , dbo.B_GetTotalBillBalance(b.Accession) as TotalBillBalance    

FROM         tblBill b INNER JOIN
                      tblBillAccessions a ON b.Accession = a.Accession
        LEFT OUTER join tblResultedTests rt ON rt.Accession = b.Accession and rt.ResultTest = b.OrderedTestCode and rt.Status = 'Final'   
        LEFT OUTER join tblPerformedTestsDefinitions ptd ON ptd.PerformedTest = rt.PerformedTest    
       left outer join tblMailoutLabs mol on mol.LabCode = ptd.MailoutLab    
WHERE     (b.Accession = @Accession) AND (substring(b.Status, 1, 4) = 'BILL') AND (b.TotalFeeAmt <> 0)
and dbo.B_GetCPTBalance(b.Accession, b.CPTcode, b.OrderedTestCode, isnull(b.Modifier, ''), b.GroupFlag) <> 0    
ORDER by MailoutFlag, PerformedBy, b.CPTCode, Modifier   

END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientForBillingEntry]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetPatientForBillingEntry]
 
	@PatientId as varchar(20)
AS
BEGIN

	DECLARE @PriInsuredID varchar(50)
	DECLARE @SecInsuredID varchar(50)
	SET @PriInsuredID = '*' + @PatientId + 'P'
	SET @SecInsuredID = '*' + @PatientId + 'S'

	SELECT a.PatientId, a.ptLastName as LastName, a.ptFirstName as Firstname, a.ptMiddleName as MiddleName, a.ptDateOfBirth as DateofBirth , a.ptAddress1 as Address1, a.ptAddress2 as Address2, a.ptCity as City, 
			a.ptState as State, a.ptZip as Zip , a.ptSex As Sex, a.ptSSN as SSN, a.PTContactHomePhone, a.PTContactWorkPhone, a.PTContactCellPhone, a.PTContactEmail, a.PTContactFax,
			a.PrimaryInsuranceID, a.PrimaryInsuredID, a.PrimaryPatRelationtoIns, a.SecondaryInsuranceID, a.SecondaryInsuredID, a.SecondaryPatRelationtoIns
			

		FROM dbo.tblPatient a (NOLOCK) 

		
			WHERE a.PatientId = @Patientid
			
			
			--get information for primary insurance
	select ii.InsuredID as PrimaryInsuredID, ii.[Plan] , ii.Policy, ii.[Group], ii.Copay,  ii.Employer ,
	ii.InsuranceID, ic.Name as InsuranceName,
		ii.FirstName ,	ii.MiddleName ,	ii.LastName ,		ii.Address1 ,	ii.Address2 ,	ii.City ,	ii.[State] ,	ii.Zip ,
		ii.HomePhone ,	ii.WorkPhone ,	ii.CellPhone,	ii.Email ,	ii.Fax ,	ii.DateOfBirth ,	ii.Sex ,	ii.SSN 
	from dbo.tblInsuredInfo ii(nolock) 
	INNER JOIN dbo.tblInsuranceCompanies ic (nolock)
	ON ic.InsuranceCode = ii.InsuranceID
	where InsuredID like @PriInsuredID 
	--get information for secondary insurance
	select ii.InsuredID as SecondaryInsuredID, ii.[Plan] , ii.Policy, ii.[Group], ii.Copay,  ii.Employer ,
	ii.InsuranceID, ic.Name as InsuranceName,
		ii.FirstName ,	ii.MiddleName ,	ii.LastName ,		ii.Address1 ,	ii.Address2 ,	ii.City ,	ii.[State] ,	ii.Zip ,
		ii.HomePhone ,	ii.WorkPhone ,	ii.CellPhone,	ii.Email ,	ii.Fax ,	ii.DateOfBirth ,	ii.Sex ,	ii.SSN 
	from dbo.tblInsuredInfo ii(nolock) 
	INNER JOIN dbo.tblInsuranceCompanies ic (nolock)
	ON ic.InsuranceCode = ii.InsuranceID
	where InsuredID like @SecInsuredID 
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientIDFromEMR]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[spGetPatientIDFromEMR]
(
	@PatientIDEMR varchar(50),
	@ClientCode varchar(50),
	@PatientIDLIS varchar(10) output
)
As
BEGIN
	DECLARE @iCount as int
	SELECT @iCount = count(PatientIDLIS) FROM tblEMRPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
	IF @iCount = 0 
		BEGIN
			INSERT INTO dbo.tblEMRPatientID(PatientIDEMR, ClientCode)
			VALUES (@PatientIDEMR, @ClientCode)
			SET @PatientIDLIS = CONVERT(varchar(10), SCOPE_IDENTITY()) + 'EMR'
			UPDATE dbo.tblEMRPatientID SET PatientIDLIS = @PatientIDLIS WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
	ELSE
		BEGIN
			SELECT TOP 1 @PatientIDLIS = PatientIDLIS FROM tblEMRPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
END


GO
/****** Object:  StoredProcedure [dbo].[spGetPatientIDFromEMRAthena]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE Procedure [dbo].[spGetPatientIDFromEMRAthena]
(
	@PatientIDEMR varchar(50),
	@ClientCode varchar(50),
	@PatientIDLIS varchar(10) output
)
As
BEGIN
	DECLARE @iCount as int
	SELECT @iCount = count(PatientIDLIS) FROM tblEMRCureMDPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
	IF @iCount = 0 
		BEGIN
			INSERT INTO dbo.tblEMRAthenaPatientID(PatientIDEMR, ClientCode)
			VALUES (@PatientIDEMR, @ClientCode)
			SET @PatientIDLIS = CONVERT(varchar(10), SCOPE_IDENTITY()) + 'EMRAthena'
			UPDATE dbo.tblEMRAthenaPatientID SET PatientIDLIS = @PatientIDLIS WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
	ELSE
		BEGIN
			SELECT TOP 1 @PatientIDLIS = PatientIDLIS FROM tblEMRAthenaPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientIDFromEMRChangeHealthcare]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE Procedure [dbo].[spGetPatientIDFromEMRChangeHealthcare]
(
	@PatientIDEMR varchar(50),
	@ClientCode varchar(50),
	@PatientIDLIS varchar(10) output
)
As
BEGIN
	DECLARE @iCount as int
	SELECT @iCount = count(PatientIDLIS) FROM tblEMRChangeHealthcarePatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
	IF @iCount = 0 
		BEGIN
			INSERT INTO dbo.tblEMRChangeHealthcarePatientID(PatientIDEMR, ClientCode)
			VALUES (@PatientIDEMR, @ClientCode)
			SET @PatientIDLIS = CONVERT(varchar(10), SCOPE_IDENTITY()) + 'EMRCH'
			UPDATE dbo.tblEMRChangeHealthcarePatientID SET PatientIDLIS = @PatientIDLIS WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
	ELSE
		BEGIN
			SELECT TOP 1 @PatientIDLIS = PatientIDLIS FROM tblEMRChangeHealthcarePatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
END

GO
/****** Object:  StoredProcedure [dbo].[spGetPatientIDFromEMRCureMD]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE Procedure [dbo].[spGetPatientIDFromEMRCureMD]
(
	@PatientIDEMR varchar(50),
	@ClientCode varchar(50),
	@PatientIDLIS varchar(10) output
)
As
BEGIN
	DECLARE @iCount as int
	SELECT @iCount = count(PatientIDLIS) FROM tblEMRCureMDPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
	IF @iCount = 0 
		BEGIN
			INSERT INTO dbo.tblEMRCureMDPatientID(PatientIDEMR, ClientCode)
			VALUES (@PatientIDEMR, @ClientCode)
			SET @PatientIDLIS = CONVERT(varchar(10), SCOPE_IDENTITY()) + 'EMRCureMD'
			UPDATE dbo.tblEMRCureMDPatientID SET PatientIDLIS = @PatientIDLIS WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
	ELSE
		BEGIN
			SELECT TOP 1 @PatientIDLIS = PatientIDLIS FROM tblEMRCureMDPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientIDFromEMREClinical]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE Procedure [dbo].[spGetPatientIDFromEMREClinical]
(
	@PatientIDEMR varchar(50),
	@ClientCode varchar(50),
	@PatientIDLIS varchar(10) output
)
As
BEGIN
	DECLARE @iCount as int
	SELECT @iCount = count(PatientIDLIS) FROM tblEMREClinicalPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
	IF @iCount = 0 
		BEGIN
			INSERT INTO dbo.tblEMREClincalPatientID(PatientIDEMR, ClientCode)
			VALUES (@PatientIDEMR, @ClientCode)
			SET @PatientIDLIS = CONVERT(varchar(10), SCOPE_IDENTITY()) + 'EMREClincal'
			UPDATE dbo.tblEMREClincalPatientID SET PatientIDLIS = @PatientIDLIS WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
	ELSE
		BEGIN
			SELECT TOP 1 @PatientIDLIS = PatientIDLIS FROM tblEMREClincalPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
END

GO
/****** Object:  StoredProcedure [dbo].[spGetPatientIDFromEMREHI]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE Procedure [dbo].[spGetPatientIDFromEMREHI]
(
	@PatientIDEMR varchar(50),
	@ClientCode varchar(50),
	@PatientIDLIS varchar(10) output
)
As
BEGIN
	DECLARE @iCount as int
	SELECT @iCount = count(PatientIDLIS) FROM tblEMREHIPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
	IF @iCount = 0 
		BEGIN
			INSERT INTO dbo.tblEMREHIPatientID(PatientIDEMR, ClientCode)
			VALUES (@PatientIDEMR, @ClientCode)
			SET @PatientIDLIS = CONVERT(varchar(10), SCOPE_IDENTITY()) + 'EMREHI'
			UPDATE dbo.tblEMREHIPatientID SET PatientIDLIS = @PatientIDLIS WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
	ELSE
		BEGIN
			SELECT TOP 1 @PatientIDLIS = PatientIDLIS FROM tblEMREHIPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientIDFromEMRElation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE Procedure [dbo].[spGetPatientIDFromEMRElation]
(
	@PatientIDEMR varchar(50),
	@ClientCode varchar(50),
	@PatientIDLIS varchar(10) output
)
As
BEGIN
	DECLARE @iCount as int
	SELECT @iCount = count(PatientIDLIS) FROM tblEMRElationPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
	IF @iCount = 0 
		BEGIN
			INSERT INTO dbo.tblEMRElationPatientID(PatientIDEMR, ClientCode)
			VALUES (@PatientIDEMR, @ClientCode)
			SET @PatientIDLIS = CONVERT(varchar(10), SCOPE_IDENTITY()) + 'EMRElation'
			UPDATE dbo.tblEMRElationPatientID SET PatientIDLIS = @PatientIDLIS WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
	ELSE
		BEGIN
			SELECT TOP 1 @PatientIDLIS = PatientIDLIS FROM tblEMRElationPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientIDFromEMRMDLAND]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE Procedure [dbo].[spGetPatientIDFromEMRMDLAND]
(
	@PatientIDEMR varchar(50),
	@ClientCode varchar(50),
	@PatientIDLIS varchar(10) output
)
As
BEGIN
	DECLARE @iCount as int
	SELECT @iCount = count(PatientIDLIS) FROM tblEMRMDLANDPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
	IF @iCount = 0 
		BEGIN
			INSERT INTO dbo.tblEMRMDLANDPatientID(PatientIDEMR, ClientCode)
			VALUES (@PatientIDEMR, @ClientCode)
			SET @PatientIDLIS = CONVERT(varchar(10), SCOPE_IDENTITY()) + 'EMRMDLAND'
			UPDATE dbo.tblEMRMDLANDPatientID SET PatientIDLIS = @PatientIDLIS WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
	ELSE
		BEGIN
			SELECT TOP 1 @PatientIDLIS = PatientIDLIS FROM tblEMRMDLANDPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
END

GO
/****** Object:  StoredProcedure [dbo].[spGetPatientIDFromEMRMedGen]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE Procedure [dbo].[spGetPatientIDFromEMRMedGen]
(
	@PatientIDEMR varchar(50),
	@ClientCode varchar(50),
	@PatientIDLIS varchar(10) output
)
As
BEGIN
	DECLARE @iCount as int
	SELECT @iCount = count(PatientIDLIS) FROM tblEMRMedGenPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
	IF @iCount = 0 
		BEGIN
			INSERT INTO dbo.tblEMRMedGenPatientID(PatientIDEMR, ClientCode)
			VALUES (@PatientIDEMR, @ClientCode)
			SET @PatientIDLIS = CONVERT(varchar(10), SCOPE_IDENTITY()) + 'EMRMedGen'
			UPDATE dbo.tblEMRMedGenPatientID SET PatientIDLIS = @PatientIDLIS WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
	ELSE
		BEGIN
			SELECT TOP 1 @PatientIDLIS = PatientIDLIS FROM tblEMRMedGenPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientIDFromEMRNextGen]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE Procedure [dbo].[spGetPatientIDFromEMRNextGen]
(
	@PatientIDEMR varchar(50),
	@ClientCode varchar(50),
	@PatientIDLIS varchar(10) output
)
As
BEGIN
	DECLARE @iCount as int
	SELECT @iCount = count(PatientIDLIS) FROM tblEMRNextGenPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
	IF @iCount = 0 
		BEGIN
			INSERT INTO dbo.tblEMRNextGenPatientID(PatientIDEMR, ClientCode)
			VALUES (@PatientIDEMR, @ClientCode)
			SET @PatientIDLIS = CONVERT(varchar(10), SCOPE_IDENTITY()) + 'EMRNextGen'
			UPDATE dbo.tblEMRNextGenPatientID SET PatientIDLIS = @PatientIDLIS WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
	ELSE
		BEGIN
			SELECT TOP 1 @PatientIDLIS = PatientIDLIS FROM tblEMRNextGenPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
END

GO
/****** Object:  StoredProcedure [dbo].[spGetPatientIDFromEMROptiMantra]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE Procedure [dbo].[spGetPatientIDFromEMROptiMantra]
(
	@PatientIDEMR varchar(50),
	@ClientCode varchar(50),
	@PatientIDLIS varchar(10) output
)
As
BEGIN
	DECLARE @iCount as int
	SELECT @iCount = count(PatientIDLIS) FROM tblEMROptiMantraPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
	IF @iCount = 0 
		BEGIN
			INSERT INTO dbo.tblEMROptiMantraPatientID(PatientIDEMR, ClientCode)
			VALUES (@PatientIDEMR, @ClientCode)
			SET @PatientIDLIS = CONVERT(varchar(10), SCOPE_IDENTITY()) + 'EMROptiMantra'
			UPDATE dbo.tblEMROptiMantraPatientID SET PatientIDLIS = @PatientIDLIS WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
	ELSE
		BEGIN
			SELECT TOP 1 @PatientIDLIS = PatientIDLIS FROM tblEMROptiMantraPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientIDFromEMRPracticeFusion]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE Procedure [dbo].[spGetPatientIDFromEMRPracticeFusion]
(
	@PatientIDEMR varchar(50),
	@ClientCode varchar(50),
	@PatientIDLIS varchar(10) output
)
As
BEGIN
	DECLARE @iCount as int
	SELECT @iCount = count(PatientIDLIS) FROM tblEMRPracticeFusionPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
	IF @iCount = 0 
		BEGIN
			INSERT INTO dbo.tblEMRPracticeFusionPatientID(PatientIDEMR, ClientCode)
			VALUES (@PatientIDEMR, @ClientCode)
			SET @PatientIDLIS = CONVERT(varchar(10), SCOPE_IDENTITY()) + 'EMRPF'
			UPDATE dbo.tblEMRPracticeFusionPatientID SET PatientIDLIS = @PatientIDLIS WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
	ELSE
		BEGIN
			SELECT TOP 1 @PatientIDLIS = PatientIDLIS FROM tblEMRPracticeFusionPatientID WHERE (PatientIDEMR = @PatientIDEMR AND ClientCode = @ClientCode)
		END
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientIDs]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*** 
--Get Temporary patientIDs
DECLARE @ID varchar(50)
SET @ID = '0369'
EXEC [dbo].[spGetPatientIDs] @ID
***/
CREATE PROCEDURE [dbo].[spGetPatientIDs]
(
	@ID varchar(50)
)
As
BEGIN

	SELECT PatientIDs 
	FROM dbo.tblTempPatientIDs with (NOLOCK)
	WHERE ID = @ID

END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPatientInfo]
 
	@PatientId as varchar(20)
AS
BEGIN
	SELECT *
			

		FROM dbo.tblPatient a (NOLOCK) 

		
			WHERE a.PatientId = @Patientid
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientInfobyAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--=============================================
 --Author:		<Gladson>
 --Create date: <9/30/2016>
 --Description:	<demographic information related to the patient>
 --=============================================
CREATE PROCEDURE [dbo].[spGetPatientInfobyAccession]	
	@Accession as varchar(100)
AS
BEGIN
	select pt.ptLastName as lastname ,pt.ptFirstName as firstname,pt.ptSex as gender, convert(varchar(8),pt.ptDateofBirth,112) as birthdate, 
	pt.PatientId as PatientID, phs.FullName AS PhysicianName, CollectionDate, acc.ClientCode,
		convert(varchar(10),pt.ptDateofBirth,101) as birthdateFormatslash, phs.FirstName as PhyFirstname, phs.LastName as PhyLastname
	
	from tblAccessions acc
	inner join tblPatient pt ON acc.PatientID = pt.PatientId
	INNER JOIN tblPhysicians phs ON acc.PhysicianCode = phs.PhysicianCode
	where acc.accession = @Accession
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientInsuranceHistoryByPatientID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:                            <Author,,Name>
-- Create date: <Create Date,,>
-- Description:    <Description,,>
-- =============================================
create PROCEDURE [dbo].[spGetPatientInsuranceHistoryByPatientID] 
                 @PatientID as varchar(100)
AS
BEGIN
                SET NOCOUNT ON;
                
                SELECT ba.Accession, ba.QSSCreatedDate as BillDate, i.Name as InsuranceName,
                CASE WHEN ba.CurrentBillTo = 'Secondary' THEN aii.SecondaryFirstName + ' ' + aii.SecondaryLastName ELSE aii.PrimaryFirstName + ' ' + aii.PrimaryLastName END AS InsuredName,
                CASE WHEN ba.CurrentBillTo = 'Secondary' THEN aii.SecondaryPolicy ELSE aii.PrimaryPolicy END AS Policy,
                ba.CurrentBillType as BillType, 
                --ba.DiagnosisDataXML
                
                isnull(ba.DiagnosisDataXML.value('(/QSSLISOrderRecord/ICD9codes/diagnosiscode/@code)[1]', 'varchar(max)'), '') + '|' + 
                isnull(ba.DiagnosisDataXML.value('(/QSSLISOrderRecord/ICD9codes/diagnosiscode/@code)[2]', 'varchar(max)'), '') + '|' +
                isnull(ba.DiagnosisDataXML.value('(/QSSLISOrderRecord/ICD9codes/diagnosiscode/@code)[3]', 'varchar(max)'), '') + '|' +
                isnull(ba.DiagnosisDataXML.value('(/QSSLISOrderRecord/ICD9codes/diagnosiscode/@code)[4]', 'varchar(max)'), '') AS Diagnosis
                , dbo.B_GetTotalBillBalance(ba.Accession) as Balance, ba.ReceiveDate as RequisitionDate
                from tblBillAccessions ba
                inner join tblAccessionInsuranceInfo aii
                on aii.Accession = ba.Accession
                left outer join tblInsuranceCompanies i
                on i.InsuranceCode = 
                CASE WHEN ba.CurrentBillTo = 'Secondary' THEN aii.SecondaryInsuranceID ELSE aii.PrimaryInsuranceID END 
                where ba.PatientID = @PatientID
                
--CASE WHEN a.CurrentBillTo = 'Primary' THEN COALESCE(NULLIF(aii.PrimaryInsuranceID, ''), p.PrimaryInsuranceID) ELSE COALESCE(NULLIF(aii.SecondaryInsuranceID, ''), p.SecondaryInsuranceID) END AS Ins_Code, 
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientListReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPatientListReport] 

@StartDate datetime ,
@EndDate datetime

AS
BEGIN

Select * from vPatientListReport
WHERE     (ReceiveDate BETWEEN @StartDate AND @EndDate)
ORDER BY ReceiveDate, PatientName



END


GO
/****** Object:  StoredProcedure [dbo].[spGetPatientNamebyAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPatientNamebyAccession]	
	@Accession as varchar(100)
AS
BEGIN
	select pt.ptLastName as lastname ,pt.ptFirstName as firstname,pt.ptSex as Gender,pt.ptDateofBirth
	
	from tblAccessions acc (nolock) 

	inner join tblPatient pt
	on acc.PatientID = pt.PatientId
	where acc.accession = @Accession
	

	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatients]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetPatients]
	@LabCode as varchar(20),
	@ClientCode as varchar(20)
AS
BEGIN	
	SELECT a.patientid, a.lastname, a.firstname, a.dateofbirth, a.[address], a.city, 
			a.[state], a.zip, a.sex, a.telephone, a.additionalfieldinfo, a.InsuranceId, 
			b.name as InsuranceCompany, b.InsuranceCode, a.patientid + ' - (' + a.firstname + ' ' + a.lastname + ')' as patientIdName

		FROM dbo.tblPatients a with (NOLOCK) 

		left outer join tblinsurancecompanies b with (nolock) 
		on a.insuranceCompany = b.InsuranceCode and b.labcode = @labcode

		where a.labcode = @LabCode and
			a.clientCode = @ClientCode 
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientsToBill]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPatientsToBill]
			@BillTypeCode as varchar(100) = NULL,
			@ClaimType as varchar(20) = NULL
		
AS

DECLARE @tomorrow DATETIME 
SET @tomorrow = convert(varchar,dateadd(d, 1,getdate()),101)
DECLARE @filter varchar(max)
if @BillTypeCode = 'I' and @ClaimType is not null and @ClaimType <> ''
begin
	SELECT     a.Accession, p.ptLastName, p.ptFirstName,
					  --**************************** KEEP FOR FUTURE ************************** 
                      --af.AccessionCurrentBalance as Balance,
					  --***********************************************************************
					  dbo.B_GetTotalBillBalance(a.Accession) as AccessionBalance,
					  sum(dbo.B_GetCPTBalance(a.Accession, b.CPTCode, b.OrderedTestCode, b.Modifier, b.GroupFlag)) as CPTBalance,
                      convert(varchar, a.ReceiveDate, 101) as ReceiveDate, 
                      c.ClientName, btd.[Description] AS BillTypeName 
	FROM				tblPatient p
							INNER JOIN
							tblBillAccessions a ON p.PatientId = a.PatientID 
							--**************************** KEEP FOR FUTURE ************************** 
							--INNER JOIN
							--tblAccessionsFinancials af on a.Accession = af.Accession
							--***********************************************************************
							INNER JOIN
							tblBill b ON a.Accession = b.Accession 
							INNER JOIN
							tblClients c ON a.ClientCode = c.ClientCode 
							INNER JOIN
							tblBillTypeDefinitions btd ON b.BTcode = btd.BTcode 
							INNER JOIN
							tblAccessionInsuranceInfo ai on ai.accession = a.accession
							INNER JOIN
							tblInsuranceCompanies ic on ic.InsuranceCode = 
							CASE WHEN (a.CurrentBillTo is not null and a.CurrentBillTo = 'Secondary' )THEN ai.SecondaryInsuranceID ELSE ai.PrimaryInsuranceID END
							--ai.PrimaryInsuranceID
	WHERE 
	--*****************TEMP to restrict insurance with box 33 override*****************
	 --ic.InsuranceCode not in (select InsuranceCode from tblInsuranceCompanies WHERE  (HCFA33Override <> '') AND (HCFA33Override IS NOT NULL)) and
	 --*****************TEMP to restrict insurance with box 33 override END*****************
	--(a.Accession not in (select Accession from tblBillingECSBatchDetails)) and 
	(substring(b.[Status], 1, 4) = 'BILL') and b.TotalFeeAmt > 0 
	--AND (b.BTcode = @BillTypeCode)
	--and b.BTcode <> 'M-CAL'
	and btd.ClaimFlag = 1

	and isnull(b.NextBillDate, getdate()) < @tomorrow
		and a.Accession in (select Accession from tblArchiveReviewAccession where accession = a.Accession)
		and a.Accession not in (select Accession from tblMissingInformation where Accession = a.Accession)

	and dbo.B_GetTotalBillBalance(a.Accession) > 0
	--**************************** KEEP FOR FUTURE **************************
	--and af.AccessionCurrentBalance <> 0
	--***********************************************************************
	and ic.ClaimType = @ClaimType



	--and ic.InsuranceCode = '1051'
	----and a.Accession not in (select Accession from tblBill where Status = 'BILL' and Modifier = '90')
	--and a.Accession = '1912211030'


	GROUP BY a.Accession, p.ptLastName, p.ptFirstName, --, Balance,--af.AccessionCurrentBalance,
			a.ReceiveDate, c.ClientName, btd.Description
	ORDER BY 
	btd.[Description], 
	 p.ptLastName	
	 
end

GO
/****** Object:  StoredProcedure [dbo].[spGetPatientsToBillBatch]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPatientsToBillBatch]
			@BatchID as int
AS
BEGIN
SELECT     a.Accession, p.ptLastName, p.ptFirstName, 
                      
                     dbo.B_GetTotalBillBalance(a.Accession) as Balance,
                      
                --      isnull((select sum(TotalFeeAmt*Units) from tblBill where accession = a.Accession and btcode=a.CurrentBillType), 0.00) - isnull((select sum(PaymentAmt) from tblPayment where accession = a.accession and btcode=a.CurrentBillType), 0.00) - isnull((select sum(AdjustmentAmt) from tblPayment where accession = a.Accession and btcode=a.CurrentBillType), 0.00) as Balance,
                      
                      
                      a.ReceiveDate, 
                      c.ClientName, btd.Description AS BillTypeName
FROM				tblPatient p INNER JOIN
                      tblAccessions a ON p.PatientId = a.PatientID INNER JOIN
                      tblBill b ON a.Accession = b.Accession INNER JOIN
                      tblClients c ON a.ClientCode = c.ClientCode INNER JOIN
                      tblBillTypeDefinitions btd ON b.BTcode = btd.BTcode 
                      


WHERE	a.Accession in (select Accession from tblBillingECSBatchDetails where BatchID = @BatchID)
GROUP BY			a.Accession, p.ptLastName, p.ptFirstName,
                      a.ReceiveDate, c.ClientName, 
                      btd.Description, a.CurrentBillType
ORDER BY p.ptLastName	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientToBillbyAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPatientToBillbyAccession]
				@Accession varchar(50) 
		
AS
BEGIN

	SELECT		a.Accession, 
				p.ptLastName, 
				p.ptFirstName, 
				b.Status, 
				p.EntryDate, 
				SUM(b.TotalFeeAmt) AS TotalFeeAmt, 
				SUM(b.ExpAmt) AS ExpAmt, 
				dbo.B_GetTotalBillBalance(a.Accession)  as Balance,
				p.ptMiddleName, 
				p.ptDateOfBirth,
				p.ptSex, 
				p.ptNameSuffix, 
				p.ptAddress1, 
				p.ptAddress2, 
				p.ptCity, 
				p.ptState, 
				p.ptZip, 
				p.PrimaryInsuranceID, 
				p.PrimaryPatRelationtoIns, 
				p.PrimaryInsuredID, 
				phy.FirstName, 
				phy.MiddleName, 
				phy.LastName, 
				phy.FullName, 
				phy.NPI, 
				p.ptSSN, 
				p.btLastName, 
				p.btFirstName, 
				p.btMiddleName, 
				p.btNameSuffix, 
				p.btAddress1, 
				p.btAddress2, 
				p.btCity, 
				p.btState, 
				p.btZip, 
				p.btDateOfBirth, 
				p.btSex, 
				p.btSSN, 
				--ic.Name AS InsCo_Name, 
				--ic.Address AS InsCo_Address1, 
				--ic.Address2 AS InsCo_Address2, 
				--ic.City AS InsCo_City, 
				--ic.State AS InsCo_State, 
				--ic.Zip as InsCo_ZipCode, 
				a.CurrentBillTo, 
				a.CurrentBillType
				
							
			--	, isnull(ii.Policy, '') as Policy, isnull(ii.[Group], '') as [Group]
				
	FROM         tblPatient p INNER JOIN
						  tblAccessions a ON p.PatientId = a.PatientID INNER JOIN
						  tblBill b ON a.Accession = b.Accession INNER JOIN
						  tblPhysicians phy ON a.PhysicianCode = phy.PhysicianCode LEFT OUTER JOIN
						  tblInsuranceCompanies ic ON p.PrimaryInsuranceID = ic.InsuranceCode
						  
						  
						  --inner join tblInsuredInfo ii --(nolock)
						  --on ii.InsuredID = '*' + p.PatientId + 'P'

						  
	GROUP BY a.Accession, p.ptLastName, p.ptFirstName, b.Status, p.EntryDate, p.ptMiddleName, p.ptDateOfBirth, 
						  p.ptSex, p.ptNameSuffix, p.ptAddress1, p.ptAddress2, p.ptCity, p.ptState, p.ptZip, 
						  p.PrimaryInsuranceID, p.PrimaryPatRelationtoIns, p.PrimaryInsuredID, phy.FirstName, phy.MiddleName, 
						  phy.LastName, phy.FullName, phy.NPI, p.ptSSN, p.btLastName, p.btFirstName, p.btMiddleName, 
						  p.btNameSuffix, p.btAddress1, p.btAddress2, p.btCity, p.btState, p.btZip, p.btDateOfBirth, p.btSex, 
						  p.btSSN, ic.Name, ic.Address, ic.Address2, ic.City, 
						  ic.State, ic.Zip, a.CurrentBillTo, a.CurrentBillType
						  
						  --, ii.Policy, ii.[Group]
						  
	HAVING      (substring(b.[Status], 1, 4) = 'BILL') AND (a.Accession = @Accession)
	
	
	
	select ii.InsuredID, ii.FirstName, ii.MiddleName, ii.LastName, ii.InsuranceID, ii.Address1, ii.Address2, ii.City, ii.[State], ii.Zip, 
	ii.DateOfBirth, ii.Sex, ii.Policy, ii.[Group], ii.[Plan],
	ic.Name AS InsCo_Name, ic.Address AS InsCo_Address1, ic.Address2 AS InsCo_Address2, ic.City AS InsCo_City, ic.State AS InsCo_State, 
	ic.Zip as InsCo_ZipCode, ic.NEICNumber
	from tblInsuredInfo ii
	LEFT OUTER JOIN tblInsuranceCompanies ic 
	ON ii.InsuranceID = ic.InsuranceCode
	where InsuredID like '*' + (select PatientID from tblAccessions where Accession = @Accession)  + '%' 
	order by InsuredID
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPatientToBillbyAccession2]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetPatientToBillbyAccession2]
				@Accessions varchar(max) 
AS
BEGIN


	CREATE TABLE #TempList
	(
		cID varchar(100)
	)

	DECLARE @cID varchar(100), @Pos int
	SET @Accessions = LTRIM(RTRIM(@Accessions))+ '|'
	SET @Pos = CHARINDEX('|', @Accessions, 1)
	IF REPLACE(@Accessions, '|', '') <> ''
	BEGIN
		WHILE @Pos > 0
		BEGIN
			SET @cID = LTRIM(RTRIM(LEFT(@Accessions, @Pos - 1)))
			IF @cID <> ''
			BEGIN
					INSERT INTO #TempList (cID) VALUES (@cID)
			END
			SET @Accessions = RIGHT(@Accessions, LEN(@Accessions) - @Pos)
			SET @Pos = CHARINDEX('|', @Accessions, 1)

		END
	END	
	
SELECT		a.Accession, 
				p.ptLastName, 
				p.ptFirstName, 
				b.Status, 
				p.EntryDate, 
				SUM(b.TotalFeeAmt) AS TotalFeeAmt, 
				SUM(b.ExpAmt) AS ExpAmt, 
				dbo.B_GetTotalBillBalance(a.Accession) as Balance,
				--((sum(b.TotalFeeAmt*b.Units)) - 
				--(select isnull(sum(PaymentAmt), 0) from tblPayment where tblPayment.Accession = a.Accession and CPTcode <> 'Unallocated') - 
				--(select isnull(sum(AdjustmentAmt), 0) from tblPayment where tblPayment.Accession = a.Accession and CPTcode <> 'Unallocated'))  as Balance,
				
				p.ptMiddleName, 
				p.ptDateOfBirth,
				p.ptSex, 
				p.ptNameSuffix, 
				p.ptAddress1, 
				p.ptAddress2, 
				p.ptCity, 
				p.ptState, 
				p.ptZip, 
				p.PrimaryInsuranceID, 
				p.PrimaryPatRelationtoIns, 
				p.PrimaryInsuredID, 
				phy.FirstName, 
				phy.MiddleName, 
				phy.LastName, 
				phy.FullName, 
				phy.NPI, 
				p.ptSSN, 
				p.btLastName, 
				p.btFirstName, 
				p.btMiddleName, 
				p.btNameSuffix, 
				p.btAddress1, 
				p.btAddress2, 
				p.btCity, 
				p.btState, 
				p.btZip, 
				p.btDateOfBirth, 
				p.btSex, 
				p.btSSN, 
				--ic.Name AS InsCo_Name, 
				--ic.Address AS InsCo_Address1, 
				--ic.Address2 AS InsCo_Address2, 
				--ic.City AS InsCo_City, 
				--ic.State AS InsCo_State, 
				--ic.Zip as InsCo_ZipCode, 
				a.CurrentBillTo, 
				a.CurrentBillType
				, isnull(p.SecondaryPatRelationtoIns, '') as SecondaryPatRelationtoIns
				
				, ii.InsuredID, ii.FirstName, ii.MiddleName, ii.LastName, ii.InsuranceID, ii.Address1, ii.Address2, ii.City, ii.[State], ii.Zip, 
	ii.DateOfBirth, ii.Sex, ii.Policy, ii.[Group], ii.[Plan],
	ic.Name AS InsCo_Name, ic.Address AS InsCo_Address1, ic.Address2 AS InsCo_Address2, ic.City AS InsCo_City, ic.State AS InsCo_State, 
	ic.Zip as InsCo_ZipCode, ic.NEICNumber
			
	FROM         tblPatient p 
				INNER JOIN tblBillAccessions a 
				ON p.PatientId = a.PatientID 
				INNER JOIN tblBill b ON a.Accession = b.Accession 
				INNER JOIN tblPhysicians phy 				
				ON a.PhysicianCode = phy.PhysicianCode 
				inner join #TempList tmp
				on a.accession=tmp.cID
				left outer join tblInsuredInfo  ii 
				ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' or NULLIF ( a.CurrentBillTo , '' ) is NULL THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END 
				
				 LEFT OUTER JOIN tblInsuranceCompanies ic 
				on ic.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' or NULLIF ( a.CurrentBillTo , '' ) is NULL  THEN p.PrimaryInsuranceID ELSE p.SecondaryInsuranceID END 
				  
	GROUP BY a.Accession, p.ptLastName, p.ptFirstName, b.Status, p.EntryDate, p.ptMiddleName, p.ptDateOfBirth, 
						  p.ptSex, p.ptNameSuffix, p.ptAddress1, p.ptAddress2, p.ptCity, p.ptState, p.ptZip, 
						  p.PrimaryInsuranceID, p.PrimaryPatRelationtoIns, p.PrimaryInsuredID, phy.FirstName, phy.MiddleName, 
						  phy.LastName, phy.FullName, phy.NPI, p.ptSSN, p.btLastName, p.btFirstName, p.btMiddleName, 
						  p.btNameSuffix, p.btAddress1, p.btAddress2, p.btCity, p.btState, p.btZip, p.btDateOfBirth, p.btSex, 
						  p.btSSN, ic.Name, ic.Address, ic.Address2, ic.City, 
						  ic.State, ic.Zip, a.CurrentBillTo, a.CurrentBillType
						  , p.SecondaryPatRelationtoIns
						  , ii.InsuredID, ii.FirstName, ii.MiddleName, ii.LastName, ii.InsuranceID, ii.Address1, ii.Address2, ii.City, ii.[State], ii.Zip, 
	ii.DateOfBirth, ii.Sex, ii.Policy, ii.[Group], ii.[Plan],
	ic.Name, ic.Address, ic.Address2, ic.City, ic.State, 
	ic.Zip, ic.NEICNumber
					
	HAVING      (substring(b.[Status], 1, 4) = 'BILL')
	ORDER BY p.ptLastName
	
	
END


GO
/****** Object:  StoredProcedure [dbo].[spGetPatientToBillbyAccession3]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetPatientToBillbyAccession3]
				@Accessions varchar(max) 
AS
BEGIN


	CREATE TABLE #TempList
	(
		cID varchar(100)
	)

	DECLARE @cID varchar(100), @Pos int
	SET @Accessions = LTRIM(RTRIM(@Accessions))+ '|'
	SET @Pos = CHARINDEX('|', @Accessions, 1)
	IF REPLACE(@Accessions, '|', '') <> ''
	BEGIN
		WHILE @Pos > 0
		BEGIN
			SET @cID = LTRIM(RTRIM(LEFT(@Accessions, @Pos - 1)))
			IF @cID <> ''
			BEGIN
					INSERT INTO #TempList (cID) VALUES (@cID)
			END
			SET @Accessions = RIGHT(@Accessions, LEN(@Accessions) - @Pos)
			SET @Pos = CHARINDEX('|', @Accessions, 1)

		END
	END	
		
	SELECT		a.Accession, 
				a.CurrentBillTo, 
				a.CurrentBillType,
				b.Status, 
				SUM(b.TotalFeeAmt) AS TotalFeeAmt, 
				SUM(b.ExpAmt) AS ExpAmt, 
				dbo.B_GetTotalBillBalance(a.Accession) as Balance,
				--((sum(b.TotalFeeAmt*b.Units)) - 
				--(select isnull(sum(PaymentAmt), 0) from tblPayment where tblPayment.Accession = a.Accession and CPTcode <> 'Unallocated') - 
				--(select isnull(sum(AdjustmentAmt), 0) from tblPayment where tblPayment.Accession = a.Accession and CPTcode <> 'Unallocated'))  as Balance,
				  --as Balance,
				p.EntryDate, 
				p.ptLastName, 
				p.ptFirstName, 
				p.ptMiddleName, 
				p.ptDateOfBirth,
				p.ptSex, 
				p.ptNameSuffix, 
				p.ptAddress1, 
				p.ptAddress2, 
				p.ptCity, 
				p.ptState, 
				p.ptZip, 
				phy.FirstName, 
				phy.MiddleName, 
				phy.LastName, 
				phy.FullName, 
				phy.NPI, 
				p.ptSSN, 
				'' as NameSuffix, 
				aii.PrimaryLastName, 
				aii.PrimaryFirstName, 
				aii.PrimaryMiddleName, 
				aii.PrimaryAddress1, 
				aii.PrimaryAddress2, 
				aii.PrimaryCity, 
				aii.PrimaryState, 
				aii.PrimaryZip, 
				aii.PrimaryDateOfBirth, 
				aii.PrimarySex, 
				aii.PrimarySSN, 
				aii.PrimaryPolicy,
				aii.PrimaryGroup,
				aii.PrimaryPlan,
				aii.SecondaryLastName, 
				aii.SecondaryFirstName, 
				aii.SecondaryMiddleName, 
				aii.SecondaryAddress1, 
				aii.SecondaryAddress2, 
				aii.SecondaryCity, 
				aii.SecondaryState, 
				aii.SecondaryZip, 
				aii.SecondaryDateOfBirth, 
				aii.SecondarySex, 
				aii.SecondarySSN, 
				aii.SecondaryPolicy,
				aii.SecondaryGroup,
				aii.SecondaryPlan,
				aii.PrimaryPatRelationtoIns, 
				aii.SecondaryPatRelationtoIns,
				ic.Name AS InsCo_Name, 
				ic.Address AS InsCo_Address1, 
				ic.Address2 AS InsCo_Address2, 
				ic.City AS InsCo_City, 
				ic.State AS InsCo_State, 
				ic.Zip as InsCo_ZipCode, 
				ic.NEICNumber,
				ISNULL(a.CorrectedClaim, 0) as CorrectedClaim,
				a.CorrectedClaimReferenceNumber
			
	FROM        tblPatient p 
				INNER JOIN tblBillAccessions a 
				ON p.PatientId = a.PatientID 
				INNER JOIN tblBill b ON a.Accession = b.Accession 
				INNER JOIN tblPhysicians phy 				
				ON a.PhysicianCode = phy.PhysicianCode 
				inner join #TempList tmp
				on a.accession=tmp.cID
				inner join tblAccessionInsuranceInfo aii
				on aii.Accession = a.Accession	
				left outer join tblInsuredInfo  ii 
				ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' or NULLIF ( a.CurrentBillTo , '' ) is NULL THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END 
				LEFT OUTER JOIN tblInsuranceCompanies ic 
				on ic.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' or NULLIF ( a.CurrentBillTo , '' ) is NULL  THEN aii.PrimaryInsuranceID ELSE aii.SecondaryInsuranceID END 
						  
	GROUP BY a.Accession, p.ptLastName, p.ptFirstName, b.Status, p.EntryDate, p.ptMiddleName, p.ptDateOfBirth, 
						  p.ptSex, p.ptNameSuffix, p.ptAddress1, p.ptAddress2, p.ptCity, p.ptState, p.ptZip, 
						  phy.FirstName, phy.MiddleName, 
						  phy.LastName, phy.FullName, phy.NPI, p.ptSSN,  ic.Name, ic.Address, ic.Address2, ic.City, 
						  ic.State, ic.Zip, a.CurrentBillTo, a.CurrentBillType,
						  ic.Name, ic.Address, ic.Address2, ic.City, ic.State, ic.Zip, ic.NEICNumber,
						  aii.PrimaryLastName, aii.PrimaryFirstName, aii.PrimaryMiddleName, aii.PrimaryAddress1, aii.PrimaryAddress2,
						  aii.PrimaryCity, aii.PrimaryState, aii.PrimaryZip, aii.PrimaryDateOfBirth, aii.PrimarySex, aii.PrimarySSN, 
						  aii.PrimaryPolicy, aii.PrimaryGroup, aii.PrimaryPlan, aii.SecondaryLastName, aii.SecondaryFirstName, aii.SecondaryMiddleName, 
						  aii.SecondaryAddress1, aii.SecondaryAddress2, aii.SecondaryCity, aii.SecondaryState, aii.SecondaryZip, aii.SecondaryDateOfBirth, 
						  aii.SecondarySex, aii.SecondarySSN, aii.SecondaryPolicy, aii.SecondaryGroup, aii.SecondaryPlan, aii.PrimaryPatRelationtoIns, 
						  aii.SecondaryPatRelationtoIns, a.CorrectedClaim, a.CorrectedClaimReferenceNumber		
	HAVING      (substring(b.[Status], 1, 4) = 'BILL')
	ORDER BY p.ptLastName
END



GO
/****** Object:  StoredProcedure [dbo].[spGetPatientToBillbyAccessionWithBox33Override]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create PROCEDURE [dbo].[spGetPatientToBillbyAccessionWithBox33Override]
				@Accessions varchar(max) 
AS
BEGIN
--First get the data for all accessions that has box 33 override (electronic claim header) and create separate electronic claim files for each override
--Second get all other data

	CREATE TABLE #TempList
	(
		cID varchar(100)
	)

	DECLARE @cID varchar(100), @Pos int
	SET @Accessions = LTRIM(RTRIM(@Accessions))+ '|'
	SET @Pos = CHARINDEX('|', @Accessions, 1)
	IF REPLACE(@Accessions, '|', '') <> ''
	BEGIN
		WHILE @Pos > 0
		BEGIN
			SET @cID = LTRIM(RTRIM(LEFT(@Accessions, @Pos - 1)))
			IF @cID <> ''
			BEGIN
					INSERT INTO #TempList (cID) VALUES (@cID)
			END
			SET @Accessions = RIGHT(@Accessions, LEN(@Accessions) - @Pos)
			SET @Pos = CHARINDEX('|', @Accessions, 1)

		END
	END	
		
	SELECT		a.Accession, 
				a.CurrentBillTo, 
				a.CurrentBillType,
				b.Status, 
				SUM(b.TotalFeeAmt) AS TotalFeeAmt, 
				SUM(b.ExpAmt) AS ExpAmt, 
				dbo.B_GetTotalBillBalance(a.Accession) as Balance,
				--((sum(b.TotalFeeAmt*b.Units)) - 
				--(select isnull(sum(PaymentAmt), 0) from tblPayment where tblPayment.Accession = a.Accession and CPTcode <> 'Unallocated') - 
				--(select isnull(sum(AdjustmentAmt), 0) from tblPayment where tblPayment.Accession = a.Accession and CPTcode <> 'Unallocated'))  as Balance,
				  --as Balance,
				p.EntryDate, 
				p.ptLastName, 
				p.ptFirstName, 
				p.ptMiddleName, 
				p.ptDateOfBirth,
				p.ptSex, 
				p.ptNameSuffix, 
				p.ptAddress1, 
				p.ptAddress2, 
				p.ptCity, 
				p.ptState, 
				p.ptZip, 
				phy.FirstName, 
				phy.MiddleName, 
				phy.LastName, 
				phy.FullName, 
				phy.NPI, 
				p.ptSSN, 
				'' as NameSuffix, 
				aii.PrimaryLastName, 
				aii.PrimaryFirstName, 
				aii.PrimaryMiddleName, 
				aii.PrimaryAddress1, 
				aii.PrimaryAddress2, 
				aii.PrimaryCity, 
				aii.PrimaryState, 
				aii.PrimaryZip, 
				aii.PrimaryDateOfBirth, 
				aii.PrimarySex, 
				aii.PrimarySSN, 
				aii.PrimaryPolicy,
				aii.PrimaryGroup,
				aii.PrimaryPlan,
				aii.SecondaryLastName, 
				aii.SecondaryFirstName, 
				aii.SecondaryMiddleName, 
				aii.SecondaryAddress1, 
				aii.SecondaryAddress2, 
				aii.SecondaryCity, 
				aii.SecondaryState, 
				aii.SecondaryZip, 
				aii.SecondaryDateOfBirth, 
				aii.SecondarySex, 
				aii.SecondarySSN, 
				aii.SecondaryPolicy,
				aii.SecondaryGroup,
				aii.SecondaryPlan,
				aii.PrimaryPatRelationtoIns, 
				aii.SecondaryPatRelationtoIns,
				ic.Name AS InsCo_Name, 
				ic.Address AS InsCo_Address1, 
				ic.Address2 AS InsCo_Address2, 
				ic.City AS InsCo_City, 
				ic.State AS InsCo_State, 
				ic.Zip as InsCo_ZipCode, 
				ic.NEICNumber,
				ic.HCFA33Override,
				ic.HCFA33aOverride, 
				ic.HCFA33bOverride
			
	FROM        tblPatient p 
				INNER JOIN tblBillAccessions a 
				ON p.PatientId = a.PatientID 
				INNER JOIN tblBill b ON a.Accession = b.Accession 
				INNER JOIN tblPhysicians phy 				
				ON a.PhysicianCode = phy.PhysicianCode 
				inner join #TempList tmp
				on a.accession=tmp.cID
				inner join tblAccessionInsuranceInfo aii
				on aii.Accession = a.Accession	
				left outer join tblInsuredInfo  ii 
				ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' or NULLIF ( a.CurrentBillTo , '' ) is NULL THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END 
				INNER JOIN tblInsuranceCompanies ic 
				on ic.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' or NULLIF ( a.CurrentBillTo , '' ) is NULL  THEN aii.PrimaryInsuranceID ELSE aii.SecondaryInsuranceID END 
	WHERE ic.HCFA33Override <> '' AND ic.HCFA33Override IS NOT NULL									  
	GROUP BY a.Accession, p.ptLastName, p.ptFirstName, b.Status, p.EntryDate, p.ptMiddleName, p.ptDateOfBirth, 
						  p.ptSex, p.ptNameSuffix, p.ptAddress1, p.ptAddress2, p.ptCity, p.ptState, p.ptZip, 
						  phy.FirstName, phy.MiddleName, 
						  phy.LastName, phy.FullName, phy.NPI, p.ptSSN,  ic.Name, ic.Address, ic.Address2, ic.City, 
						  ic.State, ic.Zip, a.CurrentBillTo, a.CurrentBillType,
						  ic.Name, ic.Address, ic.Address2, ic.City, ic.State, ic.Zip, ic.NEICNumber,
						  aii.PrimaryLastName, aii.PrimaryFirstName, aii.PrimaryMiddleName, aii.PrimaryAddress1, aii.PrimaryAddress2,
						  aii.PrimaryCity, aii.PrimaryState, aii.PrimaryZip, aii.PrimaryDateOfBirth, aii.PrimarySex, aii.PrimarySSN, 
						  aii.PrimaryPolicy, aii.PrimaryGroup, aii.PrimaryPlan, aii.SecondaryLastName, aii.SecondaryFirstName, aii.SecondaryMiddleName, 
						  aii.SecondaryAddress1, aii.SecondaryAddress2, aii.SecondaryCity, aii.SecondaryState, aii.SecondaryZip, aii.SecondaryDateOfBirth, 
						  aii.SecondarySex, aii.SecondarySSN, aii.SecondaryPolicy, aii.SecondaryGroup, aii.SecondaryPlan, aii.PrimaryPatRelationtoIns, 
						  aii.SecondaryPatRelationtoIns, ic.HCFA33Override, ic.HCFA33aOverride, ic.HCFA33bOverride, ic.InsuranceCode
	HAVING      (substring(b.[Status], 1, 4) = 'BILL')
	
	ORDER BY ic.HCFA33Override, ic.InsuranceCode, p.ptLastName




	SELECT		a.Accession, 
				a.CurrentBillTo, 
				a.CurrentBillType,
				b.Status, 
				SUM(b.TotalFeeAmt) AS TotalFeeAmt, 
				SUM(b.ExpAmt) AS ExpAmt, 
				dbo.B_GetTotalBillBalance(a.Accession) as Balance,
				--((sum(b.TotalFeeAmt*b.Units)) - 
				--(select isnull(sum(PaymentAmt), 0) from tblPayment where tblPayment.Accession = a.Accession and CPTcode <> 'Unallocated') - 
				--(select isnull(sum(AdjustmentAmt), 0) from tblPayment where tblPayment.Accession = a.Accession and CPTcode <> 'Unallocated'))  as Balance,
				  --as Balance,
				p.EntryDate, 
				p.ptLastName, 
				p.ptFirstName, 
				p.ptMiddleName, 
				p.ptDateOfBirth,
				p.ptSex, 
				p.ptNameSuffix, 
				p.ptAddress1, 
				p.ptAddress2, 
				p.ptCity, 
				p.ptState, 
				p.ptZip, 
				phy.FirstName, 
				phy.MiddleName, 
				phy.LastName, 
				phy.FullName, 
				phy.NPI, 
				p.ptSSN, 
				'' as NameSuffix, 
				aii.PrimaryLastName, 
				aii.PrimaryFirstName, 
				aii.PrimaryMiddleName, 
				aii.PrimaryAddress1, 
				aii.PrimaryAddress2, 
				aii.PrimaryCity, 
				aii.PrimaryState, 
				aii.PrimaryZip, 
				aii.PrimaryDateOfBirth, 
				aii.PrimarySex, 
				aii.PrimarySSN, 
				aii.PrimaryPolicy,
				aii.PrimaryGroup,
				aii.PrimaryPlan,
				aii.SecondaryLastName, 
				aii.SecondaryFirstName, 
				aii.SecondaryMiddleName, 
				aii.SecondaryAddress1, 
				aii.SecondaryAddress2, 
				aii.SecondaryCity, 
				aii.SecondaryState, 
				aii.SecondaryZip, 
				aii.SecondaryDateOfBirth, 
				aii.SecondarySex, 
				aii.SecondarySSN, 
				aii.SecondaryPolicy,
				aii.SecondaryGroup,
				aii.SecondaryPlan,
				aii.PrimaryPatRelationtoIns, 
				aii.SecondaryPatRelationtoIns,
				ic.Name AS InsCo_Name, 
				ic.Address AS InsCo_Address1, 
				ic.Address2 AS InsCo_Address2, 
				ic.City AS InsCo_City, 
				ic.State AS InsCo_State, 
				ic.Zip as InsCo_ZipCode, 
				ic.NEICNumber
			
	FROM        tblPatient p 
				INNER JOIN tblBillAccessions a 
				ON p.PatientId = a.PatientID 
				INNER JOIN tblBill b ON a.Accession = b.Accession 
				INNER JOIN tblPhysicians phy 				
				ON a.PhysicianCode = phy.PhysicianCode 
				inner join #TempList tmp
				on a.accession=tmp.cID
				inner join tblAccessionInsuranceInfo aii
				on aii.Accession = a.Accession	
				left outer join tblInsuredInfo  ii 
				ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' or NULLIF ( a.CurrentBillTo , '' ) is NULL THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END 
				LEFT OUTER JOIN tblInsuranceCompanies ic 
				on ic.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' or NULLIF ( a.CurrentBillTo , '' ) is NULL  THEN aii.PrimaryInsuranceID ELSE aii.SecondaryInsuranceID END 
	WHERE a.accession not in (
	--SAME AS the first selection
	SELECT	distinct	a.Accession
			
	FROM        tblPatient p 
				INNER JOIN tblBillAccessions a 
				ON p.PatientId = a.PatientID 
				INNER JOIN tblBill b ON a.Accession = b.Accession 
				INNER JOIN tblPhysicians phy 				
				ON a.PhysicianCode = phy.PhysicianCode 
				inner join #TempList tmp
				on a.accession=tmp.cID
				inner join tblAccessionInsuranceInfo aii
				on aii.Accession = a.Accession	
				left outer join tblInsuredInfo  ii 
				ON ii.InsuredID = CASE WHEN a.CurrentBillTo = 'Primary' or NULLIF ( a.CurrentBillTo , '' ) is NULL THEN '*' + p.PatientId + 'P' ELSE '*' + p.PatientId + 'S' END 
				INNER JOIN tblInsuranceCompanies ic 
				on ic.InsuranceCode = CASE WHEN a.CurrentBillTo = 'Primary' or NULLIF ( a.CurrentBillTo , '' ) is NULL  THEN aii.PrimaryInsuranceID ELSE aii.SecondaryInsuranceID END 
	WHERE ic.HCFA33Override <> '' AND ic.HCFA33Override IS NOT NULL										  
	GROUP BY a.Accession	, b.[Status]	
	HAVING      (substring(b.[Status], 1, 4) = 'BILL')
	)								  
	GROUP BY a.Accession, p.ptLastName, p.ptFirstName, b.Status, p.EntryDate, p.ptMiddleName, p.ptDateOfBirth, 
						  p.ptSex, p.ptNameSuffix, p.ptAddress1, p.ptAddress2, p.ptCity, p.ptState, p.ptZip, 
						  phy.FirstName, phy.MiddleName, 
						  phy.LastName, phy.FullName, phy.NPI, p.ptSSN,  ic.Name, ic.Address, ic.Address2, ic.City, 
						  ic.State, ic.Zip, a.CurrentBillTo, a.CurrentBillType,
						  ic.Name, ic.Address, ic.Address2, ic.City, ic.State, ic.Zip, ic.NEICNumber,
						  aii.PrimaryLastName, aii.PrimaryFirstName, aii.PrimaryMiddleName, aii.PrimaryAddress1, aii.PrimaryAddress2,
						  aii.PrimaryCity, aii.PrimaryState, aii.PrimaryZip, aii.PrimaryDateOfBirth, aii.PrimarySex, aii.PrimarySSN, 
						  aii.PrimaryPolicy, aii.PrimaryGroup, aii.PrimaryPlan, aii.SecondaryLastName, aii.SecondaryFirstName, aii.SecondaryMiddleName, 
						  aii.SecondaryAddress1, aii.SecondaryAddress2, aii.SecondaryCity, aii.SecondaryState, aii.SecondaryZip, aii.SecondaryDateOfBirth, 
						  aii.SecondarySex, aii.SecondarySSN, aii.SecondaryPolicy, aii.SecondaryGroup, aii.SecondaryPlan, aii.PrimaryPatRelationtoIns, 
						  aii.SecondaryPatRelationtoIns	
	HAVING      (substring(b.[Status], 1, 4) = 'BILL')
	
	
	ORDER BY p.ptLastName


END



GO
/****** Object:  StoredProcedure [dbo].[spGetPayers]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create PROCEDURE [dbo].[spGetPayers]
As
BEGIN

	
	SET NOCOUNT ON;


	SELECT Name + ' (' + InsuranceCode +')' AS Payer, InsuranceCode as Code
	FROM tblInsuranceCompanies 
	where Name is not null and Name <> ''
	UNION
	SELECT '' As Payer , '' As Code
	ORDER BY Payer asc
	
END


GO
/****** Object:  StoredProcedure [dbo].[spGetPayersForBiller]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





create PROCEDURE [dbo].[spGetPayersForBiller]
@Biller varchar(100)
AS
BEGIN

	
	SET NOCOUNT ON;


	SELECT a.Name + ' (' + a.InsuranceCode +')' AS Payer, a.InsuranceCode as Code
	FROM tblInsuranceCompanies a
	INNER JOIN tblCollectorInsuranceCodes b
	ON b.InsuranceCode = a.InsuranceCode
	WHERE b.UserID = @Biller
	and a.Name is not null and a.Name <> ''
	UNION
	SELECT '' As Payer , '' As Code
	ORDER BY Payer asc
	
END


GO
/****** Object:  StoredProcedure [dbo].[spGetPendingAccessionsToReview]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPendingAccessionsToReview]

AS
  
 
BEGIN 


		SELECT     ra.Accession, p.ptLastName + ',' + p.ptFirstName AS Name, c.ClientCode, c.ClientName, ra.QSSLastUpdatedByID, CASE WHEN EXISTS
							  (SELECT     rt.Status
								FROM          dbo.tblResultedTests rt(nolock)
								WHERE      rt.Accession = a.Accession AND (rt.Status = 'Pending' OR
													   rt.Status = 'Hold')) THEN 'Pending' ELSE 'Final' END AS 'Status', a.PreAccession, ph.PhysicianCode, ph.FullName AS PhysicianName, a.CollectionDate, 
						  p.ptDateOfBirth AS DOB, p.ptSex, c.Interface, p.PatientId
		
		from dbo.tblReviewAccession ra (nolock)
		inner join tblAccessions a (nolock)
		on ra.Accession=a.Accession
		inner join tblPatient p (nolock)
		on a.PatientID = p.PatientId
		inner join tblClients c 
		on a.ClientCode = c.ClientCode
		
		inner join tblPhysicians ph
		on a.PhysicianCode  = ph.PhysicianCode
                      


	ORDER BY ra.Accession


  END
GO
/****** Object:  StoredProcedure [dbo].[spGetPendingPatientReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 --=============================================
 --Author:		<Gladson>
 --Create date: <10/3/2016>
 --Description:	<changed to left join on tblbillTypeDefinitions>
 --             <@Client has client selection value = (All) Clients, SL = Single Client, ML = Multiple Clients>
 --=============================================
CREATE PROCEDURE [dbo].[spGetPendingPatientReport]

	@Client varchar(20),
	@StartDate datetime ,
	@EndDate datetime

AS
BEGIN
	IF @Client not like 'ALL'
  BEGIN  
	CREATE TABLE #TempList
		(
			cID varChar(100)
		)

		DECLARE @cID varchar(10), @Pos int
		SET @client = LTRIM(RTRIM(@client))+ '|'
		SET @Pos = CHARINDEX('|', @client, 1)
		IF REPLACE(@Client, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Client, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempList (cID) VALUES (@cID)
				END
				SET @Client = RIGHT(@Client, LEN(@Client) - @Pos)
				SET @Pos = CHARINDEX('|', @Client, 1)

			END
		END	
END

 
	IF @Client like 'ALL'
	begin
			select ROW_NUMBER()over (ORDER BY a.accession asc , p.ptLastName) as Rowid, a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName,
				   a.ClientCode,c.ClientName,
				  a.collectiondate, a.ReceiveDate as servicedate,btd.description as billType, DATEDIFF(DAY, a.receivedate, getdate()) as daysOld,
			
		       	'Status' = CASE
				        WHEN EXISTS (SELECT rt.Status 
							 FROM dbo.tblResultedTests rt (nolock)
						     WHERE rt.Accession = a.Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold' )) THEN 'Pending'
						 ELSE 'Final'
	            END,
	            
			'ResultTests' = 
				STUFF((SELECT '|' +CAST( InternalName as varchar(100)) 
				FROM         tblResultedTests b INNER JOIN
									  tblResultedTestsDefinitions ON b.ResultTest = tblResultedTestsDefinitions.TestCode AND 
									  b.Version = tblResultedTestsDefinitions.Version and b.Status = 'Pending'
				WHERE b.Accession = a.Accession 
					  FOR XML PATH('')), 1, 1, '')  		            
			 
			
			from tblAccessions a (nolock) 
			inner join tblPatient p (nolock)
			on a.PatientID = p.PatientId
			inner join tblClients c (nolock)
			on a.ClientCode = c.ClientCode
			
			inner join tblResultedTests rt
			on rt.Accession = a.Accession 
			
			left join dbo.tblbillTypeDefinitions btd (nolock)
			on a.currentbilltype = btd.btcode
			
			where (a.CollectionDate between @startdate and @enddate) and (rt.Status='Pending' or rt.Status = 'Hold' )
			group by a.Accession,p.ptLastName, p.ptFirstName,
				   a.ClientCode,c.ClientName,
				  a.collectiondate, a.ReceiveDate,btd.description
			order by a.accession asc , p.ptLastName
   end
    
  Else
    begin
    select ROW_NUMBER()over (ORDER BY a.accession asc , p.ptLastName) as Rowid, a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName,
				   a.ClientCode,c.ClientName,
				  a.collectiondate, a.ReceiveDate as servicedate,btd.description as billType, DATEDIFF(DAY, a.receivedate, getdate()) as daysOld,
			
		       	'Status' = CASE
				        WHEN EXISTS (SELECT rt.Status 
							 FROM dbo.tblResultedTests rt (nolock)
						     WHERE rt.Accession = a.Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold' )) THEN 'Pending'
						 ELSE 'Final'
	            END,
	            
	            'ResultTests' = 
				STUFF((SELECT '|' +CAST( InternalName as varchar(100)) 
				FROM         tblResultedTests b INNER JOIN
									  tblResultedTestsDefinitions ON b.ResultTest = tblResultedTestsDefinitions.TestCode AND 
									  b.Version = tblResultedTestsDefinitions.Version and b.Status = 'Pending'
				WHERE b.Accession = a.Accession 
					  FOR XML PATH('')), 1, 1, '')  	
			 
			
			from tblAccessions a (nolock) 
			inner join tblPatient p (nolock)
			on a.PatientID = p.PatientId
			inner join tblClients c (nolock)
			on a.ClientCode = c.ClientCode
			
			inner join tblResultedTests rt
			on rt.Accession = a.Accession 
			
			left join dbo.tblbillTypeDefinitions btd (nolock)
			on a.currentbilltype = btd.btcode
			
			JOIN 
		           #TempList t
	             	ON a.ClientCode  = t.cID  
			
			where (a.CollectionDate between @startdate and @enddate) and (rt.Status='Pending' or rt.Status = 'Hold' )
			group by a.Accession,p.ptLastName, p.ptFirstName,
				   a.ClientCode,c.ClientName,
				  a.collectiondate, a.ReceiveDate,btd.description
			order by a.accession asc , p.ptLastName
	end
 
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPendingPatientWorklist]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPendingPatientWorklist] 


@DateType varchar(20),
@StartDate datetime ,
@EndDate datetime,
@TestCodes varchar(500)

AS
 BEGIN
IF @TestCodes not like 'ALL'
  BEGIN  
	CREATE TABLE #TempList
		(
			TestId varChar(100)
		)

		DECLARE @TestId varchar(100), @Pos int
		SET @TestCodes = LTRIM(RTRIM(@TestCodes))+ '|'
		SET @Pos = CHARINDEX('|', @TestCodes, 1)
		IF REPLACE(@TestCodes, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @TestId = LTRIM(RTRIM(LEFT(@TestCodes, @Pos - 1)))
				IF @TestId <> ''
				BEGIN
					INSERT INTO #TempList (TestId) VALUES (@TestId)
				END
				SET @TestCodes = RIGHT(@TestCodes, LEN(@TestCodes) - @Pos)
				SET @Pos = CHARINDEX('|', @TestCodes, 1)

			END
		END	
END
 
IF @DateType like 'C' 
 
   IF @TestCodes like 'ALL'
        BEGIN	
			SELECT distinct ot.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, ot.orderedTest as TestCode, otd.description,
			 '' as PerformedTestDescription, otd.PerformedTestCode, acc.CollectionDate, acc.PlateID, acc.WellPosition 
			 
			 	FROM dbo.tblOrderedTests  ot (nolock)
				INNER JOIN dbo.tblAccessions acc (nolock)
				ON ot.Accession = acc.Accession
				INNER JOIN dbo.tblPatient pat (nolock)
				ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln (nolock)
				On cln.ClientCode = acc.ClientCode 
				INNER JOIN dbo.tblOrderedTestsDefinitions   otd (nolock)
				On otd.OrderedTest = ot.OrderedTest 
				INNER JOIN dbo.tblResultedTests rt (nolock)
				On rt.Accession = ot.Accession
				and  (rt.Status = 'Pending' or rt.Status = 'Hold' )
				
				Where  (acc.CollectionDate between @startdate and @enddate)
				
				order by acc.CollectionDate, PatientName
				
		END
        
		ELSE		   
		BEGIN  
 			SELECT distinct ot.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, ot.orderedTest as TestCode, otd.description,
			 '' as PerformedTestDescription, otd.PerformedTestCode, acc.CollectionDate, acc.PlateID, acc.WellPosition 
			 
			 	FROM dbo.tblOrderedTests  ot (nolock)
				INNER JOIN dbo.tblAccessions acc (nolock)
				ON ot.Accession = acc.Accession
				INNER JOIN dbo.tblPatient pat (nolock)
				ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln (nolock)
				On cln.ClientCode = acc.ClientCode 
				INNER JOIN dbo.tblOrderedTestsDefinitions   otd (nolock)
				On otd.OrderedTest = ot.OrderedTest
				INNER JOIN dbo.tblResultedTests rt (nolock)
				On rt.Accession = ot.Accession
				and  (rt.Status = 'Pending' or rt.Status = 'Hold' )
				
				INNER JOIN 
		           #TempList t
	             	ON ot.OrderedTest  = t.TestId
		
				Where  (acc.CollectionDate between @startdate and @enddate)
				order by acc.CollectionDate, PatientName
		   END	
		
ELSE 
	if  @DateType like 'R' 
  BEGIN
    IF @TestCodes like 'ALL' 
       BEGIN
			SELECT distinct ot.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, ot.orderedTest as TestCode, otd.description,
			 '' as PerformedTestDescription, otd.PerformedTestCode, acc.ReceiveDate, acc.PlateID, acc.WellPosition 
			 
			 	FROM dbo.tblOrderedTests  ot (nolock)
				INNER JOIN dbo.tblAccessions acc (nolock)
				ON ot.Accession = acc.Accession
				INNER JOIN dbo.tblPatient pat (nolock)
				ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln (nolock)
				On cln.ClientCode = acc.ClientCode 
				INNER JOIN dbo.tblOrderedTestsDefinitions   otd (nolock)
				On otd.OrderedTest = ot.OrderedTest
				INNER JOIN dbo.tblResultedTests rt (nolock)
				On rt.Accession = ot.Accession
				and  (rt.Status = 'Pending' or rt.Status = 'Hold' )
	
				Where  (acc.ReceiveDate  between @startdate and @enddate)
				order by acc.ReceiveDate, PatientName
        END 
      ELSE
        BEGIN
			SELECT distinct ot.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, ot.orderedTest as TestCode, otd.description,
			 '' as PerformedTestDescription, otd.PerformedTestCode, acc.ReceiveDate, acc.PlateID, acc.WellPosition 
			 
			 	FROM dbo.tblOrderedTests  ot (nolock)
				INNER JOIN dbo.tblAccessions acc (nolock)
				ON ot.Accession = acc.Accession
				INNER JOIN dbo.tblPatient pat (nolock)
				ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln (nolock)
				On cln.ClientCode = acc.ClientCode 
				INNER JOIN dbo.tblOrderedTestsDefinitions   otd (nolock)
				On otd.OrderedTest = ot.OrderedTest
				INNER JOIN dbo.tblResultedTests rt (nolock)
				On rt.Accession = ot.Accession
				and  (rt.Status = 'Pending' or rt.Status = 'Hold' )
				
				JOIN 
		           #TempList t
	             	ON ot.OrderedTest  = t.TestId
	             	 
				Where  (acc.ReceiveDate  between @startdate and @enddate)
				order by acc.ReceiveDate, PatientName 
        END
     END
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPerformedTestByOrderedTest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spGetPerformedTestByOrderedTest] 
	@OrderedTest varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT *
	FROM tblOrderedTestsDefinitions with (NOLOCK)
	WHERE OrderedTest =@OrderedTest  order by  ReportFlag desc , ActiveFlag desc
		
END





GO
/****** Object:  StoredProcedure [dbo].[spGetPerformedTestCount]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPerformedTestCount] 
	@clientCode as varchar(MAX),
	@numberClients as varchar(100),
	@outputType as varChar(100),
	@StartDate datetime,
	@EndDate datetime
	
AS

if @numberClients like 'ALL'
	Begin

		SET NOCOUNT ON;
		if @outputType like 'D'
			SELECT distinct cl.ClientCode as clientcode, cl.ClientName as clientname, ptd.PerformedTest as testcode, ptd.ExternalDescription testname, COUNT(ot.PerformedTest) as count
		 
		
				FROM dbo.tblOrderedTests  ot (NOLOCK)
				Inner Join dbo.tblPerformedTestsDefinitions ptd
				on ot.PerformedTest = ptd.performedtest
			
				Inner Join dbo.tblAccessions acc
				on ot.Accession = acc.Accession
			
				Inner Join dbo.tblClients cl (NOLOCK)
				on acc.ClientCode = cl.ClientCode
				
				AND  (acc.CollectionDate between @startdate and @enddate)
				
				group by cl.ClientName, cl.Clientcode, ptd.performedTest, ptd.ExternalDescription
				order by cl.ClientName asc
		else
			SELECT distinct ptd.PerformedTest as testcode, ptd.ExternalDescription testname, COUNT(ot.PerformedTest) as count
		 
		
				FROM dbo.tblOrderedTests  ot (NOLOCK)
				Inner Join dbo.tblPerformedTestsDefinitions ptd
				on ot.PerformedTest = ptd.performedtest
			
				Inner Join dbo.tblAccessions acc
				on ot.Accession = acc.Accession
			
				Inner Join dbo.tblClients cl (NOLOCK)
				on acc.ClientCode = cl.ClientCode
				
				AND  (acc.CollectionDate between @startdate and @enddate)
				
				group by ptd.performedTest, ptd.ExternalDescription
				order by ptd.performedTest asc
	End

else
	BEGIN
		SET NOCOUNT ON;
	
	
		CREATE TABLE #TempList
		(
			cID varChar(100)
		)

		DECLARE @cID varchar(10), @Pos int
		SET @clientCode = LTRIM(RTRIM(@clientCode))+ '|'
		SET @Pos = CHARINDEX('|', @clientCode, 1)
		IF REPLACE(@ClientCode, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@ClientCode, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempList (cID) VALUES (@cID)
				END
				SET @ClientCode = RIGHT(@ClientCode, LEN(@ClientCode) - @Pos)
				SET @Pos = CHARINDEX('|', @ClientCode, 1)

			END
		END	
		if @outputType like 'D'
			SELECT distinct cl.ClientCode as clientcode, cl.ClientName as clientname, ptd.PerformedTest as testcode, ptd.ExternalDescription testname, COUNT(ot.PerformedTest) as count
			 
			
				FROM dbo.tblOrderedTests  ot (NOLOCK)
				Inner Join dbo.tblPerformedTestsDefinitions ptd
				on ot.PerformedTest = ptd.performedtest
			
				Inner Join dbo.tblAccessions acc
				on ot.Accession = acc.Accession
				
				Inner Join dbo.tblClients cl (NOLOCK)
				on acc.ClientCode = cl.ClientCode
				
				JOIN 
				#TempList t
				ON cl.Clientcode = t.cID 
				
				AND  (acc.CollectionDate between @startdate and @enddate)
				
				group by cl.ClientName, cl.Clientcode, ptd.performedTest, ptd.ExternalDescription
				order by cl.ClientName asc
		else
			SELECT distinct ptd.PerformedTest as testcode, ptd.ExternalDescription testname, COUNT(ot.PerformedTest) as count
			 
			
				FROM dbo.tblOrderedTests  ot (NOLOCK)
				Inner Join dbo.tblPerformedTestsDefinitions ptd
				on ot.PerformedTest = ptd.performedtest
			
				Inner Join dbo.tblAccessions acc
				on ot.Accession = acc.Accession
				
				Inner Join dbo.tblClients cl (NOLOCK)
				on acc.ClientCode = cl.ClientCode
				
				JOIN 
				#TempList t
				ON cl.Clientcode = t.cID 
				
				AND  (acc.CollectionDate between @startdate and @enddate)
				
				group by ptd.performedTest, ptd.ExternalDescription
				order by ptd.performedTest asc
		
	END
GO
/****** Object:  StoredProcedure [dbo].[spGetPerformedTestforResultTest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [dbo].[spGetPerformedTestforResultTest] 
      @ResultTest varchar(100),
	  @Accession varchar(100)
AS
	
SET NOCOUNT ON;


SELECT rt.PerformedTest, MailoutFlag, MailoutLab
  FROM tblResultedTests rt 
  inner join tblPerformedTestsDefinitions ptd on
  ptd.PerformedTest = rt.PerformedTest  
	where accession = @Accession
	and ResultTest = @ResultTest




GO
/****** Object:  StoredProcedure [dbo].[spGetPerformedTestNames]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPerformedTestNames] 
	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT PerformedTest, InternalDescription
	FROM tblPerformedTestsDefinitions with (NOLOCK)
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPerformendTestInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPerformendTestInfo] 
	
	@PTest varchar(max)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT *
	FROM tblPerformedTestsDefinitions with (NOLOCK)
	WHERE PerformedTest = @PTest
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPerformTestForLabel]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPerformTestForLabel]
	@Accession varchar(100)

AS
  
 
BEGIN 



	Select OrderedTest, InstrumentCode from tblOrderedTestsDefinitions 
	Where OrderedTest in (Select Distinct(OrderedTest) from tblOrderedtests  where Accession = @Accession)
	Order by InstrumentCode, OrderedTest


END
GO
/****** Object:  StoredProcedure [dbo].[spGetPhysicianCodeFromNPI]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[spGetPhysicianCodeFromNPI]
 
	@PhysicianNPI varchar(100),
	@ClientCode varchar(20)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT tblPhysicians.PhysicianCode
	FROM tblPhysicians with (NOLOCK)
	INNER JOIN tblClientsPhysicians on tblClientsPhysicians.PhysicianCode = tblPhysicians.PhysicianCode  
	WHERE NPI = @PhysicianNPI and tblClientsPhysicians.ClientCode = @ClientCode
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPhysicianInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPhysicianInfo]
	
	@PhysicianCode as varchar(20)
AS
BEGIN
	select PhysicianCode, FullName , NPI, LastName, FirstName, MiddleName
		from tblPhysicians where 
		
	PhysicianCode = @PhysicianCode

		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPhysicianInfoMA]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPhysicianInfoMA] 
	
	@PhysicianCode varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT *
	FROM tblPhysicians with (NOLOCK)
	WHERE PhysicianCode = @PhysicianCode
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPhysiciansToSync]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetPhysiciansToSync]
	
AS
BEGIN
	select tblClientsPhysicians.ClientCode, tblPhysicians.PhysicianCode, tblPhysicians.FullName, tblPhysicians.IDocAvailable from tblPhysicians with (nolock) 
	inner join tblClientsPhysicians on tblPhysicians.PhysicianCode = tblClientsPhysicians.PhysicianCode
	WHERE NeedsSync = 1
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPostCashDenialHistory]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create PROCEDURE [dbo].[spGetPostCashDenialHistory] 
                @Accession varchar(50)
AS
BEGIN
                SELECT     Accession, FileName, 
                ptFirstName + ' ' + ptLastName as Patient, 
                CheckNumber, 
                CONVERT(varchar, CheckDate, 101) As CheckDate, 
                CPT_Code, 
                Units, 
                CPT_Charge, 
                CPT_Paid, 
                AdjustmentCode + AdjustmentReason as DenialCode, 
                AdjustmentAmount, 
                ICN, 
                Payer, 
                CONVERT(varchar, QSSCreatedDate, 101) As QSSCreatedDate
FROM         tblBillingTempRemitArchive
WHERE     Accession = @Accession
and AdjustmentAmount <> 0
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPostCashOrderData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetPostCashOrderData]	
	@Accession varchar(50)
AS
BEGIN
	
	
IF EXISTS( SELECT Accession from tblAccessions WHERE  Accession = @Accession)
	BEGIN
	
	select distinct acc.Accession, acc.ClientCode, acc.PatientID, pat.ptLastName + ' ' + pat.ptFirstName As Name, acc.CurrentBillType , Acc.CurrentBillTo, f.NextBillDate, acc.CoPayPostCash
	from dbo.tblBillAccessions  acc (nolock) 
	INNER JOIN dbo.tblPatient pat(nolock)
	ON acc.PatientID = pat.PatientId
	inner join tblBill f (nolock)
	on acc.accession = f.accession	
	where acc.Accession = @Accession
	
	End 
Else
	Begin
	select distinct acc.Accession, acc.ClientCode, '' as PatientID, c.ClientName As Name, acc.CurrentBillType , Acc.CurrentBillTo, f.NextBillDate, 
	acc.CoPayPostCash
	from dbo.tblBillAccessions  acc (nolock) 
	inner join tblBill f (nolock)
	on acc.accession = f.accession	
	inner join tblClients c (nolock)
	on acc.ClientCode = c.ClientCode
	where acc.Accession = @Accession
	End
	

select p.OrderedTest, p.CPTCode, p.BTCode, p.GroupFlag , p.Paid, p.CurrentPaid, p.Adjusted, p.CurrentAdj, 
p.Units, p.Expected, p.Fees, p.[Description], Balance, cast(ptRespFlag as bit) as ptRespFlag from 

	(
	select top 1000 p.OrderedTest, case when len(p.Modifier) > 0 then p.CPTCode + ':' + p.Modifier else p.CPTCode end as CPTCode, p.BTCode, p.GroupFlag,
	(select isnull(sum(PaymentAmt), 0) from tblPayment where accession = @Accession and CPTcode = p.CPTCode and OrderedTest = p.OrderedTest and Modifier = p.Modifier) /** and GroupFlag = p.GroupFlag) **/ as Paid,
	'0' as CurrentPaid,
	(select isnull(sum(AdjustmentAmt), 0) from tblPayment where accession = @Accession and CPTcode = p.CPTCode and OrderedTest = p.OrderedTest and Modifier = p.Modifier) /** and GroupFlag = p.GroupFlag) **/  as Adjusted, 
	'0' as CurrentAdj,
	ISNULL(max(f.Units), 0) as Units , ISNULL(max(f.ExpAmt), 0) as Expected , ISNULL(max(f.TotalFeeAmt),0) as Fees, ISNULL(max(f.[FeeDescription]),'') as [Description],
	( (select sum(totalfeeamt) from tblBill where accession = @Accession and CPTcode = p.CPTcode and OrderedTestCode = p.OrderedTest and Modifier = p.Modifier) --and GroupFlag = p.GroupFlag)
				- (select isnull(sum(PaymentAmt), 0) from tblPayment where accession = @Accession and CPTcode = p.CPTCode and OrderedTest = p.OrderedTest and Modifier = p.Modifier) --and GroupFlag = p.GroupFlag)
				- (select isnull(sum(AdjustmentAmt), 0) from tblPayment where accession = @Accession and CPTcode = p.CPTCode and OrderedTest = p.OrderedTest and Modifier = p.Modifier) /** and GroupFlag = p.GroupFlag) **/ ) as Balance,
	max(cast(isnull(p.ptRespFlag, 0) as smallint)) as ptRespFlag
	       
	        
	FROM dbo.tblPayment p (nolock)
	INNER JOIN dbo.tblBill f (nolock)
	on p.OrderedTest = f.OrderedTestCode
	      
	and p.BTcode = f.BTCode
	and p.CPTcode = f.CPTcode
	and p.Modifier = f.Modifier
	--and p.GroupFlag = f.GroupFlag
	        
	WHERE p.Accession = @Accession
	AND f.Accession = @Accession
	AND Upper(substring(f.[Status], 1, 4)) = 'BILL'

	Group By p.OrderedTest, p.CPTCode, p.Modifier, p.BTCode, p.GroupFlag
	ORDER BY p.OrderedTest, p.CPTCode, p.Modifier, p.BTCode, p.GroupFlag 
	 ) p


Union All

select p1.OrderedTest, 'Unallocated' as CPTCode, p1.BTCode, p1.GroupFlag,  p1.Paid, p1.CurrentPaid, p1.Adjusted, p1.CurrentAdj, 
p1.Units, p1.Expected, p1.Fees, p1.[Description], Balance, cast(ptRespFlag as bit) as ptRespFlag from 
	( Select top 1000 p.OrderedTest, p.CPTCode, p.Modifier, p.BTCode, p.GroupFlag,
	(select isnull(sum(PaymentAmt), 0) from tblPayment where accession = @Accession and CPTcode = p.CPTCode and OrderedTest = p.OrderedTest and Modifier = p.Modifier) /** and GroupFlag = p.GroupFlag) **/ as Paid,
	'0' as CurrentPaid,
	(select isnull(sum(AdjustmentAmt), 0) from tblPayment where accession = @Accession and CPTcode = p.CPTCode and OrderedTest = p.OrderedTest and Modifier = p.Modifier) /** and GroupFlag = p.GroupFlag) **/  as Adjusted, 
	'0' as CurrentAdj,
	ISNULL(max(f.Units), 0) as Units , ISNULL(max(f.ExpAmt), 0) as Expected , ISNULL(max(f.TotalFeeAmt),0) as Fees, ISNULL(max(f.[FeeDescription]),'') as [Description],
	( (select isnull(sum(totalfeeamt), 0) from tblBill where accession = @Accession and CPTcode = p.CPTcode and OrderedTestCode = p.OrderedTest and Modifier = p.Modifier) --and GroupFlag = p.GroupFlag)
				- (select isnull(sum(PaymentAmt), 0) from tblPayment where accession = @Accession and CPTcode = p.CPTCode and OrderedTest = p.OrderedTest and Modifier = p.Modifier) --and GroupFlag = p.GroupFlag)
				- (select isnull(sum(AdjustmentAmt), 0) from tblPayment where accession = @Accession and CPTcode = p.CPTCode and OrderedTest = p.OrderedTest and Modifier = p.Modifier) /** and GroupFlag = p.GroupFlag) **/ ) as Balance, 
	max(cast(isnull(p.ptRespFlag, 0) as smallint)) as ptRespFlag
	        
	FROM dbo.tblPayment p (nolock)
	INNER JOIN dbo.tblBill f (nolock)
	on p.OrderedTest = f.OrderedTestCode
	      
	and p.BTcode = f.BTCode
	and p.CPTcode = f.CPTcode
	and p.Modifier <> f.Modifier
	--and p.GroupFlag = f.GroupFlag
	        
	WHERE p.Accession = @Accession
	AND f.Accession = @Accession
	AND Upper(substring(f.[Status], 1, 4)) = 'BILL'
	AND f.CPTCode = 'Unallocated'
	        
	Group By p.OrderedTest, p.CPTCode, p.Modifier, p.BTCode, p.GroupFlag
	ORDER BY p.OrderedTest, p.CPTCode, p.Modifier, p.BTCode, p.GroupFlag 
	) p1

ORDER BY p.CPTCode, p.OrderedTest, p.BTCode, p.GroupFlag 
	        
select top 1 isnull(CheckNumber, '') as CheckNumber, isnull(convert(varchar, CheckDate, 101), '') as CheckDate, Payer   
from tblPayment where accession =   @Accession 
and (checknumber<>'' or checknumber is not null)
order by checkdate desc

END

GO
/****** Object:  StoredProcedure [dbo].[spGetPostCashPaymentDenialHistory]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[spGetPostCashPaymentDenialHistory]	
	@Accession varchar(50)
AS
BEGIN
	SELECT     Accession, FileName, 
	ptFirstName + ' ' + ptLastName as Patient, 
	CheckNumber, 
	CONVERT(varchar, CheckDate, 101) As CheckDate, 
	CPT_Code, 
	Units, 
	CPT_Charge, 
	CPT_Paid, 
	AdjustmentCode + AdjustmentReason as DenialCode, 
	AdjustmentAmount, 
	ICN, 
	Payer, 
	CONVERT(varchar, QSSCreatedDate, 101) As QSSCreatedDate
FROM         tblBillingTempRemitArchive
WHERE     Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPostCashPaymentHistory]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPostCashPaymentHistory]	
	@Accession varchar(50),
	@ClaimFlag bit = 0
AS
	
	Select D.OrderedTest, D.CPTCode, D.BTCode, D.Payment,  D.Adjustment ,
	        D.Units , D.Expected , D.Fees, D.[Description],
	        D.EntryDate, D.AdjustmentReason
	FROM (
	SELECT A.OrderedTest, A.CPTCode, A.BTCode, A.Payment,  A.Adjustment ,
	        A.Units , A.Expected , A.Fees, A.[Description],
	        A.EntryDate, A.AdjustmentReason
	 FROM (
	
	
	select TOP 1000 p.OrderedTest, p.CPTCode, p.BTCode, p.PaymentAmt As Payment,  p.AdjustmentAmt  as Adjustment ,
	        f.Units as Units , f.ExpAmt as Expected , f.TotalFeeAmt as Fees, f.[FeeDescription] as [Description],
	       p.EntryDate, p.AdjustmentReason
	        
	        FROM dbo.tblPayment p (nolock)
	        INNER JOIN dbo.tblBill f (nolock)
	        on p.OrderedTest = f.OrderedTestCode
	        and p.BTcode = f.BTCode
	        and p.CPTcode = f.CPTcode
	        and substring(f.[Status], 1, 4) = 'BILL'
	        
	       
	        WHERE p.Accession = @Accession
	        AND f.Accession = @Accession
	        AND ( (p.PaymentAmt <> 0 ) OR (p.AdjustmentAmt <> 0) or AdjustmentReason <> '' or AdjustmentReason is not null)
	        Order By p.OrderedTest, p.CPTCode, p.EntryDate
	
	)A
	Union
	SELECT B.OrderedTest, B.CPTCode, B.BTCode, B.Payment,  B.Adjustment ,
	        B.Units , B.Expected , B.Fees, B.[Description],
	        B.EntryDate, B.AdjustmentReason
	 FROM (
	 
	 
	 select TOP 1000 p.OrderedTest, p.CPTCode, p.BTCode, p.PaymentAmt As Payment,  p.AdjustmentAmt  as Adjustment ,
	        0 Units , 0 Expected , 0 Fees, 'Unallocated' as [Description],
	       p.EntryDate, p.AdjustmentReason
	        
	        FROM dbo.tblPayment p (nolock)
	        
	       
	        WHERE p.Accession = @Accession
	        and p.CPTcode = 'Unallocated'
	        AND ( (p.PaymentAmt <> 0 ) OR (p.AdjustmentAmt <> 0) )
	        Order By p.OrderedTest, p.CPTCode, p.EntryDate
	 
	 
	 )B
	 Union
	SELECT B1.OrderedTest, B1.CPTCode, B1.BTCode, B1.Payment,  B1.Adjustment ,
	        B1.Units , B1.Expected , B1.Fees, B1.[Description],
	        B1.EntryDate, B1.AdjustmentReason
	 FROM (
	 
	 
	 select TOP 1000 p.OrderedTest, p.CPTCode, p.BTCode, p.PaymentAmt As Payment,  p.AdjustmentAmt  as Adjustment ,
	        0 Units , 0 Expected , 0 Fees, 'Unassigned' as [Description],
	       p.EntryDate, p.AdjustmentReason
	        
	        FROM dbo.tblPayment p (nolock)
	        
	       
	        WHERE p.Accession = @Accession
	        AND ( (p.PaymentAmt <> 0 ) OR (p.AdjustmentAmt <> 0) )
			And p.CPTCode not in 
			(Select CPTCode from tblBill where Accession = @Accession)
	        Order By p.OrderedTest, p.CPTCode, p.EntryDate
	 
	 
	 )B1
	  Union
	SELECT C.OrderedTest, C.CPTCode, C.BTCode, C.Payment,  C.Adjustment ,
	        C.Units , C.Expected , C.Fees, C.[Description],
	        C.EntryDate, C.AdjustmentReason
	 FROM (
	 
	 
	 select TOP 1000 p.OrderedTest, p.CPTCode, p.BTCode, p.PaymentAmt As Payment,  p.AdjustmentAmt  as Adjustment ,
	        0 Units , 0 Expected , 0 Fees, 'ClientBill' as [Description],
	       p.EntryDate, p.AdjustmentReason
	        
	        FROM dbo.tblPayment p (nolock)
	        
	       
	        WHERE p.Accession = @Accession
	        and p.CPTcode = 'ClientBill'
	        AND ( (p.PaymentAmt <> 0 ) OR (p.AdjustmentAmt <> 0) or AdjustmentReason <> '' or AdjustmentReason is not null)
	        Order By p.OrderedTest, p.CPTCode, p.EntryDate
	 
	 
	 )C
	 
	 )D 
	 
	 where (@ClaimFlag = 0 and (Payment <> 0 or Adjustment <> 0 ) or @ClaimFlag = 1 ) 

GO
/****** Object:  StoredProcedure [dbo].[spGetPostingsByCheck]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetPostingsByCheck]
	@CheckNumber varchar(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT py.CheckNumber, py.Accession, py.CPTcode, py.Modifier, bi.Units, bi.TotalFeeAmt, py.PaymentAmt, py.AdjustmentReason, py.AdjustmentAmt
	from tblPayment py
	Left Join tblBill bi
	on bi.Accession = py.Accession
	and isnull(bi.CPTcode, '') = isnull(py.CPTcode, '')
	and isnull(bi.Modifier, '') = isnull(py.Modifier, '')
	where py.CheckNumber = @CheckNumber

END
GO
/****** Object:  StoredProcedure [dbo].[spGetPreAccessionNumber]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetPreAccessionNumber] 
	@Accession varchar(100)
AS
BEGIN

	SET NOCOUNT ON


	SELECT PreAccession
	FROM tblAccessions (NOLOCK)
	WHERE Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPreAccessionOrderData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPreAccessionOrderData]	
	@PreAccession varchar(50)
AS
BEGIN
SELECT     acc.PreAccession, acc.LastName, acc.FirstName, acc.DOB, acc.Sex, acc.OrderType, acc.ClientCode, cl.ClientName, acc.PatientID, acc.PhysicianCode, ph.FullName, 
                      acc.OrderDate, acc.CollectionDate, acc.OrderType AS Expr1, acc.PrimaryInuranceID, acc.BillTo AS CurrentBillType, acc.SpecimenReceived, acc.OrderedTests, 
                      acc.DiagnosisCodes, acc.MedicationCodes, acc.POCTests, acc.POCResults, acc.Address, acc.City, acc.State, acc.Zip, acc.Phone, acc.MiddleName, acc.SSN, 
                      acc.PrimaryInuranceCode, acc.PrimaryInuranceFirstName, acc.PrimaryInuranceLastName, acc.PrimaryInuranceMiddleName, acc.PrimaryInuranceAddress, 
                      acc.PrimaryInuranceCity, acc.PrimaryInuranceState, acc.PrimaryInuranceZip, acc.PrimaryInurancePhone, acc.PrimaryInuranceSex, acc.PrimaryInuranceDOB, 
                      acc.PrimaryInuranceGroupNumber, acc.PrimaryInuranceRelation, acc.SecondaryInuranceCode, acc.SecondaryInuranceID, acc.SecondaryInuranceFirstName, 
                      acc.SecondaryInuranceLastName, acc.SecondaryInuranceMiddleName, acc.SecondaryInuranceAddress, acc.SecondaryInuranceCity, acc.SecondaryInuranceState, 
                      acc.SecondaryInuranceZip, acc.SecondaryInurancePhone, acc.SecondaryInuranceSex, acc.SecondaryInuranceDOB, acc.SecondaryInuranceGroupNumber, 
                      acc.SecondaryInuranceRelation, acc.ConfirmAllTests, acc.ConfirmAllMeds, acc.ConfirmConsistancy, acc.Comments
FROM         tblReceivingPool AS acc WITH (nolock) INNER JOIN
                      tblClients AS cl WITH (nolock) ON cl.ClientCode = acc.ClientCode LEFT JOIN
                      tblPhysicians AS ph WITH (nolock) ON ph.PhysicianCode = acc.PhysicianCode
WHERE     (acc.PreAccession = @PreAccession)
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPreviousMailoutBatches]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetPreviousMailoutBatches] 
	
AS
BEGIN
	SET NOCOUNT ON;
	SELECT top 30 SentBatchID + '  ( ' + CAST ( count(SentBatchID) AS varchar(10)) + ' )' as Batches
	FROM tblMailoutOrders with (NOLOCK)
	where SentBatchID <> '0'
	Group by SentBatchID
	order by SentBatchID desc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPrevResultHistory]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		JJC
-- Create date: 04/07/2016
-- Description:	Gets Prev result value for reporting
-- =============================================
CREATE PROCEDURE [dbo].[spGetPrevResultHistory]
	@Accession as varchar(100),
	@ResultTest as varchar(100),
	@PatientID as varchar(100),
	@CollectionDate as datetime
	
	
AS
BEGIN

	SELECT   Top 1  tblResultedTests.id, tblAccessions.Accession, tblAccessions.PatientID, tblResultedTests.PerformedTest, tblResultedTests.ResultTest, tblResultedTests.Result, 
						  tblResultedTests.ResultFlag, tblResultedTests.Outcome, tblAccessions.CollectionDate, tblResultedTestsDefinitions.InternalName, 
						  tblResultedTestsDefinitions.ExternalName
	FROM         tblAccessions INNER JOIN
						  tblResultedTests ON tblAccessions.Accession = tblResultedTests.Accession INNER JOIN
						  tblResultedTestsDefinitions ON tblResultedTests.ResultTest = tblResultedTestsDefinitions.TestCode AND 
						  tblResultedTests.Version = tblResultedTestsDefinitions.Version
	WHERE     (tblAccessions.PatientID = @PatientID) AND (tblResultedTests.ResultTest = @ResultTest) And tblAccessions.CollectionDate <= @CollectionDate
	and tblAccessions.Accession <> @Accession
	
	ORDER BY tblAccessions.CollectionDate desc
	
END

GO
/****** Object:  StoredProcedure [dbo].[spGetPrevResultValue]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		JJC
-- Create date: 03/07/2016
-- Description:	Gets Prev result value
-- =============================================
CREATE PROCEDURE [dbo].[spGetPrevResultValue]
	@Accession as varchar(100),
	@ResultTest as varchar(100)
	
	
AS
BEGIN

SELECT  Top(2)  art.Result,  art.QSSUpdateDate 
       
FROM         tblResultCodeVersions INNER JOIN
                      tblResultedTestsDefinitions AS rtd WITH (nolock) ON tblResultCodeVersions.TestCode = rtd.TestCode AND 
                      tblResultCodeVersions.CurrentVersion = rtd.Version RIGHT OUTER JOIN
                      tblAuditResultedTests AS art LEFT OUTER JOIN
                      tblAccessions AS a WITH (nolock) ON a.Accession = art.Accession ON rtd.TestCode = art.ResultTest LEFT OUTER JOIN
                      tblPatient AS p WITH (nolock) ON a.PatientID = p.PatientId
WHERE     (art.Accession = @Accession)
and art.ResultTest = @ResultTest
ORDER BY art.QSSUpdateDate DESC
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetPrintAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spGetPrintAccession]  
@Accession varchar(100)  
  
as  
begin  
  
select Accession,a.clientcode, CONVERT(VARCHAR(20), ReceiveDate, 101) AS ReceivedDate,  
         FORMAT( ReceiveDate, 'hh.mm tt') as ReceivedTime ,a.PatientId,p.ptSex,  
   CONVERT(VARCHAR(20), p.ptDateOfBirth, 101)  as ptDateOfBirth, ptFirstName,ptLastName from tblAccessions  a  Left join tblpatient p  on a.patientID=p.patientID where Accession=@Accession   
  
  
end  
GO
/****** Object:  StoredProcedure [dbo].[spGetProblemList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetProblemList]	
	
AS
BEGIN
	select acc.Accession, acc.DateCreated , acc.CollectionDate, acc.ClientCode, cl.ClientName, acc.PatientID, pt.ptFirstName  + ', ' + pt.ptLastName as patientName   
	
	from tblAccessions acc (nolock) 
	inner join tblClients cl (nolock)
	on cl.ClientCode = acc.ClientCode
	inner join tblPatient pt
	on acc.PatientID = pt.PatientId
	
	where acc.ProblemSpec = 'true'
	ORDER BY acc.DateCreated DESC
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetProgressLookup]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetProgressLookup] 

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Select * from tblProgress	

END
GO
/****** Object:  StoredProcedure [dbo].[spGetQCAccessionPerformedTestData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetQCAccessionPerformedTestData] 
@Accession varchar(50)
AS
BEGIN

	
	SELECT 
	 ot.PerformedTest As Code, ptd.description , ot.CallNote , ot.OrderedTest,
	 
	'Status' = CASE
						WHEN EXISTS (SELECT rt.Status 
										FROM dbo.tblResultedTests rt (nolock)
										WHERE rt.Accession = @Accession and rt.PerformedTest = ptd.ID and rt.Status = 'Pending'
								     ) THEN 'Pending'
						WHEN EXISTS (SELECT rt.Status FROM dbo.tblResultedTests rt (nolock)
										WHERE rt.Accession = @Accession and rt.PerformedTest = ptd.ID  and  rt.Status = 'Hold') THEN 'Hold'
						WHEN EXISTS (SELECT rt.Status FROM dbo.tblResultedTests rt (nolock)
										WHERE rt.Accession = @Accession and rt.PerformedTest = ptd.ID  and  rt.Status = 'Final') THEN 'Final'
						WHEN EXISTS (SELECT rt.Status FROM dbo.tblResultedTests rt (nolock)
										WHERE rt.Accession = @Accession and rt.PerformedTest = ptd.ID and  rt.Status = 'Cancelled') THEN 'Cancelled'
		                END , 
		   ot.TestComment as InternalComment
		   
		FROM dbo.tblOrderedTests  ot (NOLOCK)
		INNER JOIN dbo.tblControlModules ptd (NOLOCK)
		ON ot.PerformedTest = ptd.ID
		WHERE ot.Accession = @Accession			
		order by  ot.PerformedTest asc
		
		
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetQCModuleGroups]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [dbo].[spGetQCModuleGroups]	
	 @ControlOrderNumber varchar(20),
	 @CreatedBy varchar(20),
	 @CreatedDate datetime
	
AS

--inner join
--			tblResultedTestsDefinitions rt ON A.TestCode = rt.TestCode 
--, rt.ExternalName 

    Set NoCount ON
    /* Variable Declaration */
    Declare @SQLQuery AS NVarchar(4000)
    Declare @ParamDefinition AS NVarchar(2000) 

	
	set @SQLQuery = 'SELECT DISTINCT (QCGroupNumber), QCResultsID, CONVERT(VARCHAR(19), CreatedDate) AS CreatedDate,Description, QSSCreatedByID 	
					FROM (						
					SELECT tblQCResultValues.QCGroupNumber, tblQCResultValues.QCResultsID, tblQCResultValues.QSSCreatedDate AS CreatedDate, 
										  tblQCResultValues.QSSCreatedByID, Description
					FROM         tblQCOrderControls INNER JOIN
										  tblQCControls ON tblQCOrderControls.ControlID = tblQCControls.ControlID AND tblQCOrderControls.Lot = tblQCControls.Lot RIGHT OUTER JOIN
										  tblQCResultValues ON tblQCOrderControls.id = tblQCResultValues.QCResultsID
					WHERE     (tblQCOrderControls.OrderID = @ControlOrderNumber)  '

	 If len(@CreatedBy)>0
         Set @SQLQuery = @SQLQuery + ' And (tblQCResultValues.QSSCreatedByID = @CreatedBy)'	
	
	 If len(@CreatedDate)>0
         Set @SQLQuery = @SQLQuery + ' And (tblQCResultValues.ResultDate >= @CreatedDate)'	
         

	 Set @SQLQuery = @SQLQuery + ' )A ORDER BY QCGroupNumber DESC'  

         
         
	 Set @ParamDefinition =   	' @ControlOrderNumber varchar(20),
								  @CreatedBy varchar(20),
								  @CreatedDate datetime'
								  

    Execute sp_Executesql   @SQLQuery, 
							@ParamDefinition, 
							@ControlOrderNumber,
							@CreatedBy,
							@CreatedDate
                
    If @@ERROR <> 0 GoTo ErrorHandler
    Set NoCount OFF
    Return(0)
  
ErrorHandler:
    Return(@@ERROR)







GO
/****** Object:  StoredProcedure [dbo].[spGetQCModuleResultsByGroupID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spGetQCModuleResultsByGroupID]	
	 @ControlOrderNumberID varchar(20),
	 @GroupID varchar(50)
	
AS
BEGIN
SELECT     tblQCResultValues.id, tblQCResultValues.QCResultsID, tblQCResultValues.TestCode, 
					Result = case when tblQCResultValues.ResultAlphaFlag = 0 then 
						cast(tblQCResultValues.Result as varchar(max)) else tblQCResultValues.Result_AlphaNum end, 
						tblQCResultValues.ResultDate, 
                      tblQCResultValues.Status, tblQCResultValues.QSSCreatedByID, tblQCResultValues.QSSCreatedDate, 
                      tblQCResultValues.QSSLastUpdateID, tblQCResultValues.QSSUpdateDate, tblQCResultValues.QSSVersion, 
                      tblQCResultValues.QCGroupNumber, tblQCOrderControls.OrderID, tblQCResults.NormalRange, 
                      tblQCResults.Average, tblQCResults.STDDeviation, tblQCResults.Comment, '' AS RecordStatus, 
                      tblResultedTestsDefinitions.ExternalName, tblResultedTestsDefinitions.TestCode AS Expr1, 
                      tblResultedTestsDefinitions.Version, tblQCResultValues.ResultComment, tblQCResultValues.ResultAlphaFlag
FROM         tblQCResultValues INNER JOIN
                      tblQCOrderControls ON tblQCResultValues.QCResultsID = tblQCOrderControls.id INNER JOIN
                      tblQCResults ON tblQCOrderControls.OrderID = tblQCResults.OrderID AND tblQCResultValues.TestCode = tblQCResults.TestCode INNER JOIN
                      tblResultedTestsDefinitions ON tblQCResultValues.TestCode = tblResultedTestsDefinitions.TestCode INNER JOIN
                      tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode AND 
                      tblResultedTestsDefinitions.Version = tblResultCodeVersions.CurrentVersion
WHERE     (tblQCResultValues.QCResultsID = @ControlOrderNumberID) AND (tblQCResultValues.QCGroupNumber = @GroupID)
END


GO
/****** Object:  StoredProcedure [dbo].[spGetQCNewModuleResults]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [dbo].[spGetQCNewModuleResults]	
	 @ControlOrderNumber varchar(20)
	
AS
Declare @TrueBit bit = 0 --PA 03/01/2016 For ResultAlphaFlag: default to false so that ALL new results will display on graph
BEGIN
SELECT     res.id, 'NEW' AS RecordStatus, res.OrderID, res.ControlID, res.Lot, res.TestCode, CONVERT(varchar(20), GETDATE(), 101) + ' ' + CONVERT(varchar(20), GETDATE(), 
                      108) + ' ' + RIGHT(CONVERT(varchar(30), GETDATE(), 109), 2) AS ResultDate, res.Result, res.NormalRange, res.Average, res.STDDeviation, res.Status, '' as ResultComment, 
                      res.QSSCreatedByID, res.QSSCreatedDate, res.QSSLastUpdateID, res.QSSUpdateDate, res.QSSVersion, tblQCOrderControls.id AS QCResultsID, 
                      tblResultedTestsDefinitions.ExternalName, @TrueBit as ResultAlphaFlag, '' as WestgardRule
FROM         tblQCResults AS res WITH (nolock) INNER JOIN
                      tblQCOrderControls ON res.OrderID = tblQCOrderControls.OrderID INNER JOIN
                      tblResultedTestsDefinitions ON res.TestCode = tblResultedTestsDefinitions.TestCode INNER JOIN
                      tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode AND 
                      tblResultedTestsDefinitions.Version = tblResultCodeVersions.CurrentVersion
	WHERE     (res.OrderID = @ControlOrderNumber)
END









GO
/****** Object:  StoredProcedure [dbo].[spGetQSSPhysicianInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetQSSPhysicianInfo]
	@code varchar(50)
	

AS
BEGIN
	select *
	from dbo.tblPhysicians  (nolock) 	
	where PhysicianCode =@code
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetRackValues]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================	
CREATE PROCEDURE [dbo].[spGetRackValues]
	@RackID varchar(50)
AS
	SELECT [id], b.[RackID], [RowID], [ColumnID], [ColumnValue], SpecimenCode, TraySize
	FROM tblRack a
	LEFT JOIN tblRackValues b ON A.[RackID] = b.[RackID]
	WHERE a.RackID = @RackID
	ORDER BY [RowID], [ColumnID];
GO
/****** Object:  StoredProcedure [dbo].[spGetRackValuesAudit]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
CREATE PROCEDURE [dbo].[spGetRackValuesAudit]    
	@RackID varchar(50)
AS    
	SET NOCOUNT ON;
	SELECT [id], RackID, [RowID], [ColumnID], [ColumnValue], [UpdateVersion], [UpdatedBy], [UpdatedOn],
	CHAR(64 + ColumnID) +  CONVERT(VARCHAR(2), RowID) Position
	FROM [dbo].tblRackValuesAudit
	WHERE RackID = @RackID
	ORDER BY [id];
GO
/****** Object:  StoredProcedure [dbo].[spGetRecevingOrders]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetRecevingOrders]
	@PreAccession varchar(50) = NULL ,
	@LastName varchar(100) = NULL , 
	@FirstName varchar(100) = NULL ,
	@ClientName varchar(100)= NULL,
	@Interface varchar(20)=NULL

AS
BEGIN
	select a.PreAccession,a.lastname,a.firstname,c.clientname,a.CollectionDate , a.Interface as OrderSource
	from tblReceivingPool a  
	inner join tblclients c on a.clientcode=c.clientcode
	

	
where PreAccession LIKE ISNULL(@PreAccession, PreAccession)
	and LastName LIKE ISNULL(@LastName, LastName)
	and FirstName LIKE ISNULL(@FirstName, FirstName)
	and ClientName LIKE ISNULL(@ClientName, ClientName)
	and a.Interface like ISNULL(@Interface, a.Interface)
	--and a.Interface <> 'ipowerdoc'	
	order by CollectionDate desc
END

GO
/****** Object:  StoredProcedure [dbo].[spGetRemitPaymentReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetRemitPaymentReport]  
    
AS  
BEGIN  
  
 SET NOCOUNT ON  
 SELECT br.Accession, br.ptLastName + ', ' + br.ptFirstName as PatientName, br.CheckNumber, convert(varchar,br.CheckDate, 101) As CheckDate,   
 --convert(varchar, a.ReceiveDate, 101) As ServiceDate,  
 br.CPT_Code, br.Modifier,  
 br.Units, br.CPT_Charge, br.CPT_Paid, br.AdjustmentCode, br.AdjustmentReason, br.AdjustmentAmount,br.Payer   
 from tblBillingTempRemit br (NOLOCK)  
 --inner join tblAccessions a (NOLOCK)  
 --on a.Accession = br.Accession  
 --where AdjustmentCode<>''  
 where CPT_Paid<>0.00  
END  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetRemittanceBatches]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetRemittanceBatches]
	
AS
BEGIN
Select ICN as BatchID, 
CONVERT(VARCHAR(10),ArchiveDate,101) as ProcessDate,
CONVERT(VARCHAR(10),ArchiveDate,108) as ProcessTime,
--ArchiveDate as ProcessDate, 
(select count(distinct Accession) from tblBillingTempRemitArchive where ICN = xx.ICN) NoOfPatients,
Sum(CPT_Paid)as TotalPaid
from (SELECT     distinct    Accession, CheckNumber, CheckDate, CPT_Code, Units, CPT_Charge, CPT_Paid,    ICN, Payer,  
                         QSSCreatedDate, ArchiveDate, Modifier
FROM            tblBillingTempRemitArchive a) xx


--from tblBillingTempRemitArchive a
group by xx.icn, xx.ArchiveDate


END






GO
/****** Object:  StoredProcedure [dbo].[spGetRemittanceByBatchID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetRemittanceByBatchID]	
	@BatchID varchar(100)
AS
BEGIN
	SELECT   distinct  bb.Accession, FileName, 
	ptFirstName + ' ' + ptLastName as Patient, 
	CheckNumber, 
	CONVERT(varchar, CheckDate, 101) As CheckDate, 
	CPT_Code, 
	Units, 
	CPT_Charge, 
	CPT_Paid, 
	AdjustmentCode + AdjustmentReason as DenialCode, 
	AdjustmentAmount, 
	ICN, 
	Payer, 
	CONVERT(varchar, bb.QSSCreatedDate, 101) As QSSCreatedDate, Modifier
FROM         tblBillingTempRemitArchive bb
inner join tblBillAccessions ba
on ba.Accession = bb.Accession
WHERE     ICN = @BatchID
order by Accession, CPT_Code
END
GO
/****** Object:  StoredProcedure [dbo].[spGetRemittanceReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetRemittanceReport]  
                                  
AS  
BEGIN  
  
                SET NOCOUNT ON  
                SELECT br.Accession, br.ptLastName + ', ' + br.ptFirstName as PatientName, br.CheckNumber, convert(varchar,br.CheckDate, 101) As CheckDate,   
                --convert(varchar, a.ReceiveDate, 101) As ServiceDate,  
                br.CPT_Code, br.Modifier,  
                br.Units, br.CPT_Charge, br.CPT_Paid, br.AdjustmentCode, br.AdjustmentReason, br.AdjustmentAmount,br.Payer   
                from tblBillingTempRemit br (NOLOCK) 
				 
				inner join tblBillAccessions ba(NOLOCK) 
				on ba.Accession = br.Accession

                order by br.Accession, br.CPT_Code  
                --inner join tblAccessions a (NOLOCK)  
                --on a.Accession = br.Accession  
                --where AdjustmentCode<>''  
                --where CPT_Paid=0.00  
END  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetRemittanceSummaryStatistics]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =======================================================
-- Author:		Paul Antompietri
-- Create date: 10/21/2016
-- Description:	Get remittance stats for last 3 files sent
-- =======================================================
CREATE PROCEDURE [dbo].[spGetRemittanceSummaryStatistics]
AS
BEGIN

	/** Step 1 - aggregate the accessions in tmpBillingTempRemitArchive **/

	Create table #tmpRemit (
		filename varchar(max),
		accession varchar(20),
		filedate datetime,
		AmtBilled decimal(20, 2),
		AmtPaid decimal(20, 2),
		AmtAdj decimal(20, 2)
		)

	insert into #tmpRemit
	select filename, accession, max(QSSCreatedDate) as filedate, round(sum(CPT_Charge),2) as AmtBilled, round(sum(CPT_Paid),2) as AmtPaid, round(sum(AdjustmentAmount),2) as AmtAdj
	from tblBillingTempRemitArchive
	group by filename, accession

	/** Step 2 - get statistics for the last 3 remittance files sent **/

	Create table #tmpClaimsPaymentStats (
		filename varchar(max),
		NumberOfClaims bigint,
		ClaimsNotPaid bigint,
		filedate date,
		AmtBilled decimal(20, 2),
		AmtPaid decimal(20, 2),
		AmtNotPaid decimal(20, 2)
		)

	/** Step 2a - get statistics for all accessions in the last 3 files sent **/

	Insert into #tmpClaimsPaymentStats
	SELECT top 3 filename,  count(filename) as NumberOfClaims, 0 as ClaimsNotPaid, max(cast(filedate as date)) as filedate, 
		sum(AmtBilled), sum(AmtPaid), sum(AmtBilled - AmtPaid) as AmtNotPaid
	  FROM #tmpRemit
	  group by filename
	  order by filedate desc

	/** Step 2b - find and count only those where no payments were made **/

	Insert into #tmpClaimsPaymentStats 
	Select ra.filename, 0, count(ra.filename) as ClaimsNotPaid, max(cast(ra.filedate as date)) as filedate, 0, 0, 0
	FROM #tmpRemit ra 
	inner join #tmpClaimsPaymentStats cp
	on cp.filename = ra.filename
	where ra.AmtPaid = 0
	group by ra.filename
	order by filedate desc

	/** Step 3 - Send out table with final results **/

	select filename, max(NumberOfClaims) as NumberOfClaims, sum(NumberOfClaims - ClaimsNotPaid) as ClaimsPaid, max(ClaimsNotPaid) as ClaimsNotPaid, 
		filedate, max(AmtBilled) as AmtBilled, max(AmtPaid) as AmtPaid, max(AmtNotPaid) as AmtNotPaid
	from #tmpClaimsPaymentStats
	group by filename, filedate

END
GO
/****** Object:  StoredProcedure [dbo].[spGetReportBySpecimen]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spGetReportBySpecimen] 
	
	@SpecimenList varchar(max)
AS
BEGIN
	SET NOCOUNT ON;
DECLARE   @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(25)
		, @FieldList varchar(2000)
		
		
if object_id('tempdb..#SpecimenCodes') is not null

	drop table #SpecimenCodes
	
create table #SpecimenCodes
( 
	 SpecimenCode varchar(25)   
)  

Set @FieldList =''
		Set @FieldList = @SpecimenList + '|'
		Set @StartPos = 1
		Set @EndPos = 1
		 -- Start the looping operation
		While @EndPos > 0
		   Begin
			  Set @EndPos = CharIndex('|', @FieldList, @StartPos)
			  If @EndPos > 0
				 Begin
					Set @CurVal = Convert(varchar(25), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
					-- Add current row to TempTable
					Insert #SpecimenCodes (SpecimenCode) Values (@CurVal)
					Set @StartPos = @EndPos + 1
				 End
		   End

	SELECT Reporttype
	FROM tblReportBySpecimen with (NOLOCK)
	WHERE [SpecimenCode] in (select SpecimenCode from #SpecimenCodes)
END
GO
/****** Object:  StoredProcedure [dbo].[spGetReportOrder]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetReportOrder]
	@HeaderName varchar(20) = NULL
AS
  	BEGIN 
	select OrderKey, HeaderName, ResultCode, ReportDesc
	from dbo.tblTestReportOrder (NOLOCK)
	where HeaderName = @HeaderName
END
GO
/****** Object:  StoredProcedure [dbo].[spGetReportOrderHeader]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetReportOrderHeader]
	
AS
  
 
	BEGIN 
	select 'select' as Header, 0 as HeaderOrder, 0 as Section
	UNION
	select Header  + ' ( ' + cast(OrderNumber as varchar(3)) + ' ) ' as Header,
	
	OrderNumber as HeaderOrder, Section
	from dbo.tblTestsReportOrder (NOLOCK)
	Order By HeaderOrder
    END
GO
/****** Object:  StoredProcedure [dbo].[spGetRequestingPhysicianName]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  <Author,,Name>    
-- Create date: <Create Date,,>    
-- Description: <Description,,>    
-- =============================================    
CREATE PROCEDURE [dbo].[spGetRequestingPhysicianName]    
 @LabCode varchar(20),    
 @ClientCode varchar(20),    
 @PhysicianCode varchar(20)    
AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;    
    
    -- Insert statements for procedure here    
 SELECT  p.LastName + ', ' + p.FirstName  as PhysicianNameCode    
 FROM tblClientsPhysicians cp (NOLOCK)    
 INNER JOIN tblPhysicians p (NOLOCK)    
 ON cp.PhysicianCode = p.PhysicianCode    
 WHERE cp.ClientCode = @ClientCode   
   
  and p.PhysicianCode = @PhysicianCode    
    
END    
GO
/****** Object:  StoredProcedure [dbo].[spGetRequestingPhysicians]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetRequestingPhysicians]
@ClientCode varchar(20) 

AS
BEGIN

	SET NOCOUNT ON;


	SELECT  cp.PhysicianCode, p.LastName, p.LastName + ',' + p.FirstName + ' (' + cp.PhysicianCode + ') ' as PhysicianNameCode
	FROM tblClientsPhysicians cp (NOLOCK)
	INNER JOIN tblPhysicians p (NOLOCK)
	ON cp.PhysicianCode = p.PhysicianCode
	WHERE cp.ClientCode = @ClientCode
    UNION 
    SELECT '' As PhysicianCode, '' AS LastName, '' AS PhysicianNameCode
	
	ORDER BY LastName asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetRequisitionInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetRequisitionInfo]     
 @Accession varchar(50)    
AS    
BEGIN    
 select    
isnull(ml.AccountNumber,'')as AccountNumber,    
a.Accession,    
a.PreAccession,    
a.CollectionDate,     
a.OrderDate ,    
a.ReceiveDate ,    
a.FinalReportDate ,    
a.ordertype,    
a.ClientCode ,     
c.ClientName,    
c.Address,    
c.Address2,    
c.City ,    
c.State ,    
c.Zip,    
c.Telephone,     
a.PatientID,      
p.ptFirstName as FirstName,     
p.ptLastName As LastName,     
p.ptMiddleName as MiddleName,     
p.ptSex as Sex,     
p.ptDateofBirth as DOB,     
p.ptAddress1,     
p.ptAddress2,     
p.ptCity,     
p.ptState,     
p.ptZip,    
a.PhysicianCode,    
phy.FullName  as PhysName,    
phy.NPI,     
MedicationsDataXML,     
SpecimenDataXML,     
DiagnosisDataXML,     
ara.ArchivedDate as ReleasedDate,    
a.OrderedTests,     
CurrentBillType,     
a.InternalComment as InternalComment,    
PTContactHomePhone,    
--a.AddScannedPaperWork,    
    
     
'Status' = CASE    
            WHEN EXISTS (SELECT rt.Status     
        FROM dbo.tblResultedTests rt (nolock)    
           WHERE rt.Accession = @Accession  and  (rt.Status = 'Pending' or rt.Status = 'Hold')) THEN 'Pending'    
       ELSE 'Final'    
             END,    
 --mom.AccessionMOMedicationList as MedicationList,    
  a.CurrentBillType as BillType, ISNULL(a.ExternalComments , '') as MailoutComment --ISNULL(mo.MailoutComment, '') as MailoutComment    
     
    from tblAccessions a (nolock)     
 inner join tblClients c (nolock)    
 on a.ClientCode = c.ClientCode    
     
 inner join tblPatient p (nolock)    
 on a.PatientID = p.PatientId    
     
 inner join tblPhysicians phy (nolock)    
 on a.PhysicianCode = phy.PhysicianCode    
     
 LEFT OUTER JOIN dbo.tblArchiveReviewAccession ara (NOLOCK)    
   ON ara.Accession = a.Accession    
    
 left outer join tblMailoutOrders mo (NOLOCK)    
 on mo.MOAccession = a.Accession    
 left outer join tblmailoutlabs ml   (NOLOCK)  
 on ml.labcode=mo.mailoutlabcode  
 --LEFT OUTER JOIN tblAccessionMOMedicationList mom (NOLOCK)    
 --  ON mom.Accession = a.Accession    
     
 where a.Accession = @Accession    
     
     
END    
    
    
    
    
GO
/****** Object:  StoredProcedure [dbo].[spGetResultCodeFromOrderCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================  
-- Author:  HF  
-- Create date: 06/30/2011  
-- Description: This procedure creates one or more Ordered Tests, Resulted Tests, based on the tests seleced for a give Requisition  
-- =============================================  
CREATE PROCEDURE [dbo].[spGetResultCodeFromOrderCode]  
  
 @OrderedTest as varchar(100)   
  
  
   
AS  
BEGIN  
SET NOCOUNT ON  
DECLARE   @PerformedTestCode as varchar(max)  
     , @StartPos smallint  
  , @EndPos smallint  
  , @CurVal varchar(20)  
  , @FieldList varchar(2000)  
  , @PerformedTest varchar(20)  
  , @ResultedTestCodes varchar(max)  
  , @ResultedTests varchar(max)  
  , @ResultedTestCode varchar(20)  
   
  
SELECT @PerformedTestCode = PerformedTestCode from tblOrderedTestsDefinitions  
                        where OrderedTest = @OrderedTest  
  
    
   
CREATE TABLE #tmpPerformedTest  
(  
    PerformedTest varchar(20) NOT NULL  
)  
  
CREATE TABLE #tmpResultedTest  
(  
    ResultedTestCode varchar(20) NOT NULL  
)  
  
  
  
  
Set @FieldList =''  
Set @FieldList = @PerformedTestCode + '|'  
Set @StartPos = 1  
Set @EndPos = 1  
 -- Start the looping operation  
While @EndPos > 0  
   Begin  
      Set @EndPos = CharIndex('|', @FieldList, @StartPos)  
      If @EndPos > 0  
         Begin  
            Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))  
      
            -- Add current row to TempTable  
            Insert #tmpPerformedTest (PerformedTest) Values (@CurVal)  
            Set @StartPos = @EndPos + 1  
         End  
     
   --PRINT @FieldList  
 END  
  
   
   
 DECLARE PERFORMEDTESTCODE_CURSOR CURSOR READ_ONLY FOR   
 SELECT  PerformedTest  
 FROM #tmpPerformedTest  
 ORDER BY PerformedTest   
 OPEN PERFORMEDTESTCODE_CURSOR  
  
FETCH NEXT FROM PERFORMEDTESTCODE_CURSOR  
    INTO   @PerformedTest  
 --PRINT  @PerformedTest  
  
WHILE @@FETCH_STATUS = 0  
BEGIN   
   
 SELECT @ResultedTests = ResultTestCode from tblPerformedTestsDefinitions (nolock)  
 where PerformedTest = @PerformedTest  
   --PRINT @ResultedTests  
    
 Set @FieldList =''  
 Set @FieldList = @ResultedTests + '|'  
 Set @StartPos = 1  
 Set @EndPos = 1  
 While @EndPos > 0  
  Begin  
   Set @EndPos = CharIndex('|', @FieldList, @StartPos)  
   If @EndPos > 0  
   Begin  
    Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))  
      
    -- Add current row to TempTable  
    Insert #tmpResultedTest (ResultedTestCode) Values (@CurVal)  
    Set @StartPos = @EndPos + 1  
   End  
  END  
  
 FETCH NEXT FROM PERFORMEDTESTCODE_CURSOR  
    INTO   @PerformedTest  
 --PRINT  @PerformedTest  
END    
CLOSE PERFORMEDTESTCODE_CURSOR  
DEALLOCATE PERFORMEDTESTCODE_CURSOR    
  
select trt.ResultedTestCode, internalname as 'description'  from #tmpResultedTest trt  
left join tblresultedTestsDefinitions rtd on trt.ResultedTestCode = rtd.testcode  
inner join tblresultcodeversions rcv on rtd.version = rcv.currentversion and rtd.testcode = rcv.testcode  
  
  
END  
GO
/****** Object:  StoredProcedure [dbo].[spGetResultConsistency]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultConsistency]
	@ID varchar(100),
	@Accession varchar(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    select rt.ResultTest, rt.Result, rtd.CutoffHighLimit, rtdec.Decode, rtd.MedicationData, rtdec.Flag, rtd.UseCutoffLimit, rtd.CutoffLowLimit, rtd.UseRangeLimits, rtd.MedicationDataIndirect
from tblResultedTestsDefinitions rtd
inner join tblResultedTests rt
on rt.ResultTest = rtd.testcode
left join tblResultedTestDecodes rtdec
on rtd.testcode = rtdec.TestCode
where rt.ID = @ID
and rt.Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spGetResultCutOffInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spGetResultCutOffInfo]	
	@TestCode varchar(50)
AS
BEGIN
	select UseCutoffLimit, CutoffLowLimit, CutoffHighLimit from tblResultedTestsDefinitions
	where TestCode = @TestCode
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetResultedTestCommentData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetResultedTestCommentData] 
@Accession varchar(50),
@ResultTest varchar(100)
AS
BEGIN


	
 declare @gender varchar(1)
  set @gender = (select pt.ptsex from tblPatient pt inner join tblAccessions a on a.PatientID=pt.PatientId and a.Accession=@Accession)

 SELECT   rt.ResultTest  , rt.ResultComment,  
 
   rtd.AbnormalCommentCode, rtd.ConsistentCommentCode,rtd.InconsistentCommentCode, 
 rt.Version  
  FROM dbo.tblResultedTests  rt (NOLOCK)   
  INNER JOIN dbo.tblResultedTestsDefinitions rtd(NOLOCK)  
   ON rt.ResultTest = rtd.testcode  
                    INNER JOIN  tblResultCodeVersions ON rtd.TestCode = tblResultCodeVersions.TestCode AND   
                     rtd.Version = tblResultCodeVersions.CurrentVersion     
     
      
    WHERE rt.Accession = @Accession   and rt.resulttest = @ResultTest
		

end
GO
/****** Object:  StoredProcedure [dbo].[spGetResultedTestCount]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultedTestCount] 
                @clientCode as varchar(MAX),
                @numberClients as varchar(100),
                @outputType as varChar(100),
                @StartDate datetime,
                @EndDate datetime
                
AS

if @numberClients like 'ALL'
                Begin

                                SET NOCOUNT ON;
                                if @outputType like 'D'
                                                SELECT distinct cl.ClientCode as clientcode, cl.ClientName as clientname, rtd.TestCode as testcode, rtd.ExternalName as testname, COUNT(rt.ResultTest) as count
                
                                                                FROM dbo.tblResultedTests  rt (NOLOCK)
                                                                Inner Join dbo.tblResultedTestsDefinitions rtd
                                                                on rt.ResultTest = rtd.TestCode
                                
                                                                Inner Join dbo.tblAccessions acc
                                                                on rt.Accession = acc.Accession
                                                                
                                                                INNER JOIN tblResultCodeVersions v
                                                                ON rtd.TestCode = v.TestCode 
                                                                AND rtd.Version = v.CurrentVersion

                                                                
                                                                Inner Join dbo.tblClients cl (NOLOCK)
                                                                on acc.ClientCode = cl.ClientCode
                                                                
                                                                AND  (acc.CollectionDate between @startdate and @enddate)
                                
                                                                group by cl.ClientName, cl.Clientcode, rtd.TestCode, rtd.ExternalName
                                                                order by cl.ClientName asc
                                else
                                                SELECT distinct rtd.TestCode as testcode, rtd.ExternalName as testname, COUNT(rt.ResultTest) as count
                                                                FROM dbo.tblResultedTests  rt (NOLOCK)
                                                                Inner Join dbo.tblResultedTestsDefinitions rtd
                                                                on rt.ResultTest = rtd.TestCode
                                
                                                                Inner Join dbo.tblAccessions acc
                                                                on rt.Accession = acc.Accession
                                                                
                                                                INNER JOIN tblResultCodeVersions v
                                                                ON rtd.TestCode = v.TestCode 
                                                                AND rtd.Version = v.CurrentVersion

                                                                Inner Join dbo.tblClients cl (NOLOCK)
                                                                on acc.ClientCode = cl.ClientCode
                                                                
                                                                AND  (acc.CollectionDate between @startdate and @enddate)
                                
                                                                group by rtd.TestCode, rtd.ExternalName
                                                                order by rtd.TestCode asc
                
                End

else
                BEGIN
                                SET NOCOUNT ON;
                
                                CREATE TABLE #TempList
                                (
                                                cID varChar(100)
                                )

                                DECLARE @cID varchar(10), @Pos int
                                SET @clientCode = LTRIM(RTRIM(@clientCode))+ '|'
                                SET @Pos = CHARINDEX('|', @clientCode, 1)
                                IF REPLACE(@ClientCode, '|', '') <> ''
                                BEGIN
                                                WHILE @Pos > 0
                                                BEGIN
                                                                SET @cID = LTRIM(RTRIM(LEFT(@ClientCode, @Pos - 1)))
                                                                IF @cID <> ''
                                                                BEGIN
                                                                                INSERT INTO #TempList (cID) VALUES (@cID)
                                                                END
                                                                SET @ClientCode = RIGHT(@ClientCode, LEN(@ClientCode) - @Pos)
                                                                SET @Pos = CHARINDEX('|', @ClientCode, 1)

                                                END
                                END       
                                if @outputType like 'D'
                                                SELECT distinct cl.ClientCode as clientcode, cl.ClientName as clientname, rtd.TestCode as testcode, rtd.ExternalName as testname, COUNT(rt.ResultTest) as count
                                
                                                                FROM dbo.tblResultedTests  rt (NOLOCK)
                                                                Inner Join dbo.tblResultedTestsDefinitions rtd
                                                                on rt.ResultTest = rtd.TestCode
                                                
                                                                Inner Join dbo.tblAccessions acc
                                                                on rt.Accession = acc.Accession
                                                                
                                                                
                                                                INNER JOIN tblResultCodeVersions v
                                                                ON rtd.TestCode = v.TestCode 
                                                                AND rtd.Version = v.CurrentVersion

                                                                Inner Join dbo.tblClients cl (NOLOCK)
                                                                on acc.ClientCode = cl.ClientCode
                                                
                                                                JOIN 
                                                                #TempList t
                                                                ON cl.Clientcode = t.cID 
                                                                
                                                                AND  (acc.CollectionDate between @startdate and @enddate)
                                                
                                                                group by cl.ClientCode, cl.ClientName, rtd.TestCode, rtd.ExternalName
                                                                order by cl.ClientName asc
                                else
                                                SELECT distinct rtd.TestCode as testcode, rtd.ExternalName as testname, COUNT(rt.ResultTest) as count
                                
                                                                FROM dbo.tblResultedTests  rt (NOLOCK)
                                                                Inner Join dbo.tblResultedTestsDefinitions rtd
                                                                on rt.ResultTest = rtd.TestCode
                                                
                                                                Inner Join dbo.tblAccessions acc
                                                                on rt.Accession = acc.Accession
                                                                
                                                                INNER JOIN tblResultCodeVersions v
                                                                ON rtd.TestCode = v.TestCode 
                                                                AND rtd.Version = v.CurrentVersion

                                                
                                                                Inner Join dbo.tblClients cl (NOLOCK)
                                                                on acc.ClientCode = cl.ClientCode
                                                
                                                                JOIN 
                                                                #TempList t
                                                                ON cl.Clientcode = t.cID 
                                                                
                                                                AND  (acc.CollectionDate between @startdate and @enddate)
                                                
                                                                group by rtd.TestCode, rtd.ExternalName
                                                                order by rtd.TestCode asc
                END
GO
/****** Object:  StoredProcedure [dbo].[spGetResultedTestDecodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultedTestDecodes] 

	@TestCode varchar(100)
AS
BEGIN
--PA 3/26/2019 retrieval in udf because this needs to be shared with spAddToAutoReleaseQueue
	Select * from dbo.udf_GetResultedTestDecodes(@TestCode)
		
END

GO
/****** Object:  StoredProcedure [dbo].[spGetResultedTestDecodesFlag]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultedTestDecodesFlag] 

	@TestCode varchar(100),
	@Result varchar(100)
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT rtd.Decode AS Decode, rtd.flag as Flag
	FROM dbo.tblResultedTestsDefinitions rt
	LEFT JOIN dbo.tblResultedTestDecodes rtd ON rt. TestCode = rtd.TestCode
	INNER JOIN dbo.tblResultCodeVersions c ON rt.TestCode = c.TestCode AND rt.Version = c.CurrentVersion		   
	WHERE rt. TestCode = @TestCode and rtd.Decode = @result;
END
GO
/****** Object:  StoredProcedure [dbo].[spGetResultedTestDecodesResult]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultedTestDecodesResult] 

	@TestCode varchar(100),
	@Result varchar(100)
AS
BEGIN

	
	SELECT rtd.Decode AS Decode, rtd.flag as Flag
			   
		   FROM dbo.tblResultedTestsDefinitions  rt (NOLOCK)
		   
		   LEFT JOIN dbo.tblResultedTestDecodes rtd (NOLOCK)
		   ON rt. TestCode = rtd.TestCode
		   
		   INNER JOIN  tblResultCodeVersions ON rt.TestCode = tblResultCodeVersions.TestCode AND 
           rt.Version = tblResultCodeVersions.CurrentVersion		   
		   
		
		WHERE rt. TestCode = @TestCode and rtd.code = @result
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetResultedTestInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultedTestInfo] 
	
	@TestCode varchar(100)
AS
BEGIN
SELECT     o.TestCode, o.InternalName, o.ExternalName, o.Worksheet, CASE WHEN o.Worksheet = '' OR
                      o.Worksheet IS NULL THEN ISNULL(w.[Description], '') ELSE w.[Description] END AS Description, o.Department, o.DefaultValue, 
					o.NullFlag, o.ReviewFlag, o.Decimals, o.Units, o.Comment, o.SuppressFlag, o.SecureFlag, o.LOINCcode, o.InconsistentCommentCode, 
					o.ConsistentCommentCode, o.AbnormalCommentCode, o.MedicationData, o.CutoffLowLimit, o.CutoffHighLimit, o.DynamicLowLimit, 
					o.DynamicHighLimit, o.ReportNormalRangeLow, o.ReportNormalRangeHigh, o.ReportAs, o.ExpectedWindow, o.UseAlpha, o.AutoReleaseFlag, 
					o.DecodedFlagRequired, o.UseRangeLimits, o.UseCutoffLimit, o.MedicationDataIndirect, o.Version, o.LowReportAs, o.ReportAlphaRange,
					o.CutoffHoldLimit
FROM         tblResultedTestsDefinitions AS o WITH (NOLOCK) INNER JOIN
                      tblResultCodeVersions ON o.TestCode = tblResultCodeVersions.TestCode AND o.Version = tblResultCodeVersions.CurrentVersion LEFT OUTER JOIN
                      tblWorkSheetsDefinitions AS w WITH (NOLOCK) ON w.WKCode = o.Worksheet
WHERE     (o.TestCode = @TestCode)
		
END

GO
/****** Object:  StoredProcedure [dbo].[spGetResultedTestInfoByTest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultedTestInfoByTest] 
	@Accession as varchar(100),
	@TestCode varchar(100) = ''
AS
BEGIN
	SET NOCOUNT ON;
	IF @TestCode <> ''
		SELECT * FROM TblResultedTests
		WHERE Accession = @Accession AND ResultTest = @TestCode AND [Status] != 'Cancelled';
	ELSE
		SELECT * FROM TblResultedTests
		WHERE Accession = @Accession;
END

GO
/****** Object:  StoredProcedure [dbo].[spGetResultedTestNames]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultedTestNames] 
	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT TestCode, InternalName
	FROM tblResultedTestsDefinitions with (NOLOCK)
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetResultedTestParams]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultedTestParams]     
    
 @TestCode varchar(100)    
AS    
BEGIN    
    
     
SELECT     rtp.id, rt.TestCode, rtp.Sex, rtp.MinAge, rtp.MaxAge, rt.UseAlpha, rt.alphaNormal, rt.AutoReleaseFlag, rt.DecodedFlagRequired, rt.UseRangeLimits, rtp.LowLimit,     
                      rtp.HighLimit, rtp.NormalLowLimit, rtp.LowFlag, rtp.NormalHighLimit, rtp.HighFlag, rtp.CriticalLowLimit, rtp.CriticalLowFlag, rtp.CriticalHighLimit, rtp.CriticalHighFlag,     
                      rtp.AutoReleaseLowLimit, rtp.ReviewLowFlag, rtp.AutoReleaseHighLimit, rtp.ReviewHighFlag, rt.UseCutoffLimit, rtp.DisplayResultAs, rtp.DynamicLow, rtp.DynamicLowReportAs,     
                      rtp.DynamicHigh, rtp.DynamicHighReportAs, rtp.Version  ,rtp.LLAge, rtp.LLAgeUnit, rtp.HLAge, rtp.HLAgeUnit  
FROM         tblResultedTestsDefinitions AS rt WITH (NOLOCK) LEFT OUTER JOIN    
                      tblResultedTestsParams AS rtp WITH (NOLOCK) ON rt.TestCode = rtp.ResultedTest INNER JOIN    
                      tblResultCodeVersions ON rt.TestCode = tblResultCodeVersions.TestCode AND rt.Version = tblResultCodeVersions.CurrentVersion AND     
                      rtp.Version = tblResultCodeVersions.CurrentVersion    
      
  WHERE rt. TestCode = @TestCode    
 order by   rtp.MaxAge , rtp.sex  
END 

GO
/****** Object:  StoredProcedure [dbo].[spGetResultedTestReflexParams]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultedTestReflexParams] 

	@TestCode varchar(100)
AS
BEGIN

	

	SELECT     rtd.ReflexLowValue, rtd.ReflexHighValue, rtd.ReflexLowTestCode, rtd.ReflexHighTestCode, ISNULL(otdl.Description, '') AS ReflexTestLowDesc, 
						  ISNULL(otdh.Description, '') AS ReflexTestHighDesc, ReflexInconsistentTestCode, ReflexConsistentTestCode, 
						  ISNULL(otdi.Description, '') AS ReflexInconsistentTestDesc,ISNULL(otdc.Description, '') AS ReflexConsistentTestDesc  
	FROM         tblResultedTestsDefinitions AS rtd WITH (nolock) INNER JOIN
						  tblResultCodeVersions ON rtd.TestCode = tblResultCodeVersions.TestCode AND rtd.Version = tblResultCodeVersions.CurrentVersion 
						  LEFT OUTER JOIN  tblOrderedTestsDefinitions AS otdl WITH (nolock) ON rtd.ReflexLowTestCode = otdl.OrderedTest 
						  LEFT OUTER JOIN  tblOrderedTestsDefinitions AS otdh WITH (nolock) ON rtd.ReflexHighTestCode = otdh.OrderedTest
						  LEFT OUTER JOIN  tblOrderedTestsDefinitions AS otdi WITH (nolock) ON rtd.ReflexInconsistentTestCode = otdi.OrderedTest	
						  LEFT OUTER JOIN  tblOrderedTestsDefinitions AS otdc WITH (nolock) ON rtd.ReflexConsistentTestCode = otdc.OrderedTest	
	WHERE     (rtd.TestCode = @TestCode)
		
	SELECT rta.Code as txtDecode, rta.Decode as txtDecodeValue , rta.ReflexTestCode as txtReflexTestCode, otd.[Description] as txtReflexTextDescription
	FROM dbo.tblResultedTestDecodes rta (nolock)
	LEFT JOIN dbo.tblOrderedTestsDefinitions otd (nolock)
	ON rta.ReflexTestCode  = otd.OrderedTest
	WHERE rta.TestCode =  @TestCode
		
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetResultedTestsForAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultedTestsForAccession] 
	@Accession varchar(100),
	@BillFlag bit = 0
AS
BEGIN
SET NOCOUNT ON;

if @BillFlag = 0 begin
	SELECT ResultTest
	FROM tblResultedTests with (NOLOCK)
	where Accession = @Accession
end
else begin
	SELECT ResultTest
	FROM tblResultedTests with (NOLOCK)
	where Accession = @Accession
	and upper(Result) <> 'NOT TESTED'
	and upper(Status) <> 'CANCELLED'
end                           
END
GO
/****** Object:  StoredProcedure [dbo].[spGetResultedTestValue]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
CREATE PROCEDURE [dbo].[spGetResultedTestValue] 
                @Accession as varchar(100),
                @TestCode varchar(100) 
AS
BEGIN
                SET NOCOUNT ON;
                SELECT Result FROM tblResultedTests
                WHERE Accession = @Accession AND ResultTest = @TestCode AND [Status] != 'Cancelled';
END
GO
/****** Object:  StoredProcedure [dbo].[spGetResultEntryAuditData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		IMZ
-- Create date: 01/15/2014
-- Description:	Gets all the Result Entry Audit data
-- =============================================
CREATE PROCEDURE [dbo].[spGetResultEntryAuditData]
	@Accession as varchar(100)
	
AS
BEGIN

SELECT     art.Accession, art.ResultTest AS TestCode, rtd.ExternalName AS TestName, art.Result, art.ResultComment, art.Status, art.QSSLastUpdateID, art.QSSUpdateDate, 
                      p.ptLastName + ', ' + p.ptFirstName AS PatientName, p.ptDateOfBirth AS DOB
FROM         tblResultCodeVersions INNER JOIN
                      tblResultedTestsDefinitions AS rtd WITH (nolock) ON tblResultCodeVersions.TestCode = rtd.TestCode AND 
                      tblResultCodeVersions.CurrentVersion = rtd.Version RIGHT OUTER JOIN
                      tblAuditResultedTests AS art LEFT OUTER JOIN
                      tblAccessions AS a WITH (nolock) ON a.Accession = art.Accession ON rtd.TestCode = art.ResultTest LEFT OUTER JOIN
                      tblPatient AS p WITH (nolock) ON a.PatientID = p.PatientId
WHERE     (art.Accession = @Accession)
ORDER BY a.QSSCreatedDate
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetResultHistorybyPatient]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultHistorybyPatient]

	@PatientID varchar(100),
	@ResultTest varchar(100)

AS
  
 
BEGIN 

	SELECT     tblResultedTests.id, tblAccessions.Accession, tblAccessions.PatientID, tblResultedTests.PerformedTest, tblResultedTests.ResultTest, tblResultedTests.Result, 
						  tblResultedTests.ResultFlag, tblResultedTests.Outcome, tblAccessions.CollectionDate, tblResultedTestsDefinitions.InternalName, 
						  tblResultedTestsDefinitions.ExternalName
	FROM         tblAccessions INNER JOIN
						  tblResultedTests ON tblAccessions.Accession = tblResultedTests.Accession INNER JOIN
						  tblResultedTestsDefinitions ON tblResultedTests.ResultTest = tblResultedTestsDefinitions.TestCode AND 
						  tblResultedTests.Version = tblResultedTestsDefinitions.Version
	WHERE     (tblAccessions.PatientID = @PatientID) AND (tblResultedTests.ResultTest = @ResultTest)
	ORDER BY tblAccessions.CollectionDate


END


GO
/****** Object:  StoredProcedure [dbo].[spGetResultHoldList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultHoldList]
	
	@Worksheet varchar(200)=Null,
	@Status varchar(50) 	
	
AS
BEGIN

	SET NOCOUNT ON

	SELECT a.Worksheet, a.Accession, d.ptFirstName + ' ,' + d.ptLastName as PatientName ,
	 b.PatientId, d.ptSex , a.PerformedTest ,c.ExternalName as ElemName,a.Result 
	 
	FROM tblResultedTests  a (NOLOCK)
	
	INNER JOIN tblAccessions b (NOLOCK)
	ON a.Accession = b.Accession 
	 	
    LEFT OUTER JOIN tblPatient  d (NOLOCK)
	ON b.PatientID  = d.PatientId 
	
	LEFT OUTER JOIN tblResultedTestsDefinitions  c (NOLOCK)
	ON c.TestCode   = a.ResultTest       
    	   
	WHERE a.Worksheet  = ISNULL( @Worksheet, a.Worksheet) and
	      a.Status =@Status 
			
			
	ORDER BY b.Accession ,  a.PerformedTest , a.ResultTest  asc
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetResultsReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultsReport] 
@StartDate datetime,
@EndDate datetime,
@ResultCodes varchar(1000) 
AS
BEGIN
SET NOCOUNT ON

Create table #tmpResultCodes
(
ResultTest varchar(100) NOT NULL
)

DECLARE   
	      @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @FieldList varchar(2000)
		
Set @FieldList =''
Set @FieldList = @ResultCodes 
Set @StartPos = 1
Set @EndPos = 1
 -- Start the looping operation
While @EndPos > 0
   Begin
      Set @EndPos = CharIndex('|', @FieldList, @StartPos)
      If @EndPos > 0
         Begin
            Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
			 
            -- Add current row to TempTable
            Insert #tmpResultCodes (ResultTest) Values (@CurVal)
            Set @StartPos = @EndPos + 1
         End
   
   
 END
PRINT @FieldList
select rt.Accession , convert(varchar,rt.EntryDate,101) As EntryDate, isnull(pt.ptFirstName, ' ') + ', ' + isnull(pt.ptLastName, ' ') as PatientName, 
convert(varchar, isnull(pt.ptDateOfBirth, '2000-01-01 00:00:00'), 101) as DateOfBirth, ac.CollectionDate, ac.ReceiveDate, 
ac.ClientCode, isnull(cl.ClientName, '') as ClientName, ac.PhysicianCode, isnull(ph.FullName, '') as PhysicianName, isnull(ph.NPI, '') as NPI, 
substring(rt.ResultComment, 1, 130) as Comments, 
CASE WHEN (ba.CurrentBillTo IS NOT NULL AND ba.CurrentBillTo = 'Secondary') THEN ai.SecondaryInsuranceID ELSE ai.PrimaryInsuranceID END InsuranceID,
CASE WHEN (ba.CurrentBillTo IS NOT NULL AND ba.CurrentBillTo = 'Secondary') THEN ai.SecondaryPolicy ELSE ai.PrimaryPolicy END PolicyID,
ResultTest, Result
from dbo.tblResultedTests (nolock) rt
inner join tblAccessions ac
on ac.Accession = rt.Accession
left join tblPatient pt
on ac.PatientID = pt.PatientId
left join tblClients cl
on cl.ClientCode = ac.ClientCode
left join tblPhysicians ph
on ph.PhysicianCode = ac.PhysicianCode
left join tblAccessionInsuranceInfo ai
on ai.Accession = ac.Accession
left join tblBillAccessions ba
on ba.Accession = ac.Accession
left join tblInsuranceCompanies ic
on ic.InsuranceCode = 
CASE WHEN (ba.CurrentBillTo IS NOT NULL AND ba.CurrentBillTo = 'Secondary') THEN ai.SecondaryInsuranceID ELSE ai.PrimaryInsuranceID END
where rt.EntryDate BETWEEN @StartDate AND @EndDate
and ResultTest IN (Select ResultTest from #tmpResultCodes)
and Result != '' 

order by Accession , EntryDate , Result



END
GO
/****** Object:  StoredProcedure [dbo].[spGetResultTemplates]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetResultTemplates]         
         
AS        
BEGIN        
 -- SET NOCOUNT ON added to prevent extra result sets from        
 -- interfering with SELECT statements.        
 SET NOCOUNT ON;        
        
    -- Insert statements for procedure here        
select p.id,Results,Code,H.Heading,Abnormal from tblPathologyResultTemplates  as P   Left join  tblHeadings as H on P.Heading=H.HeadingCode 
   
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetResultTestCodeDesc]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		HF
-- Create date: 06/30/2011
-- Description:	This procedure gets the description for all ResultTesT Codes
-- =============================================
CREATE PROCEDURE [dbo].[spGetResultTestCodeDesc]	
	@TestCode as varchar(100)

AS
BEGIN
DECLARE   @ResultTestCode as varchar(100)
	    , @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @FieldList varchar(2000)
		



		
	
CREATE TABLE #tmpResultTest
(
    ResultTest varchar(20) NOT NULL,
	ExternalName varchar(100) NULL
)



Set @FieldList =''
Set @FieldList = @TestCode + '|'
Set @StartPos = 1
Set @EndPos = 1
 -- Start the looping operation
While @EndPos > 0
   Begin
      Set @EndPos = CharIndex('|', @FieldList, @StartPos)
      If @EndPos > 0
         Begin
            Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
			 
            -- Add current row to TempTable
            Insert #tmpResultTest (ResultTest) Values (@CurVal)
            Set @StartPos = @EndPos + 1
         End
   
   --PRINT @FieldList
 END

  UPDATE #tmpResultTest
  SET ExternalName = tblResultedTestsDefinitions.ExternalName 
  FROM #tmpResultTest
  INNER JOIN  tblResultedTestsDefinitions
  ON ResultTest = tblResultedTestsDefinitions.TestCode
 
  SELECT ResultTest, ExternalName FROM #tmpResultTest
END
GO
/****** Object:  StoredProcedure [dbo].[spGetRouteInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetRouteInfo]
	@RouteCode as varchar(200)
AS
BEGIN
	select *
	from tblRptRoutesDefinitions where 
		Routecode = @Routecode
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetRoutes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetRoutes] 
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT RouteCode, RouteName, Address, City, State, Zip, Telephone, RouteCode + ' (' + RouteName + ') ' as RouteCodeName
	FROM tblRptRoutesDefinitions with (NOLOCK)
	ORDER BY RouteCode asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetSalesClients]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetSalesClients] 	
	@SalesmanCode varchar(20)
AS
BEGIN
	
	SET NOCOUNT ON;    
	SELECT a.SalesmanCode, a.ClientCode, b.SalesmanName, a.Commission, b.Territory, b.SalesGroup, b.Specialty, b.Service
	FROM tblClientsSalesman a with (NOLOCK)
	
	INNER JOIN
	
	tblSalesman  b with (NOLOCK)
	on a.SalesmanCode  = b.SalesmanCode 
	WHERE a.SalesmanCode  = @SalesmanCode
	ORDER BY a.SalesmanCode  asc

END


 --******************************************************************
GO
/****** Object:  StoredProcedure [dbo].[spGetSalesInfoMA]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetSalesInfoMA] 
		@SalesmanCode varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT *
	FROM tblSalesman with (NOLOCK)
	WHERE SalesmanCode = @SalesmanCode
		
END
 --***********************************************************************
 --ALTERED PROCEDURES
 --***********************************************************************
 
GO
/****** Object:  StoredProcedure [dbo].[spGetSalesman]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetSalesman] 
	--@LabCode varchar(20)
	@isManager bit
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    if @isManager = 'True'
    begin
		SELECT *
		FROM tblSalesman with (NOLOCK)
		where ismanager = 'True'
		--WHERE LabCode = @LabCode
		ORDER BY SalesManCode asc
    end
    else
    begin
		SELECT *
		FROM tblSalesman with (NOLOCK)
		--WHERE LabCode = @LabCode
		ORDER BY SalesManCode asc
    end
	
END


--*****************************************************************

GO
/****** Object:  StoredProcedure [dbo].[spGetSalesmanInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetSalesmanInfo] 	
	@SalesmanCode varchar(20)
AS
BEGIN
	
	SET NOCOUNT ON;    
	SELECT *
	FROM tblSalesman a with (NOLOCK)
	
	WHERE SalesmanCode  = @SalesmanCode
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetSalesmanInfoByClient]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetSalesmanInfoByClient] 	
	@ClientCode varchar(20)
AS
BEGIN
	
	SET NOCOUNT ON;    

	SELECT     tblSalesman.SalesmanCode, tblSalesman.SalesmanName, tblSalesman.Territory, tblSalesman.SalesGroup, tblSalesman.Specialty, tblSalesman.Service
	FROM         tblSalesman INNER JOIN
						  tblClients ON tblSalesman.SalesmanCode = tblClients.SalesmanCode
	Where tblClients.clientcode = @ClientCode
                      
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetSalesmanlistAll]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create Procedure [dbo].[spGetSalesmanlistAll]

As
BEGIN
select '' as SalesmanName, '' as SalesmanCode
union all
 Select SalesmanName + ' (' + SalesmanCode + ')' as SalesmanName, SalesmanCode 
 from tblSalesman
-- where SalesmanName <> ''
 order by SalesmanName
END





GO
/****** Object:  StoredProcedure [dbo].[spGetSalesPortalData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetSalesPortalData]
	
AS
BEGIN
	SET NOCOUNT ON;
	select distinct
	a.Accession,
	a.CollectionDate,
	a.ReceiveDate,
	a.ClientCode, 
	c.ClientName,
	a.PhysicianCode,
	phy.FullName, 
	sal.SalesmanCode,
	sal.SalesmanName,
	sal.SalesGroup,
	a.CurrentBillType 
	, 0.00 as Charge
	,  0.00 as  Payment
	, '1900-01-01 00:00:00.000' as ChargeDate
	, '1900-01-01 00:00:00.000' as PaymentDate
	, isnull(ins.Name, '') as InsuranceName
	, '' as OrderedTestCode
	, '' as CPTcode
	
	from tblAccessions a
	
	left outer join tblPatient pat
	on pat.PatientID = a.PatientID
	
		inner join tblClients c
		on a.ClientCode = c.ClientCode
		inner join tblPhysicians phy
		on a.PhysicianCode = phy.PhysicianCode
		left outer JOIN tblClientsSalesman cs on c.clientcode = cs.ClientCode
		left outer JOIN tblSalesman sal (nolock) on cs.SalesmanCode = sal.SalesmanCode
		LEFT OUTER JOIN tblInsuranceCompanies ins
		ON ins.InsuranceCode = pat.PrimaryInsuranceID
	where  
	--sal.SalesmanCode <> '' and sal.SalesmanCode is not null
	--and 
	a.QSSUpdateDate > convert(varchar,dateadd(d, -14,getdate()),101)
	and 
	a.accession not in 
	(select Accession from tblBillAccessions)

union
select distinct
	a.Accession,
	a.CollectionDate,
	a.ReceiveDate,
	a.ClientCode, 
	c.ClientName,
	a.PhysicianCode,
	phy.FullName, 
	sal.SalesmanCode,
	sal.SalesmanName,
	sal.SalesGroup,
	a.CurrentBillType 
	,isnull(b.TotalFeeAmt, 0.00)  as Charge
	, isnull(p.PaymentAmt, 0.00) as  Payment
	, isnull(b.QSSCreatedDate, '') as ChargeDate
	--, isnull(p.QSSCreatedDate, '') as PaymentDate
	, CONVERT(varchar, p.QSSCreatedDate, 121) as PaymentDate
	, isnull(ins.Name, '') as InsuranceName
	--, a.SpecimenDataXML.value('(/QSSLISOrderRecord/specimencodes/specimencode/@description)[1]', 'varchar(max)') as SpecimenType
	, b.OrderedTestCode
	, b.CPTcode
		
	from tblBillAccessions a
	left outer join tblAccessionInsuranceInfo aii
	on aii.Accession = a.Accession
	left outer join tblBill b
	on b.Accession = a.Accession
	left outer join tblPayment p
	on p.Accession = b.Accession
	and p.OrderedTest = b.OrderedTestCode
	      
	       -- and p.BTcode = b.BTCode
	        and p.CPTcode = b.CPTcode
			--and p.Modifier = b.Modifier
			--and p.GroupFlag = b.GroupFlag
	
		
		--inner join tblPatient pat
		--on pat.PatientID = a.PatientID
		inner join tblClients c
		on a.ClientCode = c.ClientCode
		inner join tblPhysicians phy
		on a.PhysicianCode = phy.PhysicianCode
		left outer JOIN tblClientsSalesman cs on c.clientcode = cs.ClientCode
		left outer JOIN tblSalesman sal (nolock) on cs.SalesmanCode = sal.SalesmanCode
		LEFT OUTER JOIN tblInsuranceCompanies ins
		ON ins.InsuranceCode = aii.PrimaryInsuranceID
	where  Upper(substring(b.[Status], 1, 4)) = 'BILL'
	and p.CPTCode <> ''
	and (p.QSSUpdateDate > convert(varchar,dateadd(d, -14,getdate()),101)
or  a.QSSUpdateDate > convert(varchar,dateadd(d, -14,getdate()),101))
	--and 
	--sal.SalesmanCode <> '' and sal.SalesmanCode is not null
	--and isnull(p.PaymentAmt, 0.00) <> 0 --
	Group By 
	a.CollectionDate,
	--a.CollectionDate,
	a.ReceiveDate,
	a.ClientCode, 
	c.ClientName,
	a.PhysicianCode,
	phy.FullName, 
	sal.SalesmanCode,
	sal.SalesmanName,
	sal.SalesGroup,
	a.CurrentBillType, a.Accession, p.OrderedTest, p.CPTCode, --p.Modifier,-- p.BTCode, p.GroupFlag,
	b.TotalFeeAmt,  p.PaymentAmt, b.QSSCreatedDate, p.QSSCreatedDate, ins.Name, b.OrderedTestCode
	, b.CPTcode
	order by Accession
		
	
	SELECT SalesmanCode, SalesmanName, convert(varchar, GETDATE(), 100)  as UpdateTimestamp, SalesGroup
	from tblSalesman
END
GO
/****** Object:  StoredProcedure [dbo].[spGetSalesPortalOTCountData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetSalesPortalOTCountData]
	
AS
BEGIN
	SET NOCOUNT ON;
	select distinct
	ot.Accession, ot.OrderedTest, otd.[Description], CollectionDate, a.ClientCode, ClientName, 
	a.PhysicianCode, FullName, sal.SalesmanCode, SalesmanName, SalesGroup
	from tblAccessions a
	inner join tblOrderedTests ot
	on ot.Accession = a.Accession
	inner join tblOrderedTestsDefinitions otd
	on otd.OrderedTest = ot.OrderedTest
	inner join tblClients c
	on a.ClientCode = c.ClientCode
	inner join tblPhysicians phy
	on a.PhysicianCode = phy.PhysicianCode
	left outer JOIN tblClientsSalesman cs on c.clientcode = cs.ClientCode
	left outer JOIN tblSalesman sal (nolock) on cs.SalesmanCode = sal.SalesmanCode
	where a.QSSUpdateDate > convert(varchar,dateadd(d, -7,getdate()),101)
	order by ot.accession
END

GO
/****** Object:  StoredProcedure [dbo].[spGetSalesPortalProblemInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetSalesPortalProblemInfo]
	@Worksheet as varchar(100) = 'TIQ'
AS
BEGIN
	SET NOCOUNT ON;
	Select a.Accession, a.ClientCode, c.ClientName, a.PhysicianCode, phy.FullName as PhysicianName, s.SalesmanCode, s.SalesmanName, s.SalesGroup, rt.ResultTest, rtd.ExternalName, a.CollectionDate, getdate()
	, REPLACE(ISNULL(a.ProblemComments, ''), char(9), ' ') as ProblemComments
	, pat.ptFirstName + ' ' + pat.ptLastName as Patient, pat.ptDateOfBirth as BirthDate
	, dbo.GetResultStatus(a.Accession) as Status
	from tblResultedTests rt
	inner join tblAccessions a
	on rt.Accession = a.Accession
	inner join tblclients c
	on c.ClientCode = a.ClientCode
	inner join tblPhysicians phy
	on phy.PhysicianCode = a.PhysicianCode
	inner join tblResultedTestsDefinitions rtd
	on rtd.TestCode = rt.ResultTest
	and rtd.Version = rt.Version
	inner join tblPatient pat
	on pat.PatientId = a.PatientID

	left outer join tblClientsSalesman cs
	on cs.ClientCode = c.ClientCode
	left outer join tblSalesman s
	on s.SalesmanCode = cs.SalesmanCode

	where rt.Worksheet = @Worksheet
	and dbo.GetResultStatus(a.Accession) <> 'Final'
	order by a.Accession, rt.ResultTest
END

GO
/****** Object:  StoredProcedure [dbo].[spGetSampleDataReportAccessions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetSampleDataReportAccessions]
	@Client varchar(50)= NULL,	
	@StartDate datetime ,
	@EndDate datetime
	
AS
BEGIN
 
  	        select a.Accession			
			from tblAccessions a (nolock)			
			where a.ClientCode  LIKE ISNULL(@Client, a.ClientCode)
			and (a.ReceiveDate between @startdate and @enddate)			 
			order by a.ReceiveDate desc
  
END
GO
/****** Object:  StoredProcedure [dbo].[spGetSavedGeneratedReportQuery]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetSavedGeneratedReportQuery]

		
AS
BEGIN

	SELECT QueryName, SQLstring
	FROM dbo.tblBillingGeneratedQueries (NOLOCK)	
	
	ORDER BY QueryName asc
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetSavedGeneratedReportQueryLab]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetSavedGeneratedReportQueryLab]

		
AS
BEGIN

	SELECT QueryName, SQLstring
	FROM tblLabGeneratedQueries (NOLOCK)	
	
	ORDER BY QueryName asc
	
END




GO
/****** Object:  StoredProcedure [dbo].[spGetServerDateTime]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
CREATE PROCEDURE [dbo].[spGetServerDateTime]
As
SELECT GETDATE()

GO
/****** Object:  StoredProcedure [dbo].[spGetSignedPathologyStatus]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetSignedPathologyStatus]    
@Accession varchar(100),  
@Result varchar(10) output    
as  
begin  
  
declare @out varchar(10)  
  
select @out =count(Signed) from tblPathologyCases where Accession =@Accession and Signed=0   
  
 if(@out = 0)  
  begin    
  set @Result = 'Signed'    
  end  
else  
 begin  
    set @Result= 'Unsigned'   
 end  
   
   
   
   
end  


GO
/****** Object:  StoredProcedure [dbo].[spGetSlideLabelList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
CREATE procedure [dbo].[spGetSlideLabelList]        
@CaseNumber varchar(100)        
as        
begin        
        
--select p.Accession,p.CaseNumber,ClientCaseNumber,CollectionDate,a.PatientID,T.ptLastName,T.ptFirstName,ps.Source,s.StainRequest  from tblpathologycases p Left Join     
--tblAccessions a on p.Accession =a.Accession     Left join tblPatient T on  T.PatientID =a.PatientID  Left join tblPathologySources ps on ps.caseNumber = p.caseNumber     
--Left Join tblStains s on p.CaseNumber =s.CaseNumber  where p.CaseNumber = '@CaseNumber        
        
 select p.Accession,p.CaseNumber,ClientCaseNumber,CollectionDate,a.PatientID,T.ptLastName,T.ptFirstName    
,ps.Source,ps.SourceID,ps.Cassettes    
,sm.StainDescription as StainRequest,sm.XCounter     
from tblpathologycases p     
Left Join tblAccessions a on p.Accession =a.Accession         
Left join tblPatient T on  T.PatientID =a.PatientID      
Left join tblPathologySources ps on ps.caseNumber = p.caseNumber     
Left join tblpathologyStains ss on ps.CaseNumber=ss.CaseNumber and ps.sourceID = ss.Source    
Left Join tblstainMaster sm on sm.StainID  = ss.StainRequest  where ps.CaseNumber = @CaseNumber     order by ps.SourceID  
  
select Source,SourceID from tblPathologySources where CaseNumber = @CaseNumber     order by SourceID  
  
end    
    
GO
/****** Object:  StoredProcedure [dbo].[spGetSourcesforCase]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetSourcesforCase]       
 @CaseNumber as varchar(100)    
AS      
BEGIN      
       
 SET NOCOUNT ON;      
      
 SELECT     *    
 FROM         tblPathologySources    
 Where CaseNumber = @CaseNumber    
 order by id                         
                             
                            
END     

   
GO
/****** Object:  StoredProcedure [dbo].[spGetSourcesforCaseGrosserForm]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spGetSourcesforCaseGrosserForm]  
@caseNumber varchar(100)  
as  
begin  
 select CaseNumber,Accession,TestCode,Status,ClientCaseNumber from tblPathologycases where CaseNumber=@CaseNumber  
 end  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetSpecimenDataXML]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spGetSpecimenDataXML]

	@Accession varchar(100)
	
AS
BEGIN

Select SpecimenDataXML from tblAccessions
where Accession = @Accession


 
END
GO
/****** Object:  StoredProcedure [dbo].[spGetSpecimenInfoForRequisitionEntry]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetSpecimenInfoForRequisitionEntry] 
      @SpecimenList varchar(1000)
AS
BEGIN
	
SET NOCOUNT ON;

DECLARE   @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @FieldList varchar(2000)
		, @rSpecimenCodesList varchar(500)

if object_id('tempdb..#tempAccessionSpecimenCodes') is not null

	drop table #tempAccessionSpecimenCodes
	
create table #tempAccessionSpecimenCodes
( 
	 rSpecimenCode varchar(20)   
)  

Set @rSpecimenCodesList = @SpecimenList


		Set @FieldList =''
		Set @FieldList = @rSpecimenCodesList + '|'
		Set @StartPos = 1
		Set @EndPos = 1
		 -- Start the looping operation
		While @EndPos > 0
		   Begin
			  Set @EndPos = CharIndex('|', @FieldList, @StartPos)
			  If @EndPos > 0
				 Begin
					Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
					-- Add current row to TempTable
					Insert #tempAccessionSpecimenCodes (rSpecimenCode) Values (@CurVal)
					Set @StartPos = @EndPos + 1
				 End
		   End

		  
		  SELECT Specimen, SpecimenCode
	       
		  
				  
		  from  #tempAccessionSpecimenCodes aot
		  INNER JOIN tblSpecimens otd
		  on aot.rSpecimenCode = otd.SpecimenCode
		  order by SpecimenCode
END
GO
/****** Object:  StoredProcedure [dbo].[spGetSpecimenLISFromPF]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetSpecimenLISFromPF]	
	@SpecimenPF varchar(50)
AS
BEGIN
	select SpecimenLIS FROM tblSpecimenPracticeFusionMapping
 where SpecimenPF=@SpecimenPF
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetSpecimens]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetSpecimens]
	
AS
BEGIN
	select specimen, specimencode from tblSpecimens with (nolock) 
	
	Union Select '[Please Select]' as specimen, '' as specimencode
	order by specimen
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetSpecimentCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetSpecimentCode] 
	@Specimen varchar(100)
AS
BEGIN
	SET NOCOUNT ON;
	SET @Specimen = REPLACE(@Specimen, 'Urine', 'UR')
	SELECT SpecimenCode
	FROM tblSpecimens with (NOLOCK)
	WHERE SpecimenCode = @Specimen 
	
	
	
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetStainDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[spGetStainDefinitions]        
 @StainID as varchar(20)      
AS        
BEGIN        
 select StainID,StainDescription ,isActive,XCounter from tblStainMaster where StainID=@StainID      
END  
GO
/****** Object:  StoredProcedure [dbo].[spGetStainRequest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spGetStainRequest]      
@CaseNumber varchar(100)      
as      
begin      
--select StainRequest from tblStains where caseNumber=@CaseNumber   
select distinct sm.StainDescription as StainRequest  from tblpathologyStains ps Left join tblStainMaster sm on ps.StainRequest = sm.StainID where CaseNumber=@CaseNumber     
end  
GO
/****** Object:  StoredProcedure [dbo].[spGetStains]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetStains]     
     
AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;    
    
    -- Insert statements for procedure here    
select StainID,StainDescription  from tblStainMaster   
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetStainsforCase]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetStainsforCase]             
 @CaseNumber as varchar(100),      
 @Source as varchar(100)       
AS            
BEGIN            
             
 SET NOCOUNT ON;            
            
 SELECT    ps.StainID,ps.CaseNumber,ps.Source,ps.StainRequest       
 FROM         tblPathologyStains ps Left join    tblStainMaster sm on ps.StainRequest = sm.StainID    
 Where CaseNumber = @CaseNumber  and Source = @Source                          
                                   
                                  
END 
GO
/****** Object:  StoredProcedure [dbo].[spGetStates]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetStates] 
	
AS
BEGIN
	
	SET NOCOUNT ON;


	SELECT StateCode, StateName 
	FROM dbo.tblStates 
	ORDER BY StateName asc
END



GO
/****** Object:  StoredProcedure [dbo].[spGetStatisticsDailyReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetStatisticsDailyReport] 

@StartDate datetime ,
@EndDate datetime,
@SalesmanCode varchar(200)= null

AS
 BEGIN
	 SELECT a.Accession,  --a.CollectionDate,
	 ISNULL(s2.SalesmanName, '')-- + ' (' + ISNULL(s2.salesmancode, '') + ')' 
	  as  SalesGroup,
	 c.ClientName + ' (' + c.ClientCode + ')' as Client,
	 c.Address + ', ' + c.City + ', ' + c.State + ', ' + c.Zip as ClientAddress,
	 ISNULL(ic.Name, '') as InsuranceName,
	 phy.FullName as PhysicianName,
	 ISNULL(v.TestsNameOrdered, '') as TestsNameOrdered
	 FROM tblAccessions a
	 INNER JOIN tblClients c
	 ON c.ClientCode = a.ClientCode
	 INNER JOIN tblPhysicians phy
	 on phy.PhysicianCode = a.PhysicianCode
	 INNER JOIN tblClientsSalesman cs
	 ON cs.ClientCode = c.ClientCode
	 INNER JOIN tblSalesman s1
	 ON s1.SalesmanCode = cs.SalesmanCode
	 INNER JOIN vAccessionOTNames v
	 ON v.Accession = a.Accession
	 INNER JOIN tblPatient pat
	 on pat.PatientID = a.PatientID
	 LEFT OUTER JOIN tblSalesman s2
	 ON s1.SalesGroup = s2.SalesmanCode
	 LEFT OUTER JOIN tblInsuranceCompanies ic
	 ON ic.InsuranceCode = pat.PrimaryInsuranceID  
	 WHERE CollectionDate BETWEEN  @StartDate AND @EndDate
	 and s1.SalesmanCode LIKE ISNULL(@SalesmanCode, s1.SalesmanCode) 
	 Order by s2.SalesmanName, s2.salesmancode, s1.SalesmanName, s1.SalesmanCode, a.CollectionDate
	 
 END
 
 
GO
/****** Object:  StoredProcedure [dbo].[spGetStatisticsMonthlyReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetStatisticsMonthlyReport] 

@StartDate datetime ,
@EndDate datetime,
@SalesmanCode varchar(200)= null

AS
 BEGIN

if object_id('tempdb..#tempStatisticsMonthl') is not null

	drop table #tempStatisticsMonthly
	
create table #tempStatisticsMonthly
( 
	 iCount int,
	 BeginnningOfMonth datetime,
	 EndOfMonth datetime,
	 ClientCode varchar(100)
)  

  declare @date as datetime =  @startdate
  declare @bom as datetime = @startdate
  declare @AccessionCount as int = 0
  
  while @bom < @enddate
  begin

	declare  @eom  as datetime = EOMONTH(@date) 

	if @eom >  @enddate set @eom = @enddate
	INSERT INTO #tempStatisticsMonthly
	select  count(*) as iCount , @bom as BeginingOfMonth,  @eom as EndOfMonth, c.ClientCode
	from tblAccessions a
	inner join tblClients c
	on c.ClientCode = a.ClientCode
	inner join tblClientsSalesman cs
	on cs.ClientCode = c.ClientCode
	inner join tblSalesman s1
	on s1.SalesmanCode = cs.SalesmanCode
	where CollectionDate between @bom and DATEADD(second,-1,datediff(dd,0,@eom)+1)
	and s1.SalesmanCode LIKE ISNULL(@SalesmanCode, s1.SalesmanCode) 
	group by c.ClientCode
	
	select @date =  EOMONTH(DATEADD(m, DATEDIFF(m, -1, @eom), 0)) --end of next month
	--select @date =  dateadd(dd, 7, @date)
	--select @bom = dateadd(dd, 1, @eom)
	select @bom = DATEADD(m, DATEDIFF(m, -1, @eom), 0) --beginning of next month
  end

SELECT ISNULL(s2.salesmancode, '') as ManagerCode, ISNULL(s2.SalesmanName, '') as  SalesGroupName, s1.SalesmanCode as SalesmanCode,  s1.SalesmanName, 
	c.ClientCode, c.ClientName, RTrIM(c.Address + ' ' + c.Address2) as Address, c.City, c.State, c.Zip
	, st.iCount as AccessionCount, CONVERT(varchar, st.BeginnningOfMonth, 101) + '-' +  CONVERT(varchar, st.EndOfMonth, 101) AS DateRange
	from tblAccessions a
	inner join tblClients c
	on c.ClientCode = a.ClientCode
	inner join #tempStatisticsMonthly st
	on st.ClientCode = a.ClientCode
	inner join tblClientsSalesman cs
	on cs.ClientCode = c.ClientCode
	inner join tblSalesman s1
	on s1.SalesmanCode = cs.SalesmanCode
	left outer join tblSalesman s2
	on s1.SalesGroup = s2.SalesmanCode
	 group by s2.salesmancode, s2.SalesmanName, s1.SalesmanCode, s1.SalesmanName, c.ClientName, c.ClientCode, c.Address, c.Address2, c.City, c.State, c.Zip, st.iCount, st.BeginnningOfMonth, st.EndOfMonth
	Order by s2.SalesmanName, s2.salesmancode, s1.SalesmanName, s1.SalesmanCode, st.BeginnningOfMonth

  END
  
  
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetStatisticsTNPReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetStatisticsTNPReport] 

@StartDate datetime ,
@EndDate datetime,
@SalesmanCode  varchar(200)= null

AS
 BEGIN
	SELECT ISNULL(s2.salesmancode, '') as ManagerCode, ISNULL(s2.SalesmanName, '') as  SalesGroupName, s1.SalesmanCode as SalesmanCode,  s1.SalesmanName, 
	a.CollectionDate as [Date], a.Accession, c.ClientCode, c.ClientName, 
	pt.ptLastName + ', ' + pt.ptFirstName as PatientName, CONVERT(varchar, pt.ptDateOfBirth, 101) AS DateOfBirth, pt.ptSex as Sex,
	ptd.RequiredSpeciments, dbo.B_GetSpecimenType1(a.Accession) as SpecimenReceived,
	ptd.InternalDescription as Test, rtd.InternalName as Element, rt.ResultComment as Comment
	from tblAccessions a
	inner join tblClients c
	on c.ClientCode = a.ClientCode
	inner join tblPatient pt
	on pt.PatientId = a.PatientId
	inner join tblClientsSalesman cs
	on cs.ClientCode = c.ClientCode
	inner join tblSalesman s1
	on s1.SalesmanCode = cs.SalesmanCode
	left outer join tblSalesman s2
	on s1.SalesGroup = s2.SalesmanCode
	inner join tblResultedTests rt
	on rt.Accession = a.Accession
	inner join tblResultedTestsDefinitions rtd
	on rtd.TestCode = rt.ResultTest
	and rt.Version = rtd.Version
	inner join tblPerformedTestsDefinitions ptd
	on ptd.PerformedTest = rt.PerformedTest

	WHERE CollectionDate between @StartDate and @EndDate
	and rt.Status = 'Final' --definition of TNP comes here
	and s1.SalesmanCode LIKE ISNULL(@SalesmanCode, s1.SalesmanCode)  
	Order by SalesGroupName, SalesmanName, c.ClientName
END
GO
/****** Object:  StoredProcedure [dbo].[spGetStatisticsWeeklyReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetStatisticsWeeklyReport] 

@StartDate datetime ,
@EndDate datetime,
@SalesmanCode varchar(200)= null

AS
 BEGIN

if object_id('tempdb..#tempStatisticsWeekly') is not null

	drop table #tempStatisticsWeekly
	
create table #tempStatisticsWeekly
( 
	 iCount int,
	 BeginnningOfWeek datetime,
	 EndOfWeek datetime,
	 ClientCode varchar(100)
)  

  declare @date as datetime =  @startdate
  declare @bow as datetime = @startdate
  declare @AccessionCount as int = 0
  
  while @date < @enddate
  begin
	declare  @eow  as datetime = (select dateadd(dd, 6, @date))
	if @eow >  @enddate set @eow = @enddate
	INSERT INTO #tempStatisticsWeekly
	select  count(*) as iCount , @bow as BeginingOfWeek,  @eow as EndOfWeek, c.ClientCode
	from tblAccessions a
	inner join tblClients c
	on c.ClientCode = a.ClientCode
	inner join tblClientsSalesman cs
	on cs.ClientCode = c.ClientCode
	inner join tblSalesman s1
	on s1.SalesmanCode = cs.SalesmanCode
	where CollectionDate between @date and DATEADD(second,-1,datediff(dd,0,@eow)+1)
	and s1.SalesmanCode LIKE ISNULL(@SalesmanCode, s1.SalesmanCode) 
	group by c.ClientCode
	
	select @date =  dateadd(dd, 7, @date)
	select @bow = dateadd(dd, 1, @eow)
	
  end

SELECT ISNULL(s2.salesmancode, '') as ManagerCode, ISNULL(s2.SalesmanName, '') as  SalesGroupName, s1.SalesmanCode as SalesmanCode,  s1.SalesmanName, 
	c.ClientCode, c.ClientName, RTrIM(c.Address + ' ' + c.Address2) as Address, c.City, c.State, c.Zip
	, st.iCount as AccessionCount, CONVERT(varchar, st.BeginnningOfWeek, 101) + '-' +  CONVERT(varchar, st.EndOfWeek, 101) AS DateRange
	from tblAccessions a
	inner join tblClients c
	on c.ClientCode = a.ClientCode
	inner join #tempStatisticsWeekly st
	on st.ClientCode = a.ClientCode
	inner join tblClientsSalesman cs
	on cs.ClientCode = c.ClientCode
	inner join tblSalesman s1
	on s1.SalesmanCode = cs.SalesmanCode
	left outer join tblSalesman s2
	on s1.SalesGroup = s2.SalesmanCode
	 group by s2.salesmancode, s2.SalesmanName, s1.SalesmanCode, s1.SalesmanName, c.ClientName, c.ClientCode, c.Address, c.Address2, c.City, c.State, c.Zip, st.iCount, st.BeginnningOfWeek, st.EndOfWeek
	Order by s2.SalesmanName, s2.salesmancode, s1.SalesmanName, s1.SalesmanCode, st.BeginnningOfWeek

  END
  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spGetStatusByAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetStatusByAccession]
	@Accession varchar(50) = NULL

AS
BEGIN

SELECT     CASE WHEN EXISTS
            (SELECT     rt.Status
                            FROM          dbo.tblResultedTests rt(nolock)
                            WHERE      rt.Accession = a.Accession AND (rt.Status = 'Pending' OR
                                        rt.Status = 'Hold')) THEN 'Pending' ELSE 'Final' END AS 'Status'
FROM         tblAccessions AS a WITH (nolock)
WHERE     (Accession LIKE ISNULL(@Accession, Accession))

END
	

GO
/****** Object:  StoredProcedure [dbo].[spGetStatusCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spGetStatusCodes]     
     
AS    
BEGIN    
     
 SET NOCOUNT ON;    
    
    
 SELECT id,statusname   
 FROM dbo.tblStatus      
 ORDER BY id asc    
END   
GO
/****** Object:  StoredProcedure [dbo].[spGetSuspensionReason]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetSuspensionReason]
	@Code varchar(50) = NULL 
	


AS
BEGIN

	select *
	from tblSuspensionReason (nolock) 	
	where BTcode LIKE ISNULL(@Code, BTcode)
	order by BTcode 
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetTestCodeGivenName]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetTestCodeGivenName] 
	@CoriellTestName varchar(50)
AS
BEGIN

	SET NOCOUNT ON
		
	SELECT ResultTest
	FROM tblCoriellTestTranslation (NOLOCK)
	WHERE CoriellTestName = @CoriellTestName
END
GO
/****** Object:  StoredProcedure [dbo].[spGetTestCodeInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetTestCodeInfo] 
	@TestCode varchar(50)
AS
BEGIN

	SET NOCOUNT ON


	SELECT Description, PerformedTestCode, ActiveFlag
	FROM tblOrderedTestsDefinitions with (NOLOCK)
	WHERE OrderedTest = @TestCode
	and ActiveFlag='True'
END
GO
/****** Object:  StoredProcedure [dbo].[spGetTestCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetTestCodes] 
	
AS
BEGIN
	select * from tbltestcodes with (nolock) 
	order by testcode asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetTestCodesFavorites]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetTestCodesFavorites]
	@LabCode varchar(20),
	@ClientCode varchar(20),
	@PhysicianCode varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT a.testcode, b.description from tblTestCodesFavorites a 
	inner join tblTestCodes b
	on a.testcode = b.testcode
		where a.LabCode = @LabCode
		and a.ClientCode = @ClientCode
		and a.RequestingPhysicianCode = @PhysicianCode
	order by a.testcode asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetTestCodesFavoritesBoxes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Batch submitted through debugger: SQLQuery2.sql|7|0|C:\Documents and Settings\Administrator\Local Settings\Temp\~vs16DD.sql
-- Batch submitted through debugger: SQLQuery3.sql|7|0|C:\Users\Lana\AppData\Local\Temp\~vsA1FE.sql
-- =============================================
-- Author:		<Author		: Hillary>
-- Create date: <Create Date: 10/22/2010>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetTestCodesFavoritesBoxes]
	@LabCode varchar(20),
	@ClientCode varchar(20) = NULL,
	@RequestingPhysicianCode varchar(20) =  NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	
SET NOCOUNT ON;
CREATE   table #tmpFavoriteCodes    
( RowID int identity(1,1) not null   
, TestCode   varchar(50) null    
, Description  varchar(250) null
, IsPanel bit    null
   
)


CREATE   table #tmpGridFavoriteCodesA    
(  RowID int identity(1,1) not null  
, TestCodeA   varchar(50) null    
, DescriptionA  varchar(250) null
, IsPanelA bit    null
)
CREATE   table #tmpGridFavoriteCodesB   
(  RowID int identity(1,1) not null
,  TestCodeB   varchar(50) null    
, DescriptionB  varchar(250) null
, IsPanelB bit    null
 
)
CREATE   table #tmpGridFavoriteCodesC   
(   RowID int identity(1,1) not null
,  TestCodeC   varchar(50) null    
, DescriptionC  varchar(250) null
, IsPanelC bit    null
)

CREATE   table #tmpGridFavoriteCodesD   
(   RowID int identity(1,1) not null
,  TestCodeD   varchar(50) null   DEFAULT '' 
, DescriptionD  varchar(250) null DEFAULT ''
, IsPanelD bit    null DEFAULT 0
)
DECLARE 
        @RowTotal int
       ,@ColumnRowA int   
       ,@ColumnRowB int
       ,@ColumnRowC int
       ,@ColumnRowD int       
       ,@RowRemainder decimal(10,2) 
       ,@DecimalRemainder decimal(10,2)   
       ,@TestCode varchar(50)  
       
    
    INSERT INTO #tmpFavoriteCodes(TestCode, Description, IsPanel)
	SELECT a.TestCode, rtrim(a.TestCode) + '  ' + RTRIM( b.Description)  As Description, IsNull(a.IsPanel,0) As IsPanel from tblTestCodesFavoritesBoxes a (nolock) 
	inner join tblTestCodes b
	on a.testcode = b.testcode
		where a.LabCode = @LabCode
		and a.ClientCode = @ClientCode
		and a.RequestingPhysicianCode = @RequestingPhysicianCode
	order by a.IsPanel desc, a.testcode asc
	
SELECT @RowTotal = COUNT(*) from  #tmpFavoriteCodes(nolock)
SET @RowRemainder = @RowTotal/4.00
SET @DecimalRemainder = @RowRemainder - FLOOR(@RowRemainder)

IF @DecimalRemainder=0 
BEGIN   

	SET @ColumnRowA = FLOOR(@RowRemainder)
END 
ELSE 
BEGIN 

	SET @ColumnRowA = @RowRemainder + 1
END

SET  @ColumnRowB = @ColumnRowA * 2
SET  @ColumnRowC = @ColumnRowA * 3
--SET  @ColumnRowD = @ColumnRowA * 4

INSERT INTO #tmpGridFavoriteCodesA(TestCodeA, DescriptionA,IsPanelA)
SELECT TestCode, Description, IsPanel from #tmpFavoriteCodes
WHERE RowID <= @ColumnRowA

INSERT INTO #tmpGridFavoriteCodesB(TestCodeB, DescriptionB,IsPanelB)
SELECT TestCode, Description, IsPanel from #tmpFavoriteCodes
WHERE RowID > @ColumnRowA AND RowID <= @ColumnRowB

INSERT INTO #tmpGridFavoriteCodesC(TestCodeC, DescriptionC,IsPanelC)
SELECT TestCode, Description, IsPanel from #tmpFavoriteCodes
WHERE RowID > @ColumnRowB AND RowID <= @ColumnRowC

INSERT INTO #tmpGridFavoriteCodesD(TestCodeD, DescriptionD,IsPanelD)
SELECT ISNULL(TestCode,''), ISNULL(Description,''), ISNULL(IsPanel,0) from #tmpFavoriteCodes
WHERE RowID > @ColumnRowC 

SELECT 
ISNULL(a.TestCodeA, '') as TestCodeA, ISNULL(a.DescriptionA , '') as DescriptionA, ISNULL(a.IsPanelA,0) as IsPanelA, 
ISNULL(b.TestCodeB, '') as TestCodeB, ISNULL(b.DescriptionB , '') as DescriptionB, ISNULL(b.IsPanelB,0) as IsPanelB, 
ISNULL(c.TestCodeC, '') as TestCodeC, ISNULL(c.DescriptionC , '') as DescriptionC, ISNULL(c.IsPanelC,0) as IsPanelC,
ISNULL(d.TestCodeD, '') as TestCodeD, ISNULL(d.DescriptionD , '') as DescriptionD, ISNULL(d.IsPanelD,0) as IsPanelD FROM #tmpGridFavoriteCodesA a(nolock)
LEFT JOIN  #tmpGridFavoriteCodesB b(nolock)
ON a.RowID = b.RowID
LEFT JOIN  #tmpGridFavoriteCodesC c(nolock)
ON b.RowID = c.RowID
LEFT JOIN  #tmpGridFavoriteCodesD d(nolock)
ON c.RowID = d.RowID

END

IF object_id('tempdb..#tmpFavoriteCodes') is not null  
  DROP TABLE #tmpFavoriteCodes
IF object_id('tempdb..#tmpGridFavoriteCodesA') is not null  
  DROP TABLE #tmpGridFavoriteCodesA
IF object_id('tempdb..#tmpGridFavoriteCodesB') is not null  
  DROP TABLE #tmpGridFavoriteCodesB
IF object_id('tempdb..#tmpGridFavoriteCodesC') is not null  
  DROP TABLE #tmpGridFavoriteCodesC
IF object_id('tempdb..#tmpGridFavoriteCodesD') is not null  
  DROP TABLE #tmpGridFavoriteCodesD
GO
/****** Object:  StoredProcedure [dbo].[spGetTestCodeStatus]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[spGetTestCodeStatus]
@TestCode varchar(20)
as
begin
select PerformedTest,CytologyFlag,PathologyFlag,MicrobioFlag,InternalDescription from tblPerformedTestsDefinitions where PerformedTest = @TestCode
end
GO
/****** Object:  StoredProcedure [dbo].[spGetTestsToSync]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetTestsToSync]
	
AS
BEGIN
	SELECT * FROM tblOrderedTestsDefinitions with (nolock) 
	WHERE NeedsSync = 1
	
END

GO
/****** Object:  StoredProcedure [dbo].[spGetTNPReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetTNPReport] 

@StartDate datetime ,
@EndDate datetime,
@Salesman varchar(200)= null

AS
 BEGIN
	SELECT ISNULL(s2.salesmancode, '') as ManagerCode, ISNULL(s2.SalesmanName, '') as  SalesGroupName, s1.SalesmanCode as SalesmanCode,  s1.SalesmanName, 
	a.CollectionDate as [Date], a.Accession, c.ClientCode, c.ClientName, 
	pt.ptLastName + ', ' + pt.ptFirstName as PatientName, CONVERT(varchar, pt.ptDateOfBirth, 101) AS DateOfBirth, pt.ptSex as Sex,
	ptd.RequiredSpeciments, dbo.B_GetSpecimenType1(a.Accession) as SpecimenReceived,
	ptd.InternalDescription as Test, rtd.InternalName as Element, rt.ResultComment as Comment
	from tblAccessions a
	inner join tblClients c
	on c.ClientCode = a.ClientCode
	inner join tblPatient pt
	on pt.PatientId = a.PatientId
	inner join tblClientsSalesman cs
	on cs.ClientCode = c.ClientCode
	inner join tblSalesman s1
	on s1.SalesmanCode = cs.SalesmanCode
	left outer join tblSalesman s2
	on s1.SalesGroup = s2.SalesmanCode
	inner join tblResultedTests rt
	on rt.Accession = a.Accession
	inner join tblResultedTestsDefinitions rtd
	on rtd.TestCode = rt.ResultTest
	and rt.Version = rtd.Version
	inner join tblPerformedTestsDefinitions ptd
	on ptd.PerformedTest = rt.PerformedTest

	WHERE CollectionDate between @StartDate and @EndDate
	and rt.Status = 'Final' --definition of TNP comes here
	and s1.SalesmanCode LIKE ISNULL(@Salesman, s1.SalesmanCode)  
	Order by SalesGroupName, SalesmanName, c.ClientName
END







GO
/****** Object:  StoredProcedure [dbo].[spGetTransportTurnaroundReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetTransportTurnaroundReport]
	
	@ClientCode varchar(50) = null,
	@StartDate datetime,
	@EndDate datetime,
	@TransportDay varchar(10)= null,
	@TurnaroundDay varchar(10) = null,
	@Relation varchar(10)
AS
BEGIN
	if @TransportDay = 'BLANK' and @TurnaroundDay = 'BLANK'
		begin
			SELECT 
			  CONVERT(varchar(10),a.ReceiveDate,101)  as receivedate,
			clientcode, a.patientID, p.FirstName+' '+p.LastName As PhysicianName, a.Accession,pt.ptFirstName+' '+pt.ptLastName As PatientName, DATEDIFF(day,a.CollectionDate,a.ReceiveDate) AS TransportTime,
			DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) AS TurnaroundTime from tblAccessions as a
			inner join tblPhysicians as p on a.PhysicianCode = p.PhysicianCode
			inner join tblPatient as pt on a.PatientID = pt.PatientId
			inner join tblArchiveReviewAccession as ara on a.Accession = ara.Accession		
			where (@ClientCode IS NULL OR (ClientCode = @ClientCode))
			and ReceiveDate between @StartDate and @EndDate
			order by a.Accession
		end
	
	else if  @TransportDay = 'BLANK' or @TurnaroundDay = 'BLANK'
	begin
		if @TransportDay = 'BLANK'		
			if @TurnaroundDay ='>3' 
				begin
					SELECT 
					 CONVERT(varchar(10),a.ReceiveDate,101)  as receivedate,
					clientcode, a.patientID, p.FirstName+' '+p.LastName As PhysicianName, a.Accession,pt.ptFirstName+' '+pt.ptLastName As PatientName, DATEDIFF(day,a.CollectionDate,a.ReceiveDate) AS TransportTime,
					DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) AS TurnaroundTime from tblAccessions as a
					inner join tblPhysicians as p on a.PhysicianCode = p.PhysicianCode
					inner join tblPatient as pt on a.PatientID = pt.PatientId
					inner join tblArchiveReviewAccession as ara on a.Accession = ara.Accession
					where (@ClientCode IS NULL OR (ClientCode = @ClientCode))
					and DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate)> '3'
					and ReceiveDate between @StartDate and @EndDate
					order by a.Accession
				end
			else
				begin
					SELECT
					  CONVERT(varchar(10),a.ReceiveDate,101)  as receivedate,
					 clientcode, a.patientID, p.FirstName+' '+p.LastName As PhysicianName, a.Accession,pt.ptFirstName+' '+pt.ptLastName As PatientName, DATEDIFF(day,a.CollectionDate,a.ReceiveDate) AS TransportTime,
					DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) AS TurnaroundTime from tblAccessions as a
					inner join tblPhysicians as p on a.PhysicianCode = p.PhysicianCode
					inner join tblPatient as pt on a.PatientID = pt.PatientId
					inner join tblArchiveReviewAccession as ara on a.Accession = ara.Accession
					where (@ClientCode IS NULL OR (ClientCode = @ClientCode))
					and DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate)= @TurnaroundDay
					and ReceiveDate between @StartDate and @EndDate
					order by a.Accession
				end
			
		
			
		else 
		--TrunaroundDAY = BLANK
			if @TransportDay ='>3'
				begin
					SELECT
					 CONVERT(varchar(10),a.ReceiveDate,101)  as receivedate,
					clientcode, a.patientID, p.FirstName+' '+p.LastName As PhysicianName, a.Accession,pt.ptFirstName+' '+pt.ptLastName As PatientName, DATEDIFF(day,a.CollectionDate,a.ReceiveDate) AS TransportTime,
					DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) AS TurnaroundTime from tblAccessions as a
					inner join tblPhysicians as p on a.PhysicianCode = p.PhysicianCode
					inner join tblPatient as pt on a.PatientID = pt.PatientId
					inner join tblArchiveReviewAccession as ara on a.Accession = ara.Accession    			
					where(@ClientCode IS NULL OR (ClientCode = @ClientCode))
					and ReceiveDate between @StartDate and @EndDate
					and DATEDIFF(day,CollectionDate,ReceiveDate) > '3'
					order by a.Accession
				end
			else
				begin
					SELECT 
					 CONVERT(varchar(10),a.ReceiveDate,101)  as receivedate,
					clientcode, a.patientID, p.FirstName+' '+p.LastName As PhysicianName, a.Accession,pt.ptFirstName+' '+pt.ptLastName As PatientName, DATEDIFF(day,a.CollectionDate,a.ReceiveDate) AS TransportTime,
					DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) AS TurnaroundTime from tblAccessions as a
					inner join tblPhysicians as p on a.PhysicianCode = p.PhysicianCode
					inner join tblPatient as pt on a.PatientID = pt.PatientId
					inner join tblArchiveReviewAccession as ara on a.Accession = ara.Accession
					where (@ClientCode IS NULL OR (ClientCode = @ClientCode))
					and ReceiveDate between @StartDate and @EndDate
					and DATEDIFF(day,CollectionDate,ReceiveDate) = @TransportDay
					order by a.Accession
				end
	
	end	
	else
	begin
		if @Relation ='AND'
		begin
			if @TransportDay != '>3' and @TurnaroundDay != '>3'
				Begin
					SELECT
					 CONVERT(varchar(10),a.ReceiveDate,101)  as receivedate,
					clientcode, a.patientID, p.FirstName+' '+p.LastName As PhysicianName, a.Accession,pt.ptFirstName+' '+pt.ptLastName As PatientName, DATEDIFF(day,a.CollectionDate,a.ReceiveDate) AS TransportTime,
					DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) AS TurnaroundTime from tblAccessions as a
					inner join tblPhysicians as p on a.PhysicianCode = p.PhysicianCode
					inner join tblPatient as pt on a.PatientID = pt.PatientId
					inner join tblArchiveReviewAccession as ara on a.Accession = ara.Accession
					where (@ClientCode IS NULL OR (ClientCode = @ClientCode))
					and ReceiveDate between @StartDate and @EndDate
					and DATEDIFF(day,CollectionDate,ReceiveDate) = @TransportDay
					and DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) = @TurnaroundDay
					order by a.Accession
				end
			else if @TransportDay = '>3' and @TurnaroundDay != '>3'
				begin
					SELECT 
					 CONVERT(varchar(10),a.ReceiveDate,101)  as receivedate,
					clientcode, a.patientID, p.FirstName+' '+p.LastName As PhysicianName, a.Accession,pt.ptFirstName+' '+pt.ptLastName As PatientName, DATEDIFF(day,a.CollectionDate,a.ReceiveDate) AS TransportTime,
					DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) AS TurnaroundTime from tblAccessions as a
					inner join tblPhysicians as p on a.PhysicianCode = p.PhysicianCode
					inner join tblPatient as pt on a.PatientID = pt.PatientId
					inner join tblArchiveReviewAccession as ara on a.Accession = ara.Accession
					where (@ClientCode IS NULL OR (ClientCode = @ClientCode))
					and ReceiveDate between @StartDate and @EndDate
					and DATEDIFF(day,CollectionDate,ReceiveDate) > '3'
					and DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) = @TurnaroundDay
					order by a.Accession
			end
		  else if @TransportDay != '>3' and @TurnaroundDay = '>3'
				begin
					SELECT 
					 CONVERT(varchar(10),a.ReceiveDate,101)  as receivedate,
					clientcode, a.patientID, p.FirstName+' '+p.LastName As PhysicianName, a.Accession,pt.ptFirstName+' '+pt.ptLastName As PatientName, DATEDIFF(day,a.CollectionDate,a.ReceiveDate) AS TransportTime,
					DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) AS TurnaroundTime from tblAccessions as a
					inner join tblPhysicians as p on a.PhysicianCode = p.PhysicianCode
					inner join tblPatient as pt on a.PatientID = pt.PatientId
					inner join tblArchiveReviewAccession as ara on a.Accession = ara.Accession
					where (@ClientCode IS NULL OR (ClientCode = @ClientCode))
					and ReceiveDate between @StartDate and @EndDate
					and DATEDIFF(day,CollectionDate,ReceiveDate)= @TransportDay
					and DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate)> '3'
					order by a.Accession
				end
		else if @TransportDay = '>3' and @TurnaroundDay = '>3'
				begin 
					SELECT 
					 CONVERT(varchar(10),a.ReceiveDate,101)  as receivedate,
					clientcode, a.patientID, p.FirstName+' '+p.LastName As PhysicianName, a.Accession,pt.ptFirstName+' '+pt.ptLastName As PatientName, DATEDIFF(day,a.CollectionDate,a.ReceiveDate) AS TransportTime,
					DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) AS TurnaroundTime from tblAccessions as a
					inner join tblPhysicians as p on a.PhysicianCode = p.PhysicianCode
					inner join tblPatient as pt on a.PatientID = pt.PatientId
					inner join tblArchiveReviewAccession as ara on a.Accession = ara.Accession
					where (@ClientCode IS NULL OR (ClientCode = @ClientCode))
					and ReceiveDate between @StartDate and @EndDate
					and DATEDIFF(day,CollectionDate,ReceiveDate)> '3'
					and DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate)> '3'
					order by a.Accession
				end
	  end
	  else --OR 
	  begin
			if @TransportDay != '>3' and @TurnaroundDay != '>3'
				Begin
					SELECT 
					 CONVERT(varchar(10),a.ReceiveDate,101)  as receivedate,
					clientcode, a.patientID, p.FirstName+' '+p.LastName As PhysicianName, a.Accession,pt.ptFirstName+' '+pt.ptLastName As PatientName, DATEDIFF(day,a.CollectionDate,a.ReceiveDate) AS TransportTime,
					DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) AS TurnaroundTime from tblAccessions as a
					inner join tblPhysicians as p on a.PhysicianCode = p.PhysicianCode
					inner join tblPatient as pt on a.PatientID = pt.PatientId
					inner join tblArchiveReviewAccession as ara on a.Accession = ara.Accession
					where (@ClientCode IS NULL OR (ClientCode = @ClientCode))
					and ReceiveDate between @StartDate and @EndDate
					and (DATEDIFF(day,CollectionDate,ReceiveDate) = @TransportDay
					or DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) = @TurnaroundDay)
					order by a.Accession
				end
			else if @TransportDay = '>3' and @TurnaroundDay != '>3'
				begin
					SELECT 
					 CONVERT(varchar(10),a.ReceiveDate,101)  as receivedate,
					clientcode, a.patientID, p.FirstName+' '+p.LastName As PhysicianName, a.Accession,pt.ptFirstName+' '+pt.ptLastName As PatientName, DATEDIFF(day,a.CollectionDate,a.ReceiveDate) AS TransportTime,
					DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) AS TurnaroundTime from tblAccessions as a
					inner join tblPhysicians as p on a.PhysicianCode = p.PhysicianCode
					inner join tblPatient as pt on a.PatientID = pt.PatientId
					inner join tblArchiveReviewAccession as ara on a.Accession = ara.Accession
					where (@ClientCode IS NULL OR (ClientCode = @ClientCode))
					and ReceiveDate between @StartDate and @EndDate
					and (DATEDIFF(day,CollectionDate,ReceiveDate) > '3'
					or DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) = @TurnaroundDay)
					order by a.Accession
			end
		  else if @TransportDay != '>3' and @TurnaroundDay = '>3'
				begin
					SELECT 
					 CONVERT(varchar(10),a.ReceiveDate,101)  as receivedate,
					clientcode, a.patientID, p.FirstName+' '+p.LastName As PhysicianName, a.Accession,pt.ptFirstName+' '+pt.ptLastName As PatientName, DATEDIFF(day,a.CollectionDate,a.ReceiveDate) AS TransportTime,
					DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) AS TurnaroundTime from tblAccessions as a
					inner join tblPhysicians as p on a.PhysicianCode = p.PhysicianCode
					inner join tblPatient as pt on a.PatientID = pt.PatientId
					inner join tblArchiveReviewAccession as ara on a.Accession = ara.Accession
					where (@ClientCode IS NULL OR (ClientCode = @ClientCode))
					and ReceiveDate between @StartDate and @EndDate
					and (DATEDIFF(day,CollectionDate,ReceiveDate)= @TransportDay
					or DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate)> '3')
					order by a.Accession
				end
		else if @TransportDay = '>3' and @TurnaroundDay = '>3'
				begin 
					SELECT 
					 CONVERT(varchar(10),a.ReceiveDate,101)  as receivedate,
					clientcode, a.patientID, p.FirstName+' '+p.LastName As PhysicianName, a.Accession,pt.ptFirstName+' '+pt.ptLastName As PatientName, DATEDIFF(day,a.CollectionDate,a.ReceiveDate) AS TransportTime,
					DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate) AS TurnaroundTime from tblAccessions as a
					inner join tblPhysicians as p on a.PhysicianCode = p.PhysicianCode
					inner join tblPatient as pt on a.PatientID = pt.PatientId
					inner join tblArchiveReviewAccession as ara on a.Accession = ara.Accession
					where (@ClientCode IS NULL OR (ClientCode = @ClientCode))
					and ReceiveDate between @StartDate and @EndDate
					and (DATEDIFF(day,CollectionDate,ReceiveDate)> '3'
					or DATEDIFF(day,a.ReceiveDate,ara.ArchivedDate)> '3')
					order by a.Accession
				end
	  end
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spGetTurnaroundReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetTurnaroundReport] 
@ClientCode varchar(50) = null,
@StartDate datetime ,
@EndDate datetime

AS
BEGIN

	If @ClientCode = 'ALL'
	BEGIN


		select
				*,
		       
				Convert(varchar(20),datediff(dd,0,LabDateDiff)) + ' days ' +  CONVERT(varchar(20), datepart(hour,TotalDateDiff)) + ' hours ' +
				Convert(varchar(20),datepart(minute,TotalDateDiff)) + ' mins'  as LabTurnAround, 
				
				--' + Convert(varchar(20),datepart(second,TotalDateDiff)) + ' secs ' + 	--Convert(varchar(20),datepart(ms,TotalDateDiff)) + ' ms '
		        
				Convert(varchar(20),datediff(dd,0,TotalDateDiff)) + ' days ' +  CONVERT(varchar(20), datepart(hour,TotalDateDiff)) + ' hours ' +
				Convert(varchar(20),datepart(minute,TotalDateDiff)) + ' mins'  as TotalTurnAround
				
				-- + Convert(varchar(20),datepart(second,TotalDateDiff)) + ' secs ' + 		Convert(varchar(20),datepart(ms,TotalDateDiff)) + ' ms '
		from
				(
				select
	        			aa.*,
						LabDateDiff = aa.ReleaseDate-aa.ReceiveDate ,
						TotalDateDiff = aa.ReleaseDate-aa.CollectionDate 

				from
						(  -- Test Data
		                
		SELECT     tblClients.ClientName, tblAccessions.Accession, tblPatient.ptLastName as LastName, tblPatient.ptFirstName as FirstName, tblAccessions.CollectionDate, tblAccessions.ReceiveDate, tblAccessions.DateCreated, 
							  tblReleasedForReview.ReleaseDate, tblClients.ClientCode
		FROM         tblAccessions INNER JOIN
							  tblReleasedForReview ON tblAccessions.Accession = tblReleasedForReview.Accession INNER JOIN
							  tblPatient ON tblAccessions.PatientID = tblPatient.PatientId INNER JOIN
							  tblClients ON tblAccessions.ClientCode = tblClients.ClientCode
		                      
							  Where tblAccessions.CollectionDate >= @StartDate and tblAccessions.CollectionDate <= @EndDate
							  --and tblAccessions.ClientCode = @ClientCode
							  
		                      
						) aa
				) a
				
				Order By ClientName, Accession, LastName
		END
		        
	ELSE

		BEGIN

		select
				*,
		       
				Convert(varchar(20),datediff(dd,0,LabDateDiff)) + ' days ' +  CONVERT(varchar(20), datepart(hour,TotalDateDiff)) + ' hours ' +
				Convert(varchar(20),datepart(minute,TotalDateDiff)) + ' mins'  as LabTurnAround, 
				
				--' + Convert(varchar(20),datepart(second,TotalDateDiff)) + ' secs ' + 	--Convert(varchar(20),datepart(ms,TotalDateDiff)) + ' ms '
		        
				Convert(varchar(20),datediff(dd,0,TotalDateDiff)) + ' days ' +  CONVERT(varchar(20), datepart(hour,TotalDateDiff)) + ' hours ' +
				Convert(varchar(20),datepart(minute,TotalDateDiff)) + ' mins'  as TotalTurnAround
				
				-- + Convert(varchar(20),datepart(second,TotalDateDiff)) + ' secs ' + 		Convert(varchar(20),datepart(ms,TotalDateDiff)) + ' ms '
		from
				(
				select
	        			aa.*,
						LabDateDiff = aa.ReleaseDate-aa.ReceiveDate ,
						TotalDateDiff = aa.ReleaseDate-aa.CollectionDate 

				from
						(  -- Test Data
		                
		SELECT     tblClients.ClientName, tblAccessions.Accession, tblPatient.ptLastName as LastName, tblPatient.ptFirstName as FirstName, tblAccessions.CollectionDate, tblAccessions.ReceiveDate, tblAccessions.DateCreated, 
							  tblReleasedForReview.ReleaseDate, tblClients.ClientCode
		FROM         tblAccessions INNER JOIN
							  tblReleasedForReview ON tblAccessions.Accession = tblReleasedForReview.Accession INNER JOIN
							  tblPatient ON tblAccessions.PatientID = tblPatient.PatientId INNER JOIN
							  tblClients ON tblAccessions.ClientCode = tblClients.ClientCode
		                      
							  Where tblAccessions.CollectionDate >= @StartDate and tblAccessions.CollectionDate <= @EndDate
							  and tblAccessions.ClientCode = @ClientCode
							  
		                      
						) aa
				) a
				
				Order By ClientName, Accession, LastName

		END

END
GO
/****** Object:  StoredProcedure [dbo].[spGetUserClients]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spGetUserClients] 
	@LabCode varchar(20)
AS
BEGIN
	
	SET NOCOUNT ON;

   SELECT 
       u.LabCode
      ,u.ClientCode
  --    , case when u.AccessionPrefix = '' OR u.AccessionPrefix IS NULL then    ISNULL(u.[Description], '')
		--else c.ClientName
		--end ClientName
      , ISNULL(c.ClientName, '') as ClientName
      ,u.Password
      ,u.dtStamp
      ,u.AccessionPrefix
      ,u.AccessionNumber
      ,u.PatientPrefix
      ,u.PatientNumber
     -- ,u.AdminFlag
      , c.Address
      , c.City
      , c.State
      , c.Zip
      
  FROM [dbo].[tblUsers] u (nolock)
  Left join tblClients c (nolock)
  on u.ClientCode = c.ClientCode
  --and u.LabCode = c.LabCode
  WHERE u.LabCode =  @LabCode
  ORDER BY u.ClientCode asc
END
GO
/****** Object:  StoredProcedure [dbo].[spGetUserIDInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetUserIDInfo]
(	
	
	@UserID varchar(20)
)
As
BEGIN


	SELECT  u.UserName, u.UserLastName, u.ActiveClients, u.LoginCounter, u.[Password],  u.ActiveFlag, u.AdminFlag , u.CanAddusers,
	u.DeactivatedDate, u.DeactivatedBy, u.LastUpdatedDate, u.LastUpdatedBy, u.RoleType, u.BillTypeDefault
	
	FROM tblUsersID u (NOLOCK)
	
	WHERE 		
		
		u.UserID = @UserID  

END
GO
/****** Object:  StoredProcedure [dbo].[spGetUserProductivityReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Selva /LINC-10835-A/ 12/09/2020 - Productivity Report
CREATE PROCEDURE [dbo].[spGetUserProductivityReport]
	@StartDate DATETIME,
	@EndDate DATETIME
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    SELECT 
		DAY(acc.QSSCreateddate) AS Day_Of_Month, 
		ui.userid UserId,
		ui.username UserName,
		ui.userlastname UserLastName,
		COUNT(*) Total
	FROM tblAccessions acc
	INNER JOIN tblUsersID ui ON ui.UserID = acc.QSSCreatedByID
	WHERE acc.QSSCreatedDate BETWEEN @StartDate AND @EndDate
	GROUP BY DAY(acc.QSSCreateddate), ui.userid, ui.username, ui.userlastname
	ORDER BY DAY(acc.QSSCreatedDate), ui.userlastname

END
GO
/****** Object:  StoredProcedure [dbo].[spGetUserRoles]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetUserRoles]

		
AS
BEGIN

	SELECT a.RoleType
	FROM dbo.tblUserRoles a (NOLOCK)	
	
	ORDER BY a.RoleType asc
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetUsers]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetUsers]
As
BEGIN

	SELECT * FROM tblUsers with (NOLOCK)

END
GO
/****** Object:  StoredProcedure [dbo].[spGetUsersLoginPW]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetUsersLoginPW]
(	
	
	@UserID varchar(20),
	@Password varchar(20)
)
As
BEGIN


	SELECT  u.UserName, u.UserLastName, u.ActiveClients, u.LoginCounter, u.[Password],  u.ActiveFlag, u.AdminFlag , u.CanAddusers,
	u.DeactivatedDate, u.DeactivatedBy, u.LastUpdatedDate, u.LastUpdatedBy, u.RoleType
	
	FROM tblUsersID u (NOLOCK)
	
	WHERE
			u.UserID = @UserID  AND
			u.Password = @Password 

END
GO
/****** Object:  StoredProcedure [dbo].[spGetUTIForOrderedTest]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- <3/8/2019><Gladson> Get UTI. 
-- =============================================
CREATE PROCEDURE [dbo].[spGetUTIForOrderedTest] 
       @TestsTable as Type4 READONLY
AS
	SET NOCOUNT ON;
	SELECT UTI FROM dbo.tblOrderedTestsDefinitions a
	INNER JOIN @TestsTable b ON a.OrderedTest = b.aText
	GROUP BY UTI HAVING UTI = 1;
GO
/****** Object:  StoredProcedure [dbo].[spGetWorksheetbyAccession]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		HF
-- Create date: 08/11/2013
-- Description:	Gets all the accession data for an Accession
-- =============================================
CREATE PROCEDURE [dbo].[spGetWorksheetbyAccession]
	@Accession as varchar(100)
	
AS
BEGIN
/**** PA 11/25/2016 - Customized for Tenet ****/
select ot.orderedTest, rt.worksheet from tblresultedtests rt
inner join tblPerformedTestsDefinitions ptd
on rt.PerformedTest = ptd.PerformedTest
inner join tblOrderedTests ot
on ot.PerformedTest = ptd.PerformedTest
and ot.Accession = rt.Accession
where rt.accession = @Accession
group by ot.orderedtest, rt.worksheet
order by rt.worksheet, ot.orderedtest

--select worksheet from tblresultedtests
--where accession = @Accession
--group by worksheet

END
GO
/****** Object:  StoredProcedure [dbo].[spGetWorkSheetBySuffix]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spGetWorkSheetBySuffix] 
	
	@Suffix varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT wkcode
	FROM tblWorkSheetsDefinitions with (NOLOCK)
	WHERE suffix = @Suffix
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetWorkSheetCount]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=============================================
CREATE PROCEDURE [dbo].[spGetWorkSheetCount] 
AS
BEGIN

	SET NOCOUNT ON;
	SELECT rt.Worksheet As ID  , wsd.Description , COUNT(DISTINCT rt.Accession) As PendingCount
		FROM dbo.tblResultedTests  rt (NOLOCK)
		INNER JOIN dbo.tblWorkSheetsDefinitions wsd (NOLOCK)
		ON rt.Worksheet = wsd.WKCode
		WHERE [Status] = 'Pending' OR [Status] = 'Hold'
		Group by rt.Worksheet,  wsd.Description 
		order by  rt.Worksheet asc;
END
GO
/****** Object:  StoredProcedure [dbo].[spGetWorkSheetData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=============================================
CREATE PROCEDURE [dbo].[spGetWorkSheetData] 

@WorkSheet varchar(100)
AS
BEGIN

	SET NOCOUNT ON;
	SELECT rt.Accession , max(acc.PatientID) As PatientID,  max((pat.ptLastName + ',' + pat.ptFirstName)) As Name , max(rt.Status) As Status
		FROM dbo.tblResultedTests  rt (nolock)
		INNER JOIN dbo.tblAccessions acc (nolock)
		ON rt.Accession = acc.Accession
		INNER JOIN dbo.tblPatient pat (nolock)
		ON acc.PatientID = pat.PatientId
		WHERE rt.Worksheet = @WorkSheet
		AND ([Status] = 'Pending' OR [Status] = 'Hold')
		Group By rt.Accession;
END

GO
/****** Object:  StoredProcedure [dbo].[spGetWorkSheetDataDetails]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
CREATE PROCEDURE [dbo].[spGetWorkSheetDataDetails] 

@WorkSheet varchar(100)=NULL,
@Status varchar(20)
AS
BEGIN

	if @Status = 'Hold'
	begin
		SELECT     rt.Accession, acc.ReceiveDate, acc.PatientID, pat.ptLastName + ', ' + pat.ptFirstName AS PatientName, rt.Status, acc.ClientCode, cln.ClientName, 
                      rt.ResultTest AS TestCode, rtdef.ExternalName AS TestName, rt.Worksheet, rt.PerformedTest AS PTest, rt.Result,acc.OrderType
		FROM         tblResultedTests AS rt WITH (nolock) INNER JOIN
                      tblAccessions AS acc WITH (nolock) ON rt.Accession = acc.Accession INNER JOIN
                      tblPatient AS pat WITH (nolock) ON acc.PatientID = pat.PatientId INNER JOIN
                      tblClients AS cln WITH (nolock) ON cln.ClientCode = acc.ClientCode INNER JOIN
                      tblResultedTestsDefinitions AS rtdef WITH (nolock) ON rtdef.TestCode = rt.ResultTest INNER JOIN
                      tblResultCodeVersions ON rtdef.TestCode = tblResultCodeVersions.TestCode AND rtdef.Version = tblResultCodeVersions.CurrentVersion	
						WHERE rt.Worksheet LIKE ISNULL( @WorkSheet, rt.Worksheet )
						AND rt.Status = @Status
						order by rt.Accession,rt.PerformedTest  
		/*Group By rt.PerformedTest*/
	end
	if @Status = 'Pending'
	begin
		SELECT     rt.Accession, acc.ReceiveDate, acc.PatientID, pat.ptLastName + ', ' + pat.ptFirstName AS PatientName, rt.Status, acc.ClientCode, cln.ClientName, 
                      rt.ResultTest AS TestCode, rtdef.ExternalName AS TestName, rt.Worksheet, rt.PerformedTest AS PTest, rt.Result,acc.OrderType,
					  CollectionDate, ptDateofBirth, ptSex, cln.telephone ClientPhone, phs.FullName AS PhysicianName,
					  RackID + ' (' + CHAR(64 + ColumnID) +  CONVERT(VARCHAR(2), RowID) + ')' SpecimenLocation 
		FROM         tblResultedTests AS rt WITH (nolock) INNER JOIN
                      tblAccessions AS acc WITH (nolock) ON rt.Accession = acc.Accession INNER JOIN
                      tblPatient AS pat WITH (nolock) ON acc.PatientID = pat.PatientId INNER JOIN
                      tblClients AS cln WITH (nolock) ON cln.ClientCode = acc.ClientCode INNER JOIN
					  tblPhysicians phs ON acc.PhysicianCode = phs.PhysicianCode LEFT JOIN
					  tblRackValues r ON acc.Accession = r.ColumnValue INNER JOIN
                      tblResultedTestsDefinitions AS rtdef WITH (nolock) ON rtdef.TestCode = rt.ResultTest INNER JOIN
                      tblResultCodeVersions ON rtdef.TestCode = tblResultCodeVersions.TestCode AND rtdef.Version = tblResultCodeVersions.CurrentVersion	
						WHERE rt.Worksheet LIKE ISNULL( @WorkSheet, rt.Worksheet )
						AND (rt.Status ='Pending' or rt.Status = 'Hold')
						order by rt.Accession,rt.PerformedTest  
		/*Group By rt.PerformedTest*/
	end
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetWorkSheetDataDetailsByDate]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetWorkSheetDataDetailsByDate] 

@WorkSheet varchar(100)=NULL,
@Status varchar(20)=NULL,
@Client varchar(500)=null,
@DateType varchar(20),
@StartDate datetime ,
@EndDate datetime,
@Salesman varchar(200)= null

AS
 BEGIN
IF @Client not like 'ALL' 
  BEGIN  
	CREATE TABLE #TempList
		(
			cID varChar(100)
		)

		DECLARE @cID varchar(10), @Pos int
		SET @client = LTRIM(RTRIM(@client))+ '|'
		SET @Pos = CHARINDEX('|', @client, 1)
		IF REPLACE(@Client, '|', '') <> ''
		BEGIN
			WHILE @Pos > 0
			BEGIN
				SET @cID = LTRIM(RTRIM(LEFT(@Client, @Pos - 1)))
				IF @cID <> ''
				BEGIN
					INSERT INTO #TempList (cID) VALUES (@cID)
				END
				SET @Client = RIGHT(@Client, LEN(@Client) - @Pos)
				SET @Pos = CHARINDEX('|', @Client, 1)

			END
		END	
END
 
IF @DateType like 'C' 

   IF @Client like 'ALL'
        BEGIN	
			if @Salesman is null or @Salesman = ''
			Begin
			SELECT distinct acc.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, '' as SalesmanName,
			 acc.CollectionDate , acc.ReceiveDate, acc.CurrentBillType as BillType
				 
				FROM dbo.tblAccessions acc 				
				INNER JOIN dbo.tblPatient pat 
				ON acc.PatientID = pat.PatientId				
				INNER JOIN dbo.tblClients cln 
				On cln.ClientCode = acc.ClientCode 						
				Where  (acc.CollectionDate between @startdate and @enddate)				
				order by acc.ClientCode, acc.ReceiveDate, PatientName
			end 
			else -- Salesman code is given
			Begin
			
			SELECT distinct acc.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, s.SalesmanName,
			 acc.CollectionDate , acc.ReceiveDate, acc.CurrentBillType as BillType
				 
				FROM dbo.tblAccessions acc 			
				INNER JOIN dbo.tblPatient pat ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln On cln.ClientCode = acc.ClientCode 
				INNER JOIN dbo.tblClientsSalesman cs on cs.ClientCode = cln.ClientCode
				INNER JOIN dbo.tblSalesman s on cs.SalesmanCode = s.SalesmanCode						
				Where  (acc.CollectionDate between @startdate and @enddate)	and s.SalesmanCode in (select *  from 	dbo.SplitString(@Salesman, ','))			
				order by  s.SalesmanName, acc.ReceiveDate, PatientName
			End
			
		END
        
		ELSE		   
		BEGIN  
 			SELECT distinct acc.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, '' as SalesmanName,
			 acc.CollectionDate , acc.ReceiveDate, acc.CurrentBillType as BillType 			 
			 
				From dbo.tblAccessions acc (nolock)
				
				INNER JOIN dbo.tblPatient pat (nolock)
				ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln (nolock)
				On cln.ClientCode = acc.ClientCode 
			
				
				JOIN 
		           #TempList t
	             	ON acc.ClientCode  = t.cID  		
			
				Where  (acc.CollectionDate between @startdate and @enddate)				
				
				order by acc.ClientCode, acc.ReceiveDate, PatientName
				
		   END	
 	
ELSE 
	if  @DateType like 'L' 
  begin
    IF @Client like 'ALL' 
       BEGIN
       if @Salesman is null or @Salesman = ''
			Begin
			SELECT distinct acc.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName,'' as SalesmanName,
			 acc.CollectionDate , acc.ReceiveDate, acc.CurrentBillType as BillType 			 
			 
				From dbo.tblAccessions acc (nolock)
				
				INNER JOIN dbo.tblPatient pat (nolock)
				ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln (nolock)
				On cln.ClientCode = acc.ClientCode 	
			             	 
			
				Where  (acc.ReceiveDate  between @startdate and @enddate)
				order by PatientName
        End  
        else
        begin
        SELECT distinct acc.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, s.SalesmanName,
			 acc.CollectionDate , acc.ReceiveDate, acc.CurrentBillType as BillType
				 
				FROM dbo.tblAccessions acc 			
				INNER JOIN dbo.tblPatient pat ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln On cln.ClientCode = acc.ClientCode 
				INNER JOIN dbo.tblClientsSalesman cs on cs.ClientCode = cln.ClientCode
				INNER JOIN dbo.tblSalesman s on cs.SalesmanCode = s.SalesmanCode						
				Where  (acc.ReceiveDate between @startdate and @enddate)	and s.SalesmanCode in (select *  from 	dbo.SplitString(@Salesman, ','))			
				order by s.SalesmanName,  PatientName
			End
        
        end
      ELSE
            BEGIN
			SELECT distinct acc.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, '' as SalesmanName,
			 acc.CollectionDate , acc.ReceiveDate, acc.CurrentBillType as BillType 
			 
			 	From dbo.tblAccessions acc (nolock)			
				INNER JOIN dbo.tblPatient pat (nolock)
				ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln (nolock)
				On cln.ClientCode = acc.ClientCode 
				
				JOIN 
		           #TempList t
	             	ON acc.ClientCode  = t.cID 	             	 
				
				Where  (acc.ReceiveDate  between @startdate and @enddate)
				order by PatientName 
        End
       end
else 
if  @DateType like 'S' -- Service Date
Begin
    IF @Client like 'ALL' 
       BEGIN
       if @Salesman is null or @Salesman = ''
			Begin
			SELECT distinct acc.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, '' as SalesmanName,
			 acc.CollectionDate , acc.ReceiveDate, btd.description as BillType 
			 
			 	
				From dbo.tblAccessions acc (nolock)
			
				INNER JOIN dbo.tblPatient pat (nolock)
				ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln (nolock)
				On cln.ClientCode = acc.ClientCode 
				
			     LEFT JOIN dbo.tblbillTypeDefinitions btd (nolock)
				on acc.currentbilltype = btd.btcode				        	 
			
				Where  (acc.ReceiveDate  between @startdate and @enddate)
				order by acc.ReceiveDate, PatientName
				end
		else				
		begin
			 SELECT distinct acc.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, s.SalesmanName,
			 acc.CollectionDate , acc.ReceiveDate, acc.CurrentBillType as BillType
				 
				FROM dbo.tblAccessions acc 			
				INNER JOIN dbo.tblPatient pat ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln On cln.ClientCode = acc.ClientCode 
				INNER JOIN dbo.tblClientsSalesman cs on cs.ClientCode = cln.ClientCode
				INNER JOIN dbo.tblSalesman s on cs.SalesmanCode = s.SalesmanCode						
				Where  (acc.ReceiveDate between @startdate and @enddate)	and s.SalesmanCode in (select *  from 	dbo.SplitString(@Salesman, ','))			
				order by s.SalesmanName, acc.ReceiveDate, PatientName
			End
        
        End  
      ELSE
            BEGIN
			SELECT distinct acc.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName,'' as SalesmanName,
			 acc.CollectionDate , acc.ReceiveDate, btd.description as BillType 
			 
			 
				From dbo.tblAccessions acc (nolock)
				
				INNER JOIN dbo.tblPatient pat (nolock)
				ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln (nolock)
				On cln.ClientCode = acc.ClientCode 
				 
				LEFT JOIN dbo.tblbillTypeDefinitions btd (nolock)
				on acc.currentbilltype = btd.btcode
				
				JOIN 
		           #TempList t
	             	ON acc.ClientCode  = t.cID 
	             	 
				--WHERE rt.Worksheet LIKE ISNULL(@WorkSheet, rt.WorkSheet) 
				--AND rt.Status LIKE ISNULL(@Status,Status)
				Where  (acc.ReceiveDate  between @startdate and @enddate)
				order by acc.ReceiveDate, PatientName 
			End
     end  
     else 
if  @DateType like 'A' -- Accession Date
Begin
    IF @Client like 'ALL' 
       BEGIN
       if @Salesman is null or @Salesman = ''
			Begin
			SELECT distinct acc.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, '' as SalesmanName,
			 acc.CollectionDate , acc.DateCreated As ReceiveDate, btd.description as BillType 
			 
			 	
				From dbo.tblAccessions acc (nolock)
			
				INNER JOIN dbo.tblPatient pat (nolock)
				ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln (nolock)
				On cln.ClientCode = acc.ClientCode 
				
			     LEFT JOIN dbo.tblbillTypeDefinitions btd (nolock)
				on acc.currentbilltype = btd.btcode
				        	 
			--	WHERE rt.Worksheet LIKE ISNULL(@WorkSheet, rt.WorkSheet) 
			--	AND rt.Status LIKE ISNULL(@Status,Status)
				Where  (acc.DateCreated  between @startdate and @enddate)
				order by acc.DateCreated, PatientName
				end
		else
		begin
		SELECT distinct acc.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, s.SalesmanName,
			 acc.CollectionDate , acc.DateCreated as ReceiveDate, acc.CurrentBillType as BillType
				 
				FROM dbo.tblAccessions acc 			
				INNER JOIN dbo.tblPatient pat ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln On cln.ClientCode = acc.ClientCode 
				INNER JOIN dbo.tblClientsSalesman cs on cs.ClientCode = cln.ClientCode
				INNER JOIN dbo.tblSalesman s on cs.SalesmanCode = s.SalesmanCode						
				Where  (acc.ReceiveDate between @startdate and @enddate)	and s.SalesmanCode in (select *  from 	dbo.SplitString(@Salesman, ','))			
				order by s.SalesmanName, acc.DateCreated, PatientName
			End
        End  
      ELSE
            BEGIN
			SELECT distinct acc.Accession , pat.ptLastName + ', ' + pat.ptFirstName As PatientName ,
			acc.ClientCode, cln.ClientName, '' as SalesmanName,
			 acc.CollectionDate , acc.DateCreated as ReceiveDate, btd.description as BillType 
			 
			 
				From dbo.tblAccessions acc (nolock)
				
				INNER JOIN dbo.tblPatient pat (nolock)
				ON acc.PatientID = pat.PatientId
				
				INNER JOIN dbo.tblClients cln (nolock)
				On cln.ClientCode = acc.ClientCode 
				 
				LEFT JOIN dbo.tblbillTypeDefinitions btd (nolock)
				on acc.currentbilltype = btd.btcode
				
				JOIN 
		           #TempList t
	             	ON acc.ClientCode  = t.cID 
	             	 
				--WHERE rt.Worksheet LIKE ISNULL(@WorkSheet, rt.WorkSheet) 
				--AND rt.Status LIKE ISNULL(@Status,Status)
				Where  (acc.DateCreated  between @startdate and @enddate)
				order by acc.DateCreated, PatientName 
			End
     end  
    if OBJECT_ID('tempdb..#tmpTestCutOffInfo') IS NOT NULL
 drop table #tmpTestCutOffInfo
END
GO
/****** Object:  StoredProcedure [dbo].[spGetWorksheetInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetWorksheetInfo] 
	
	@WCode varchar(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT *
	FROM tblWorkSheetsDefinitions with (NOLOCK)
	WHERE WKCode = @WCode
		
END
GO
/****** Object:  StoredProcedure [dbo].[spGetWorkSheets]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetWorkSheets] --2,2,''  
 @PageSize int,  
 @PageIndex int,  
 @WorkSheet varchar(100),  
 @Description varchar(300)  
AS  
BEGIN  

 SET NOCOUNT ON;  
  
    -- Insert statements for procedure here  
    DECLARE @TotalRows int  
    DECLARE @TempWorkSheet table(ID int Identity,WKCode varchar(100)not null,[Description] varchar(300) null)  
    INSERT into @TempWorkSheet  
 SELECT TestCode,ExternalName from tblResultedTestsDefinitions   
  where (TestCode like '%'+@WorkSheet+'%' or TestCode=null) and (ExternalName like '%'+@Description+'%' or ExternalName=null)  
  select @TotalRows=COUNT(*) from @TempWorkSheet  
  SELECT CEILING((CAST(@TotalRows as decimal)/CAST(@PageSize as decimal))) as TotalPageCount,WKCode,[Description] from @TempWorkSheet where (ID > (@PageSize * ( @PageIndex - 1 )) ) And (ID <= ( @PageSize * @PageIndex ))   
END
GO
/****** Object:  StoredProcedure [dbo].[spGetWorkSheetsDefinitions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spGetWorkSheetsDefinitions]
		
AS
BEGIN
	select * from  tblWorkSheetsDefinitions

	order by WKCode asc
	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetZipInfo]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetZipInfo] 
	@Zip as int
AS
BEGIN
	
	SET NOCOUNT ON;
	SELECT City, State
	FROM dbo.tblZip a (NOLOCK)	
	where Zip = @Zip
END



GO
/****** Object:  StoredProcedure [dbo].[spInsertUpdatePatientPicture]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spInsertUpdatePatientPicture]  
 -- Add the parameters for the stored procedure here  
 @PatientID varchar(50),
 @PatientImage varbinary(max)
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
  
    -- Insert statements for procedure here  
-- IF Exists(Select PatientID from tblPatientPicture where PatientID =@PatientID)  
-- Begin  
 --  Update tblPatientPicture set PatientID =@PatientID,PatientImage=@PatientImage
 --  Where PatientID =@PatientID 
-- End  
-- Else  
 Begin  
 Insert into tblPatientPicture values(@PatientID,@PatientImage)  
 End  
 --Delete from tblPatientPicture where PatientID =@PatientID  

END
GO
/****** Object:  StoredProcedure [dbo].[spIsOrderTestOnTheList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spIsOrderTestOnTheList] 	
	@ClientCode varchar(50)
AS
BEGIN
	
	SET NOCOUNT ON;

    
	SELECT *
	FROM tblEMROutputOrderedTestClientsList with (NOLOCK)
	WHERE ClientCode = @ClientCode

END

GO
/****** Object:  StoredProcedure [dbo].[spLoadTestAOEs]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spLoadTestAOEs]             
          
      @tests varchar(20)          
AS            
BEGIN            
             
SET NOCOUNT ON;            
            
DECLARE   @StartPos smallint            
  , @EndPos smallint            
  , @CurVal varchar(20)            
  , @FieldList varchar(2000)            
  , @PTestsList varchar(500)            
  , @iPos smallint            
            
if object_id('tempdb..#PrfTests') is not null            
            
 drop table #PrfTests            
             
create table #PrfTests            
(             
  pTestCode varchar(20),            
  iPos smallint               
)              
            
Set @PTestsList = (SELECT PerformedTestCode FROM dbo.tblOrderedTestsDefinitions WHERE OrderedTest = @tests)            
            
IF @PTestsList IS NULL OR @PTestsList =''            
 BEGIN            
     SELECT OrderedTest,[Description],ActiveFlag ,InSearchFlag ,'' as pTestCode , '' as ExternalDescription, '' InstrumentCode ,           
   ReportFlag, '' iPos, '' PerformedTest, '' as MailoutFlag, '' as MailoutLab            
     FROM dbo.tblOrderedTestsDefinitions            
     WHERE OrderedTest = @tests            
  --SELECT ClientCode, ClientName FROM dbo.tblClients             
 END            
             
ELSE            
            
 BEGIN            
  Set @FieldList =''            
  Set @FieldList = @PTestsList + '|'            
  Set @StartPos = 1            
  Set @EndPos = 1            
  Set @iPos = 1            
   -- Start the looping operation            
  While @EndPos > 0            
     Begin            
     Set @EndPos = CharIndex('|', @FieldList, @StartPos)            
     If @EndPos > 0            
     Begin            
     Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))            
     -- Add current row to TempTable            
     Insert #PrfTests (pTestCode, iPos) Values (@CurVal, @iPos)            
     Set @StartPos = @EndPos + 1            
     Set @iPos = @iPos + 1            
     End            
     End            
  --select ptestcode as performedtest from #PrfTests          
    select distinct a.AOEQuestion,   STUFF((SELECT distinct '| ' +CAST( c.AOEAnswer as varchar(50))          
       FROM tblPerformedTestsAOE c where c.AOEQuestion=a.AOEQuestion          
                              
          FOR XML PATH('')), 1, 1, '') as AOEAnswer,a.AOEtestcode,a.AOETextAnswer,a.AOEAnswerRequired,a.performedtest            
 FROM  tblPerformedTestsAOE a  where a.performedtest in (select ptestcode as performedtest from #PrfTests)          
          
              
           
          
          
             
             
              
   END            
END 
GO
/****** Object:  StoredProcedure [dbo].[spMoveModuleToExpired]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spMoveModuleToExpired]
	@ID as Varchar(50)
	    
	
AS
BEGIN
	declare @iCount as int
	select @iCount = count(ID) from tblControlModules where  ID = @ID
		if @iCount > 0
			begin
				INSERT INTO tblControlModulesExpired SELECT * FROM tblControlModules WHERE ID = @ID
				delete from tblControlModules where ID = @ID
			end
END
GO
/****** Object:  StoredProcedure [dbo].[spPathologistCaseList]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spPathologistCaseList]                          
@status varchar(50)='',                          
@user varchar(50)='',              
@choice varchar(50)=''              
as              
begin              
if(@status ='View All')            
begin            
if(@choice ='BindAllUser')              
 begin            --CONVERT(VARCHAR(20), ReceiveDate, 101) AS ReceivedDate,   FORMAT( ReceiveDate, 'hh.mm tt') as ReceivedTime   
          
  select P.Accession,P.TestCode,A.PatientID,(T.ptLastName+ ','+T.ptFirstName)as PatientName,A.ClientCode,Pathologist, P.QSSLastUpdateID,P.Status,P.CaseNumber            
    ,P.Notes,p.Jars,p.Cassettes,p.Slides ,Td.ResultTestCode, Td.PerformedBy,Td.MailoutFlag,Td.MailoutLab ,CONVERT(VARCHAR(20), A.ReceiveDate, 101) AS ReceivedDate,   FORMAT( A.ReceiveDate, 'hh.mm tt') as ReceivedTime,p.ClientCaseNumber,CONVERT(VARCHAR(20)
, P.QSSUpdateDate, 101) as QSSUpdateDate  
 from tblPathologyCases as P Left join  tblAccessions as A on P.Accession = A.Accession  Left join tblPerformedTestsDefinitions as Td             
on P.TestCode =Td.PerformedTest Left join tblPatient T on  A.PatientID =T.PatientID  --where P.Status in ('Pending','Final')            
 end              
if(@choice ='BindLoginUser')              
begin              
  select P.Accession,P.TestCode,A.PatientID,(T.ptLastName+ ','+T.ptFirstName)as PatientName,A.ClientCode,Pathologist, P.QSSLastUpdateID,P.Status,P.CaseNumber,              
  P.Notes,p.Jars,p.Cassettes,p.Slides ,Td.ResultTestCode, Td.PerformedBy,Td.MailoutFlag,Td.MailoutLab ,CONVERT(VARCHAR(20), A.ReceiveDate, 101) AS ReceivedDate,   FORMAT( A.ReceiveDate, 'hh.mm tt') as ReceivedTime,p.ClientCaseNumber,CONVERT(VARCHAR(20), P
.QSSUpdateDate, 101) as QSSUpdateDate  
  from tblPathologyCases as P Left join               
   tblAccessions as A on P.Accession = A.Accession  Left join tblPerformedTestsDefinitions as Td on P.TestCode =Td.PerformedTest Left join tblPatient T              
    on     A.PatientID =T.PatientID  where  P.QSSLastUpdateID = (@user) -- and P.Status in ('Pending','Final')           
 end              
end            
else            
begin            
if(@choice ='BindAllUser')              
 begin              
          
           
select * from (          
  select P.Accession,P.TestCode,A.PatientID,(T.ptLastName+ ','+T.ptFirstName)as PatientName,A.ClientCode,Pathologist, P.QSSLastUpdateID,P.Status,          
    CASE  WHEN Status in (select statusname from tblStatus where statusname in ('Cancelled','Final') ) THEN 'Final'          
            ELSE 'Pending' END as StatusDetails  ,          
  P.CaseNumber            
    ,P.Notes,p.Jars,p.Cassettes,p.Slides,p.Sources ,Td.ResultTestCode, Td.PerformedBy,Td.MailoutFlag,Td.MailoutLab ,CONVERT(VARCHAR(20), A.ReceiveDate, 101) AS ReceivedDate,   
	FORMAT( A.ReceiveDate, 'hh.mm tt') as ReceivedTime,p.ClientCaseNumber,CONVERT(VARCHAR(20), P.QSSUpdateDate, 101) as QSSUpdateDate  
 from tblPathologyCases as P Left join  tblAccessions as A on P.Accession = A.Accession  Left join tblPerformedTestsDefinitions as Td          
     
on P.TestCode =Td.PerformedTest Left join tblPatient T on  A.PatientID =T.PatientID  ) as T          
          
 where T.StatusDetails = (@status)          
 end              
if(@choice ='BindLoginUser')              
begin              
select * from (          
  select P.Accession,P.TestCode,A.PatientID,(T.ptLastName+ ','+T.ptFirstName)as PatientName,A.ClientCode,Pathologist, P.QSSLastUpdateID,P.Status,          
   CASE  WHEN Status in (select statusname from tblStatus where statusname in ('Cancelled','Final') ) THEN 'Final'          
            ELSE 'Pending' END as StatusDetails  ,          
  P.CaseNumber,              
  P.Notes,p.Jars,p.Cassettes,p.Slides ,Td.ResultTestCode, Td.PerformedBy,Td.MailoutFlag,Td.MailoutLab ,CONVERT(VARCHAR(20), A.ReceiveDate, 101) AS ReceivedDate,   FORMAT( A.ReceiveDate, 'hh.mm tt') as ReceivedTime,p.ClientCaseNumber,CONVERT(VARCHAR(20), P
.QSSUpdateDate, 101) as QSSUpdateDate  
    
  from tblPathologyCases as P Left join               
   tblAccessions as A on P.Accession = A.Accession  Left join tblPerformedTestsDefinitions as Td on P.TestCode =Td.PerformedTest Left join tblPatient T              
    on     A.PatientID =T.PatientID  where  P.QSSLastUpdateID = (@user)            
  ) as T          
          
 where T.StatusDetails = (@status)           
 end              
end            
  if (@choice ='BindMailOut') --- dropdownlist bind Mailout Labs                          
  begin                             
      select id,LabCode from tblMailoutLabs                   
  end                          
 if (@choice ='BindPythologist') --- dropdownlist bind pythologist                          
  begin                          
  --SELECT [PhysicianCode], [LastName], [FirstName] FROM [tblPathologists]                          
   SELECT [PhysicianCode], [LastName]+','+ [FirstName] as pathlogistname FROM [tblPathologists]                   
  end               
end     
      
      
  
  
GO
/****** Object:  StoredProcedure [dbo].[spPathologistUpdateCaseReport]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spPathologistUpdateCaseReport]      
     
@Pathologist varchar(50),      
@CaseNo varchar(50)     
as      
      
 begin  
 update tblPathologyCases set Pathologist=@Pathologist where caseNumber =@CaseNo       
 end  

GO
/****** Object:  StoredProcedure [dbo].[spPopulateMailoutOrder]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spPopulateMailoutOrder]     
    
@MOAccession varchar(100) ,       
@MailoutLabCode varchar(100) = ''   
    
as

Declare @isMatch as bit

if @MailoutLabCode <> ''
begin
	 --select @mailoutlabcode=mailoutlabcode from tblmailoutorders where MOAccession =@MOAccession        
	Select @isMatch = dbo.MO_GetAccessionMailoutOrderedTestMatch(@MOAccession, @mailoutlabcode)          
	if not exists (select moaccession from tblmailoutorders where moaccession=@MOAccession) or ISNULL(@isMatch, 0) = 0          
	BEGIN          
		DELETE from tblMailoutOrders where MOAccession = @MOAccession and mailoutlabcode=@MailoutLabCode   
		insert into tblMailoutOrders        
		select distinct          
		ptd.MailoutLab,         
		ot.Accession,         
		a.PatientID,         
		dbo.MO_GetAccessionMailoutOrderedTestsByMOLab (ot.Accession, ptd.MailoutLab),         
		dbo.MO_GetAccessionMailoutOrderedTestsByMOLab (ot.Accession, ptd.MailoutLab),         
		'0',         
		NULL, NULL        
		from tblOrderedTests ot        
		inner join tblPerformedTestsDefinitions ptd        
		on ot.PerformedTest = ptd.PerformedTest        
		inner join tblAccessions a        
		on a.Accession = ot.Accession        
		where ot.accession = @MOAccession        
		and ptd.MailoutFlag = 'M'       and ptd.mailoutlab=@MailoutLabCode
	end
end
else begin      
         
-- declare @mailoutlabcode as varchar(100)    
	select @mailoutlabcode=mailoutlabcode from tblmailoutorders where MOAccession =@MOAccession    
	Select @isMatch = dbo.MO_GetAccessionMailoutOrderedTestMatch(@MOAccession, @mailoutlabcode)      
	if not exists (select moaccession from tblmailoutorders where moaccession=@MOAccession) or ISNULL(@isMatch, 0) = 0      
	BEGIN      
		DELETE from tblMailoutOrders where MOAccession = @MOAccession    
		insert into tblMailoutOrders    
		select distinct      
		ptd.MailoutLab,     
		ot.Accession,     
		a.PatientID,     
		dbo.MO_GetAccessionMailoutOrderedTestsByMOLab (ot.Accession, ptd.MailoutLab),     
		dbo.MO_GetAccessionMailoutOrderedTestsByMOLab (ot.Accession, ptd.MailoutLab),     
		'0',     
		NULL, NULL    
		from tblOrderedTests ot    
		inner join tblPerformedTestsDefinitions ptd    
		on ot.PerformedTest = ptd.PerformedTest    
		inner join tblAccessions a    
		on a.Accession = ot.Accession    
		where ot.accession = @MOAccession    
		and ptd.MailoutFlag = 'M'    
	End
End
GO
/****** Object:  StoredProcedure [dbo].[spPopulateMailoutOrderSunrise]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spPopulateMailoutOrderSunrise]         
        
@MOAccession varchar(100) ,       
 @MailoutLabCode varchar(100)       
as        
        
 --select @mailoutlabcode=mailoutlabcode from tblmailoutorders where MOAccession =@MOAccession        
 declare @isMatch as bit = dbo.MO_GetAccessionMailoutOrderedTestMatch(@MOAccession, @MailoutLabCode)          
if not exists (select moaccession from tblmailoutorders where moaccession=@MOAccession) or ISNULL(@isMatch, 0) = 0          
BEGIN          
 DELETE from tblMailoutOrders where MOAccession = @MOAccession and mailoutlabcode=@MailoutLabCode    
 insert into tblMailoutOrders        
 select distinct          
 ptd.MailoutLab,         
 ot.Accession,         
 a.PatientID,         
  dbo.MO_GetAccessionMailoutOrderedTestsByMOLab (ot.Accession, ptd.MailoutLab),         
  dbo.MO_GetAccessionMailoutOrderedTestsByMOLab (ot.Accession, ptd.MailoutLab),         
 '0',         
 NULL, NULL        
 from tblOrderedTests ot        
 inner join tblPerformedTestsDefinitions ptd        
 on ot.PerformedTest = ptd.PerformedTest        
 inner join tblAccessions a        
 on a.Accession = ot.Accession        
 where ot.accession = @MOAccession        
 and ptd.MailoutFlag = 'M'    and ptd.mailoutlab=@MailoutLabCode  
        
END


GO
/****** Object:  StoredProcedure [dbo].[spPopulateReceivingPool]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spPopulateReceivingPool]  
 -- Add the parameters for the stored procedure here 
 				@PreAccession varchar(100),
                @OrderDate datetime = NULL,
                @CollectionDate Datetime = NULL,
                @PatientID varchar(100) = '',
                @LastName varchar(50) = '',
                @FirstName varchar(50) = '',
                @MiddleName varchar(50) = '',
                @Address varchar(100) = '',
                @City varchar(100) = '',
                @State varchar(2) = '',
                @Zip varchar(20) = '',
                @Phone varchar(20) = '',
                @Sex varchar(20) = '',
                @DOB Datetime = NULL,
                @ClinicalInfo varchar(200) = '',
                @Fasting varchar(5) = '',
                @SSN varchar(20) = '',
                @ClientCode varchar(50) = '',
                @OrderedTests varchar(max) = '',
                @DiagnosisCodes varchar(max) = '',
                @MedicationCodes varchar(max) = '',
                @MedicationDose varchar(max) = '',
                @MedicationLastTaken varchar(max) = '',
                @PhysicianCode varchar(100) = '',
                @OrderType varchar(10) = '',
                @BillTo varchar(20) = '',
                @SpecimenReceived varchar(20) = '',
                @WebUserID varchar(20) = '',
                @PrimaryInuranceCode varchar(20) = '',
				@PrimaryInuranceName varchar(100) = '',
                @PrimaryInuranceID varchar(20) = '',
                @PrimaryInuranceFirstName varchar(50) = '',
                @PrimaryInuranceLastName varchar(50) = '',
                @PrimaryInuranceMiddleName varchar(50) = '',
                @PrimaryInuranceAddress varchar(100) = '',
                @PrimaryInuranceCity varchar(100) = '',
                @PrimaryInuranceState varchar(2) = '',
                @PrimaryInuranceZip varchar(20) = '',
                @PrimaryInurancePhone varchar(20) = '',
                @PrimaryInuranceSex varchar(20) = '',
                @PrimaryInuranceDOB Datetime = NULL,
                @PrimaryInuranceGroupNumber varchar(50) = '',
                @PrimaryInuranceRelation varchar(20) = '',
                @SecondaryInuranceCode varchar(20) = '',
                @SecondaryInuranceID varchar(20) = '',
				@SecondaryInuranceName varchar(100) = '',
                @SecondaryInuranceFirstName varchar(50) = '',
                @SecondaryInuranceLastName varchar(50) = '',
                @SecondaryInuranceMiddleName varchar(50) = '',
                @SecondaryInuranceAddress varchar(100) = '',
                @SecondaryInuranceCity varchar(100) = '',
                @SecondaryInuranceState varchar(2) = '',
                @SecondaryInuranceZip varchar(20) = '',
                @SecondaryInurancePhone varchar(20) = '',
                @SecondaryInuranceSex varchar(20) = '',
                @SecondaryInuranceDOB Datetime = NULL,
                @SecondaryInuranceGroupNumber varchar(50) = '',
                @SecondaryInuranceRelation varchar(20) = '',
                @MiscTests varchar(max) = '',
                @MiscCodes varchar(max) = '',
                @POCTests varchar(max) = '',
                @POCResults varchar(max) = '',
                @Interface varchar(20) = '',
                @ConfirmAllTests bit = 0,
                @ConfirmAllMeds bit = 0,
                @ConfirmConsistancy bit = 0,
				@Comments varchar(max) = ''
 
 AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  


 if @PrimaryInuranceCode <> ''
BEGIN
 
IF NOT Exists(Select InsuranceCode from tblInsuranceCompanies where InsuranceCode = @PrimaryInuranceCode)
 
	BEGIN
 
 
		insert into tblInsuranceCompanies(InsuranceCode, Name, Address, 
					 City, State, Zip, Telephone )
		 
		values(		 @PrimaryInuranceCode, @PrimaryInuranceName, @PrimaryInuranceAddress, 
					 @PrimaryInuranceCity, @PrimaryInuranceState, @PrimaryInuranceZip, @PrimaryInurancePhone)


	 END
END

if @SecondaryInuranceCode <> ''
BEGIN

IF NOT Exists(Select InsuranceCode from tblInsuranceCompanies where InsuranceCode = @SecondaryInuranceCode)
 
	BEGIN
 
 
		insert into tblInsuranceCompanies(InsuranceCode, Name, Address, 
					 City, State, Zip, Telephone )
		 
		values(		 @SecondaryInuranceCode, @SecondaryInuranceName, @SecondaryInuranceAddress, 
					 @SecondaryInuranceCity, @SecondaryInuranceState, @SecondaryInuranceZip, @SecondaryInurancePhone)


	 END
END


  
    -- Insert statements for procedure here  
 IF Exists(Select PreAccession from tblReceivingPool where PreAccession =@PreAccession)  
 Begin  
   Update tblReceivingPool set 
				OrderDate = @OrderDate,
                CollectionDate = @CollectionDate,
                PatientID =@PatientID,
                LastName=@LastName,
                FirstName=@FirstName,
                MiddleName=@MiddleName,
                Address=@Address,
                City=@City,
                State=@State,
                Zip=@Zip,
                Phone=@Phone,
                Sex=@Sex,
                DOB=@DOB,
                ClinicalInfo=@ClinicalInfo,
                Fasting=@Fasting,
                SSN=@SSN,
                ClientCode=@ClientCode,
                OrderedTests=@OrderedTests,
                DiagnosisCodes=@DiagnosisCodes,
                MedicationCodes=@MedicationCodes,
                MedicationDose=@MedicationDose,
                MedicationLastTaken=@MedicationLastTaken,
                PhysicianCode=@PhysicianCode,
                OrderType=@OrderType,
                BillTo=@BillTo,
                SpecimenReceived=@SpecimenReceived,
                WebUserID=@WebUserID,
                PrimaryInuranceCode=@PrimaryInuranceCode,
                PrimaryInuranceID=@PrimaryInuranceID,
                PrimaryInuranceFirstName=@PrimaryInuranceFirstName,
                PrimaryInuranceLastName=@PrimaryInuranceLastName,
                PrimaryInuranceMiddleName=@PrimaryInuranceMiddleName,
                PrimaryInuranceAddress=@PrimaryInuranceAddress,
                PrimaryInuranceCity=@PrimaryInuranceCity,
                PrimaryInuranceState=@PrimaryInuranceState,
                PrimaryInuranceZip=@PrimaryInuranceZip,
                PrimaryInurancePhone=@PrimaryInurancePhone,
                PrimaryInuranceSex=@PrimaryInuranceSex,
                PrimaryInuranceDOB=@PrimaryInuranceDOB,
                PrimaryInuranceGroupNumber=@PrimaryInuranceGroupNumber,
                PrimaryInuranceRelation=@PrimaryInuranceRelation,
                SecondaryInuranceCode=@SecondaryInuranceCode,
                SecondaryInuranceID=@SecondaryInuranceID,
                SecondaryInuranceFirstName=@SecondaryInuranceFirstName,
                SecondaryInuranceLastName=@SecondaryInuranceLastName,
                SecondaryInuranceMiddleName=@SecondaryInuranceMiddleName,
                SecondaryInuranceAddress=@SecondaryInuranceAddress,
                SecondaryInuranceCity=@SecondaryInuranceCity,
                SecondaryInuranceState=@SecondaryInuranceState,
                SecondaryInuranceZip=@SecondaryInuranceZip,
                SecondaryInurancePhone=@SecondaryInurancePhone,
                SecondaryInuranceSex=@SecondaryInuranceSex,
                SecondaryInuranceDOB= @SecondaryInuranceDOB,
                SecondaryInuranceGroupNumber=@SecondaryInuranceGroupNumber,
                SecondaryInuranceRelation=@SecondaryInuranceRelation,
                MiscTests=@MiscTests,
                MiscCodes=@MiscCodes,
                POCTests=@POCTests,
                POCResults=@POCResults,
                Interface = @Interface,
				QSSUpdateDate = getdate(),
				ConfirmAllTests = @ConfirmAllTests,
				ConfirmAllMeds = @ConfirmAllMeds,
				ConfirmConsistancy = @ConfirmConsistancy,
			Comments = @Comments
   Where PreAccession=@PreAccession  
    
 End  
 Else  
 Begin  
 Insert into tblReceivingPool
 (				PreAccession,
				OrderDate,
                CollectionDate,
                PatientID,
                LastName,
                FirstName,
                MiddleName,
                Address,
                City,
                State,
                Zip,
                Phone,
                Sex,
                DOB,
                ClinicalInfo,
                Fasting,
                SSN,
                ClientCode,
                OrderedTests,
                DiagnosisCodes,
                MedicationCodes,
                MedicationDose,
                MedicationLastTaken,
                PhysicianCode,
                OrderType,
                BillTo,
                SpecimenReceived,
                WebUserID,
                PrimaryInuranceCode,
                PrimaryInuranceID,
                PrimaryInuranceFirstName,
                PrimaryInuranceLastName,
                PrimaryInuranceMiddleName,
                PrimaryInuranceAddress,
                PrimaryInuranceCity,
                PrimaryInuranceState,
                PrimaryInuranceZip,
                PrimaryInurancePhone,
                PrimaryInuranceSex,
                PrimaryInuranceDOB,
                PrimaryInuranceGroupNumber,
                PrimaryInuranceRelation,
                SecondaryInuranceCode,
                SecondaryInuranceID,
                SecondaryInuranceFirstName,
                SecondaryInuranceLastName,
                SecondaryInuranceMiddleName,
                SecondaryInuranceAddress,
                SecondaryInuranceCity,
                SecondaryInuranceState,
                SecondaryInuranceZip,
                SecondaryInurancePhone,
                SecondaryInuranceSex,
                SecondaryInuranceDOB,
                SecondaryInuranceGroupNumber,
                SecondaryInuranceRelation,
                MiscTests,
                MiscCodes,
                POCTests,
                POCResults,
                Interface, 
                QSSUpdateDate,
                ConfirmAllTests,
                ConfirmAllMeds, 
                ConfirmConsistancy,
				Comments              
                )
         values(
                @PreAccession,
				@OrderDate,
                @CollectionDate,
                @PatientID,
                @LastName,
                @FirstName,
                @MiddleName,
                @Address,
                @City,
                @State,
                @Zip,
                @Phone,
                @Sex,
                @DOB,
                @ClinicalInfo,
                @Fasting,
                @SSN,
                @ClientCode,
                @OrderedTests,
                @DiagnosisCodes,
                @MedicationCodes,
                @MedicationDose,
                @MedicationLastTaken,
                @PhysicianCode,
                @OrderType,
                @BillTo,
                @SpecimenReceived,
                @WebUserID,
                @PrimaryInuranceCode,
                @PrimaryInuranceID,
                @PrimaryInuranceFirstName,
                @PrimaryInuranceLastName,
                @PrimaryInuranceMiddleName,
                @PrimaryInuranceAddress,
                @PrimaryInuranceCity,
                @PrimaryInuranceState,
                @PrimaryInuranceZip,
                @PrimaryInurancePhone,
                @PrimaryInuranceSex,
                @PrimaryInuranceDOB,
                @PrimaryInuranceGroupNumber,
                @PrimaryInuranceRelation,
                @SecondaryInuranceCode,
                @SecondaryInuranceID,
                @SecondaryInuranceFirstName,
                @SecondaryInuranceLastName,
                @SecondaryInuranceMiddleName,
                @SecondaryInuranceAddress,
                @SecondaryInuranceCity,
                @SecondaryInuranceState,
                @SecondaryInuranceZip,
                @SecondaryInurancePhone,
                @SecondaryInuranceSex,
                @SecondaryInuranceDOB,
                @SecondaryInuranceGroupNumber,
                @SecondaryInuranceRelation,
                @MiscTests,
                @MiscCodes,
                @POCTests,
                @POCResults,
                @Interface, 
                getdate(),
                @ConfirmAllTests,
                @ConfirmAllMeds,
                @ConfirmConsistancy,
				@Comments)  
 End  
 --  Delete from tblReviewAccession where Accession =@Accession  
END
GO
/****** Object:  StoredProcedure [dbo].[spPostPaymentAndDenialFromRemittanceFile]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROCEDURE [dbo].[spPostPaymentAndDenialFromRemittanceFile]  
      @Accession varchar(100),  
      @CheckNumber varchar(100),  
      @CheckDate datetime,  
      @CPT_Code varchar(30),  
      @Modifier varchar(100),  
      @CPT_Paid [decimal](18, 2),  
      @AdjustmentAmount [decimal](18, 2),  
      @QSSLastUpdateID varchar(20),  
      @Action varchar(100),  
      @Message varchar(max),  
      @DenialCode varchar(20) = NULL,  
	  @Payer varchar(200) = NULL, 
	  @PTResp bit = 0,
      @millisecond int = 1  
        
        
AS  
BEGIN  
DECLARE @EntryDate as datetime   
set @EntryDate = DATEADD(ms,@millisecond,GetDate())  
  
DECLARE @ReturnStatus as varchar(max) = ''  
  
IF  @Action <> 'MI'  
BEGIN  
            declare @BTCode varchar(20)  
            declare @OrderedTest varchar(100)  
            declare @GroupFlag bit  
            declare @CPTKey varchar(100)  
            declare @PaymentNote varchar(max) = ''  
            declare @AdjustmentNote varchar(max)  
   declare @AuditNote varchar(max) = ''  
            set @BTCode =''  
            set @OrderedTest = ''  
            set @GroupFlag = 'False'  
            set @CPTKey =''  
            set @AdjustmentNote = ''  
            set @PaymentNote = ''  
  
            --IF EXISTS (SELECT top 1 Accession from tblBill where Accession = @Accession and CPTcode = @CPT_Code and Modifier = @Modifier)  
            --BEGIN  
                  --FILE HAS BEEN PROCESSED  
                  if  ((select count(*) from tblBillingTempRemitArchive where Accession = @Accession and CPT_code = @CPT_Code and Modifier = @Modifier and Upper(CheckNumber) = Upper(@CheckNumber)) = 0)  
                        begin  
                        --put payments from this accession into tmp table to eliminate stray characters from the CPTCode  
                        select Accession, CPTCode = itvf.FixedString, BTCode, OrderedTest, GroupFlag,  
      Modifier, CheckNumber, PaymentAmt, QSSUpdateDate into #tmpPayment   
      from tblPayment  
      cross apply TrimChars([CPTcode], NCHAR(0x08) + NCHAR(0x09) + NCHAR(0x0A) + NCHAR(0x0AB) + NCHAR(0x0C) + NCHAR(0x0D) + NCHAR(0x0E) + NCHAR(0x0F) + NCHAR(0x20) + NCHAR(0x27)) itvf  
      where Accession = @Accession  
                        --POST ONLY IF IT WASN'T ALREADY POSTED FOR THIS ACCESSION, CPT, MODIFIER, CHECKNUMBER AND PAYMENT AMOUNT  
                        if not ((select count(*) from #tmpPayment where Accession = @Accession   
      and CPTcode = @CPT_Code and Modifier = @Modifier   
      and Upper(CheckNumber) = Upper(@CheckNumber) and PaymentAmt = @CPT_Paid) > 0)    
                        begin  
                              select top 1 @BTCode = BTcode, @OrderedTest = OrderedTest, @GroupFlag = GroupFlag   
         from #tmpPayment   
         where Accession = @Accession and CPTcode = @CPT_Code   
         order by QssUpdateDate desc  
                              --select @BTCode = BTcode, @OrderedTest = OrderedTestCode from tblBill where Accession = @Accession and CPTcode = @CPT_Code  
                              if @BTCode is null begin  
        select @BTCode = CurrentBillType from tblBillAccessions where Accession = @Accession  
         set @OrderedTest = 'Unallocated'  
         set @ReturnStatus = @BTCode  
         end  
           
                                    Insert into tblPayment  
                                    (Accession,  
                                    BTCode,  
                                    OrderedTest,  
                                    CPTcode,  
                                    EntryDate,  
                                    PaymentAmt,  
                                    AdjustmentAmt,  
                                    CheckNumber,  
                                    CheckDate,  
                                    QSSCreatedByID,  
                                    QSSCreatedDate,   
                                    QSSLastUpdateID,   
                                    QSSUpdateDate,  
                                    QSSVersion,  
									Modifier,  
                                    GroupFlag,  
                                    AdjustmentReason,  
									Payer,
									ptRespFlag
                                    )  
                                    values  
                                    (@Accession,  
                                    @BTCode,  
                                    @OrderedTest,  
                                    @CPT_Code,  
                                    @EntryDate,  
                                    @CPT_Paid,  
                                    @AdjustmentAmount,  
                                    @CheckNumber,  
                                    @CheckDate,  
                                    @QSSLastUpdateID,  
                                    GetDate(),   
                                    @QSSLastUpdateID,  
                                    GetDate(),   
                                    0,  
                                    @Modifier,  
                                    @GroupFlag,  
                                    @DenialCode, @Payer, @PTResp)  
  
                                    Set @CPTKey = @CPT_Code  
                                    if len(@Modifier) > 0 set @CPTKey += ':' + @Modifier  
                                    --Set @CPTKey += ' Group flag '  
                                    --if @GroupFlag = 1 Set @CPTKey += 'True' Else Set @CPTKey += 'False'  
                                      
                                    --Add Audit trail here:  
                                    set @AdjustmentNote = 'An adjustment of $' + cast(@AdjustmentAmount as varchar) + ' was submitted to CPT ' + cast(@CPTKey as varchar) + ' from electronic remittance. Bill Type: ' + cast(@BTCode as varchar)  + ' Check Number: ' + cast(@CheckNumber as varchar) + ' Payer: ' + cast(@Payer as varchar) 
                                    set @PaymentNote = 'A payment of $' + cast(@CPT_Paid as varchar) + ' was submitted to CPT ' + cast(@CPTKey as varchar) + ' from electronic remittance. Bill Type: ' + cast(@BTCode as varchar)  + ' Check Number: ' + cast(@CheckNumber as varchar) + ' Payer: ' + cast(@Payer as varchar) 
                                    if @CPT_Paid <> 0  
                                    begin  
                                          exec spSaveBillAuditDetails @Accession=@Accession, @NoteType = 'Remit', @Note = @PaymentNote, @UserID = @QSSLastUpdateID;  
                                    end  
                                    if @AdjustmentAmount <> 0  
                                    begin  
                                          exec spSaveBillAuditDetails @Accession=@Accession, @NoteType = 'Remit', @Note = @AdjustmentNote, @UserID = @QSSLastUpdateID;  
                                    end     
                                            
                                      
                              end  
                              ELSE --PAYMENT HAD BEEN POSTED TO THIS LINE BUT NOT THE ADJUSTMENT (IN CASE THERE ARE MORE THAN 1 DENIAL CODES IN THE FILE:  
                              BEGIN  
                                    --check if adjustment had been posted  
                                    if ((select count(*) from tblPayment where Accession = @Accession and CPTcode = @CPT_Code and Modifier = @Modifier and Upper(CheckNumber) = Upper(@CheckNumber) and PaymentAmt = @CPT_Paid and 
									AdjustmentReason = @DenialCode and AdjustmentAmt = @AdjustmentAmount) = 0)  
                                    begin  
                                          select top 1 @BTCode = BTcode, @OrderedTest = OrderedTest, @GroupFlag = GroupFlag from tblPayment where Accession = @Accession and CPTcode = @CPT_Code order by QssUpdateDate desc  
                                          --select @BTCode = BTcode, @OrderedTest = OrderedTestCode from tblBill where Accession = @Accession and CPTcode = @CPT_Code  
                                          if @AdjustmentAmount <> 0  
                                          begin  
                                                Insert into tblPayment  
                                                (Accession,  
                                                BTCode,  
												OrderedTest,  
                                                CPTcode,  
                                                EntryDate,  
                                                PaymentAmt,  
                                                AdjustmentAmt,  
                                                CheckNumber,  
                                                CheckDate,  
                                                QSSCreatedByID,  
                                                QSSCreatedDate,   
                                                QSSLastUpdateID,   
                                                QSSUpdateDate,  
                                                QSSVersion,  
                                                Modifier,  
                                                GroupFlag,  
                                                AdjustmentReason, Payer, ptRespFlag
                                                )  
                                                values  
                                                (@Accession,  
                                                @BTCode,  
                                                @OrderedTest,  
                                                @CPT_Code,  
                                                @EntryDate,  
                                                0.00, --payment is already posted for this line, DO NOT DOUBLE POST!!!  
                                                @AdjustmentAmount,  
                                                @CheckNumber,  
                                                @CheckDate,  
                                                @QSSLastUpdateID,  
                                                GetDate(),   
                                                @QSSLastUpdateID,  
                                                GetDate(),   
                                                0,  
                                                @Modifier,  
                                                @GroupFlag,  
                                                @DenialCode,@Payer, @PTResp)  
  
                                                Set @CPTKey = @CPT_Code  
                                                if len(@Modifier) > 0 set @CPTKey += ':' + @Modifier  
                                                --Set @CPTKey += ' Group flag '  
                                                --if @GroupFlag = 1 Set @CPTKey += 'True' Else Set @CPTKey += 'False'  
                                                  
                                                --Add Audit trail here:  
                                                set @AdjustmentNote = 'An adjustment of $' + cast(@AdjustmentAmount as varchar) + ' was submitted to CPT ' + cast(@CPTKey as varchar) + ' from electronic remittance. Bill Type: ' + cast(@BTCode as varchar)  
                                                  + ' Check Number: ' + cast(@CheckNumber as varchar) + ' Payer: ' + cast(@Payer as varchar)  
                                                exec spSaveBillAuditDetails @Accession=@Accession, @NoteType = 'Remit', @Note = @AdjustmentNote, @UserID = @QSSLastUpdateID;  
                                          end     
                              --    end  
                              END  
                  end     
            end  
      END  
      ELSE  
      BEGIN  
            --ADD TO MISSING INFORMATION  
            IF  ((SELECT count(*) FROM tblMissingInformation WHERE Accession = @Accession and Reason = @Message) = 0)  
            BEGIN  
                  INSERT INTO tblMissingInformation  
                  SELECT ba.Accession, ba.ClientCode, c.ClientName, pat.ptFirstName,pat.ptLastName, getdate(), @Message, 'INT'  
                    FROM tblBillAccessions ba  
                    INNER JOIN tblClients c  
                    ON c.ClientCode = ba.ClientCode  
                    INNER JOIN tblPatient pat  
                    ON pat.PatientID = ba.PatientID  
                    WHERE ba.Accession = @Accession  
            END  
      END  
--    end  
 Select @ReturnStatus as ReturnStatus into #tmpReturn  
 select * from #tmpReturn  
END  

GO
/****** Object:  StoredProcedure [dbo].[spPostPaymentsClientBills]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =================================================
-- Author:		Paul Antompietri
-- Create date: 04/08/2016
-- Description:	Updates tblPayments for Client Bills
-- =================================================
CREATE PROCEDURE [dbo].[spPostPaymentsClientBills]
	@Accession varchar(100),
	@BTCode varchar(100),	
	@QSSLastUpdatedID as varchar(20),
	@AdjustmentAmt decimal(18,2) = 0 ,
	@AdjustmentReason varchar(150) = NULL 

AS
BEGIN
	--DECLARE    
          
       INSERT INTO dbo.tblPayment
              (Accession , BTCode , CPTcode, OrderedTest, EntryDate, PaymentAmt, AdjustmentAmt,
              AdjustmentReason, QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID, QSSUpdateDate, QSSVersion, Modifier, GroupFlag)
       VALUES
              (@Accession, @BTCode , @BTCode , @BTCode ,  GETDATE() , '0' , @AdjustmentAmt , 
              @AdjustmentReason, @QSSLastUpdatedID , GETDATE(), @QSSLastUpdatedID , GETDATE(), 0, '', 0)
              
END

GO
/****** Object:  StoredProcedure [dbo].[spProcessReleaseFail]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Gladson>
-- Create date: <8/24/2016>
-- Description:	<Update the flag when Lab Report creation is unsuccessful>
--              <We are showing a Warning icon in ResultsReview based on this value>
-- =============================================
CREATE PROCEDURE [dbo].[spProcessReleaseFail]
(
@Accession varchar(100),
@ReleaseFailCounter as TinyInt = 0
)
As
BEGIN

	if not exists (select accession from tblReviewAccession where accession = @Accession)
		exec spAddToResultsReview @Accession = @Accession, @QSSLastUpdatedById = 'ErrorReview'
	
	Update tblReviewAccession
	Set ReleaseFail  = 1, 
	ReleaseFailCounter = @ReleaseFailCounter
	Where Accession = @Accession

END

GO
/****** Object:  StoredProcedure [dbo].[spQCArchiveControls]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCArchiveControls]        
 @OrderID as varchar(100),        
 @InstrumentCode as varchar(100),        
 @UserID as varchar(20),  
 @LotNumber as varchar(100)   
AS        
BEGIN        
SET NOCOUNT ON        
        
 declare @version as int        
         
 select @version = version from  tblControlOrdersArchive        
 where  OrderID = @OrderID         
 and InstrumentCode = @InstrumentCode        
 if @version is null        
  select @version = 1        
 else        
  select @version = @version + 1        
 INSERT INTO tblControlOrdersArchive(        
  [OrderID],        
  [InstrumentCode],        
  [Description],        
  [TestCodes],        
  [Average],        
  [Deviation],        
  [ArchiveFlag],        
  [CreatedBy],        
  [CreateDateTime],        
  [Version],  
  [LotNumber]      
 )        
    SELECT         
  [OrderID],        
  [InstrumentCode],        
  [Description],        
  [TestCodes],        
  [Average],        
  [Deviation],        
  [ArchiveFlag],        
  [CreatedBy],        
  [CreateDateTime],        
  @version,  
  [LotNumber]       
 FROM tblControlOrders        
 WHERE OrderID = @OrderID and InstrumentCode = @InstrumentCode        
          
 insert into tblControlResultsArchive        
  ([OrderID],        
  [InstrumentCode],        
  [TestCode],        
  [Result],        
  [NormalRange] ,        
  [Average],        
  [STDDeviation],        
  [GroupID],        
  [GraphFlag],        
  [ReportFlag],        
  [Comment],        
  [ResultDateTime],        
  [ReviewDateTime],        
  [ResultedBy],        
  [CalcDeviation],        
  Version,  
  [LotNumber] )        
 select       
  [OrderID],        
  [InstrumentCode],        
  [TestCode],        
  [Result],        
  [NormalRange] ,        
  [Average],        
  [STDDeviation],        
  [GroupID],        
  [GraphFlag],        
  [ReportFlag],        
  [Comment],        
  [ResultDateTime],        
  [ReviewDateTime],        
  [ResultedBy],        
  [CalcDeviation],        
  @Version,  
  [LotNumber]        
 from tblControlResults        
 WHERE OrderID = @OrderID and InstrumentCode = @InstrumentCode        
        
 DELETE FROM tblControlOrders WHERE OrderID = @OrderID and InstrumentCode = @InstrumentCode        
 DELETE FROM tblControlResults WHERE OrderID = @OrderID and InstrumentCode = @InstrumentCode        
        
        
 insert into tblControlOrdersAudit        
   (OrderID, InstrumentCode, TestCode, ArchiveFlag, AuditUpdateBy, AuditDateTime, LotNumber)        
             
  values( @OrderID, @InstrumentCode, '', 1, @UserID ,GETDATE(), @LotNumber)        
 END   
GO
/****** Object:  StoredProcedure [dbo].[spQCCreateNewResultEntry]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--exec spQCCreateNewResultEntry 'newcontrol', 'Integra', 'QSSSuport', '', 0
CREATE PROCEDURE [dbo].[spQCCreateNewResultEntry] -- 'test', 'SYS500', 'QSSSupport', ''      
            
 @OrderID as varchar(100),            
 @InstrumentCode as varchar(100),             
 @UserID varchar(20),            
 @GroupID varchar(50) = '',            
 @Initialize bit = 0            
             
              
AS            
BEGIN            
DECLARE             
  @TestCodes varchar(max)            
, @Averages varchar(max)            
, @Deviation varchar(max)            
, @StartPos smallint            
, @EndPos smallint            
, @CurVal varchar(20)            
, @FieldList varchar(max)            
, @Code varchar(100)            
, @Average varchar(100)           
, @STDDeviation varchar(100)      
declare @needToUpdate as bit            
, @origSTD as varchar(100)            
, @origAvg as varchar(100)
, @decAverage as decimal(28, 4)
, @decDeviation as decimal(28, 4)         
            
declare @today as datetime     
select @today = getdate()           
            
select @needToUpdate = 0            
            
DECLARE @LotNumber varchar(100)    
Select TOP(1) @LotNumber = isnull(LotNumber, '')
FROM tblControlOrders
Where OrderId = @OrderID    
CREATE TABLE #tmpTestCodes            
(            
    ID int IDENTITY            
    ,Code varchar(20)             
)            
/*      
CREATE TABLE #tmpAverages            
(            
    ID int IDENTITY            
    ,Average decimal(28,4)            
)            
CREATE TABLE #tmpSTDDeviation            
(            
    ID int IDENTITY            
    ,Deviation decimal(28,4)            
)            
CREATE TABLE #tmpResults            
(            
    ID int IDENTITY            
    ,Code varchar(20)             
    ,Average decimal(28,4)            
    ,Deviation decimal(28,4)            
)       
*/      
CREATE TABLE #tmpAverages            
(            
    ID int IDENTITY            
    ,Average varchar(100)      
)            
CREATE TABLE #tmpSTDDeviation            
(            
    ID int IDENTITY            
    ,Deviation varchar(100)      
)            
CREATE TABLE #tmpResults            
(            
    ID int IDENTITY            
    ,Code varchar(20)             
    ,Average varchar(100)           
    ,Deviation varchar(100)           
)            
 --IF @Initialize = 1            
             
            
                   
       SELECT @TestCodes = TestCodes , @Averages = Average, @Deviation = Deviation             
       FROM tblControlOrders (nolock)                   
       WHERE OrderID = @OrderID            
       AND InstrumentCode =  @InstrumentCode            
       PRINT @TestCodes            
       PRINT @Averages            
       PRINT @Deviation            
       IF @TestCodes != ''            
        BEGIN            
      Set @FieldList =''            
      Set @FieldList = @TestCodes + '|'            
      Set @StartPos = 1            
      Set @EndPos = 1            
       -- Start the looping operation            
      While @EndPos > 0            
         Begin            
         Set @EndPos = CharIndex('|', @FieldList, @StartPos)            
         If @EndPos > 0            
         Begin            
         Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))            
   /*      
  --If Value from pipe delimited string is a number, add to table      
  --Else ignore      
         IF ISNUMERIC(@CurVal) > 0      
   BEGIN*/      
   -- Add current row to TempTable            
  Insert #tmpTestCodes (Code) Values (@CurVal)            
  Set @StartPos = @EndPos + 1        
   --END      
         End            
            
       END            
        END            
           IF @Averages != ''            
          BEGIN            
        Set @FieldList =''            
        Set @FieldList = @Averages + '|'            
        Set @StartPos = 1            
        Set @EndPos = 1            
         -- Start the looping operation            
        While @EndPos > 0            
           Begin            
           Set @EndPos = CharIndex('|', @FieldList, @StartPos)            
           If @EndPos > 0            
           Begin            
           Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))            
                        
           -- Add current row to TempTable            
           Insert #tmpAverages(Average) Values (@CurVal)            
           Set @StartPos = @EndPos + 1            
           End            
         --select * from #tmpTestCodes   
         END            
          END            
            IF @Deviation != ''            
       BEGIN            
         Set @FieldList =''            
         Set @FieldList = @Deviation + '|'            
         Set @StartPos = 1            
         Set @EndPos = 1            
          -- Start the looping operation            
         While @EndPos > 0            
            Begin            
            Set @EndPos = CharIndex('|', @FieldList, @StartPos)            
            If @EndPos > 0            
            Begin            
            Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))                         
            -- Add current row to TempTable            
            Insert #tmpSTDDeviation(Deviation) Values (@CurVal)            
            Set @StartPos = @EndPos + 1            
            End            
            --select * from     #tmpAverages 
          END         
         
          END  
		   
          ELSE       
    BEGIN      
     INSERT into #tmpSTDDeviation(deviation) Values('')      
    END            
         END            
                        IF @TestCodes != ''            
                        BEGIN            
                        INSERT INTO #tmpResults(Code, Average, Deviation)            
                        SELECT Code, Average, Deviation            
                        FROM #tmpTestCodes (nolock)            
                        INNER JOIN #tmpAverages (nolock)            
                        on #tmpTestCodes.ID = #tmpAverages.ID            
                        INNER JOIN #tmpSTDDeviation (nolock)            
                        ON  #tmpAverages.ID = #tmpSTDDeviation.ID            
                        END
						 --SELECT  Code, Average, Deviation            
        -- FROM #tmpResults 
						            
                        IF EXISTS (SELECT TOP 1 Code FROM #tmpTestCodes)            
                           BEGIN            
                             DECLARE RESULTTESTCODE_CURSOR CURSOR READ_ONLY FOR             
         SELECT  Code, Average, Deviation            
         FROM #tmpResults            
         ORDER BY Code             
         OPEN RESULTTESTCODE_CURSOR            
            
         FETCH NEXT FROM RESULTTESTCODE_CURSOR            
         INTO   @Code , @Average, @STDDeviation            
            
         WHILE @@FETCH_STATUS = 0            
         BEGIN             
         -- if exist and avg/std changed, delete the row, and insert with new data    
            
         select @origAvg = cast(average as varchar), @origSTD = cast(STDDeviation as varchar)
         FROM tblControlResults with (nolock)             
         WHERE OrderID = @OrderID AND InstrumentCode = @InstrumentCode and TestCode = @Code and GroupID = @GroupID
		 
		 if @origAvg is not null and (@origAvg != @Average or @origSTD != @STDDeviation)              
         begin  
		  select @decAverage = CAST(isnull(@Average, 0.0) as decimal(28,4))
		  select @decDeviation = CAST(isnull(@STDDeviation, 0.0) as decimal(28,4))
		  
          update tblControlResults            
          set NormalRange = (CASE WHEN IsNumeric(@Average) = 1 THEN Convert(Varchar(10), (@decAverage - (2 * @decDeviation))) 
			+ '  -  ' + Convert(Varchar(10), (@decAverage + (2 * @decDeviation)))      
		ELSE @Average END),            
			  GraphFlag = ( case when @decAverage > 0 and @decDeviation > 0.0 then 1
			   else 0            
			end),             
			  ReportFlag = ( case when @decAverage > 0 and @decDeviation > 0.0 then 1
			   else 0
			end),             
          Average = @Average,            
          STDDeviation = @STDDeviation            
          WHERE OrderID = @OrderID AND InstrumentCode = @InstrumentCode and TestCode = @Code and GroupID = @GroupID            
           
         end        
          
         IF NOT EXISTS ( SELECT OrderID FROM tblControlResults WHERE             
           OrderID = @OrderID AND InstrumentCode = @InstrumentCode and TestCode = @Code and GroupID = @GroupID and isnull(LotNumber, '') = @LotNumber)            
                       
          BEGIN             
          insert into tblControlResults (orderid, instrumentcode, testcode, result, normalrange, average, STDDeviation, groupid, graphflag, reportflag, comment, ResultDateTime, ResultedBy,LotNumber)            
          values            
          (@orderid, @InstrumentCode, @Code, '', --result            
    (CASE       
   WHEN ISNUMERIC(@Average) = 1 THEN       
    Convert(Varchar(10), (CAST(@Average AS DECIMAL(28,4)) - (2 * CAST(@STDDeviation AS DECIMAL(28,4))))) + '  -  ' + Convert(Varchar(10), (CAST(@Average AS DECIMAL(28,4)) + (2 * CAST(@STDDeviation AS DECIMAL(28,4)))))      
    ELSE @Average      
    END ),      
          --Convert(Varchar(10), (@Average - (2 * @STDDeviation))) + '  -  ' + Convert(Varchar(10), (@Average + (2 * @STDDeviation))),            
          @Average, @STDDeviation, '', --groupid            
          ( case when ISNULL(@Average, '0') <> '0' and ISNULL(@STDDeviation, '0') <> '0' then 1            
            else 0            
           end), -- graph            
          ( case when ISNULL(@Average, '0') <> '0' and ISNULL(@STDDeviation, '0') <> '0' then 1            
            else 0            
           end), -- report                        
  '', --comment            
          @today,            
          @UserID,    
          @LotNumber)            
          END            
          FETCH NEXT FROM RESULTTESTCODE_CURSOR            
          INTO    @Code , @Average, @STDDeviation            
         END            
         CLOSE RESULTTESTCODE_CURSOR            
         DEALLOCATE RESULTTESTCODE_CURSOR            
       END 
                 
  exec spQCGetResultsByGroupID @OrderID, @InstrumentCode, '', @LotNumber -- groupid      
  -- exec  spQCGetResultsByGroupID 'NewControl', 'Integra', '', 3422
    
    
    
GO
/****** Object:  StoredProcedure [dbo].[spQCGetControl]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCGetControl]        
         
 @OrderID as varchar(100),        
 @InstrumentCode as varchar (100)        
         
AS        
BEGIN        
        
 SELECT         
    OrderID        
    ,c.InstrumentCode        
    ,c.Description        
    ,TestCodes        
    ,Average        
    ,Deviation        
    ,ArchiveFlag        
    ,CreatedBy        
    ,CreateDateTime        
    ,i.Description as InstrumentDescription  
    ,c.LotNumber    
            
   FROM tblControlOrders c        
   inner join tblInstrumentDefinitions i on c.instrumentCode = i.instrumentCode        
   where  c.OrderID = @OrderID AND c.InstrumentCode = @InstrumentCode        
         
   order by CreateDateTime desc        
        
END
GO
/****** Object:  StoredProcedure [dbo].[spQCGetControlAuditTestCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCGetControlAuditTestCodes]      
       
 @OrderID as varchar(100),      
 @InstrumentCode as varchar (100)      
       
AS      
BEGIN      
       
 SELECT distinct       
  TestCode      
        
   FROM tblControlOrdersAudit a      
   INNER JOIN tblControlOrders c on a.orderid = c.orderid and a.InstrumentCode = c.InstrumentCode      
   where a.OrderID = @OrderID       
  AND a.InstrumentCode = @InstrumentCode      
       
         
      
END
GO
/****** Object:  StoredProcedure [dbo].[spQCGetControlDetail]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCGetControlDetail]      
       
       
 @OrderID as varchar(100),      
 @Description as varchar(100),      
 @InstrumentCode as varchar (100),      
 @TestCode as varchar(100)      
AS      
BEGIN      
      
 declare @tmpOrderID varchar(100)      
 declare @tmpDescription varchar(100)      
 declare @tmpInstrumentCode varchar(100)      
 declare @tmpTestCode varchar(100)      
      
 if @orderID = '' or @orderID is null       
  select @tmpOrderId = '%'      
 else      
  select @tmpOrderId = '%' + @orderid + '%'      
      
 if @Description = '' or @Description is null       
  select @tmpDescription = '%'      
 else      
  select @tmpDescription = '%' + @Description + '%'      
      
 if @InstrumentCode = '' or @InstrumentCode is null       
  select @tmpInstrumentCode = '%'      
 else      
  select @tmpInstrumentCode = '%' + @instrumentcode + '%'      
      
 if @TestCode = '' or @TestCode is null       
  select @tmpTestCode = '%'      
 else      
  select @tmpTestCode = '%' + @TestCode + '%'      
      
      
 CREATE TABLE #tmpTestCodes      
 (      
  orderid varchar(100),      
  instrumentcode varchar(100),      
  testcode varchar(100)      
 )      
 insert into #tmpTestCodes      
 select distinct orderid, instrumentcode, testcode      
 from tblControlResults with (nolock)      
      
       
 if @testcode is null or @testcode = ''       
  select distinct orderid, c.Description, c.InstrumentCode, testcodes, i.Description as InstrumentDesc      
  from tblControlOrders c with (nolock)       
  inner join tblInstrumentDefinitions i on c.InstrumentCode = i.InstrumentCode      
  where orderid like @tmpOrderID      
  and c.Description like @tmpDescription      
  and c.InstrumentCode like @tmpInstrumentCode      
 else      
  select distinct c.orderid, c.description, c.InstrumentCode, c.testcodes, i.Description as InstrumentDesc      
  from tblControlOrders c with (nolock)       
  inner join #tmpTestCodes t on c.OrderID = t.orderid and c.InstrumentCode = t.instrumentcode      
  inner join tblInstrumentDefinitions i on c.InstrumentCode = i.InstrumentCode      
  where c.OrderID like @tmpOrderID      
  and c.Description like @tmpDescription      
  and c.InstrumentCode like @tmpInstrumentCode      
  and t.testcode like @tmpTestCode      
END 
GO
/****** Object:  StoredProcedure [dbo].[spQCGetControlGraphData]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCGetControlGraphData]          
  @OrderID varchar(100)          
 ,@InstrumentCode varchar(100)          
 ,@TestCode varchar(100)          
 ,@StartDate datetime          
 ,@EndDate datetime          
           
AS          
BEGIN          
          
 -- return ResultParameterUpdateComment from tblQCResultAudit           
 CREATE TABLE #tmpAudits          
 (          
  orderId varchar(100),          
  instrumentCode varchar(100),          
  testcode varchar(100),          
  comment varchar(200)          
 )          
 insert into #tmpAudits          
 select top 1 orderid, InstrumentCode, TestCode, ResultParameterUpdateComment + ' by ' + AuditUpdateBy          
 from tblControlResultsAudit          
 WHERE OrderId =  @OrderID          
  AND instrumentCode  =  @InstrumentCode          
  And TestCode = @TestCode           
  AND DATEADD(dd, 0, DATEDIFF(dd, 0, AuditDateTime)) BETWEEN @StartDate AND @EndDate          
  AND ResultParameterUpdateComment is not null          
 order by AuditDateTime desc          
           
 Declare @TestUnits varchar(10)          
 set @TestUnits =           
 (select distinct Units from tblResultedTestsDefinitions where TestCode = @TestCode and version =           
    (select max(version) from tblResultedTestsDefinitions where TestCode = @TestCode))          
          
  select r.id, r.testcode, r.result, r.average, r.stddeviation, r.calcdeviation, @TestUnits as Units, c.InstrumentCode, c.Description, r.ResultDateTime, r.ResultedBy, r.groupid, r.graphflag, r.ReportFlag          
            
  , case           
   when a.comment is null then r.comment          
   else r.comment + ' ' + a.comment          
  end as 'comment',          
  reviewdatetime,  
  ISNULL(r.LotNumber, '') As LotNumber  
                
  FROM dbo.tblControlResults (nolock) r           
  Inner Join tblControlOrders c on c.OrderID = r.OrderID and c.InstrumentCode = r.InstrumentCode          
  Left Join #tmpAudits a on a.OrderID = r.OrderID and a.InstrumentCode = r.InstrumentCode and a.testcode = r.TestCode          
  WHERE r.OrderId =  @OrderID          
  AND  r.instrumentCode  =  @InstrumentCode          
  And  r.TestCode = @TestCode           
  AND  DATEADD(dd, 0, DATEDIFF(dd, 0, ResultDateTime)) BETWEEN @StartDate AND @EndDate          
  and r.GroupID != ''          
  --and  ISNUMERIC(r.result) = 1          
  ORDER BY r.ResultDateTime          
            
           
END 
GO
/****** Object:  StoredProcedure [dbo].[spQCGetControls]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCGetControls]      
       
 @OrderID as varchar(100),      
 @InstrumentCode as varchar (100)      
       
AS      
BEGIN      
 declare @tmpOrderId as varchar(100)      
 declare @tmpInstrumentCode as varchar(100)      
 if @orderID = '' or @orderID is null       
  select @tmpOrderId = '%'      
 else      
  select @tmpOrderId = '%' + @orderid + '%'      
      
 if @InstrumentCode = '' or @InstrumentCode is null       
  select @tmpInstrumentCode = '%'      
 else      
  select @tmpInstrumentCode = '%' + @instrumentcode + '%'      
      
 SELECT       
    OrderID      
    ,c.InstrumentCode      
    ,c.Description      
    ,TestCodes      
    ,Average      
    ,Deviation      
    ,ArchiveFlag      
    ,CreatedBy      
    ,CreateDateTime      
    ,i.Description as InstrumentDescription      
          
   FROM tblControlOrders c      
   inner join tblInstrumentDefinitions i on c.instrumentCode = i.instrumentCode      
   where  c.OrderID like @tmpOrderID AND c.InstrumentCode like @tmpInstrumentCode      
       
   order by CreateDateTime desc      
      
END
GO
/****** Object:  StoredProcedure [dbo].[spQCGetControlTestCodes]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
CREATE PROCEDURE [dbo].[spQCGetControlTestCodes]       
  @OrderID varchar(100)      
 ,@InstrumentCode varchar(100)      
       
AS      
BEGIN      
DECLARE   @StartPos smallint      
  , @EndPos smallint      
  , @CurVal varchar(20)      
  , @FieldList varchar(2000)      
  , @TestCodeList varchar(max)      
  , @CurTest varchar(20)      
      
Declare @TestCodes table (TestCodeList varchar(max))      
Declare @tmpTestCodes table (TestCode varchar(20) NOT NULL)      
      
SET @TestCodeList = ''      
 Insert into @TestCodes SELECT distinct con.TestCodes            
 from tblControlOrders con (nolock)       
 where  con.orderID = @orderID  and InstrumentCode = @InstrumentCode      
      
      
SELECT @TestCodeList = @TestCodeList + TestCodeList + '|'      
FROM @TestCodes      
      
IF @TestCodeList != ''      
 BEGIN      
      
 Set @FieldList =''      
 Set @FieldList = @TestCodeList + '|'      
 Set @StartPos = 1      
 Set @EndPos = 1      
      
  While @EndPos > 0      
     Begin      
     Set @EndPos = CharIndex('|', @FieldList, @StartPos)      
     If @EndPos > 0      
     Begin      
     Set @CurTest = ''      
     Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))      
     Set @CurTest = isnull((select TestCode from @tmpTestCodes where TestCode = @CurVal),'')      
                    
              if len(@CurTest) = 0       
              Begin      
      Insert @tmpTestCodes (TestCode) Values (@CurVal)      
     End      
     Set @StartPos = @EndPos + 1      
     End      
           
     --PRINT @FieldList      
   END       
  END      
 SELECT tc.TestCode, rtd.ExternalName from @tmpTestCodes tc       
 INNER JOIN dbo.tblResultedTestsDefinitions rtd  with(nolock)       
 ON tc.TestCode = rtd.TestCode      
 INNER JOIN dbo.tblResultCodeVersions rtv       
 ON rtv.TestCode = rtd.TestCode      
 AND rtv.CurrentVersion = rtd.Version      
 ORDER BY TestCode      
  --IF EXISTS (SELECT TOP 1 TestCode from #tmpTestCodes)      
  -- BEGIN      
  --  SELECT 'ALL' AS TestCode      
  --  UNION      
  --  select TestCode from #tmpTestCodes      
  --  ORDER BY TestCode      
  --END      
END 
GO
/****** Object:  StoredProcedure [dbo].[spQCGetNextGroupNumber]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCGetNextGroupNumber]      
      
As      
BEGIN      
    Update tblCounter set counter = isNull(counter,10) + 1      
 WHERE CountName = 'ControlGroupCounter'      
       
 SELECT counter      
 FROM tblCounter with (NOLOCK)      
 WHERE Countname = 'ControlGroupCounter'      
END 
GO
/****** Object:  StoredProcedure [dbo].[spQCGetResultsByGroupID]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCGetResultsByGroupID]         
  @OrderID varchar(100),        
  @InstrumentCode varchar(100),        
  @GroupID varchar(50),  
  @LotNumber varchar(100)        
         
AS        
BEGIN        
 SELECT     res.id, res.OrderID, res.InstrumentCode, res.TestCode, res.Result, res.NormalRange, res.Average, res.STDDeviation, cast(res.calcDeviation as decimal(16,2)) as calcDeviation, res.comment,         
                       tblResultedTestsDefinitions.ExternalName,         
        groupid,        
        case        
      when GraphFlag = 1 then 'true'        
      else 'false'        
      end as GraphFlag,        
      case        
      when ReportFlag = 1 then 'true'        
      else 'false'        
      end as ReportFlag,        
        '' as WestgardRule,        
       res.ResultedBy,        
       ResultDateTime,        
       ReviewDateTime        
 FROM tblControlResults AS res WITH (nolock)         
           
   INNER JOIN tblResultedTestsDefinitions ON res.TestCode = tblResultedTestsDefinitions.TestCode         
   INNER JOIN tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode AND         
                      tblResultedTestsDefinitions.Version = tblResultCodeVersions.CurrentVersion        
 WHERE     (res.OrderID = @OrderID and res.InstrumentCode = @InstrumentCode and res.groupID = @GroupID  
 AND isnull(res.LotNumber, '') = isnull(@LotNumber, ''))        
 order by ResultDateTime desc, testcode asc        
         
        
END   
  
GO
/****** Object:  StoredProcedure [dbo].[spQCGetResultsForTestCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
      
      
CREATE PROCEDURE [dbo].[spQCGetResultsForTestCode]       
       
 @OrderID as varchar(100),      
 @InstrumentCode as varchar (100),      
 @TestCode varchar(100),      
 @ResultFromDate datetime = null,      
 @ResultToDate datetime = null      
       
       
AS      
BEGIN      
      
 declare @tmpFromDate datetime      
 declare @tmpToDate datetime      
      
 if @ResultFromDate is null or @ResultFromDate = ''      
  select @tmpFromDate = '01/01/1900'      
 else      
  select @tmpFromDate = @ResultFromDate      
      
 if @ResultToDate is null or @ResultToDate = ''      
  select @tmpToDate = GETDATE()      
 else      
  select @tmpToDate = @ResultToDate      
      
 select distinct       
  r.orderid      
  ,r.instrumentcode      
  ,r.TestCode      
  ,groupid       
  ,ResultDateTime      
  ,r.ResultedBy      
  ,r.result      
  ,r.NormalRange      
  ,r.Average      
  ,r.STDDeviation      
  ,r.calcDeviation      
  from tblControlResults r with (nolock)       
  where       
  r.GroupID != ''      
  and r.orderid = @orderid      
  and r.InstrumentCode = @InstrumentCode      
  and r.testcode =  @TestCode      
  and r.resultdatetime >=  @tmpFromDate      
  and r.resultdatetime <= @tmptoDate      
  order by ResultDateTime      
END
GO
/****** Object:  StoredProcedure [dbo].[spQCGetResultsGroups]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCGetResultsGroups]
           
 @OrderID as varchar(100),          
 @InstrumentCode as varchar (100),
 @CreatedDate as Datetime = null,
 @CreatedBy as varchar(100)  = null       
           
AS          
BEGIN     
Declare @CP varchar(100)
if @CreatedBy is not null and @CreatedBy <> '' set @CP =@CreatedBy else set @CP=null   

  if @CreatedDate is null
  Begin        
           
 select distinct           
  c.orderid          
  ,c.description          
  ,c.instrumentcode          
  ,MIN(r.ResultDateTime) As ResultDateTime
  ,r.ResultedBy          
  ,groupid          
  ,i.Description as InstrumentDesc    
  ,r.LotNumber          
  --,GraphFlag          
  --,ReportFlag          
          
  from tblControlResults r         
  inner join tblControlOrders c on r.orderid = c.orderid and r.InstrumentCode = c.InstrumentCode 
  and isnull(r.LotNumber, '') = isnull(c.LotNumber, '')
  inner join tblInstrumentDefinitions i on c.InstrumentCode = i.InstrumentCode          
  where r.GroupID != '' and r.ResultDateTime is not null          
  and r.orderid = @orderid          
  and r.InstrumentCode = @InstrumentCode  and CreatedBy= COALESCE(@CP, CreatedBy)        
  Group by c.orderid,c.description ,c.instrumentcode,r.ResultedBy,groupid,i.Description    
  ,r.LotNumber  
  order by resultDateTime
  End
  else
   Begin        
           
 select distinct           
  c.orderid          
  ,c.description          
  ,c.instrumentcode          
  ,MIN(r.ResultDateTime) As ResultDateTime
  ,r.ResultedBy          
  ,groupid          
  ,i.Description as InstrumentDesc    
  ,r.LotNumber          
  --,GraphFlag          
  --,ReportFlag          
          
  from tblControlResults r with (nolock)           
  inner join tblControlOrders c on r.orderid = c.orderid and r.InstrumentCode = c.InstrumentCode 
  and isnull(r.LotNumber, '') = isnull(c.LotNumber, '')
  inner join tblInstrumentDefinitions i on c.InstrumentCode = i.InstrumentCode          
  where r.GroupID != '' and r.ResultDateTime is not null          
  and r.orderid = @orderid          
  and r.InstrumentCode = @InstrumentCode  and CreatedBy= COALESCE(@CP, CreatedBy)  
  and ResultDateTime between @CreatedDate AND  DATEADD(day, 1, convert(date,@CreatedDate))      
  Group by c.orderid,c.description ,c.instrumentcode,r.ResultedBy,groupid,i.Description    
  ,r.LotNumber  
  order by resultDateTime
  End
  

  
END
GO
/****** Object:  StoredProcedure [dbo].[spQCGetResultsOrderByTestCode]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
      
      
CREATE PROCEDURE [dbo].[spQCGetResultsOrderByTestCode]       
       
 @OrderID as varchar(100),      
 @InstrumentCode as varchar (100),      
 @ResultFromDate as datetime = null,      
 @ResultToDate as datetime = null      
       
       
AS      
BEGIN      
      
 declare @tmpFromDate datetime      
 declare @tmpToDate datetime      
      
 if @ResultFromDate is null or @ResultFromDate = ''      
  select @tmpFromDate = '01/01/1900'      
 else      
  select @tmpFromDate = @ResultFromDate      
      
 if @ResultToDate is null or @ResultToDate = ''      
  select @tmpToDate = GETDATE()      
 else      
  select @tmpToDate = @ResultToDate      
 SELECT       
  id,      
  TestCode,      
  Result,       
  Average,      
  STDDeviation,      
  ResultDateTime      
 FROM         tblControlResults       
 where orderid = @orderid       
 and instrumentCode = @InstrumentCode       
 and isnumeric(result) = 1      
 and resultdatetime >=  @tmpFromDate      
 and resultdatetime <= @tmptoDate      
      
 ORDER BY TestCode, ID ASC      
END
GO
/****** Object:  StoredProcedure [dbo].[spQCResultArchiveAndDelete]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCResultArchiveAndDelete]    
 @OrderID as varchar(100)  
 AS   
 BEGIN  
 INSERT INTO tblControlResultsArchive (OrderID, InstrumentCode, Testcode, Result,NormalRange, Average,   
 STDDeviation,CalcDeviation, GroupID, GraphFlag, ReportFlag, Comment, ResultDateTime, ResultedBy, Version, LotNumber)  
 SELECT OrderId, InstrumentCode, TestCode, Result, NormalRange, Average, STDDeviation,CalcDeviation,  
 GroupID, GraphFlag, ReportFlag,Comment,ResultDateTime,ResultedBy, NULL, LotNumber  
 FROM tblControlResults   
 WHERE OrderID = @OrderID  
 AND GroupID = ''  
 AND CalcDeviation IS NULL  
 AND Result = ''  
   
 DELETE FROM tblControlResults  
 WHERE OrderID = @OrderID  
 AND GroupID = ''  
 AND CalcDeviation IS NULL  
 AND Result = ''  
 END
GO
/****** Object:  StoredProcedure [dbo].[spQCSaveControl]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCSaveControl]                
                
 @OrderID as varchar(100),                
 @Description as varchar(100),                
 @InstrumentCode as varchar(100),                
 @TestCodes as varchar(MAX),                
 @Average as varchar(MAX),                
 @Deviation as varchar(MAX),                
 @CreatedBy varchar(20),          
 @LotNumber varchar(100)            
                  
                 
                  
AS                
BEGIN                
--SET IDENTITY_INSERT dbo.tblQCControls ON                
 declare @iCount as int                
 select @iCount = count(ID) from  tblControlOrders                
 where  OrderID = @OrderID                 
 and InstrumentCode = @InstrumentCode                
                     
 if @iCount > 0                
 begin                
  exec [spQCResultArchiveAndDelete]  @OrderID  
  update tblControlOrders                
  set Description = @Description,                
   TestCodes = @TestCodes,                 
   Average = @Average,                 
   Deviation = @Deviation,      
   LotNumber = @LotNumber                
   --CreatedBy = @CreatedBy,                 
   --CreateDateTime = GETDATE()                          
   where OrderID = @OrderID                
   And   InstrumentCode = @InstrumentCode                
 end                
 else                 
 begin                      
  insert into tblControlOrders                
        (OrderID, Description, InstrumentCode, TestCodes, Average , Deviation, CreatedBy, CreateDateTime, LotNumber)                
                     
  values( @OrderID, @Description, @InstrumentCode, @TestCodes, @Average , @Deviation, @CreatedBy,GETDATE(), @LotNumber)                
                 
 end                
END 
GO
/****** Object:  StoredProcedure [dbo].[spQCSaveControlAudit]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCSaveControlAudit]        
        
 @OrderID as varchar(100),        
 @InstrumentCode as varchar(100),        
 @TestCode as varchar(20),        
 @Average as varchar(20),        
 @Deviation as varchar(20),        
 @CreatedBy varchar(20) ,       
 @LotNumber varchar(100)  
          
         
          
AS        
BEGIN        
        
  insert into tblControlOrdersAudit        
   (OrderID, InstrumentCode, TestCode, Average , Deviation, AuditUpdateBy, AuditDateTime, LotNumber)        
             
  values( @OrderID, @InstrumentCode, @TestCode, @Average , @Deviation, @CreatedBy,GETDATE(), @LotNumber)        
         
        
END 
GO
/****** Object:  StoredProcedure [dbo].[spQCSaveInstrumentAlphaNumeric]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCSaveInstrumentAlphaNumeric]    
@OrderID varchar(100),      
@InstrumentCode varchar(100),      
@TestCode varchar(100),      
@Result  varchar(100),      
@ResultDate Datetime,      
@QSSCreatedByID varchar(100),      
@QSSCreatedDate Datetime,      
@QcGroupNumber varchar(50)      
AS      
BEGIN      
 DECLARE @TestCodes varchar(max)      
 DECLARE @Averages varchar(max)      
 DECLARE @Deviations varchar(max)      
 DECLARE @LotNumber varchar(100)  
 SELECT TOP(1) @Averages = Average,      
 @TestCodes = TestCodes,      
 @Deviations = Deviation,  
 @LotNumber = LotNumber       
 FROM tblControlOrders      
 Where OrderID = @OrderID      
 Order by CreateDateTime Desc      
       
       
       
 DECLARE @TableTestCode TABLE(      
  TestCode varchar(100),      
  Average varchar(100),
  Deviation varchar(100)
  )      
 INSERT INTO @TableTestCode      
 SELECT TestCode, Mean, Deviation
From udf_TestCodeInfo(@TestCodes, @Averages, @Deviations)      
      
 IF ((SELECT COUNT(TestCode)       
  FROM tblControlResults      
  WHERE TestCode = @TestCode AND GroupID = @QcGroupNumber) > 0)      
 BEGIN      
    
 UPDATE tblControlResults      
  SET Result = @Result,      
   ResultDateTime = @ResultDate,      
   ResultedBy = @QSSCreatedByID      
  WHERE TestCode = @TestCode      
  AND GroupID = @QcGroupNumber      
 END      
 ELSE      
 BEGIN      
  INSERT INTO tblControlResults(OrderID,       
  InstrumentCode,       
  TestCode,       
  Result,       
  NormalRange,       
  Average,      
  STDDeviation,       
  CalcDeviation,       
  GroupID,      
  GraphFlag,       
  ReportFlag,      
  Comment,      
  ResultDateTime,       
  ResultedBy,  
  LotNumber)      
  SELECT @OrderID,      
  @InstrumentCode,       
  @TestCode,      
  @Result,      
  CASE       
  --CAST((co.Average - (2 * co.Deviation)) AS VARCHAR(100)) + ' - ' + CAST((co.Average + (2 * co.Deviation)) AS VARCHAR(100))       
   WHEN IsNumeric(@Result) = 1 THEN CONVERT(VARCHAR(100),(co.Average - (2 * co.Deviation))) + ' - ' + CONVERT(VARCHAR(100),(co.Average + (2 * co.Deviation)))     
   ELSE co.Average      
  END AS NormalRange,      
  co.Average,      
  CASE       
   WHEN IsNumeric(@Result) = 1 THEN co.Deviation       
   ELSE ''      
  END AS STDDeviation,      
  CASE       
   WHEN IsNumeric(@Result) = 1 THEN ((CAST(@Result AS Float) - co.Average) / co.Deviation)      
   ELSE ''      
  END AS Calc,      
  @QcGroupNumber As GroupID,      
  1 As GraphFlag,       
  1 As ReportFlag,      
  '' As Comment,      
  @ResultDate As ResultDateTime,      
  @QSSCreatedByID As ResultedBy,  
  @LotNumber As LotNumber      
  FROM @TableTestCode co      
  WHERE co.TestCode = @TestCode      
 END      
END

GO
/****** Object:  StoredProcedure [dbo].[spQCSaveInstrumentResult]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQCSaveInstrumentResult] 
@OrderID varchar(100),    
@InstrumentCode varchar(100),    
@TestCode varchar(100),    
@Result  varchar(100),    
@ResultDate Datetime,    
@QSSCreatedByID varchar(100),    
@QSSCreatedDate Datetime,    
@QcGroupNumber varchar(50)    
AS    
BEGIN    
     
 DECLARE @ReturnID int = 0    
 DECLARE @ID table(ID int)    
 DECLARE @LotNumber varchar(100)
 DECLARE @TableTestCode As Table    
 (    
  TestCode varchar(100),    
  Mean varchar(100),    
  Deviation varchar(100)    
 )     
 INSERT INTO @TableTestCode    
 SELECT TestCode, Mean, Deviation     
 FROM udf_GetTestInfo(@OrderID, @InstrumentCode)    
 IF (SELECT COUNT(TestCode) FROM @TableTestCode) < 1  
 BEGIN  
 RETURN  
 END  
 --SET @TableTestCode = (SELECT TestCode, Mean, Deviation FROM udf_TestCodeInfo(@OrderID, @InstrumentCode))--udf_TestCodeInfo(@TestCode, @OrderID, @InsturmentCode)    
 SELECT @ReturnID = MAX(id)    
  FROM tblControlResults    
  WHERE TestCode = @TestCode AND GroupID = @QcGroupNumber    
  
 SELECT @LotNumber = LotNumber 
 FROM tblControlOrders
 Where OrderID = @OrderID 
 AND InstrumentCode = @InstrumentCode
 
 IF (@ReturnID > 0)    
 BEGIN    
  --exec [spQCArchiveResults] @ReturnID    
	 
	--Update Results in ControlResults Table.
  UPDATE tblControlResults    
  SET Result = @Result,    
   ResultDateTime = @ResultDate,    
   ResultedBy = @QSSCreatedByID,    
   ReviewDateTime = @QSSCreatedDate,  
   CalcDeviation =  CASE 
						WHEN IsNumeric(@Result) = 0 OR IsNumeric(tc.Mean) = 0 THEN
							0.0000
						ELSE
							(CAST(@Result AS DECIMAL(28,4)) - tc.Mean) / tc.Deviation  
					END
  FROM @TableTestCode tc  
  WHERE tblControlResults.id = @ReturnID  
  AND tblControlResults.TestCode = tc.TestCode 
  
  
 END    
 ELSE    
 BEGIN    
  INSERT INTO tblControlResults(OrderID,     
  InstrumentCode,     
  TestCode,     
  Result,     
  NormalRange,     
  Average,    
  STDDeviation,     
  CalcDeviation,     
  GroupID,    
  GraphFlag,     
  ReportFlag,    
  Comment,    
  ResultDateTime,     
  ReviewDateTime,    
  ResultedBy,
  LotNumber)    
  OUTPUT INSERTED.id INTO @ID    
  SELECT @OrderID,    
  @InstrumentCode,     
  @TestCode,    
  @Result,    
  CASE
	WHEN IsNumeric(co.Mean) = 0 Then
		Co.Mean
	ELSE
		CAST(CAST(CAST(co.Mean AS Float) - (2 * CAST(co.Deviation AS FLOAT)) AS DECIMAL(28, 4))AS varchar(20))+ ' - ' + CAST(CAST(CAST(co.Mean AS FLOAT) + (2 * CAST(co.Deviation AS FLOAT))As DECIMAL(28,4)) AS varchar(20))
  END AS NormalRange,    
  co.Mean,    
  co.Deviation As STDDeviation,     
  CASE 
		WHEN IsNumeric(@Result) = 0 OR IsNumeric(co.Mean) = 0 THEN
			0.0000
		ELSE
			((CAST(@Result AS Decimal(28,4)) - CAST(co.Mean AS FLOAT)) / CAST(co.Deviation AS FLOAT)) 
  END As CalcDeviation,    
  @QcGroupNumber As GroupID,    
  IsNumeric(@Result) As GraphFlag,     
  1 As ReportFlag,    
  '' As Comment,    
  @ResultDate As ResultDateTime,    
  @QSSCreatedDate As ReviewDateTime,    
  @QSSCreatedByID As ResultedBy,
  @LotNumber As LotNumber   
  FROM @TableTestCode co    
  WHERE co.TestCode = @TestCode    
      
  SELECT @ReturnID = ID from @ID     
  --exec [spQCArchiveResults] @ReturnID    
 END    
END 

GO
/****** Object:  StoredProcedure [dbo].[spQCSaveResults]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spQCSaveResults]      
  @ID int          
 ,@Result varchar(100)          
 ,@GroupID varchar(50)          
 ,@Comment varchar(max) = null          
 ,@GraphFlag bit          
 ,@ReportFlag bit          
 ,@UserID varchar(20)          
 ,@ResultDateTime datetime          
AS          
BEGIN          
 declare @origOrderID varchar(100)          
 declare @origInstrumentCode varchar(100)          
 declare @origTestCode varchar(100)          
 declare @origReportFlag bit          
 declare @origGrpahFlag bit          
 declare @origComment varchar(200)          
 declare @origResult varchar(100)          
 declare @origResultDateTime datetime          
 declare @origReviewDateTime datetime          
 declare @origGroupID char(50)          
 declare @origLotNumber varchar(100)  
          
 select @origReportFlag = reportFlag, @origGrpahFlag = GraphFlag, @origComment = Comment, @origResult = Result, @origResultDateTime = ResultDateTime,           
 @origOrderID = OrderID, @origInstrumentCode = InstrumentCode, @origTestCode = TestCode, @origReviewDateTime = ReviewDateTime, @origGroupID = groupID,  
 @origLotNumber = LotNumber  
 from tblControlResults with (nolock)          
 where ID = @ID          
          
 -- if new result entered          
           
  Update tblControlResults          
  Set Result = @Result          
  , GroupID = @GroupID          
  ,   Comment = @Comment          
  , GraphFlag = (CASE WHEN ISNUMERIC(@Result) = 1 THEN @GraphFlag    
  Else 0    
  END)    
  , ReportFlag = @ReportFlag         
  , CalcDeviation =          
   (case when ISNUMERIC(ISNULL(@Result, '')) = 1           
    then (cast(@Result AS DECIMAL(28, 4)) - Average) / nullif(cast(STDDeviation AS DECIMAL(28,4)), 0)           
   else 0          
   end)            
  , ResultedBy = @UserID          
  , ResultDateTime =           
   case when @origResult = '' and @Result != '' then @ResultDatetime          
   else @origResultDateTime          
  end --only update when new result entered          
  , ReviewDateTime =           
   case when @origResult = '' and @Result != '' then getdate() --when result is entered          
   else @origReviewDateTime          
  end           
  where id = @ID          
            
           
  -- audit          
  if (@origResult != '') and (@ReportFlag != @origReportFlag or @GraphFlag != @origGrpahFlag or @comment != @origComment)          
   insert into tblControlResultsAudit (OrderID, InstrumentCode, TestCode, Comment, GraphFlag, ReportFlag, AuditDateTime, AuditUpdateBy, groupID, LotNumber)          
   values(@origOrderID, @origInstrumentCode, @origTestCode, @Comment, @GraphFlag, @ReportFlag, GETDATE(), @userID, @origGroupID, @origLotNumber)          
            
END          
GO
/****** Object:  StoredProcedure [dbo].[spQCUpdateRecalcResults]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spQCUpdateRecalcResults]	
	
	@OrderID as varchar(100),
	@InstrumentCode as varchar (100),
	@TestCode varchar(100),
	@ResultFromDate datetime = null,
	@ResultToDate datetime = null,
	@Average varchar(20),
	@STDDeviation varchar(20),
	@UpdateBy varchar(20)
	
	
AS
BEGIN

	declare @tmpFromDate datetime
	declare @tmpToDate datetime
	declare @avg decimal(28,4)
	declare @std decimal (28, 4)
	declare @origAvg decimal (28, 4)
	declare @origSTD decimal (28, 4)
	declare @distinctCnt as integer

	if @ResultFromDate is null or @ResultFromDate = ''
		select @tmpFromDate = '01/01/1900'
	else
		select @tmpFromDate = @ResultFromDate

	if @ResultToDate is null or @ResultToDate = ''
		select @tmpToDate = GETDATE()
	else
		select @tmpToDate = @ResultToDate

	select @avg = CAST(@Average AS DECIMAL(28, 4))
	select @std = CAST(@STDDeviation as decimal(28, 4))
	
	--if there are more than one set of avg/std, if means it's partially recalculated, then we run the calc anyway
	select @distinctCnt = count(distinct Average + STDDeviation) 
	from tblControlResults
	where 
		GroupID != ''
		and orderid = @orderid
		and InstrumentCode = @InstrumentCode
		and testcode =  @TestCode
		and resultdatetime >=  @tmpFromDate
		and resultdatetime <= @tmptoDate


	select top 1 @origAvg = Average, @origSTD = STDDeviation
	from tblControlResults
	where 
		GroupID != ''
		and orderid = @orderid
		and InstrumentCode = @InstrumentCode
		and testcode =  @TestCode
		and resultdatetime >=  @tmpFromDate
		and resultdatetime <= @tmptoDate
	
	if (@distinctCnt = 1) and (@avg = @origAvg) and (@std = @origSTD) 
		return 0

	update tblControlResults 
	set	NormalRange = Convert(Varchar(10), (@avg - (2 * @std))) + '  -  ' + Convert(Varchar(10), (@avg + (2 * @std)))
		,Average = @Average
		,STDDeviation = @STDDeviation
		,calcDeviation = (case when ISNUMERIC(ISNULL(Result, '')) = 1 and ISNULL(@avg, 0) > 0 and ISNULL(@std, 0) > 0
				then (Result - @avg) / @std
			else 0
			end)  
		
		where 
		GroupID != ''
		and orderid = @orderid
		and InstrumentCode = @InstrumentCode
		and testcode =  @TestCode
		and resultdatetime >=  @tmpFromDate
		and resultdatetime <= @tmptoDate
		

		-- insert audit
		insert into tblControlResultsAudit (OrderID, InstrumentCode, TestCode, Average, STDDeviation,ResultParameterUpdateComment, AuditDateTime, AuditUpdateBy)
		values(@OrderID, @InstrumentCode, @TestCode, @Average, @STDDeviation, 'Calculated deviation changed due to update of the Mean and/or Standard Deviation', GETDATE(), @UpdateBy)
		return 1
end
GO
/****** Object:  StoredProcedure [dbo].[spQSS_TENETResultTestParser__DeleteFromMissingInformation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spQSS_TENETResultTestParser__DeleteFromMissingInformation]      
 @Accession as varchar(100),      
 @Reason as varchar(MAX),      
 @MailoutLabcode as varchar(100)      
AS      
BEGIN      
      
      
declare @iCount as int      
      
      
 select @iCount = count(Accession) from [tblResulttestTranslationMissingInformation] where  Accession = @Accession and MailoutTestCode=@MailoutLabcode and  Reason like  @Reason + '%'      
  if @iCount > 0      
   begin       
    delete from [tblResulttestTranslationMissingInformation] where Accession = @Accession and Reason like  @Reason + '%'      
      
   end        
END 
GO
/****** Object:  StoredProcedure [dbo].[spQSS_TENETResultTestParser_GetResultTestTranslation]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQSS_TENETResultTestParser_GetResultTestTranslation]      
       
 @MailoutLabTestCode varchar(100)      
AS      
BEGIN      
select distinct m.testcode,rd.internalname from tblMailoutTestCodes m inner join tblResultedTestsDefinitions rd on rd.testcode=m.testcode     inner join tblResultCodeVersions rv on rd.testcode=rv.TestCode and rd.version=rv.CurrentVersion  
where m.MailoutTestCode = @MailoutLabTestCode and m.MailoutLabCode='SUNRISE' 
END 
GO
/****** Object:  StoredProcedure [dbo].[spQSS_TENETResultTestParser_SaveMissinInformationMessage]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spQSS_TENETResultTestParser_SaveMissinInformationMessage]      
 @Accession as varchar(100),      
 @Reason as varchar(MAX),      
 @MailoutLabcode as varchar(100)      
AS      
BEGIN      
      
      
declare @iCount as int      
      
      
 select @iCount = count(Accession) from tblResulttestTranslationMissingInformation where  Accession = @Accession and Reason = @Reason      
  if @iCount = 0      
   begin       
    --SELECT @ClientName = isnull(ClientName, '')      
    --FROM tblClients      
    --WHERE ClientCode = @ClientCode      
          
     insert into tblResulttestTranslationMissingInformation(Accession,Reason,MailoutTestCode,entryDate)        
     values( @Accession,@Reason,@MailoutLabcode,GETDATE())      
   end        
END 
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchAccessions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQSSSearchAccessions]  
      @Accession varchar(50) = NULL ,  
      @LastName varchar(100) = NULL ,   
      @FirstName varchar(100) = NULL ,  
      @ClientName varchar(100)= NULL  
  
AS  
BEGIN  
if @Accession is null and @LastName is null and @FirstName is null and @ClientName is null
	begin
		Declare @AccId as bigint = (select max(id) from tblAccessions)
		select a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName, a.ClientCode ,c.ClientName
		from tblAccessions a (nolock)   
		inner join tblPatient p (nolock)  
		on a.PatientID = p.PatientId  
		inner join tblClients c (nolock)  
		on a.ClientCode = c.ClientCode  
		where a.id > @AccId - 1000
        
		Order by a.id desc
	end
	else begin
		Declare @AccMaxId as bigint = (select max(a.id) from tblAccessions  a (nolock)   
			inner join tblPatient p (nolock)  
			on a.PatientID = p.PatientId  
			inner join tblClients c (nolock)  
			on a.ClientCode = c.ClientCode  
			where a.Accession LIKE ISNULL(@Accession, Accession)  
			and p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)  
			and p.ptFirstName LIKE ISNULL(@FirstName, p.ptFirstName)  
			and c.ClientName LIKE ISNULL(@ClientName, c.ClientName) )
		select a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName, a.ClientCode ,c.ClientName
		from tblAccessions a (nolock)   
		inner join tblPatient p (nolock)  
		on a.PatientID = p.PatientId  
		inner join tblClients c (nolock)  
		on a.ClientCode = c.ClientCode  
		where a.Accession LIKE ISNULL(@Accession, Accession)  
		and p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)  
		and p.ptFirstName LIKE ISNULL(@FirstName, p.ptFirstName)  
		and c.ClientName LIKE ISNULL(@ClientName, c.ClientName)
		and a.id > @AccMaxId - 20000
        
		Order by a.id desc
	end
        
END   
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchAccessionsForBilling]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spQSSSearchAccessionsForBilling]
	@Accession varchar(50) = NULL ,
	@LastName varchar(100) = NULL , 
	@FirstName varchar(100) = NULL ,
	@ClientName varchar(100)= NULL 
	--,
	--@BTcode varchar(100)

AS
BEGIN
	select distinct a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName, a.ClientCode, p.ptLastName + ', ' + p.ptFirstName as PatientName, a.collectiondate
	from tblBillAccessions a (nolock) 
	inner join tblPatient p (nolock)
	on a.PatientID = p.PatientId
	inner join tblClients c (nolock)
	on a.ClientCode = c.ClientCode
	inner join tblBill b (nolock)
	on b.Accession = a.Accession
	where a.Accession LIKE ISNULL(@Accession, a.Accession)
	and p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)
	and c.ClientName LIKE ISNULL(@ClientName, c.ClientName)
	--and b.BTcode = @BTcode
	
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchAccessionsWithDetails]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:                            <Author,,Name>  
-- Create date: <Create Date,,>  
-- Description:    <Description,,>  
-- =============================================  
CREATE PROCEDURE [dbo].[spQSSSearchAccessionsWithDetails]  
                @Accession varchar(50) = NULL ,  
                @LastName varchar(100) = NULL ,   
                @FirstName varchar(100) = NULL ,  
                @ClientName varchar(100)= NULL  
  
AS  
BEGIN  
                select distinct a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName,c.ClientName -- a.ClientCode 
                , ara.ArchivedDate as ReleaseDate, ba.DateCreated as BillDate  
                --, 'Released' = CASE    
 --           WHEN EXISTS (SELECT Accession     
 --       FROM tblArchiveReviewAccession where Accession = a.Accession ) THEN 'YES'    
 --      ELSE 'NO'    
 --            END    
  
                from tblAccessions a (nolock)   
                inner join tblPatient p (nolock)  
                on a.PatientID = p.PatientId  
                inner join tblClients c (nolock)  
                on a.ClientCode = c.ClientCode  
                left outer join tblBillAccessions ba(nolock)  
                on ba.Accession = a.Accession  
                left outer join tblArchiveReviewAccession ara(nolock)  
                on ara.Accession = a.Accession  
                where a.Accession LIKE ISNULL(@Accession, a.Accession)  
                and p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)  
                and p.ptFirstName LIKE ISNULL(@FirstName, p.ptFirstName)  
                and c.ClientName LIKE ISNULL(@ClientName, c.ClientName)  
                  
                Order by a.accession desc  
                  
END  
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchAntibiotics]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spQSSSearchAntibiotics]
	@AntibioticName varchar(100) = NULL 


AS
BEGIN
	Select ROW_NUMBER() OVER (ORDER BY Description) AS ID, Description FROM (
	Select  Description from tblAntibiotics 
	Union
	Select  Distinct(AntibioticName) as Description from  tblMicroTestAntibiotics where AntibioticName <> '') A

	Where Description  LIKE ISNULL(@AntibioticName, A.Description)
	
	Order by A.Description
	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchBillingAccessions]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- Author:  <Author,,Name>    
-- Create date: <Create Date,,>    
-- Description: <Description,,>    
-- =============================================    
CREATE PROCEDURE [dbo].[spQSSSearchBillingAccessions]   

 @Accession varchar(50) = NULL ,    
 @LastName varchar(100) = NULL ,     
 @FirstName varchar(100) = NULL ,    
 @ClientName varchar(100)= NULL ,    
 @BillOnly bit = 0    
    
AS    
BEGIN 
if substring(@Accession,1,2) <> 'CL' or @Accession is null 
begin   
	If @BillOnly = 0     
	Begin    
		select top 5000 a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName,c.ClientName,-- a.ClientCode,     
		'Released' = CASE      
		WHEN EXISTS (SELECT Accession       
		FROM tblArchiveReviewAccession where Accession = a.Accession ) THEN 'YES'      
		WHEN substring(@Accession, 1, 3) = 'CL%' then 'YES'     
		ELSE 'NO'      
		END      
		from tblAccessions a (nolock)     
		inner join tblPatient p (nolock)    
		on a.PatientID = p.PatientId    
		inner join tblClients c (nolock)    
		on a.ClientCode = c.ClientCode    
		where a.Accession LIKE ISNULL(@Accession, Accession)    
		and p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)    
		and p.ptFirstName LIKE ISNULL(@FirstName, p.ptFirstName)    
		and c.ClientName LIKE ISNULL(@ClientName, c.ClientName)    
     
		UNION    
     
		select top 5000 a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName,c.ClientName,-- a.ClientCode,      
		'Released' = CASE      
		WHEN EXISTS (SELECT Accession       
		FROM tblArchiveReviewAccession where Accession = a.Accession ) THEN 'YES'      
		WHEN substring(@Accession, 1, 3) = 'CL%' then 'YES'     
		ELSE 'NO'      
		END     
		from tblBillAccessions a (nolock)     
		inner join tblPatient p (nolock)    
		on a.PatientID = p.PatientId    
		inner join tblClients c (nolock)    
		on a.ClientCode = c.ClientCode    
		where a.Accession LIKE ISNULL(@Accession, Accession)    
		and p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)    
		and p.ptFirstName LIKE ISNULL(@FirstName, p.ptFirstName)    
		and c.ClientName LIKE ISNULL(@ClientName, c.ClientName)    
     
		Order by p.ptLastName, p.ptFirstName    
	End    
	Else Begin   
		--This section should be an exact dupe of the second part of the union above.    
		select top 5000 a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName, c.ClientName,-- a.ClientCode,      
		'Released' = CASE      
		WHEN EXISTS (SELECT Accession       
		FROM tblArchiveReviewAccession where Accession = a.Accession ) THEN 'YES'      
		WHEN substring(@Accession, 1, 3) = 'CL%' then 'YES'     
		ELSE 'NO'      
		END    
		, a.id    
		from tblBillAccessions a (nolock)     
		inner join tblPatient p (nolock)    
		on a.PatientID = p.PatientId    
		inner join tblClients c (nolock)    
		on a.ClientCode = c.ClientCode    
		where a.Accession LIKE ISNULL(@Accession, Accession)    
		and p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)    
		and p.ptFirstName LIKE ISNULL(@FirstName, p.ptFirstName)    
		and c.ClientName LIKE ISNULL(@ClientName, c.ClientName)    
     
		Order by a.id desc    
	End
End
Else Begin
	--Client bill section
		select a.Accession, ' ' As LastName, ' ' As FirstName, a.ClientCode, 'YES' as Released, c.ClientName
		from tblBillAccessions a (nolock) 
		
		inner join tblClients c (nolock)
		on a.ClientCode = c.ClientCode
		where a.Accession LIKE ISNULL(@Accession, Accession)
		and c.ClientName LIKE ISNULL(@ClientName, c.ClientName)
	
		Order by a.accession desc
	end  
     
END 
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchBillType]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spQSSSearchBillType]
	@Code varchar(25) = NULL ,
	@Description varchar(50) = NULL 
AS
BEGIN
	select BTCode As Code, Description as Description
	from tblBillTypeDefinitions  (nolock) 
	
	where BTCode LIKE ISNULL(@Code, BTCode)
	and  [Description] LIKE ISNULL(@Description, [Description])
	and VisibleFlag = 1
END

GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchComments]    Script Date: 14.04.2021 13:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spQSSSearchComments]
	@Code varchar(50) = NULL,
	@Comment varchar(50) = NULL 
	


AS
BEGIN
	select a.Code As Code, a.Comment
	from dbo.tblLabCommentDefinitions a (nolock) 
	where 
		a.Code LIKE ISNULL(@Code, Code)
		and 
		a.Comment LIKE ISNULL(@Comment, Comment)
END


GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchCPT]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spQSSSearchCPT]
	@CPTcode varchar(50) = NULL 	

AS
BEGIN
	select top 20 p.CPTCODE
	from tblCPT p (nolock)
	
	where ISNULL(p.CPTCODE,'') LIKE @CPTcode + '%'
      
	ORDER By p.CPTCODE asc
	
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchCPtResultTestCodes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQSSSearchCPtResultTestCodes]      
 @Code varchar(100) = NULL ,      
 @Description varchar(100) = NULL       
       
      
AS      
BEGIN      
 select tblResultedTestsDefinitions.TestCode  As Code,ExternalName as [Description], InternalName , Worksheet,Department, LOINCcode       
 FROM         tblResultedTestsDefinitions WITH (nolock) INNER JOIN      
                      tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode AND       
                      tblResultedTestsDefinitions.Version = tblResultCodeVersions.CurrentVersion      
 where tblResultedTestsDefinitions.TestCode  LIKE ISNULL(@Code, tblResultedTestsDefinitions.TestCode)      
 and ExternalName LIKE ISNULL(@Description, ExternalName)  and Worksheet='BILLING'    
 order by tblResultedTestsDefinitions.TestCode      
       
END 
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchCytoAccessions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spQSSSearchCytoAccessions]        
      @Accession varchar(50) = NULL ,        
      @LastName varchar(100) = NULL ,         
      @FirstName varchar(100) = NULL ,        
      @ClientName varchar(100)= NULL        
        
AS        
BEGIN        
      select distinct a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName, a.ClientCode      
      from tblCytologyCases pc (nolock)       
   inner join tblaccessions a        
   on a.accession=pc.accession      
      inner join tblPatient p (nolock)        
      on a.PatientID = p.PatientId        
       
      where pc.Accession LIKE ISNULL(@Accession,pc.Accession)        
      and p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)        
      and p.ptFirstName LIKE ISNULL(@FirstName, p.ptFirstName)        
      and a.ClientCode LIKE ISNULL(@ClientName, a.ClientCode)        
              
      Order by a.accession asc        
              
END  
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchDenialCode]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
  
-- =============================================  
-- Author:                            <Author,,Name>  
-- Create date: <Create Date,,>  
-- Description:    <Description,,>  
-- =============================================  
CREATE PROCEDURE [dbo].[spQSSSearchDenialCode]  
                @Code varchar(25) = NULL ,  
                @Description varchar(50) = NULL   
AS  
BEGIN  
                select DenialCode, DenialDescription, DenialAction, BillType, MessageCode   
                from tblDenialDefinitions  (nolock)   
                where DenialCode LIKE ISNULL(@Code, DenialCode)  
                and DenialDescription LIKE ISNULL(@Description, DenialDescription)  
                  
END  
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchDenialCodes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spQSSSearchDenialCodes]
	@Code varchar(100) = NULL ,
	@Description varchar(500) = NULL 
	

AS
BEGIN
	select DenialCode as Code, DenialCode as [description] 
	from dbo.tblDenialDefinitions (nolock) 	
	where DenialCode LIKE ISNULL(@Code, DenialCode)
	and [DenialDescription] LIKE ISNULL('%' + @Description, [DenialDescription])
	order by DenialCode asc
	
END

GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchDiagnosticCodes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spQSSSearchDiagnosticCodes]
	@Code varchar(100) = NULL ,
	@Description varchar(500) = NULL 
	

AS
BEGIN
	select diagnosiscode as Code, [description], Type 
	from dbo.tblDiagnosis (nolock) 	
	where diagnosiscode LIKE ISNULL(@Code, diagnosiscode)
	and [description] LIKE ISNULL('%' + @Description, [description])
	order by diagnosiscode asc
	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchInstrumentCodes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spQSSSearchInstrumentCodes]
	@Code varchar(200) = NULL ,
	@Description varchar(500) = NULL 
	

AS
BEGIN
	SELECT InstrumentCode as Code,[Description],SerialNumber,InstallDate 
	from tblInstrumentDefinitions (nolock) 
	where InstrumentCode LIKE ISNULL(@Code, InstrumentCode)    
	and [description] LIKE ISNULL(@Description, [description])
	order by InstrumentCode asc   
	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchInsurances]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spQSSSearchInsurances]
	@Name varchar(50) = NULL 
	


AS
BEGIN
	select a.InsuranceCode , a.Name, a.City, a.State, a.BillType
	from tblInsuranceCompanies a (nolock) 	
	where a.Name LIKE ISNULL(@Name, Name)
	order by a.Name
	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchLabs]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  <Author,,Name>  
-- Create date: <Create Date,,>  
-- Description: <Description,,>  
-- =============================================  
CREATE PROCEDURE [dbo].[spQSSSearchLabs]  
 @Code varchar(20) = NULL,  
 @Name varchar(100) = NULL   
   
  
  
AS  
BEGIN  
 select ml.LabCode , ml.Name  
 from tblMailoutLabs ml (nolock)    
 where ISNULL(ml.Name, '') LIKE ISNULL(@Name, ml.Name)  
 and isnull(ml.LabCode, '') LIKE ISNULL('%'+@Code+'%', ml.LabCode)  
 order by ml.Name  
   
END  
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchMedications]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spQSSSearchMedications]
	@Code varchar(50) = NULL ,
	@Description varchar(100) = NULL ,
	@Category varchar(10) = NULL


AS
BEGIN
	select ID,  MedicationCode As Code, Description, GenericName, ReflexCode, ReflexDesc, Category
	from tblMedications 
	
	where MedicationCode LIKE ISNULL(@Code, MedicationCode)
	and Description LIKE ISNULL(@Description, Description)
	and isnull(Category, '') <> 'X' 
	and isnull(Category, '') = COALESCE(NULLIF(@Category, ''), isnull(Category, ''))
	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchMicroAccessions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:        <Author,,Name>
-- Create date: <Create Date,,>
-- Description:   <Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spQSSSearchMicroAccessions]
      @Accession varchar(50) = NULL ,
      @LastName varchar(100) = NULL , 
      @FirstName varchar(100) = NULL ,
      @ClientName varchar(100)= NULL

AS
BEGIN
      select a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName, a.ClientCode, a.TestCode,  a.TestDescription  
      from tblMicroTests a (nolock) 
      inner join tblPatient p (nolock)
      on a.PatientID = p.PatientId
      inner join tblClients c (nolock)
      on a.ClientCode = c.ClientCode
      where a.Accession LIKE ISNULL(@Accession, Accession)
      and p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)
      and p.ptFirstName LIKE ISNULL(@FirstName, p.ptFirstName)
      and c.ClientCode LIKE ISNULL(@ClientName, c.ClientCode)
      
      Order by a.accession asc
      
END

GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchOrganisms]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spQSSSearchOrganisms]
	@OrganismName varchar(100) = NULL 


AS
BEGIN
	Select ROW_NUMBER() OVER (ORDER BY Description) AS ID, Description FROM (
	Select  Description from tblOrganisms 
	Union
	Select  Distinct(OrganismName) as Description from  tblMicroTestOrganisms where OrganismName <> '') A

	Where Description  LIKE ISNULL(@OrganismName, A.Description)
	
	Order by A.Description
	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchPathoAccessions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spQSSSearchPathoAccessions]    
      @Accession varchar(50) = NULL ,    
      @LastName varchar(100) = NULL ,     
      @FirstName varchar(100) = NULL ,    
      @ClientName varchar(100)= NULL    
    
AS    
BEGIN    
      select distinct a.Accession,p.ptLastName As LastName, p.ptFirstName As FirstName, a.ClientCode  
      from tblPathologyCases pc (nolock)   
   inner join tblaccessions a    
   on a.accession=pc.accession  
      inner join tblPatient p (nolock)    
      on a.PatientID = p.PatientId    
   
      where pc.Accession LIKE ISNULL(@Accession,pc.Accession)    
      and p.ptLastName LIKE ISNULL(@LastName, p.ptLastName)    
      and p.ptFirstName LIKE ISNULL(@FirstName, p.ptFirstName)    
      and a.ClientCode LIKE ISNULL(@ClientName, a.ClientCode)    
          
      Order by a.accession asc    
          
END 

GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchPatients]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  <Author,,Name>  
-- Create date: <Create Date,,>  
-- Description: <Description,,>  
-- =============================================  
CREATE PROCEDURE [dbo].[spQSSSearchPatients]  
 @LastName varchar(100) = NULL ,  
 @FirstName varchar(100) = NULL ,  
 @MiddleName varchar(100)= NULL ,  
 @DateOfBirth datetime = NULL,  
 @SSNo varchar(20) = NULL ,  
 @Gender varchar(20) = NULL  
  
AS  
BEGIN  
 select p.PatientId,  p.ptLastName As LastName, p.ptFirstName As FirstName,p.ptMiddleName As MiddleName,   
 p.ptDateOfBirth As DateOfBirth, p.ptSSN As SSNo, p.ptSex As Sex  
 from tblPatient p (nolock)  
   
 where ISNULL(p.ptLastName,'') LIKE ISNULL(@LastName, p.ptLastName)  
      and ISNULL(p.ptFirstName,'') LIKE ISNULL(@FirstName, p.ptFirstName)  
      and ISNULL(p.ptMiddleName,'') LIKE ISNULL(@MiddleName, p.ptMiddleName)  
  
  and ISNULL(cast(p.ptDateOfBirth as date), '') = ISNULL(cast(@DateOfBirth as date), p.ptDateOfBirth) 
 --and ISNULL(p.ptDateOfBirth, '') = ISNULL(@DateOfBirth, p.ptDateOfBirth)  
 and ISNULL(p.ptSSN,'') LIKE  ISNULL(@SSNo, p.ptSSN)  
 and ISNULL(p.ptSex, '') LIKE ISNULL(@Gender, p.ptSex)  
 ORDER By p.ptLastName , p.ptFirstName asc  
   
   
   
END  
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchPerformedTestCodes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQSSSearchPerformedTestCodes]
	@Code varchar(100) = NULL ,
	@Description varchar(100) = NULL 
	

AS
BEGIN
	select o.PerformedTest As Code, o.InternalDescription, o.ExternalDescription As Description,o.ResultTestCode
	from tblPerformedTestsDefinitions o (nolock)	
	where o.PerformedTest LIKE ISNULL(@Code, o.PerformedTest)
	and o.ExternalDescription LIKE ISNULL(@Description, o.ExternalDescription)
	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchPhysicians]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================

CREATE PROCEDURE [dbo].[spQSSSearchPhysicians]
	@Name varchar(50) = NULL 
	


AS
BEGIN
	select a.PhysicianCode , a.FullName, a.NPI, a.FirstName,  a.LastName
	from dbo.tblPhysicians a (nolock) 	
	where a.LastName LIKE ISNULL(@Name, LastName)
	order by a.LastName
	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchQCAccessions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spQSSSearchQCAccessions]
	@Accession varchar(50) = NULL
	
AS
BEGIN
	select a.ControlOrderNumber, a.OrderDate 
	from tblControlOrders a (nolock) 
	where a.ControlOrderNumber LIKE ISNULL(@Accession, ControlOrderNumber)
	
	
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchRacks]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
CREATE PROCEDURE [dbo].[spQSSSearchRacks]    
	@RackID varchar(50) = NULL,    
	@ColumnValue varchar(100) = NULL     
AS    
BEGIN
	SET NOCOUNT ON;
	IF @ColumnValue IS NULL
		SELECT TOP 1000 RackID, '' ColumnValue, '' Position FROM tblRack 
		WHERE RackID LIKE ISNULL('%' + @RackID + '%', RackID)
		ORDER BY CreatedOn DESC;
	ELSE
		SELECT RackID, ColumnValue, CHAR(64 + ColumnID) +  CONVERT(VARCHAR(2), RowID) Position FROM tblRackValues
		WHERE RackID LIKE ISNULL('%' + @RackID + '%', RackID)
		AND ColumnValue LIKE ISNULL('%' + @ColumnValue + '%', ColumnValue)
		ORDER BY UpdatedOn DESC;  
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchResults]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spQSSSearchResults]      
@Code  varchar(10)= null,      
@Results varchar(Max)= null,  
@Heading varchar(20)      
as      
begin      
 select p.id,Results,Code,H.Heading,Abnormal from tblPathologyResultTemplates  as P   Left join  tblHeadings as H on P.Heading=H.HeadingCode  where Code Like ISNULL(@Code,Code) and Results Like ISNULL(@Results,Results)  and H.Heading=@Heading  
end 
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchResultTestCodes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQSSSearchResultTestCodes]
	@Code varchar(100) = NULL ,
	@Description varchar(100) = NULL 
	

AS
BEGIN
	select tblResultedTestsDefinitions.TestCode  As Code,ExternalName as [Description], InternalName , Worksheet,Department, LOINCcode 
	FROM         tblResultedTestsDefinitions WITH (nolock) INNER JOIN
                      tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode AND 
                      tblResultedTestsDefinitions.Version = tblResultCodeVersions.CurrentVersion
	where tblResultedTestsDefinitions.TestCode  LIKE ISNULL(@Code, tblResultedTestsDefinitions.TestCode)
	and ExternalName LIKE ISNULL(@Description, ExternalName)
	order by tblResultedTestsDefinitions.TestCode
	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchSpecimens]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQSSSearchSpecimens]
	@Code varchar(25) = NULL ,
	@Description varchar(50) = NULL 


AS
BEGIN
	select SpecimenCode As Code, Specimen as Description
	from tblSpecimens  (nolock) 
	
	where SpecimenCode LIKE ISNULL(@Code, SpecimenCode)
	and Specimen LIKE ISNULL(@Description, Specimen)
	
	
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchState]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[spQSSSearchState]
                @Code varchar(25) = NULL ,
                @Description varchar(50) = NULL 
AS
BEGIN
                select StateCode As Code, StateName as Description
                from tblStates  (nolock) 
                
                where StateCode LIKE ISNULL(@Code, StateCode)
                and  StateName LIKE ISNULL(@Description, StateName)
                
END

GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchTestCodes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spQSSSearchTestCodes]
	@Code varchar(100) = NULL ,
	@Description varchar(100) = NULL 
	

AS
BEGIN
	select o.OrderedTest As Code, o.Description As Description, o.ActiveFlag, o.InSearchFlag
	from tblOrderedTestsDefinitions o (nolock)	
	where o.OrderedTest LIKE ISNULL(@Code, o.OrderedTest)
	and o.Description LIKE ISNULL(@Description, o.Description)
	and o.InSearchFlag='True'
	ORDER BY CASE WHEN OrderedTest in ('SCREEN','VALIDITY' )THEN 1 ELSE 2 END, OrderedTest

	
END
GO
/****** Object:  StoredProcedure [dbo].[spQSSSearchWorksheets]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spQSSSearchWorksheets]
	@WKCode varchar(100) = NULL ,
	@Description varchar(300) = NULL 


AS
BEGIN
	select a.WKCode As Code, a.Description
	from tblWorkSheetsDefinitions a (nolock) 
	
	where a.WKCode LIKE ISNULL(@WKCode, WKCode)
	and a.Description LIKE ISNULL(@Description, [Description])
	
	
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spRebuildtblTestsReportOrderNew]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spRebuildtblTestsReportOrderNew]
AS
BEGIN

select *
into #ControlTable 
from tblTestsReportOrder
order by ordernumber

declare @iCountRec as int
declare @OrderNumber int
declare @counter int
set @counter = 1

select @iCountRec = count(OrderNumber) from tblTestsReportOrder 
			if @iCountRec > 0
			begin
			delete from tblTestsReportOrderNew --clear tblTestsReportOrderNew if there is anything in tblTestReportOrder

while exists (select * from #ControlTable)
begin
    select @OrderNumber = (select top 1 OrderNumber
    from #ControlTable
    order by OrderNumber asc)
		--LOOP for each record in tblTestsReportOrder
		DECLARE   @TestCodes as varchar(max)
	    , @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @FieldList varchar(2000)
			CREATE TABLE #tmpTestCodes
			(
				TestCode varchar(20) NOT NULL
			)
			SET @TestCodes = ''

				SET @TestCodes = ( select top 1  ResultCodes from #ControlTable)
			    
			IF @TestCodes != ''
				BEGIN

				Set @FieldList =''
				Set @FieldList = @TestCodes + '|'
				Set @StartPos = 1
				Set @EndPos = 1

					While @EndPos > 0
					   Begin
						  Set @EndPos = CharIndex('|', @FieldList, @StartPos)
						  If @EndPos > 0
							 Begin
								Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
									Insert #tmpTestCodes (TestCode) Values (@CurVal)
								Set @StartPos = @EndPos + 1
							 End
					   --PRINT @FieldList
					 END	
				 END
								--INNER LOOP for each TestCode
								declare @ResTestCode varchar(20)
								while exists (select * from #tmpTestCodes)
									begin
										select @ResTestCode = (select top 1 TestCode
										from #tmpTestCodes)
										
									declare @ReportOrder as int
									declare @Header as varchar(100)
									select  @ReportOrder = (select top 1 OrderNumber*100+@counter from #ControlTable)
									select @Header = (select top 1 Header from #ControlTable)
										Insert into tblTestsReportOrderNew (PerformedTest, ResultTestCode, ReportOrder, Header)
										values('', @ResTestCode, @ReportOrder, @Header)
										  
									delete #tmpTestCodes
									where TestCode = @ResTestCode
									set @counter = @counter + 1
								end --end inner loop
			drop table #tmpTestCodes
    delete #ControlTable
    where OrderNumber = @OrderNumber
	set @counter = 1
	end --end loop

end
drop table #ControlTable

END
GO
/****** Object:  StoredProcedure [dbo].[spRemitIsFilePosted]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spRemitIsFilePosted]
	@fileName as varchar(200)
	
AS
BEGIN

--if exists (select top 1 [FileName] from  tblBillingTempRemitArchive where [FileName]= @fileName ) 
if exists (select top 1 [filename] from tblBillingRemittanceFiles where [FileName] = @fileName and Status = 'Posted')
select 'True'  
else 
select 'False' 
return

END
GO
/****** Object:  StoredProcedure [dbo].[spRemoveCollectorSettings]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spRemoveCollectorSettings]
	@UserID varchar(20)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    delete from tblCollectorBillTypeCodes where 
		UserID = @UserID
	delete from tblCollectorInsuranceCodes where 
		UserID = @UserID	
END


GO
/****** Object:  StoredProcedure [dbo].[spResetPassword]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spResetPassword] 	
	@UserID varchar(20) ,
	@Password varchar(100) ,
	@TempPassword varchar(100) ,
	@LastUpdatedBy varchar(20)
AS
BEGIN
	
	SET NOCOUNT ON;

    UPDATE dbo.tblUsersID
	SET TempPassword  = @TempPassword ,	   
	    [Password]      =  '' ,
	    LastUpdatedBy = @LastUpdatedBy ,
	    LastUpdatedDate =  GETDATE()
	WHERE UserID = @UserID
		
		 -- --log  the activity
			--if @@ERROR = 0
			--	begin
			--	  exec spAddUserActivity 
			--	  @ClientCode = @ClientCode, 
			--	  @UserID  = @UserID, 
			--	  @Action = 'Password Reset' , 
			--	  @Password = @Password,
			--	  @TempPassword = @TempPassword ,
			--	  @CreatedBy = @LastUpdatedBy
			--  end
END
GO
/****** Object:  StoredProcedure [dbo].[spRestoreAccessionMailoutResults]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 -- =============================================    
CREATE PROCEDURE [dbo].[spRestoreAccessionMailoutResults]
	@ResultTable as ResultedTestsType ReadOnly
AS
	SET NOCOUNT ON;

	DELETE a
	FROM dbo.tblResultedTests a
	JOIN @ResultTable b ON a.Accession = b.Accession AND a.PerformedTest = b.PerformedTest;

	INSERT dbo.tblResultedTests ([Accession], [PerformedTest], [ResultTest], [Worksheet], [LOINCcode], [Organism], [SensitivitiesXML], 
		[Result], [ResultFlag], [NormalRange], [Units], [CorrectionsXML], [CallStatus], [ResultComment], [Status], [EnteredBy], [EntryDate], 
		[SiteID], [QSSCreatedByID], [QSSCreatedDate], [QSSLastUpdateID], [QSSUpdateDate], [QSSVersion], [Outcome], [Version], [ReportAs], 
		[InternalComment], [ApprovedDate], [AutoManualFlag], [QSSReleasedID])
	SELECT [Accession], [PerformedTest], [ResultTest], [Worksheet], [LOINCcode], [Organism], [SensitivitiesXML], 
		[Result], [ResultFlag], [NormalRange], [Units], [CorrectionsXML], [CallStatus], [ResultComment], [Status], [EnteredBy], [EntryDate], 
		[SiteID], [QSSCreatedByID], [QSSCreatedDate], [QSSLastUpdateID], [QSSUpdateDate], [QSSVersion], [Outcome], [Version], [ReportAs], 
		[InternalComment], [ApprovedDate], [AutoManualFlag], [QSSReleasedID]
	FROM @ResultTable;
GO
/****** Object:  StoredProcedure [dbo].[spRestoreReviewFromArchive]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- <11/12/2019><Gladson><This record has no tblAccessions.LabReportImage associated with it>
-- <Remove tbliPowerDoc record. Add to tblReviewAccession>
-- =============================================
CREATE PROCEDURE [dbo].[spRestoreReviewFromArchive]  
 -- Add the parameters for the stored procedure here  
 @Accession varchar(100),  
 @QSSLastUpdatedByID varchar(20) 
 
 AS  
BEGIN  

	SET NOCOUNT ON;
	EXEC [dbo].[spAddToResultsReview] @Accession, @QSSLastUpdatedByID;
	DELETE FROM [dbo].[tbliPowerDoc] WHERE Accession = @Accession;
 
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveAccessionAllFinacials]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveAccessionAllFinacials]    
 @Accession varchar(100)
     
AS    
BEGIN    
 SET NOCOUNT ON;   
 if @Accession is not null
 BEGIN 
    IF EXISTS (SELECT Accession FROM tblAccessionsFinancials WHERE Accession = @Accession )
       BEGIN
              UPDATE tblAccessionsFinancials
              SET 
              AccessionCurrentTotalFee = dbo.B_GetAmountBilledTotal(@Accession), 
              AccessionCurrentTotalPaid = dbo.B_PaidAmount(@Accession),
              AccessionCurrentTotalAdjusted = dbo.B_GetAdjustmentsTotal(Accession),
              AccessionCurrentBalance = dbo.B_GetTotalBillBalance(@Accession), 
              QSSUpdatedDate = GETDATE()
              WHERE Accession = @Accession
       END
       ELSE
       BEGIN
              Insert into tblAccessionsFinancials(Accession, AccessionCurrentTotalFee, AccessionCurrentTotalPaid, AccessionCurrentTotalAdjusted, AccessionCurrentBalance, QSSUpdatedDate)
              values(@Accession, dbo.B_GetAmountBilledTotal(@Accession), dbo.B_PaidAmount(@Accession), dbo.B_GetAdjustmentsTotal(@Accession), dbo.B_GetTotalBillBalance(@Accession), getdate()) 
       END   
END
  END

GO
/****** Object:  StoredProcedure [dbo].[spSaveAccessionAutofax]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
CREATE PROCEDURE [dbo].[spSaveAccessionAutofax]    
 @Accession varchar(100),    
 @FaxName varchar(100),
 @FaxNumber varchar(100), 
 @ClientCode varchar(50)
     
AS    
BEGIN    
 SET NOCOUNT ON;    
    	
  Insert into tblAutoFax(Accession, FaxName, FaxNumber, ClientCode)
  values(@Accession, @FaxName, @FaxNumber, @ClientCode)    
  
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveAccessionInsuranceInfo]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spSaveAccessionInsuranceInfo] 
 @Accession varchar(100), 
 @PatientID varchar(50)
AS  
BEGIN 

 DECLARE 
	@PrimaryInsuranceID varchar(100) = '',
	@PrimaryPatRelationtoIns varchar(20) = '',
	@PrimaryPolicy varchar(50) = '',
	@PrimaryLastName varchar(50) = '',
	@PrimaryFirstName varchar(50) = '',
	@PrimaryMiddleName varchar(50) = '',
	@PrimaryAddress1 varchar(100) = '',
	@PrimaryAddress2 varchar(100) = '',
	@PrimaryCity varchar(100) = '',
	@PrimaryState varchar(2) = '',
	@PrimaryZip varchar(20) = '',
	@PrimaryHomePhone varchar(50) = '',
	@PrimaryWorkPhone varchar(50) = '',
	@PrimaryCellPhone varchar(50) = '',
	@PrimaryEmail varchar(50) = '',
	@PrimaryFax varchar(50) = '',
	@PrimaryDateOfBirth datetime = NULL,
	@PrimarySex varchar(20) = '',
	@PrimarySSN varchar(20) = '',
	@PrimaryGroup varchar(100) = '',
	@PrimaryPlan varchar(100) = '',
	@PrimaryCopay varchar(100) = '',
	@PrimaryEmployer varchar(100) = '',
	@SecondaryInsuranceID varchar(100) = '',
	@SecondaryPatRelationtoIns varchar(20) = '',
	@SecondaryPolicy varchar(50) = '',
	@SecondaryLastName varchar(50) = '',
	@SecondaryFirstName varchar(50) = '',
	@SecondaryMiddleName varchar(50) = '',
	@SecondaryAddress1 varchar(100) = '',
	@SecondaryAddress2 varchar(100) = '',
	@SecondaryCity varchar(100) = '',
	@SecondaryState varchar(2) = '',
	@SecondaryZip varchar(20) = '',
	@SecondaryHomePhone varchar(50) = '',
	@SecondaryWorkPhone varchar(50) = '',
	@SecondaryCellPhone varchar(50) = '',
	@SecondaryEmail varchar(50) = '',
	@SecondaryFax varchar(50) = '',
	@SecondaryDateOfBirth datetime = NULL,
	@SecondarySex varchar(20) = '',
	@SecondarySSN varchar(20) = '',
	@SecondaryGroup varchar(100) = '',
	@SecondaryPlan varchar(100) = '',
	@SecondaryCopay varchar(100) = '',
	@SecondaryEmployer varchar(100) = ''
	
	SELECT @PrimaryPatRelationtoIns = PrimaryPatRelationtoIns, @SecondaryPatRelationtoIns = SecondaryPatRelationtoIns FROM tblPatient
	WHERE PatientID = @PatientID
	IF EXISTS(SELECT * from tblInsuredInfo WHERE  InsuredID = '*' + @PatientID + 'P' or InsuredID = '*' + @PatientID + 'S')
	BEGIN
    SELECT @PrimaryInsuranceID = InsuranceID,
				  @PrimaryPolicy = Policy,
				  @PrimaryLastName = LastName, 
				  @PrimaryFirstName = FirstName,
				  @PrimaryMiddleName = MiddleName,
				  @PrimaryAddress1 = Address1,
				  @PrimaryAddress2 = Address2,
				  @PrimaryCity = City,
				  @PrimaryState = State,
				  @PrimaryZip = Zip,
				  @PrimaryHomePhone = HomePhone,
				  @PrimaryWorkPhone = WorkPhone,
				  @PrimaryCellPhone = CellPhone,
				  @PrimaryEmail = Email,
				  @PrimaryFax = Fax,
				  @PrimaryDateOfBirth = DateOfBirth,
				  @PrimarySex = Sex,
				  @PrimarySSN = SSN,
				  @PrimaryGroup = [Group],
				  @PrimaryPlan = [Plan],
				  @PrimaryCopay = Copay,
				  @PrimaryEmployer = Employer
    from tblInsuredInfo WHERE  InsuredID = '*' + @PatientID + 'P'
 
	SELECT @SecondaryInsuranceID = InsuranceID,
				  @SecondaryPolicy = Policy,
				  @SecondaryLastName = LastName, 
				  @SecondaryFirstName = FirstName,
				  @SecondaryMiddleName = MiddleName,
				  @SecondaryAddress1 = Address1,
				  @SecondaryAddress2 = Address2,
				  @SecondaryCity = City,
				  @SecondaryState = State,
				  @SecondaryZip = Zip,
				  @SecondaryHomePhone = HomePhone,
				  @SecondaryWorkPhone = WorkPhone,
				  @SecondaryCellPhone = CellPhone,
				  @SecondaryEmail = Email,
				  @SecondaryFax = Fax,
				  @SecondaryDateOfBirth = DateOfBirth,
				  @SecondarySex = Sex,
				  @SecondarySSN = SSN,
				  @SecondaryGroup = [Group],
				  @SecondaryPlan = [Plan],
				  @SecondaryCopay = Copay,
				  @SecondaryEmployer = Employer
    from tblInsuredInfo WHERE  InsuredID = '*' + @PatientID + 'S'
 
 	IF EXISTS( SELECT Accession from tblAccessionInsuranceInfo WHERE  Accession = @Accession)
	 BEGIN
		  UPDATE tblAccessionInsuranceInfo
		  SET PrimaryInsuranceID = @PrimaryInsuranceID,
		  PrimaryPatRelationtoIns = @PrimaryPatRelationtoIns,
		  PrimaryPolicy = @PrimaryPolicy,
		  PrimaryLastName = @PrimaryLastName, 
		  PrimaryFirstName = @PrimaryFirstName,
		  PrimaryMiddleName = @PrimaryMiddleName,
		  PrimaryAddress1 = @PrimaryAddress1,
		  PrimaryAddress2 = @PrimaryAddress2,
		  PrimaryCity = @PrimaryCity,
		  PrimaryState = @PrimaryState,
		  PrimaryZip = @PrimaryZip,
		  PrimaryHomePhone = @PrimaryHomePhone,
		  PrimaryWorkPhone = @PrimaryWorkPhone,
		  PrimaryCellPhone = @PrimaryCellPhone,
		  PrimaryEmail = @PrimaryEmail,
		  PrimaryFax = @PrimaryFax,
		  PrimaryDateOfBirth = @PrimaryDateOfBirth,
		  PrimarySex = @PrimarySex,
		  PrimarySSN = @PrimarySSN,
		  PrimaryGroup = @PrimaryGroup,
		  PrimaryPlan = @PrimaryPlan,
		  PrimaryCopay = @PrimaryCopay,
		  PrimaryEmployer = @PrimaryEmployer,
		  SecondaryInsuranceID = @SecondaryInsuranceID,
		  SecondaryPatRelationtoIns = @SecondaryPatRelationtoIns,
		  SecondaryPolicy = @SecondaryPolicy,
		  SecondaryLastName = @SecondaryLastName, 
		  SecondaryFirstName = @SecondaryFirstName,
		  SecondaryMiddleName = @SecondaryMiddleName,
		  SecondaryAddress1 = @SecondaryAddress1,
		  SecondaryAddress2 = @SecondaryAddress2,
		  SecondaryCity = @SecondaryCity,
		  SecondaryState = @SecondaryState,
		  SecondaryZip = @SecondaryZip,
		  SecondaryHomePhone = @SecondaryHomePhone,
		  SecondaryWorkPhone = @SecondaryWorkPhone,
		  SecondaryCellPhone = @SecondaryCellPhone,
		  SecondaryEmail = @SecondaryEmail,
		  SecondaryFax = @SecondaryFax,
		  SecondaryDateOfBirth = @SecondaryDateOfBirth,
		  SecondarySex = @SecondarySex,
		  SecondarySSN = @SecondarySSN,
		  SecondaryGroup = @SecondaryGroup,
		  SecondaryPlan = @SecondaryPlan,
		  SecondaryCopay = @SecondaryCopay,
		  SecondaryEmployer = @SecondaryEmployer
		  WHERE Accession = @Accession
	 END	  
	 ELSE
	 BEGIN
		INSERT INTO tblAccessionInsuranceInfo(Accession, PrimaryInsuranceID, PrimaryPatRelationtoIns, PrimaryPolicy, 
		PrimaryLastName, PrimaryFirstName, PrimaryMiddleName, PrimaryAddress1, PrimaryAddress2, PrimaryCity, 
		PrimaryState, PrimaryZip, 
		PrimaryHomePhone, PrimaryWorkPhone, PrimaryCellPhone, PrimaryEmail, PrimaryFax, 
		PrimaryDateOfBirth, PrimarySex, PrimarySSN, PrimaryGroup, PrimaryPlan, PrimaryCopay, PrimaryEmployer,
		SecondaryInsuranceID, SecondaryPatRelationtoIns, SecondaryPolicy, 
		SecondaryLastName, SecondaryFirstName, SecondaryMiddleName, SecondaryAddress1, SecondaryAddress2, SecondaryCity, 
		SecondaryState, SecondaryZip, 
		SecondaryHomePhone, SecondaryWorkPhone, SecondaryCellPhone, SecondaryEmail, SecondaryFax, 
		SecondaryDateOfBirth, SecondarySex, SecondarySSN, SecondaryGroup, SecondaryPlan, SecondaryCopay, SecondaryEmployer)
		VALUES(@Accession, @PrimaryInsuranceID, @PrimaryPatRelationtoIns, @PrimaryPolicy, 
		@PrimaryLastName, @PrimaryFirstName, @PrimaryMiddleName, @PrimaryAddress1, @PrimaryAddress2, @PrimaryCity, 
		@PrimaryState, @PrimaryZip, 
		@PrimaryHomePhone, @PrimaryWorkPhone, @PrimaryCellPhone, @PrimaryEmail, @PrimaryFax, 
		@PrimaryDateOfBirth, @PrimarySex, @PrimarySSN, @PrimaryGroup, @PrimaryPlan, @PrimaryCopay, @PrimaryEmployer,
		@SecondaryInsuranceID, @SecondaryPatRelationtoIns, @SecondaryPolicy, 
		@SecondaryLastName, @SecondaryFirstName, @SecondaryMiddleName, @SecondaryAddress1, @SecondaryAddress2, @SecondaryCity, 
		@SecondaryState, @SecondaryZip, 
		@SecondaryHomePhone, @SecondaryWorkPhone, @SecondaryCellPhone, @SecondaryEmail, @SecondaryFax, 
		@SecondaryDateOfBirth, @SecondarySex, @SecondarySSN, @SecondaryGroup, @SecondaryPlan, @SecondaryCopay, @SecondaryEmployer)
	 END
  END
END


GO
/****** Object:  StoredProcedure [dbo].[spSaveAccessionNotes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
CREATE PROCEDURE [dbo].[spSaveAccessionNotes]    
 @Accession varchar(100),    
 @Notes varchar(MAX)
     
AS    
BEGIN    
 SET NOCOUNT ON;    
    
  Insert into tblAccessionNotes(Accession, Notes, DateCreated)
  values(@Accession, @Notes, getdate())    
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveAccessionPrefix]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveAccessionPrefix]

	@Code as varchar(10)
	
AS
BEGIN

	declare @iCount as int
	select @iCount = count(Prefix) from tblAccessionPrefix where  Prefix = @Code

	if @iCount = 0
	begin
		insert into  tblAccessionPrefix(Prefix)		 
			values(@Code)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveApprovedDate]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Paul Antompietri
-- Create date: 03/25/2019
-- Description:	Set approved date for all Final results if released normally
-- =============================================
CREATE PROCEDURE [dbo].[spSaveApprovedDate]
	@Accession as varchar(100),
	@QSSReleasedBy as varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	Update tblResultedTests set ApprovedDate = getdate(), AutoManualFlag = 0, QSSReleasedID = @QSSReleasedBy 
	where Accession = @Accession and [Status] = 'Final' and (ApprovedDate is null or ApprovedDate = '')
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveAuditDetails]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spSaveAuditDetails] 
@Accession varchar (50),
@NoteType varchar (10),
@Note varchar(max),
@UserID varchar(20)
AS
BEGIN

IF @NoteType = 'Bill' OR @NoteType = 'PostCash'
begin
INSERT INTO tblBillAudit(Date, WebUserID, Accession, Note, NoteType)
VALUES (GETDATE(), @UserID , @Accession, @Note, @NoteType)

	
end
else
begin
	INSERT INTO tblLabAudit(Date, WebUserID, Accession, Note, NoteType)
	VALUES (GETDATE(), @UserID , @Accession, @Note, @NoteType)
end

	
END




GO
/****** Object:  StoredProcedure [dbo].[spSaveBill]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveBill]
	@Accession varchar(100),  
	@CPTCode varchar(100),
	@OrderedTest varchar(100),
	@BillType as varchar(100) ,
	@Description as Varchar(200) = NULL,
	@TotalFeeAmt as decimal(18,2) = NULL,
	@ExpPaymentAmt as decimal(18,2) = NULL,
	@Units as int = 0,
	@Modifier as varchar(100),
	@Location as varchar(100),
	@Status as varchar (100),
	@Discount as varchar(100) =  NULL,
	@ICD9Code as varchar(max),
	@QSSLastUpdatedID as varchar(20), 
	@NextBillDate as datetime,
	@GroupFlag as bit
	
	
AS
BEGIN
DECLARE @Billable bit
SET @Billable = CASE WHEN substring(@Status, 1, 4) = 'BILL' Then 1 else 0 end

/****** added Modifier to below Where clause ******/
 IF EXISTS( SELECT Accession from dbo.tblBill 
			WHERE Accession = @Accession 
			AND   BTcode    =  @BillType
			AND   CPTcode   = @CPTCode
			AND   OrderedTestCode = @OrderedTest
			AND Modifier = @Modifier )
			BEGIN
				 Update dbo.tblBill
				 SET Modifier =  @Modifier ,
					 Location =  @Location ,
					 [Status] =  @Status  ,
					 FeeDescription = @Description,
					 Units = @Units,
					 TotalFeeAmt =  @TotalFeeAmt,
					 ExpAmt = @ExpPaymentAmt,
					 BillableFlag =  @Billable,
					 QSSLastUpdateID = @QSSLastUpdatedID ,
					 QSSVersion =  QSSVersion + 1, 
					 NextBillDate = @NextBillDate,
					 ICD9Code = @ICD9Code,
					 GroupFlag = @GroupFlag
				 WHERE Accession = @Accession 
				 AND   BTcode    =  @BillType
				 AND   CPTcode   = @CPTCode
				 AND   OrderedTestCode = @OrderedTest
			END
				 
	ELSE
	BEGIN
	INSERT INTO dbo.tblBill  
		(Accession , BTCode , CPTcode, OrderedTestCode, DiscountPercentage,ICD9Code,NextBillDate, FeeDescription, TotalFeeAmt, Units, ExpAmt, [Status], BillableFlag,  
		 Modifier , Location,
		QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID, QSSUpdateDate, QSSVersion, GroupFlag)  
	VALUES  
		(@Accession, @BillType , @CPTCode , @OrderedTest ,  @Discount , @ICD9Code, @NextBillDate , @Description , @TotalFeeAmt , @Units, @ExpPaymentAmt, @Status , @Billable,   
		 @Modifier , @Location,
		 @QSSLastUpdatedID , GETDATE(), @QSSLastUpdatedID , GETDATE(), 0, @GroupFlag)  
	END
     
	
END

GO
/****** Object:  StoredProcedure [dbo].[spSaveBillAuditDetails]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  <Author,,Name>  
-- Create date: <Create Date,,>  
-- Description: <Description,,>  
-- =============================================  
CREATE PROCEDURE [dbo].[spSaveBillAuditDetails]   
@Accession varchar (50),  
@NoteType varchar (20),  
@Note varchar(max) = '',  
@UserID varchar(20)  
AS  
BEGIN  
  
INSERT INTO tblBillAudit(Date, WebUserID, Accession, Note, NoteType)  
VALUES (GETDATE(), @UserID , @Accession, @Note, @NoteType)  
   
END  
GO
/****** Object:  StoredProcedure [dbo].[spSaveBillCycle]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spSaveBillCycle]

	@Code as varchar(100),
	@BillCycle as int
	
	
AS
BEGIN

	declare @iCount as int
	select @iCount = count(BTCode) from tblBillTypeDefinitions where  BTCode = @Code

	if @iCount > 0
	begin
		update tblBillTypeDefinitions set BillCycle = @BillCycle
		 where BTCode = @Code 
	end
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveBillFromPostCash]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************************
This procedure will update tblBill after BillType change from PostCash
***************************************************************************/
CREATE PROCEDURE [dbo].[spSaveBillFromPostCash]
	@Accession varchar(100),  
	@CPTCode varchar(100),
	@OrderedTest varchar(100),
	@BillType as varchar(100) ,
	@Description as Varchar(200) = NULL,
	@TotalFeeAmt as decimal(18,2) = NULL,
	@ExpPaymentAmt as decimal(18,2) = NULL,
	@Units as int = 0,
	@NextBillDate datetime,
	@QSSLastUpdatedID as varchar(20) 
	
AS
BEGIN
	IF EXISTS( SELECT Accession from dbo.tblBill 
			WHERE Accession = @Accession 
			AND   CPTcode   = @CPTCode
			AND   OrderedTestCode = @OrderedTest )
			BEGIN
				
				 Update dbo.tblBill
				 SET	BTcode = @BillType,
						FeeDescription = @Description,
						TotalFeeAmt = @TotalFeeAmt,
						ExpAmt = @ExpPaymentAmt,
						Units = @Units,
						NextBillDate = @NextBillDate,
						QSSLastUpdateID = @QSSLastUpdatedID
				 WHERE Accession = @Accession 
				 AND   CPTcode   = @CPTCode
				 AND   OrderedTestCode = @OrderedTest
			END
	update tblAccessions set currentbilltype = 	@BillType where Accession=	@Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveBillingEntryInsuredInfo]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spSaveBillingEntryInsuredInfo]  
 @InsuredID varchar(50),
 @InsuranceID varchar(20),
 @Policy varchar(100)= NULL,  
 @Plan varchar(100)= NULL,  
 @Group varchar(100)= NULL,
 @Copay varchar(100)= NULL,
 @Employer varchar(100)= NULL,
 @FirstName varchar(50) = NULL,
 @MiddleName varchar(50)= NULL,
 @LastName varchar(50)= NULL,
 @Address1 varchar(100)= NULL,
 @Address2 varchar(100)= NULL,
 @City varchar(100)= NULL,
 @State varchar(100)= NULL,
 @Zip varchar(100)= NULL,
 @HomePhone varchar(50)= NULL,	
 @WorkPhone varchar(50)= NULL,
 @CellPhone varchar(50)= NULL,	
 @Email varchar(50)= NULL,	
 @Fax varchar(50)= NULL,
 @DateOfBirth datetime = NULL,
 @Sex varchar(20)= NULL,
 @SSN varchar(20)= NULL,
 @QSSLastUpdatedID varchar(20) ,
 --@QSSVersionNumber int ,
 @ReturnCode int output
 

AS  
BEGIN  
SET @ReturnCode = 0
IF EXISTS( SELECT InsuredID from tblInsuredInfo WHERE  InsuredID = @InsuredID)
 BEGIN
  
  UPDATE tblInsuredInfo
    SET 
		[Plan]    	    	= @Plan ,		
		Policy  	     	= @Policy,
		[Group]   	     	= @Group ,
	    Copay 		        = @Copay ,
		Employer		    = @Employer ,
		InsuranceID         = @InsuranceID,
		FirstName 	    	= @FirstName ,	
		MiddleName   		= @MiddleName ,	
		LastName     		= @LastName ,		
		Address1 	    	= @Address1 ,	
		Address2 	    	= @Address2 ,	
		City 	    		= @City ,	
		[State] 	    	= @State ,	
		Zip                 = @Zip ,
		HomePhone    		= @HomePhone ,	
		WorkPhone 	    	= @WorkPhone ,	
		CellPhone	    	= @CellPhone ,	
		Email 		    	= @Email ,	
		Fax 		    	= @Fax ,	
		DateOfBirth     	= @DateOfBirth ,	
		Sex 		    	= @Sex ,	
		SSN 		    	= @SSN ,
		QSSLastUpdateID 	= @QSSLastUpdatedID,
		QSSUpdateDate 		= getDate() ,
		QSSVersion  		= QSSVersion + 1	
		
	WHERE InsuredID = @InsuredID
  END
  ELSE
  BEGIN
  INSERT INTO tblInsuredInfo
  (InsuredID, InsuranceID,  [Plan], Policy, Copay, [Group], Employer , 
	FirstName ,	MiddleName ,	LastName ,		Address1 ,	Address2 ,	City ,	State ,	Zip ,
	HomePhone ,	WorkPhone ,	CellPhone,	Email ,	Fax ,	DateOfBirth ,	Sex ,	SSN ,
	QSSCreatedByID, QSSCreatedDate , QSSLastUpdateID, QSSUpdateDate, QSSVersion)
  VALUES
  (@InsuredID, @InsuranceID , @Plan , @Policy, @Copay, @Group, @Employer , 
   @FirstName ,	@MiddleName ,	@LastName ,		@Address1 ,	@Address2 ,	@City ,	@State ,	@Zip ,
   @HomePhone ,	@WorkPhone ,	@CellPhone,	 @Email ,	@Fax ,	@DateOfBirth ,	@Sex ,	@SSN ,
  @QSSLastUpdatedID, GETDATE() , @QSSLastUpdatedID, GETDATE() , 0)
  END

END
GO
/****** Object:  StoredProcedure [dbo].[spSaveBillingEntryOrder]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spSaveBillingEntryOrder]  
 @Accession varchar(50),
 @ClientCode varchar(20),   
 @PatientId varchar(50) ,  
 @PhysicianCode varchar(20) ,
 @ReceivedDate datetime,
 @CollectionDate datetime ,
 @BillingMessage varchar(500) = '' ,
 @CurrentBillTo varchar(20)  = '' ,
 @CurrentBillType varchar(20) = '' ,
 --@OrderType varchar(10) , 
 --@ProblemSpec bit , 
 --@BillToInsuranceID  varchar(20) = NULL ,
 --@InternalRequisitionNo  varchar(20) ,
 @Notes varchar(500)  = '' ,
 --@SpecimenDataXML xml,
 --@TestCodeDataXML xml,
 --@MedicationDataXML xml,
 @DiagnosisDataXML xml = NULL,
 @PrimaryInsuranceID   varchar (20) = '',
 @PrimaryPatRelationtoIns   varchar (20)= '',
 @PrimaryInsuredID   varchar (20) = '',
 @SecondaryInsuranceID   varchar (20) = '',
 @SecondaryPatRelationtoIns   varchar (20) = '',
 @SecondaryInsuredID   varchar (20) = '',
 @TertiaryInsuranceID   varchar (20) = '',
 @TertiaryPatRelationtoIns   varchar (20) = '',
 @TertiaryInsuredID   varchar (20) = '',

 @QSSLastUpdatedID varchar(20) ,
 @QSSVersionNumber int ,
 @ReturnCode int output
 

AS  
BEGIN  
--Versioning Check
DECLARE @VersionNumber int
SET @ReturnCode = 0
SELECT @VersionNumber = QSSVersion from tblAccessions WHERE  Accession = @Accession
--PRINT @VersionNumber
SET @VersionNumber = ISNULL(@VersionNumber, 0)
IF @VersionNumber != @QSSVersionNumber
	BEGIN
	SET @ReturnCode = -1
	RETURN
  END
IF EXISTS( SELECT QSSVersion from tblAccessions WHERE  Accession = @Accession)
 BEGIN
  SET @ReturnCode = @QSSVersionNumber + 1
  UPDATE tblAccessions
    SET 
		ClientCode     		= @ClientCode ,		
		PhysicianCode  		= @PhysicianCode,
		ReceiveDate    		= @ReceivedDate ,
	    CollectionDate 		= @CollectionDate ,
		BillingMessage      = @BillingMessage ,
		CurrentBillType     = @CurrentBillType ,
		CurrentBillTo       = @CurrentBillTo ,
	    DiagnosisDataXML	= @DiagnosisDataXML ,
		InternalComment     = @Notes,
	PrimaryInsuranceID        = @PrimaryInsuranceID   ,
	PrimaryPatRelationtoIns   = @PrimaryPatRelationtoIns   ,
	PrimaryInsuredID          = @PrimaryInsuredID   ,
	SecondaryInsuranceID      = @SecondaryInsuranceID   ,
	SecondaryPatRelationtoIns = @SecondaryPatRelationtoIns   ,
	SecondaryInsuredID        = @SecondaryInsuredID   ,
	TertiaryInsuranceID       = @TertiaryInsuranceID  ,
	TertiaryPatRelationtoIns  = @TertiaryPatRelationtoIns   ,
	TertiaryInsuredID         = @TertiaryInsuredID   ,
		QSSLastUpdateID 	= @QSSLastUpdatedID,
		QSSUpdateDate 		= getDate() ,
		QSSVersion  		= QSSVersion + 1	
		
	WHERE Accession      = @Accession and
		  PatientId      = @PatientId
   Exec spAuditAccession @Accession = @Accession , @QSSVersionNumber = @ReturnCode, @AuditType = 'U'
 		  
  END
 
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveBillingEntryOrderedTest2]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- =============================================  
-- Author:  HF  
-- Create date: 07/12/2011  
-- Description: This procedure creates one or more Bills for the Accession  
-- =============================================  

--exec spSaveBillingEntryOrderedTest2 'STAT12524', '151','A54', 'BILL', 'MA', '0.0', '151'

CREATE PROCEDURE [dbo].[spSaveBillingEntryOrderedTest2]  
 @Accession varchar(50),  
 @ClientCode varchar(20),  
 @OrderedTest varchar(100),   
 @Status varchar(50),
 @BillType as varchar(100),   
 @Discount as varchar(100),
 @Group as bit,  
 @QSSLastUpdatedID as varchar(20)    
 --@QSSVersionNumber as int    
   
  
   
AS  
BEGIN  
DECLARE      
            @Order  varchar(100)  
          , @NextBillDate datetime  
          , @CPTCode varchar(100)  
          , @FeeDescription varchar(200)  
          , @TotalFeeAmt decimal(18,4)  
          , @ExpPaymentAmt decimal(18,4)  
          , @Units int  
          , @BillableFlag bit  
          , @Description varchar(200)
		  , @PerformedTestCode as varchar(100)
	    , @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @FieldList varchar(2000)
		, @PerformedTest varchar(20)
		, @OrderedTestCode varchar(100)
		
if @Status = 'BILL'
BEGIN
	SET @BillableFlag = 'True'
END		
		
if @Group <> 1  -->>> ONLY do if the orderedtest has not been marked as a group  
BEGIN  
	--Check if the OrderedTest exists       
	SELECT @OrderedTestCode = Accession from dbo.tblOrderedTests where Accession = @Accession  
	AND OrderedTest = @OrderedTest  
  
	IF @OrderedTestCode IS NULL   
	   BEGIN  
			SELECT @PerformedTestCode = PerformedTestCode from tblOrderedTestsDefinitions
							where OrderedTest = @OrderedTest

		
	
			CREATE TABLE #tmpPerformedTest
			(
				PerformedTest varchar(20) NOT NULL
			)
		
			Set @FieldList =''
			Set @FieldList = @PerformedTestCode + '|'
			Set @StartPos = 1
			Set @EndPos = 1
			-- Start the looping operation
			While @EndPos > 0
				Begin
					Set @EndPos = CharIndex('|', @FieldList, @StartPos)
					If @EndPos > 0
						Begin
							Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
				 
							-- Add current row to TempTable
							Insert #tmpPerformedTest (PerformedTest) Values (@CurVal)
							Set @StartPos = @EndPos + 1
						End
   
			
				END
		
		insert into tblOrderedTests
		(Accession, OrderedTest, PerformedTest, Source, TestComment, BillStatus, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion )
		values
		(@Accession, @OrderedTest, @PerformedTestCode, @BillType, '' , @Status, @QSSLastUpdatedID, GETDATE(), @QSSLastUpdatedID, GETDATE(), 0 )
	
		IF EXISTS (SELECT Top 1 OrderedTestCode FROM dbo.tblFeeDefinitions 
			   WHERE OrderedTestCode = @OrderedTest
			   AND BillTypeCode = @BillType
			   AND ClientCode = @ClientCode )
	  BEGIN
	  DECLARE CPT_CURSOR CURSOR READ_ONLY FOR 
		SELECT  CPTCode , FeeAmt,  Units , ExpPaymentAmt, [Description]
		FROM dbo.tblFeeDefinitions
		WHERE OrderedTestCode = @OrderedTest
			   AND BillTypeCode = @BillType
			   AND ClientCode = @ClientCode
		ORDER BY CPTCode 
		OPEN CPT_CURSOR

		FETCH NEXT FROM CPT_CURSOR
			INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description
		WHILE @@FETCH_STATUS = 0
		BEGIN 
		INSERT INTO dbo.tblBill
			(Accession , BTCode , CPTcode, OrderedTestCode, DiscountPercentage,NextBillDate, FeeDescription, TotalFeeAmt, Units, ExpAmt, [Status], BillableFlag,
			QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID, QSSUpdateDate, QSSVersion)
		VALUES
			(@Accession, @BillType , @CPTCode , @OrderedTest ,  @Discount , GETDATE() , @Description , @TotalFeeAmt , @Units, @ExpPaymentAmt, @Status , @BillableFlag, 
			@QSSLastUpdatedID , GETDATE(), @QSSLastUpdatedID , GETDATE(), 0 )
		
		FETCH NEXT FROM CPT_CURSOR
			INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description
		END
		CLOSE CPT_CURSOR
		DEALLOCATE CPT_CURSOR 
  
 
  
  
	  END
	 ELSE IF EXISTS (SELECT OrderedTestCode FROM dbo.tblFeeDefinitions 
			   WHERE OrderedTestCode = @OrderedTest
			   AND BillTypeCode = @BillType
			   AND ClientCode = 'ALL' )
	   BEGIN 
		DECLARE CPT_CURSOR CURSOR READ_ONLY FOR 
		SELECT  CPTCode , FeeAmt, Units , ExpPaymentAmt, [Description]
		FROM dbo.tblFeeDefinitions
		WHERE OrderedTestCode = @OrderedTest
			   AND BillTypeCode = @BillType
			   AND ClientCode = 'ALL'
		ORDER BY CPTCode 
		OPEN CPT_CURSOR

		FETCH NEXT FROM CPT_CURSOR
			INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description
		WHILE @@FETCH_STATUS = 0
		BEGIN 
		INSERT INTO dbo.tblBill
			(Accession , BTCode , CPTcode, OrderedTestCode, DiscountPercentage,NextBillDate, FeeDescription, TotalFeeAmt, Units, ExpAmt, [Status], BillableFlag,
			QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID, QSSUpdateDate, QSSVersion)
		VALUES
			(@Accession, @BillType , @CPTCode , @OrderedTest ,  @Discount , GETDATE() , @Description , @TotalFeeAmt , @Units, @ExpPaymentAmt, @Status , @BillableFlag, 
			@QSSLastUpdatedID , GETDATE(), @QSSLastUpdatedID , GETDATE(), 0 )
		
		FETCH NEXT FROM CPT_CURSOR
			INTO   @CPTCode , @TotalFeeAmt, @Units , @ExpPaymentAmt, @Description
		END
		CLOSE CPT_CURSOR
		DEALLOCATE CPT_CURSOR 
  
 
  
	  END
	ELSE
	  BEGIN
	
		INSERT INTO dbo.tblBill
		   (Accession , BTCode , CPTcode, OrderedTestCode, DiscountPercentage,  NextBillDate, FeeDescription, TotalFeeAmt, Units,  ExpAmt,[Status], BillableFlag,
		   QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID, QSSUpdateDate, QSSVersion)
		VALUES
		  (@Accession, @BillType , '' ,  @OrderedTest,  @Discount , GETDATE() , 'NOT DEFINED' , 0 , 0, 0, @Status , @BillableFlag, 
		   @QSSLastUpdatedID , GETDATE(), @QSSLastUpdatedID , GETDATE(), 0 )
  
  
	  END
	END
	ELSE
	BEGIN

	-- Check if there is an existing Bill for the Ordered test
	-- If there is validate that the Bill type code has not changed.
	Print 'Got here'
	Print @BillType
	SELECT Accession, BTCode, CPTCode, OrderedTestCode
	INTO #tmpBill
	FROM tblBill 
	WHERE Accession = @Accession
	--AND BTcode =  @BillType
	AND OrderedTestCode = @OrderedTest
	IF NOT EXISTS( SELECT TOP 1 CPTCode from #tmpBill 
				WHERE Accession = @Accession			
				AND OrderedTestCode = @OrderedTest)
				BEGIN
					IF EXISTS (SELECT Top 1 OrderedTestCode FROM dbo.tblFeeDefinitions 
			   WHERE OrderedTestCode = @OrderedTest
			   AND BillTypeCode = @BillType
			   AND ClientCode = @ClientCode )
	  BEGIN
	  DECLARE CPT_CURSOR CURSOR READ_ONLY FOR 
		SELECT  CPTCode , FeeAmt,  Units , ExpPaymentAmt, [Description]
		FROM dbo.tblFeeDefinitions
		WHERE OrderedTestCode = @OrderedTest
			   AND BillTypeCode = @BillType
			   AND ClientCode = @ClientCode
		ORDER BY CPTCode 
		OPEN CPT_CURSOR

		FETCH NEXT FROM CPT_CURSOR
			INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description
		WHILE @@FETCH_STATUS = 0
		BEGIN 
		Print 'insert bill'
		INSERT INTO dbo.tblBill  
			(Accession , BTCode , CPTcode, OrderedTestCode, DiscountPercentage,NextBillDate, FeeDescription, TotalFeeAmt, Units, ExpAmt, [Status], BillableFlag,  
			 Modifier , Location,
			QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID, QSSUpdateDate, QSSVersion)  
		VALUES  
			(@Accession, @BillType , @CPTCode , @OrderedTest ,  @Discount , GETDATE() , @Description , @TotalFeeAmt , @Units, @ExpPaymentAmt, @Status , 1,   
			 '' , '',
			 @QSSLastUpdatedID , GETDATE(), @QSSLastUpdatedID , GETDATE(), 0 )  
	
					
		
		FETCH NEXT FROM CPT_CURSOR
			INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description
		END
		CLOSE CPT_CURSOR
		DEALLOCATE CPT_CURSOR  
  
	  END
	 ELSE IF EXISTS (SELECT OrderedTestCode FROM dbo.tblFeeDefinitions 
			   WHERE OrderedTestCode = @OrderedTest
			   AND BillTypeCode = @BillType
			   AND ClientCode = 'ALL' )
	   BEGIN 
	   Print 'Got CPT'
		DECLARE CPT_CURSOR CURSOR READ_ONLY FOR 
		SELECT  CPTCode , FeeAmt, Units , ExpPaymentAmt, [Description]
		FROM dbo.tblFeeDefinitions
		WHERE OrderedTestCode = @OrderedTest
			   AND BillTypeCode = @BillType
			   AND ClientCode = 'ALL'
		ORDER BY CPTCode 
		OPEN CPT_CURSOR

		FETCH NEXT FROM CPT_CURSOR
			INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description
		WHILE @@FETCH_STATUS = 0
		BEGIN 
		Print 'Before Insert'
		PRINT @CPTCode
		INSERT INTO dbo.tblBill  
			(Accession , BTCode , CPTcode, OrderedTestCode, DiscountPercentage,NextBillDate, FeeDescription, TotalFeeAmt, Units, ExpAmt, [Status], BillableFlag,  
			 Modifier , Location,
			QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID, QSSUpdateDate, QSSVersion)  
		VALUES  
			(@Accession, @BillType , @CPTCode , @OrderedTest ,  @Discount , GETDATE() , @Description , @TotalFeeAmt , @Units, @ExpPaymentAmt, @Status , 1,   
			 '' , '',
			 @QSSLastUpdatedID , GETDATE(), @QSSLastUpdatedID , GETDATE(), 0 )  
	
		Print 'After Insert'	
		FETCH NEXT FROM CPT_CURSOR
			INTO   @CPTCode , @TotalFeeAmt, @Units , @ExpPaymentAmt, @Description
		END
		CLOSE CPT_CURSOR
		DEALLOCATE CPT_CURSOR  
  
	  END
	ELSE
	  BEGIN
	  INSERT INTO dbo.tblBill  
			(Accession , BTCode , CPTcode, OrderedTestCode, DiscountPercentage,NextBillDate, FeeDescription, TotalFeeAmt, Units, ExpAmt, [Status], BillableFlag,  
			 Modifier , Location,
			QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID, QSSUpdateDate, QSSVersion)  
		VALUES  
			(@Accession, @BillType , '' , @OrderedTest ,  0 , GETDATE() , 'NOT DEFINED' , 0 , 0, 0, 'BILL' , 1,   
			 '' , '',
			 @QSSLastUpdatedID , GETDATE(), @QSSLastUpdatedID , GETDATE(), 0 )  
	 
  
	  END
				END
			
	ELSE IF NOT EXISTS( SELECT TOP 1 CPTCode from #tmpBill 
				WHERE Accession = @Accession
				AND BTcode =  @BillType
				AND OrderedTestCode = @OrderedTest)
	
				--This ia the case where the bill has been modified to a different bill type
				IF EXISTS (SELECT Top 1 OrderedTestCode FROM dbo.tblFeeDefinitions 
			   WHERE OrderedTestCode = @OrderedTest
			   AND BillTypeCode = @BillType
			   AND ClientCode = @ClientCode )
	  BEGIN
	  DECLARE CPT_CURSOR CURSOR READ_ONLY FOR 
		SELECT  CPTCode , FeeAmt,  Units , ExpPaymentAmt, [Description]
		FROM dbo.tblFeeDefinitions
		WHERE OrderedTestCode = @OrderedTest
			   AND BillTypeCode = @BillType
			   AND ClientCode = @ClientCode
		ORDER BY CPTCode 
		OPEN CPT_CURSOR

		FETCH NEXT FROM CPT_CURSOR
			INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description
		WHILE @@FETCH_STATUS = 0
		BEGIN 
		Print 'update bill'
		UPDATE dbo.tblBill
					SET TotalFeeAmt = @TotalFeeAmt ,
						Units =  @Units ,
						ExpAmt =  @ExpPaymentAmt ,
						FeeDescription =  @Description ,
						BTcode = @BillType ,
						CPTCode =  @CPTCode 
						WHERE Accession =  @Accession
						AND OrderedTestCode =  @OrderedTest
					
		
		FETCH NEXT FROM CPT_CURSOR
			INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description
		END
		CLOSE CPT_CURSOR
		DEALLOCATE CPT_CURSOR  
  
	  END
	 ELSE IF EXISTS (SELECT OrderedTestCode FROM dbo.tblFeeDefinitions 
			   WHERE OrderedTestCode = @OrderedTest
			   AND BillTypeCode = @BillType
			   AND ClientCode = 'ALL' )
	   BEGIN 
	   Print 'Got CPT'
		DECLARE CPT_CURSOR CURSOR READ_ONLY FOR 
		SELECT  CPTCode , FeeAmt, Units , ExpPaymentAmt, [Description]
		FROM dbo.tblFeeDefinitions
		WHERE OrderedTestCode = @OrderedTest
			   AND BillTypeCode = @BillType
			   AND ClientCode = 'ALL'
		ORDER BY CPTCode 
		OPEN CPT_CURSOR

		FETCH NEXT FROM CPT_CURSOR
			INTO   @CPTCode , @TotalFeeAmt,  @Units , @ExpPaymentAmt, @Description
		WHILE @@FETCH_STATUS = 0
		BEGIN 
		Print 'Before Update'
		PRINT @CPTCode
		UPDATE dbo.tblBill
					SET TotalFeeAmt = @TotalFeeAmt ,
						Units =  @Units ,
						ExpAmt =  @ExpPaymentAmt ,
						FeeDescription =  @Description ,
						BTcode = @BillType 
						--CPTCode =  @CPTCode 
						WHERE Accession =  @Accession
						AND OrderedTestCode =  @OrderedTest
						and CPTcode = @CPTCode
		Print 'After Update'	
		FETCH NEXT FROM CPT_CURSOR
			INTO   @CPTCode , @TotalFeeAmt, @Units , @ExpPaymentAmt, @Description
		END
		CLOSE CPT_CURSOR
		DEALLOCATE CPT_CURSOR  
  
	  END
	ELSE
	  BEGIN
	  UPDATE dbo.tblBill
					SET TotalFeeAmt = 0 ,
						Units =  0 ,
						ExpAmt =  0 ,
						FeeDescription =  'NOT DEFINED' ,
						BTcode = @BillType ,
						CPTCode =  ''
						WHERE Accession =  @Accession
						AND OrderedTestCode =  @OrderedTest  
  
	  END
	END
PRINT ' before ordered test update'
END
UPDATE dbo.tblOrderedTests
  SET BillStatus = @Status
  ,   QSSLastUpdateID = @QSSLastUpdatedID
  ,   QSSUpdateDate  = GETDATE()
  ,   QSSVersion = QSSVersion + 1
  ,	  GroupFlag = @Group
  WHERE Accession = @Accession
  AND OrderedTest = @OrderedTest
END



  
  
  
   
  
  


GO
/****** Object:  StoredProcedure [dbo].[spSaveBillingEntryOrderedTestONLY]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
-- =============================================  
-- Author:  PA
-- Create date: 02/15/2017  
-- Description: This procedure creates an ordered test entry in the orderedtests table if needed
--				Derived from spSaveBillingEntryOrderedTest2
-- =============================================  

CREATE PROCEDURE [dbo].[spSaveBillingEntryOrderedTestONLY]  
 @Accession varchar(50),  
 @ClientCode varchar(20),  
 @OrderedTest varchar(100),   
 @Status varchar(50),
 @BillType as varchar(100),   
 @Discount as varchar(100),
 @Group as bit,  
 @QSSLastUpdatedID as varchar(20)      
   
AS  
BEGIN  
DECLARE      
          @BillableFlag bit  
		, @PerformedTestCode as varchar(100)
	    , @StartPos smallint
		, @EndPos smallint
		, @CurVal varchar(20)
		, @FieldList varchar(2000)
		, @PerformedTest varchar(20)
		, @OrderedTestCode varchar(100)
		
if @Status = 'BILL'
BEGIN
	SET @BillableFlag = 'True'
END		
		
if @Group <> 1  -->>> ONLY do if the orderedtest has not been marked as a group  
BEGIN  
	--Check if the OrderedTest exists       
	SELECT @OrderedTestCode = Accession from dbo.tblOrderedTests where Accession = @Accession  
	AND OrderedTest = @OrderedTest  
  
	IF @OrderedTestCode IS NULL   
	   BEGIN  
			SELECT @PerformedTestCode = PerformedTestCode from tblOrderedTestsDefinitions
							where OrderedTest = @OrderedTest

		
	
			CREATE TABLE #tmpPerformedTest
			(
				PerformedTest varchar(20) NOT NULL
			)
		
			Set @FieldList =''
			Set @FieldList = @PerformedTestCode + '|'
			Set @StartPos = 1
			Set @EndPos = 1
			-- Start the looping operation
			While @EndPos > 0
			Begin
				Set @EndPos = CharIndex('|', @FieldList, @StartPos)
				If @EndPos > 0
				Begin
					Set @CurVal = Convert(varchar(20), SubString(@FieldList, @StartPos, @EndPos - @StartPos))
				 
					-- Add current row to TempTable
					Insert #tmpPerformedTest (PerformedTest) Values (@CurVal)
					Set @StartPos = @EndPos + 1
				End		
			END
		
			insert into tblOrderedTests
			(Accession, OrderedTest, PerformedTest, Source, TestComment, BillStatus, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion )
			values
			(@Accession, @OrderedTest, @PerformedTestCode, @BillType, '' , @Status, @QSSLastUpdatedID, GETDATE(), @QSSLastUpdatedID, GETDATE(), 0 )
	END
END
UPDATE dbo.tblOrderedTests
  SET BillStatus = @Status
  ,   QSSLastUpdateID = @QSSLastUpdatedID
  ,   QSSUpdateDate  = GETDATE()
  ,   QSSVersion = QSSVersion + 1
  ,	  GroupFlag = @Group
  WHERE Accession = @Accession
  AND OrderedTest = @OrderedTest
END



  
  
  
   
  
  


GO
/****** Object:  StoredProcedure [dbo].[spSaveBillingEntryOrderWithNewAccession]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spSaveBillingEntryOrderWithNewAccession]  
 @Accession varchar(50),
 @ClientCode varchar(20),   
 @PatientId varchar(50) ,  
 @PhysicianCode varchar(20) ,
 @ReceivedDate datetime,
 @CollectionDate datetime ,
 @SymptomAccidentDate datetime,
 @OrderedTests varchar(max),
 @BillingMessage varchar(500) = '' ,
 @CurrentBillTo varchar(20)  = '' ,
 @CurrentBillType varchar(20) = '' ,
 --@OrderType varchar(10) , 
 --@ProblemSpec bit , 
 --@BillToInsuranceID  varchar(20) = NULL ,
 --@InternalRequisitionNo  varchar(20) ,
 @Notes varchar(500)  = '' ,
 --@SpecimenDataXML xml,
 --@TestCodeDataXML xml,
 --@MedicationDataXML xml,
 @DiagnosisDataXML xml = NULL,
 @PrimaryInsuranceID   varchar (20) = '',
 @PrimaryPatRelationtoIns   varchar (20)= '',
 @PrimaryInsuredID   varchar (20) = '',
 @SecondaryInsuranceID   varchar (20) = '',
 @SecondaryPatRelationtoIns   varchar (20) = '',
 @SecondaryInsuredID   varchar (20) = '',
 @TertiaryInsuranceID   varchar (20) = '',
 @TertiaryPatRelationtoIns   varchar (20) = '',
 @TertiaryInsuredID   varchar (20) = '',

 @QSSLastUpdatedID varchar(20) ,
 @QSSVersionNumber int ,
 @ReturnCode int output
 

AS  
BEGIN  
--Versioning Check
DECLARE @VersionNumber int
SET @ReturnCode = 0
SELECT @VersionNumber = QSSVersion from tblAccessions WHERE  Accession = @Accession
--PRINT @VersionNumber
SET @VersionNumber = ISNULL(@VersionNumber, 0)
IF @VersionNumber != @QSSVersionNumber
	BEGIN
	SET @ReturnCode = -1
	RETURN
  END
IF EXISTS( SELECT QSSVersion from tblAccessions WHERE  Accession = @Accession)
 BEGIN
  SET @ReturnCode = @QSSVersionNumber + 1
  UPDATE tblAccessions
    SET 
		ClientCode     		= @ClientCode ,		
		PhysicianCode  		= @PhysicianCode,
		ReceiveDate    		= @ReceivedDate ,
	    CollectionDate 		= @CollectionDate ,
	    SymptomAccidentDate = @SymptomAccidentDate,
		BillingMessage      = @BillingMessage ,
		CurrentBillType     = @CurrentBillType ,
		CurrentBillTo       = @CurrentBillTo ,
	    DiagnosisDataXML	= @DiagnosisDataXML ,
		InternalComment     = @Notes,
	PrimaryInsuranceID        = @PrimaryInsuranceID   ,
	PrimaryPatRelationtoIns   = @PrimaryPatRelationtoIns   ,
	PrimaryInsuredID          = @PrimaryInsuredID   ,
	SecondaryInsuranceID      = @SecondaryInsuranceID   ,
	SecondaryPatRelationtoIns = @SecondaryPatRelationtoIns   ,
	SecondaryInsuredID        = @SecondaryInsuredID   ,
	TertiaryInsuranceID       = @TertiaryInsuranceID  ,
	TertiaryPatRelationtoIns  = @TertiaryPatRelationtoIns   ,
	TertiaryInsuredID         = @TertiaryInsuredID   ,
		QSSLastUpdateID 	= @QSSLastUpdatedID,
		QSSUpdateDate 		= getDate() ,
		QSSVersion  		= QSSVersion + 1	
		
	WHERE Accession      = @Accession and
		  PatientId      = @PatientId
   Exec spAuditAccession @Accession = @Accession , @QSSVersionNumber = @ReturnCode, @AuditType = 'U'
 		  
  END
 ELSE
	BEGIN
	INSERT INTO tblAccessions (Accession, ClientCode, PatientId, PhysicianCode, PreAccession, OrderType,  ReceiveDate, CollectionDate, SymptomAccidentDate, OrderedTests, BillingMessage, CurrentBillTo, CurrentBillType,
 InternalComment,DiagnosisDataXML, PrimaryInsuranceID, PrimaryPatRelationtoIns, PrimaryInsuredID, SecondaryInsuranceID, SecondaryPatRelationtoIns ,
SecondaryInsuredID, TertiaryInsuranceID, TertiaryPatRelationtoIns, TertiaryInsuredID, QSSCreatedByID, QSSCreatedDate, QSSVersion)
	VALUES(@Accession, @ClientCode, @PatientId,  @PhysicianCode, '', 'Routine',  @ReceivedDate, @CollectionDate, @SymptomAccidentDate, @OrderedTests, @BillingMessage, @CurrentBillTo, @CurrentBillType,
 @Notes, @DiagnosisDataXML, @PrimaryInsuranceID, @PrimaryPatRelationtoIns, @PrimaryInsuredID, @SecondaryInsuranceID, @SecondaryPatRelationtoIns ,
@SecondaryInsuredID, @TertiaryInsuranceID, @TertiaryPatRelationtoIns, @TertiaryInsuredID, @QSSLastUpdatedID, getDate(), 0)

	Exec spAuditAccession @Accession = @Accession , @QSSVersionNumber = @ReturnCode, @AuditType = 'B'
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveBillingEntryPatientData]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spSaveBillingEntryPatientData]
	@PatientId varchar(50) ,
	@ptLastName  varchar(50) ,
	@ptFirstName  varchar (50) ,
	@ptMiddleName   varchar (50) = '',
	@ptNameSuffix   varchar (20)= '',
	@ptDateOfBirth   datetime = '',
	@ptSex   varchar (20)= '',
	@ptSSN   varchar (20)= '',
	@ptAddress1   varchar (100)= '',
	@ptAddress2   varchar (100) = '',
	@ptCity   varchar (100)= '',
	@ptState   varchar (2)= '',
	@ptZip   varchar (20)= '',
	@btLastName   varchar (50) = '',
	@btFirstName   varchar (50) = '',
	@btMiddleName   varchar (50) = '',
	@btNameSuffix   varchar (20) = '',
	@btAddress1   varchar (100) = '',
	@btAddress2   varchar (100) = '',
	@btCity   varchar (100) = '',
	@btState   varchar (2) = '',
	@btZip   varchar (20) = '',
	@btDateOfBirth   datetime = '',
	@btSex   varchar (20) = '',
	@btSSN   varchar (20) = '',
	@PTContactHomePhone   varchar (20)= '',
	@PTContactWorkPhone   varchar (20)= '',
	@PTContactCellPhone   varchar (20)= '',
	@PTContactEmail   varchar (20)= '',
	@PTContactFax   varchar (50) = '',
	@BTContactHomePhone   varchar (20) = '',
	@BTContactWorkPhone   varchar (20) = '',
	@BTContactCellPhone   varchar (20) = '',
	@BTContactEmail   varchar (20) = '',
	@BTContactFax   varchar (20) = '',
	@PrimaryInsuranceID   varchar (20) = '',
	@PrimaryPatRelationtoIns   varchar (20)= '',
	@PrimaryInsuredID   varchar (20) = '',
	@SecondaryInsuranceID   varchar (20) = '',
	@SecondaryPatRelationtoIns   varchar (20) = '',
	@SecondaryInsuredID   varchar (20) = '',
	@TertiaryInsuranceID   varchar (20) = '',
	@TertiaryPatRelationtoIns   varchar (20) = '',
	@TertiaryInsuredID   varchar (20) = '',
	--@SignatureOnFile   bit  NULL,
	--@SiteID   varchar (20) NULL,
	--@QSSCreatedByID   varchar (20) = '',
	--@QSSCreatedDate   datetime  NULL,
	@QSSLastUpdateID  varchar (20),	
	@QSSVersionNumber Integer  ,
    @ReturnCode int output
 

AS  
BEGIN  
--Versioning Check
DECLARE @VersionNumber int
SET @ReturnCode = 0
SELECT @VersionNumber = QSSVersion from tblPatient WHERE  PatientId = @PatientId
--PRINT @VersionNumber
SET @VersionNumber = ISNULL(@VersionNumber, 0)
IF @VersionNumber != @QSSVersionNumber
	BEGIN
	SET @ReturnCode = -1
	RETURN
  END

  SET @ReturnCode = @QSSVersionNumber + 1
  UPDATE tblPatient
    SET 
	ptLastName		          =	@ptLastName  ,
	ptFirstName		          = @ptFirstName  ,
	ptMiddleName	          = @ptMiddleName  ,
	--ptNameSuffix      @ptNameSuffix   ,
	ptDateOfBirth	          = @ptDateOfBirth   ,
	ptSex			          =	@ptSex   ,
	ptSSN			          =	@ptSSN   ,
	ptAddress1		          = @ptAddress1  ,
	ptAddress2		          = @ptAddress2   ,
	ptCity			          =	@ptCity   ,
	ptState			          =	@ptState  ,
	ptZip			          = @ptZip   ,
	btLastName		          = @btLastName   ,
	btFirstName		          = @btFirstName  ,
	btMiddleName              = @btMiddleName   ,
	--@btNameSuffix  ,
	btAddress1		          =	@btAddress1   ,
	btAddress2		          =	@btAddress2   ,
	btCity			          = @btCity   ,
	btState                   = @btState   ,
	btZip			          = @btZip   ,
	btDateOfBirth	          =	@btDateOfBirth  ,
	btSex			          =	@btSex   ,
	btSSN			          =	@btSSN   ,
	PTContactHomePhone        = @PTContactHomePhone   ,
	PTContactWorkPhone        = @PTContactWorkPhone   ,
	PTContactCellPhone        = @PTContactCellPhone  ,
	PTContactEmail            = @PTContactEmail   ,
	PTContactFax	          = @PTContactFax   ,
	BTContactHomePhone        = @BTContactHomePhone   ,
	BTContactWorkPhone        = @BTContactWorkPhone   ,
	BTContactCellPhone        = @BTContactCellPhone   ,
	BTContactEmail	          = @BTContactEmail  ,
	BTContactFax              = @BTContactFax  ,
	PrimaryInsuranceID        = @PrimaryInsuranceID   ,
	PrimaryPatRelationtoIns   = @PrimaryPatRelationtoIns   ,
	PrimaryInsuredID          = @PrimaryInsuredID   ,
	SecondaryInsuranceID      = @SecondaryInsuranceID   ,
	SecondaryPatRelationtoIns = @SecondaryPatRelationtoIns   ,
	SecondaryInsuredID        = @SecondaryInsuredID   ,
	TertiaryInsuranceID       = @TertiaryInsuranceID  ,
	TertiaryPatRelationtoIns  = @TertiaryPatRelationtoIns   ,
	@TertiaryInsuredID        = @TertiaryInsuredID   ,
	QSSLastUpdateID 	      = @QSSLastUpdateID,
	QSSUpdateDate 		      = getDate() ,
	QSSVersion  		      = @QSSVersionNumber + 1
		
	WHERE  PatientId      = @PatientId

 
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveBillingEntryPatientDataWithNewPatient]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spSaveBillingEntryPatientDataWithNewPatient]
	@PatientId varchar(50) ,
	@ptLastName  varchar(50) ,
	@ptFirstName  varchar (50) ,
	@ptMiddleName   varchar (50) = '',
	@ptNameSuffix   varchar (20)= '',
	@ptDateOfBirth   datetime = '',
	@ptSex   varchar (20)= '',
	@ptSSN   varchar (20)= '',
	@ptAddress1   varchar (100)= '',
	@ptAddress2   varchar (100) = '',
	@ptCity   varchar (100)= '',
	@ptState   varchar (2)= '',
	@ptZip   varchar (20)= '',
	@btLastName   varchar (50) = '',
	@btFirstName   varchar (50) = '',
	@btMiddleName   varchar (50) = '',
	@btNameSuffix   varchar (20) = '',
	@btAddress1   varchar (100) = '',
	@btAddress2   varchar (100) = '',
	@btCity   varchar (100) = '',
	@btState   varchar (2) = '',
	@btZip   varchar (20) = '',
	@btDateOfBirth   datetime = '',
	@btSex   varchar (20) = '',
	@btSSN   varchar (20) = '',
	@PTContactHomePhone   varchar (20)= '',
	@PTContactWorkPhone   varchar (20)= '',
	@PTContactCellPhone   varchar (20)= '',
	@PTContactEmail   varchar (20)= '',
	@PTContactFax   varchar (50) = '',
	@BTContactHomePhone   varchar (20) = '',
	@BTContactWorkPhone   varchar (20) = '',
	@BTContactCellPhone   varchar (20) = '',
	@BTContactEmail   varchar (20) = '',
	@BTContactFax   varchar (20) = '',
	@PrimaryInsuranceID   varchar (20) = '',
	@PrimaryPatRelationtoIns   varchar (20)= '',
	@PrimaryInsuredID   varchar (20) = '',
	@SecondaryInsuranceID   varchar (20) = '',
	@SecondaryPatRelationtoIns   varchar (20) = '',
	@SecondaryInsuredID   varchar (20) = '',
	@TertiaryInsuranceID   varchar (20) = '',
	@TertiaryPatRelationtoIns   varchar (20) = '',
	@TertiaryInsuredID   varchar (20) = '',
	--@SignatureOnFile   bit  NULL,
	--@SiteID   varchar (20) NULL,
	--@QSSCreatedByID   varchar (20) = '',
	--@QSSCreatedDate   datetime  NULL,
	@QSSLastUpdateID  varchar (20),	
	@QSSVersionNumber Integer  ,
    @ReturnCode int output
 

AS  
BEGIN  




--Versioning Check
DECLARE @VersionNumber int
SET @ReturnCode = 0
SELECT @VersionNumber = QSSVersion from tblPatient WHERE  PatientId = @PatientId
--PRINT @VersionNumber
SET @VersionNumber = ISNULL(@VersionNumber, 0)
IF @VersionNumber != @QSSVersionNumber
	BEGIN
	SET @ReturnCode = -1
	RETURN
  END
IF EXISTS( SELECT QSSVersion from tblPatient WHERE  PatientID = @PatientId)
BEGIN
  SET @ReturnCode = @QSSVersionNumber + 1
  UPDATE tblPatient
    SET 
	ptLastName		          =	@ptLastName  ,
	ptFirstName		          = @ptFirstName  ,
	ptMiddleName	          = @ptMiddleName  ,
	--ptNameSuffix      @ptNameSuffix   ,
	ptDateOfBirth	          = @ptDateOfBirth   ,
	ptSex			          =	@ptSex   ,
	ptSSN			          =	@ptSSN   ,
	ptAddress1		          = @ptAddress1  ,
	ptAddress2		          = @ptAddress2   ,
	ptCity			          =	@ptCity   ,
	ptState			          =	@ptState  ,
	ptZip			          = @ptZip   ,
	btLastName		          = @btLastName   ,
	btFirstName		          = @btFirstName  ,
	btMiddleName              = @btMiddleName   ,
	--@btNameSuffix  ,
	btAddress1		          =	@btAddress1   ,
	btAddress2		          =	@btAddress2   ,
	btCity			          = @btCity   ,
	btState                   = @btState   ,
	btZip			          = @btZip   ,
	btDateOfBirth	          =	@btDateOfBirth  ,
	btSex			          =	@btSex   ,
	btSSN			          =	@btSSN   ,
	PTContactHomePhone        = @PTContactHomePhone   ,
	PTContactWorkPhone        = @PTContactWorkPhone   ,
	PTContactCellPhone        = @PTContactCellPhone  ,
	PTContactEmail            = @PTContactEmail   ,
	PTContactFax	          = @PTContactFax   ,
	BTContactHomePhone        = @BTContactHomePhone   ,
	BTContactWorkPhone        = @BTContactWorkPhone   ,
	BTContactCellPhone        = @BTContactCellPhone   ,
	BTContactEmail	          = @BTContactEmail  ,
	BTContactFax              = @BTContactFax  ,
	PrimaryInsuranceID        = @PrimaryInsuranceID   ,
	PrimaryPatRelationtoIns   = @PrimaryPatRelationtoIns   ,
	PrimaryInsuredID          = @PrimaryInsuredID   ,
	SecondaryInsuranceID      = @SecondaryInsuranceID   ,
	SecondaryPatRelationtoIns = @SecondaryPatRelationtoIns   ,
	SecondaryInsuredID        = @SecondaryInsuredID   ,
	TertiaryInsuranceID       = @TertiaryInsuranceID  ,
	TertiaryPatRelationtoIns  = @TertiaryPatRelationtoIns   ,
	@TertiaryInsuredID        = @TertiaryInsuredID   ,
	QSSLastUpdateID 	      = @QSSLastUpdateID,
	QSSUpdateDate 		      = getDate() ,
	QSSVersion  		      = @QSSVersionNumber + 1
		
	WHERE  PatientId      = @PatientId
END
ELSE
BEGIN
	INSERT INTO tblPatient(EntryDate, PatientId, ptLastName, ptFirstName, ptMiddleName, ptNameSuffix, ptDateOfBirth, ptSex, ptSSN, ptAddress1, 
	ptAddress2, ptCity, ptState, ptZip, btLastName, btFirstName, btMiddleName, btNameSuffix, btAddress1, btAddress2, btCity,
	btState, btZip, btDateOfBirth, btSex, btSSN, PTContactHomePhone, PTContactWorkPhone, PTContactCellPhone, PTContactEmail,
	PTContactFax, BTContactHomePhone, BTContactWorkPhone, BTContactCellPhone, BTContactEmail, BTContactFax, PrimaryInsuranceID, PrimaryPatRelationtoIns,
	PrimaryInsuredID, SecondaryInsuranceID, SecondaryPatRelationtoIns, SecondaryInsuredID, TertiaryInsuranceID, TertiaryPatRelationtoIns,
	TertiaryInsuredID, QSSCreatedByID, QSSCreatedDate, QSSVersion)
	VALUES(getdate(), @PatientId, @ptLastName,	@ptFirstName, @ptMiddleName, @ptNameSuffix, @ptDateOfBirth, @ptSex, @ptSSN, @ptAddress1, 
	@ptAddress2, @ptCity, @ptState, @ptZip, @btLastName, @btFirstName, @btMiddleName, @btNameSuffix, @btAddress1, @btAddress2, @btCity,
	@btState, @btZip, @btDateOfBirth, @btSex, @btSSN, @PTContactHomePhone, @PTContactWorkPhone, @PTContactCellPhone, @PTContactEmail,
	@PTContactFax, @BTContactHomePhone, @BTContactWorkPhone, @BTContactCellPhone, @BTContactEmail, @BTContactFax, @PrimaryInsuranceID, @PrimaryPatRelationtoIns,
	@PrimaryInsuredID, @SecondaryInsuranceID, @SecondaryPatRelationtoIns, @SecondaryInsuredID, @TertiaryInsuranceID, @TertiaryPatRelationtoIns,
	@TertiaryInsuredID, @QSSLastUpdateID, GETDATE(), 0)
END
 
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveBillingInsuranceCPTCodeLookup]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveBillingInsuranceCPTCodeLookup]

	@InsuranceID as varChar(100),
	@InsCPTCode as varchar(10),
	@CPTcode as varchar(100), 
	@InsCPTDescription as varchar(200)
	
		
AS
BEGIN
	INSERT INTO tblBillingInsuranceCPTCodeLookup (InsCPTCode, CPTCode, ResultTest, InsuranceID, InsCPTDescription)
	VALUES (@InsCPTCode, @CPTCode, '99999', @InsuranceID, @InsCPTDescription)
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveBillingNotifications]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spSaveBillingNotifications]
(
	@accession varchar(100),
	@lastname varchar(50),
	@firstname varchar(50),
	@client varchar(50),
	@orderedtest varchar(100),
	@notification varchar(max),
	@QSSLastUpdateID varchar(20)
)
As
BEGIN
declare @iCount as int
	select @iCount = count(accession) from tblBillingNotifications where  accession = @accession

	if @iCount > 0
	begin
		update tblBillingNotifications set accession = @accession, lastname = @lastname, firstname = @firstname, 
		client = @client, orderedtest = @orderedtest, [notification] = @notification, QSSLastUpdateID = @QSSLastUpdateID, QSSUpdateDate = GetDate()
		 where accession = @accession
	end
	else
	begin
		INSERT INTO dbo.tblBillingNotifications(accession, lastname, firstname, client, orderedtest, [notification], QSSLastUpdateID, QSSUpdateDate)
	VALUES (@accession, @lastname, @firstname, @client, @orderedtest, @notification, @QSSLastUpdateID, GetDate())
	end
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveBillingRemittanceFileStatus]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spSaveBillingRemittanceFileStatus]

@FileName varchar(150),
@Status varchar(20), 
@QSSCreatedByID varchar(20)
		
AS
BEGIN
if not exists(select * from tblBillingRemittanceFiles where [FileName] = @FileName and [Status] = @Status)
begin
	Insert Into tblBillingRemittanceFiles([FileName], [Status], QSSCreatedByID, QSSCreatedDate)	
	values(@FileName, @Status, @QSSCreatedByID, GetDate())
end 	
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveBillMessage]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spSaveBillMessage]

	@Code as varchar(100),
	@Description as varchar(400)
	
	
AS
BEGIN

	declare @iCount as int
	select @iCount = count(Code) from tblBillMessages where  @Code = Code

	if @iCount > 0
	begin
		update tblBillMessages set [Description] = @Description 
		 where Code = @Code 
	end
	else
	begin
		insert into  tblBillMessages( Code, Description)		 
			values( @Code, @Description)
	end
END



--*******
GO
/****** Object:  StoredProcedure [dbo].[spSaveBillType]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveBillType]

	@Code as varchar(100),
	@Description as varchar(300),
	@ExpectedAmt as varchar (10),
	@PrintFlag as bit,
	@BillHeaderText as varchar(100),
	@ClaimFlag as bit,
	@ClaimCode as varchar(20),
	@InsuranceFlag as bit
	
AS
BEGIN

	declare @iCount as int
	select @iCount = count(BTCode) from tblBillTypeDefinitions where  BTCode = @Code

	if @iCount > 0
	begin
		update tblBillTypeDefinitions set [Description] = @Description , ExpectedAmt = @ExpectedAmt, PrintFlag = @PrintFlag,
			BillHeaderText = @BillHeaderText, ClaimFlag = @ClaimFlag, ClaimCode = @ClaimCode, InsuranceFlag = @InsuranceFlag
		 where BTCode = @Code 
	end
	else
	begin
		insert into  tblBillTypeDefinitions( BTCode, [Description], ExpectedAmt, PrintFlag, BillHeaderText, ClaimFlag, ClaimCode, InsuranceFlag)		 
			values( @Code, @Description, @ExpectedAmt, @PrintFlag, @BillHeaderText, @ClaimFlag, @ClaimCode, @InsuranceFlag)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveCalculation]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spSaveCalculation]   
@CalculationID varchar(100) ,  
@Calculation varchar(max) ,
@Decimal varchar(100),
@Formula varchar(200)  
AS  
BEGIN  
SET NOCOUNT ON  
UPDATE    tblResultedTestsDefinitions
SET              Calculation = @Calculation, 
				 Decimals = @Decimal, 
				 Formula = @Formula
FROM         tblResultedTestsDefinitions INNER JOIN
                      tblResultCodeVersions ON tblResultedTestsDefinitions.TestCode = tblResultCodeVersions.TestCode 
WHERE     (tblResultedTestsDefinitions.TestCode = @CalculationID)
  
END  

GO
/****** Object:  StoredProcedure [dbo].[spSaveCalculationReference]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveCalculationReference] 
@ParentCalculationID varchar(100) ,
@ChildCalculationID varchar(100) ,
@UserID varchar(20)

AS
BEGIN
SET NOCOUNT ON;
IF NOT EXISTS( SELECT 1 FROM dbo.tblCalculationReference WHERE ParentCalculationID = @ParentCalculationID AND ChildCalculationID = @ChildCalculationID)
       INSERT INTO dbo.tblCalculationReference(ParentCalculationID, ChildCalculationID, QSSCreatedByID, QSSCreatedDate, QSSVersion)
              VALUES (@ParentCalculationID, @ChildCalculationID, @UserID, GETDATE(), 0);
END

GO
/****** Object:  StoredProcedure [dbo].[spSaveClaimSubmissionBatch]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveClaimSubmissionBatch]
	@BatchID int, 
	@ClaimSubmissionID varchar(50),
	@ClearinghouseName varchar(200)
AS
BEGIN
if not exists (select BatchID from tblBillingECSBatchList where BatchID = @BatchID)
begin
	insert into tblBillingECSBatchList(BatchID, DateCreated, ClearinghouseName)
    values( @BatchID, GETDATE(), @ClearinghouseName)
    update tblElectronicClaimSubmission
    set BatchCounter = @BatchID+1
  --  where ClaimSubmissionID = @ClaimSubmissionID
end    
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveClaimSubmissionBatchDetailsInfo]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveClaimSubmissionBatchDetailsInfo]
	@BatchID int, 
	@Accession varchar(100)
AS
BEGIN
	insert into tblBillingECSBatchDetails(BatchID, Accession)
    values( @BatchID, @Accession)
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveClientBillAsName]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spSaveClientBillAsName] 
-- Add the parameters for the stored procedure here
	@ClientCode varchar(20),
	@BillAsName varchar(100)
AS
BEGIN
	SET NOCOUNT ON;
	If exists( select ClientCode from tblClientBillAsName )
	Begin
		Update tblClientBillAsName
		Set BillAsName = @BillAsName
		where ClientCode = @ClientCode
    End
    Else
    Begin
		Insert into tblClientBillAsName
		values (@ClientCode, @BillAsName)
	End
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveClientDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
CREATE PROCEDURE [dbo].[spSaveClientDefinitions]  
  
 @ClientCode as varchar(100),  
 @ClientName as varchar(200),  
    @Address as varchar(200),   
 @Address2 as varchar(200),  
 @City as varchar(100),  
 @State as varchar(100),   
 @Zip as varchar(100),  
 @Telephone as varchar(100),  
 @ActiveFlag as bit,  
 @DisplayInSearch as bit,  
 @BillToCode as varchar(100),  
 @OrderType as varchar(100),  
 @Comment as varchar(max),  
 @EntryDate as varchar(100),  
 @AccContact as varchar(100),  
 @AccPhone as varchar(20),  
 @BillingStatus as varchar(100),  
 @ClientBillSort as varChar(100),  
 @StatementNotes as varchar(max),  
 @Salesmancode as varchar(20),  
 --@ReportCopies as varchar(20),  
 --@PrintReportStatus as varchar(100),  
 --@FaxReportStatus as varchar(100),  
 --@ReportToWeb as bit,  
 --@ReportText as varchar(100),  
 --@PrintOnAccession as bit,  
 --@FreezeList as varchar(100),  
 @FaxTimes as varChar(MAX),  
 @ReportFormat as int  
 , @Territory as varchar(100)  
 , @Specialty as varchar(100)  
 , @Service as varchar(100)  
 , @iDocAvailable as bit = 1,  
   @CumulativeReport as bit 
AS  
BEGIN  
  
 IF LTRIM(RTRIM(@ClientName)) = ''   
  RETURN 0;  
  
 declare @iCount as int  
 select @iCount = count(ClientCode) from tblClients where  ClientCode = @ClientCode  
  
 if @iCount > 0  
 begin  
  update tblClients set ClientName  = @ClientName,Address = @Address,  
   Address2  = @Address2 ,City = @City, State = @State,     
   Zip = @Zip, Telephone =@Telephone,  Comment =@Comment,  
   ActiveFlag = @ActiveFlag, EntryDate =@EntryDate,OrderType = @OrderType ,   
   BillToCode =@BillToCode ,DisplayInSearch = @DisplayInSearch, AccContact = @AccContact,  
   AccPhone = @AccPhone, BillingStatus = @BillingStatus, ClientBillSort = @ClientBillSort,  
   StatementNotes = @StatementNotes, SalesmanCode = @Salesmancode,   
   --ReportCopies = @reportCopies, PrintReportStatus = @PrintReportStatus,   
   --FaxReportStatus = @faxReportStatus, ReportToWeb = @ReportToWeb,  
   --ReportText = @ReportText, PrintOnAccession = @PrintOnAccession, FreezeList = @FreezeList,   
   FaxTimes = @FaxTImes, ReportFormat = @ReportFormat     
  , Territory = @Territory  
   , Specialty = @Specialty  
   , Service = @Service, iDocAvailable = @iDocAvailable, NeedsSync = 1, CumulativeReport=@CumulativeReport
     
   where ClientCode = @ClientCode   
 end  
 else  
 begin  
  insert into  tblClients(ClientCode, ClientName, Address,  
   Address2, City, State, Zip, Telephone, ActiveFlag,DisplayInSearch,  
    EntryDate, Comment, OrderType, BillToCode, AccContact, AccPhone, BillingStatus, ClientBillSort,  
    StatementNotes, SalesmanCode,   
  --  ReportCopies, PrintReportStatus, FaxReportStatus, ReportToWeb, ReportText, PrintOnAccession, FreezeList,   
    FaxTimes,ReportFormat  
   , Territory, Specialty, Service, iDocAvailable, NeedsSync,CumulativeReport)  
     
   values(@ClientCode, @ClientName, @Address, @Address2,   
         @City, @State, @Zip, @Telephone, @ActiveFlag,@DisplayInSearch,  
          @EntryDate,@Comment,@OrderType, @BillToCode, @AccContact, @AccPhone, @BillingStatus,  
          @ClientBillSort, @StatementNotes, @Salesmancode,   
      --    @ReportCopies, @PrintReportStatus, @FaxReportStatus, @ReportToWeb, @ReportText, @PrintOnAccession, @FreezeList,   
          @FaxTimes, @ReportFormat  
     , @Territory, @Specialty, @Service, @iDocAvailable, 1,@CumulativeReport)  
 end  
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveClientEmails]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveClientEmails]
	@ID as integer,
	@ClientCode as varchar(20),
	@Email varchar(MAX),
	@Description varChar(MAX),
	@ZipPassword varchar(MAX)
    
	
AS
BEGIN
	declare @iCount as int
	select @iCount = count(ClientCode) from tblClientsEmails where  ClientCode = @ClientCode
		if @iCount > 0 and @ID > 0
			begin
				update tblClientsEmails set ClientCode = @ClientCode, Email = @Email, Description = @Description, ZipPassword = @ZipPassword
				where  ClientCode = @ClientCode and id = @id
			end
		else 
			begin	
				insert into tblClientsEmails(ClientCode, Email, Description, ZipPassword)
				 
				values(@ClientCode, @Email, @Description, @ZipPassword)
			end		
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveClientFaxNumbers]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveClientFaxNumbers]
	@ID as integer,
	@ClientCode as varchar(20),
	@FaxNumber varchar(MAX),
	@Description varChar(MAX)
    
	
AS
BEGIN
	declare @iCount as int
	select @iCount = count(ClientCode) from tblClientsFaxNumbers where  ClientCode = @ClientCode
		if @iCount > 0 and @ID > 0
			begin
				update tblClientsFaxNumbers set ClientCode = @ClientCode, FaxNumber = @FaxNumber, Description = @Description
				where  ClientCode = @ClientCode and id = @id
			end
		else 
			begin	
				insert into tblClientsFaxNumbers(ClientCode, FaxNumber, Description)
				 
				values(@ClientCode, @FaxNumber, @Description)
			end		
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveClientReportingOptions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
CREATE PROCEDURE [dbo].[spSaveClientReportingOptions]
	@ClientCode as varchar(20),
	@Remote as int,
    @IDoc as int,
    @AutoFax as int,
    @ElectronicInterface as int,
    @LabHealth as int,
    @EmailInterface varchar(20)
    
	
AS
BEGIN
	declare @iCount as int
	select @iCount = count(ClientCode) from tblReportingOptions where  ClientCode = @ClientCode
		if @iCount > 0
			begin
				update tblReportingOptions set ClientCode = @ClientCode,  Remote = @Remote,
						Idoc = @Idoc, AutoFax = @AutoFax, ElectronicInterface = @ElectronicInterface, LabHealth = @LabHealth, 
						EmailInterface = @EmailInterface
				where  ClientCode = @ClientCode
			end
		else 
			begin	
				insert into tblReportingOptions(Clientcode, Remote, Idoc, AutoFax, ElectronicInterface, LabHealth, 
				EmailInterface)
				values(@ClientCode,  @Remote, @IDoc, @AutoFax, @electronicInterface, @labhealth, 
				@EmailInterface)
			end		
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveClientRoutes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveClientRoutes]
	@ClientCode as varchar(20),
	@RouteCode as varchar(20)
    
	
AS
BEGIN
	declare @iCount as int
	select @iCount = count(ClientCode) from tblClients where  ClientCode = @ClientCode
		if @iCount > 0
			begin
				update tblClients set Routecode = @routeCode
				where  ClientCode = @ClientCode
			end
		else 
			begin	
				insert into tblClients(Routecode)
				 
				values(@RouteCode)
			end		
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveClientsPhysician]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveClientsPhysician]
	@PhysicianCode as varchar(50),
	@ClientCode as varchar(50),
	@UserID as varchar(50)    
	
		
AS

BEGIN
	declare @iCount as int
	select @iCount = count(PhysicianCode) from tblClientsPhysicians
    where  PhysicianCode = @PhysicianCode
          and ClientCode=@ClientCode

	if @iCount > 0
	  begin
		update tblClientsPhysicians 
		set PhysicianCode = @PhysicianCode,
			ClientCode=@ClientCode,
			QSSLastUpdateID = @UserID,
			QSSUpdateDate = GETDATE()
		 where  PhysicianCode = @PhysicianCode
          and ClientCode=@ClientCode
	  end
	else
	  begin
		insert into  tblClientsPhysicians (ClientCode,PhysicianCode,QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate)
			values(@ClientCode,@PhysicianCode,@UserID,getdate(),@UserID, getdate())
	  end
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveClientsSales]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spSaveClientsSales]


	@SalesmanCode as varchar(50),
	@ClientCode as varchar(50),
	@Commission as decimal(5, 2)
	
		
AS

BEGIN
	declare @iCount as int
	select @iCount = count(SalesmanCode) from tblClientsSalesman
    where  SalesmanCode = @SalesmanCode
          and ClientCode=@ClientCode

	if @iCount > 0
	  begin
		update tblClientsSalesman 
		set SalesmanCode = @SalesmanCode, ClientCode=@ClientCode, Commission = @Commission		 		 
		 
		 where  SalesmanCode = @SalesmanCode
          and ClientCode=@ClientCode
	  end
	else
	  begin
		insert into  tblClientsSalesman (ClientCode, SalesmanCode, Commission)
			values(@ClientCode, @SalesmanCode, @Commission)
	  end
END



--*********************************************************

GO
/****** Object:  StoredProcedure [dbo].[spSaveClientSynced]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spSaveClientSynced]
	@ClientCode as varchar(50)	
AS
BEGIN
	UPDATE tblClients set NeedsSync = 0, LastSyncDate = GETDATE()
	WHERE ClientCode = @ClientCode
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveCollector]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spSaveCollector]
	@UserID varchar(20)
	
AS
BEGIN
	update tblUsersID
	set isCollector = 'True'
	where UserID = @UserID
	
END


GO
/****** Object:  StoredProcedure [dbo].[spSaveCollectorBillTypes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spSaveCollectorBillTypes]
	@UserID varchar(20),
	@BillTypeCode varchar(100)
	
AS
BEGIN
	IF NOT EXISTS( SELECT UserID FROM tblCollectorBillTypeCodes where UserID = @UserID and BillTypeCode = @BillTypeCode)
	BEGIN
		insert into tblCollectorBillTypeCodes(UserID, BillTypeCode)
		values(@UserID, @BillTypeCode)
	END	
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveCollectorInsurances]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spSaveCollectorInsurances]
	@UserID varchar(20),
	@InsuranceCode varchar(100)
	
AS
BEGIN
	IF NOT EXISTS( SELECT UserID FROM tblCollectorInsuranceCodes where UserID = @UserID and InsuranceCode = @InsuranceCode)
	BEGIN
		insert into tblCollectorInsuranceCodes(UserID, InsuranceCode)
		values(@UserID, @InsuranceCode)
	END
END


GO
/****** Object:  StoredProcedure [dbo].[spSaveControlModule]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveControlModule]
	@ID as varChar(50),
	@ControlID as varchar(20),
	@Description as varchar(100),
	@InstrumentCode as varchar(20),
	@LotNumber as varchar(20),
	@ExpirationDate as date,
	@TestCodes as varchar(MAX),
	@Average as varchar(MAX),
	@Deviation as varchar(MAX),
	@Status as varChar(50),
	@CreatedBy varchar(20)
		
	
		
AS
BEGIN
--SET IDENTITY_INSERT dbo.tblQCControls ON
	declare @iCount as int
	select @iCount = count(ID) from  tblQCControls
	where  ControlID = @ControlID
     And   Lot		 = @LotNumber
     
	if @iCount > 0
	begin
		update tblQCControls 
		  set  [Description] = @Description, InstrumentCode = @InstrumentCode, 
		  Lot = @LotNumber, ExpirationDate = @ExpirationDate, TestCodes = @TestCodes, 
		  Average = @Average, Deviation = @Deviation, Status = @Status,
		  QSSLastUpdateID = @CreatedBy, QSSUpdateDate = GETDATE()			   		  
		 where ControlID = @ControlID 
		 And   Lot = @LotNumber
	end
	else	
	begin	     
		insert into tblQCControls
		      (ControlID, [Description], InstrumentCode, Lot, ExpirationDate, TestCodes, Average , Deviation, [Status], QSSCreatedByID,QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate)
				 
		values( @ControlID, @Description, @InstrumentCode, @LotNumber, @ExpirationDate, @TestCodes, @Average , @Deviation, @Status, @CreatedBy,GETDATE(), @CreatedBy, GETDATE())
	
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveControlOrders]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveControlOrders]

	@ControlOrderNumber as varchar(20),
	@OrderDate as datetime,
	@Status as varchar(10),	
	@UserID varchar(20)
	
		
AS
BEGIN

	declare @iCount as int
	select @iCount = count(id) from  tblQCOrders
	where  OrderID = @ControlOrderNumber

	if @iCount > 0
	begin
		update tblQCOrders
		set    OrderDate = @OrderDate, 
		       [Status]  = @Status ,
		       QSSLastUpdateID = @UserID,
		       QSSUpdateDate   = GETDATE()
		where  OrderID         = @ControlOrderNumber
	end
	else
	begin
		insert into tblQCOrders
		          (OrderID, OrderDate, [Status],QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate)
				 
			values(@ControlOrderNumber, @OrderDate, @Status, @UserID, GETDATE(), @UserID, GETDATE() )
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveControlResults]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spSaveControlResults]	
	 @ID int
	,@QCResultID int
	--,@LotNumber varchar(100)
	,@TestCode varchar(100)
	,@ResultDate datetime
	,@Result varchar(100)
	,@Status varchar(20)
	,@UserID varchar(10)
	,@GroupID varchar(50)
	,@ResultComment varchar(max) = null
	,@ResultAlphaNum varchar(max)
	,@ResultAlphaFlag bit
AS
BEGIN
DECLARE @CheckTestCode varchar(20)
SET @CheckTestCode = (SELECT TestCode from dbo.tblQCResultValues where id = @ID)

IF @CheckTestCode IS NOT NULL
	BEGIN
		Update tblQCResultValues
		Set Result = @Result
		,	ResultDate = @ResultDate
		,   QSSLastUpdateID =  @UserID
		,   QSSUpdateDate = GETDATE()
		,   ResultComment = @ResultComment
		,	Result_AlphaNum = @ResultAlphaNum
		,	ResultAlphaFlag = @ResultAlphaFlag
		where id = @ID
	END
ELSE
	BEGIN
		INSERT INTO dbo.tblQCResultValues(QCResultsID, TestCode, ResultDate,Result, [Status], 
									   QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID ,QSSUpdateDate,QCGroupNumber,
									   ResultComment, Result_AlphaNum, ResultAlphaFlag)
		                               
		VALUES (@QCResultID, @TestCode, @ResultDate, @Result , @Status, @UserID , GETDATE(), @UserID , GETDATE(),@GroupID, @ResultComment,
				 @ResultAlphaNum, @ResultAlphaFlag)
	END
END










GO
/****** Object:  StoredProcedure [dbo].[spSaveCopyToClient]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveCopyToClient]

	@Accession as varchar(100),
	@ClientCode as varchar(20),
	@UserID as varchar(10)
	
	
AS
BEGIN
    INSERT INTO	dbo.tblAccessionsClients
           (Accession, ClientCode , QSSCreatedByID, QSSCreatedDate)         
     VALUES(@Accession, @ClientCode, @UserID , GETDATE() )
           
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveCoriellLog]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveCoriellLog]

    @URL as varChar(500),
	@JSONRequest as varchar(MAX),
	@JSONResponse as varchar(MAX),
	@Notes as varchar(MAX)
		
AS
BEGIN
		     
		insert into tblCoriellLog
		           (URL, JSONRequest, JSONResponse, Notes, ActionDate)
		values(@URL, @JSONRequest, @JSONResponse, @Notes, GETDATE())
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveCovidPatientEmailSynced]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
CREATE PROCEDURE [dbo].[spSaveCovidPatientEmailSynced]
	@AccessionTable dtNJList READONLY
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE a SET NeedSync = 0, LastSyncDate = GETDATE()
	FROM dbo.[tblCOVIDPatientEmailPortal] a
	JOIN @AccessionTable b ON a.Accession = b.Accession;
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveCPTCode]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spSaveCPTCode]

	@CPTCode as varchar(50),
	@ICD9Codes as varchar(MAX)
	
	
AS
BEGIN

	declare @iCount as int
	select @iCount = count(CPTCode) from tblCPT where  @CPTCode = CPTCode

	if @iCount > 0
	begin
		update tblCPT set ICD9CODES = @ICD9Codes
		 where CPTCode = @CPTCode 
	end
	else
	begin
		insert into  tblCPT( CPTCode, ICD9CODES)		 
			values( @CPTCode, @ICD9CODES)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveCptforAccession]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
        
CREATE PROCEDURE [dbo].[spSaveCptforAccession]          
         
 @ResultCode as varchar(100),    
    
@Accession as varchar(100),    
    
@PathologyCase as varchar(100),    
    
@PerformedTest as varchar(100) ,   

@Units as int     
       
AS          
BEGIN          
        
if not exists (select * from [tblPathologyBilling] where ResultTest=@ResultCode and PathologyCase=@PathologyCase )      
 Begin        
         
        
  INSERT INTO [dbo].[tblPathologyBilling]        
           (ResultTest        
           ,[Accession]        
           ,[PathologyCase]        
           ,[PerformedTest] 
		   ,Units)
  VALUES        
           (@ResultCode        
           ,@Accession        
           ,@PathologyCase        
           ,@PerformedTest  
		   ,@Units      
           )        
 END        
        
END 
GO
/****** Object:  StoredProcedure [dbo].[spSaveCPTGroup]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
CREATE PROCEDURE [dbo].[spSaveCPTGroup]   
  @GroupName  varchar(100)  
 ,@ResultCodes varchar(200)  
 ,@ResultDescription  varchar(200)  
 ,@Modifier varchar(20)  
 ,@BillTypeCode varchar(100)  
 ,@GroupCPTCode  varchar(100)  
 ,@UserID varchar(10)  
 ,@CheckAll bit  
 ,@FeeAmt decimal(18,2)  
 ,@ExpAmt decimal(18,2)  
 ,@EffectiveDate datetime  
   
AS  
BEGIN  
  
  INSERT INTO dbo.tblCPTGroups(GroupName,ResultCodes, ResultDecription, BillTypeCode, GroupCPTCode, QSSCreatedByID ,   
   QSSCreatedDate , QSSLastUpdateID ,QSSUpdateDate, CheckAll, Modifier, FeeAmt, ExpPaymentAmt, EffectiveDate)  
                                   
  VALUES (@GroupName,@ResultCodes, @ResultDescription, @BillTypeCode, @GroupCPTCode ,@UserID ,   
   GETDATE(), @UserID , GETDATE(), @CheckAll, @Modifier, @FeeAmt, @ExpAmt, @EffectiveDate)  
  
END  
  
  
  
GO
/****** Object:  StoredProcedure [dbo].[spSaveCPTScale]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveCPTScale]	
	 @ID int
	,@InsuranceType  varchar(50)
	,@CPTCode varchar(50)
	,@MaxUnits int
	,@ConvertToCode varchar(50)
	,@Description varchar(max)
	,@MaxUnitsSent int
	,@Amount decimal(18, 2)
	,@UserID varchar(10)

	
AS
BEGIN

IF Exists(Select * from tblCPTScaleMaintance where InsuranceType = @InsuranceType and CPTCode = @CPTCode and ConvertToCode = @ConvertToCode)
	BEGIN
		Update tblCPTScaleMaintance
		Set InsuranceType = @InsuranceType,
			CPTCode = @CPTCode,
			MaxUnits = @MaxUnits,
			ConvertToCode = @ConvertToCode,
			Description = @Description,
			MaxUnitsSent = @MaxUnitsSent,
			Amount = @Amount,
			QSSLastUpdateID =  @UserID,
		    QSSUpdateDate = GETDATE()
		where InsuranceType = @InsuranceType and CPTCode = @CPTCode and ConvertToCode = @ConvertToCode
	END
ELSE
	BEGIN
		INSERT INTO dbo.tblCPTScaleMaintance(InsuranceType, CPTCode, MaxUnits, ConvertToCode,Description,MaxUnitsSent ,Amount , QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID ,QSSUpdateDate)
		                               
		VALUES (@InsuranceType,@CPTCode, @MaxUnits, @ConvertToCode, @Description , @MaxUnitsSent, @Amount,@UserID , GETDATE(), @UserID , GETDATE() )
	END
END

GO
/****** Object:  StoredProcedure [dbo].[spSaveCytoCptforAccession]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveCytoCptforAccession]            
           
 @ResultCode as varchar(100),      
      
@Accession as varchar(100),      
      
@CytologyCase as varchar(100),      
      
@PerformedTest as varchar(100),
@Units as int
       
         
AS            
BEGIN            
          
if not exists (select * from tblCytologyBilling where ResultTest=@ResultCode and CytologyCase=@CytologyCase )        
 Begin          
           
          
  INSERT INTO [dbo].tblCytologyBilling          
           (ResultTest          
           ,[Accession]          
           ,[CytologyCase]          
           ,[PerformedTest]
		   ,Units)          
  VALUES          
           (@ResultCode          
           ,@Accession          
           ,@CytologyCase          
           ,@PerformedTest          
           ,@Units)          
 END          
          
END   
  
GO
/****** Object:  StoredProcedure [dbo].[spSaveCytoHeadersBySourceforAccession]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
              
CREATE PROCEDURE [dbo].[spSaveCytoHeadersBySourceforAccession]                    
                   
 @SourceID int,              
 @HeadingCode as varchar(20),                    
 @Result as varchar(Max)=Null                    
                       
AS                    
BEGIN                    
declare @CurrID int                 
select @CurrID=id from tblCytoHeadersForSource where SourceID=@SourceID and  HeadingCode=@HeadingCode                
if @CurrID is NULL                  
 Begin                  
                   
  INSERT INTO [dbo].tblCytoHeadersForSource                  
           ([SourceID]               
           ,[HeadingCode]                  
           ,[Result])                  
  VALUES                  
           (@SourceID                 
           ,@HeadingCode                  
           ,@Result)                  
              
 END                  
ELSe                  
 begin                  
  Update tblCytoHeadersForSource                    
  Set    Result = @Result                  
  where  SourceID=@SourceID               
  and HeadingCode=@HeadingCode                
                
               
 END          
           
 --declare @status int          
                 
 --     select @status=count(*) from tblPathologyResultTemplates where lower(RTRIM(LTRIM((Results)))) = lower(RTRIM(LTRIM((@Result))))          
 --     if(@status = 0)          
 --  begin          
 -- insert into tblPathologyResultTemplates(Results) values (RTRIM(LTRIM(@Result)))          
 --  end          
END 
GO
/****** Object:  StoredProcedure [dbo].[spSaveCytologyCases]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spSaveCytologyCases]                 
 @Accession as varchar(100),                            
 @TestCode as varchar(100),                            
 @CaseNumber as varchar(100)=NULL,                            
 @Cytologist as varchar(100)=Null,                            
 @Status as varchar(100)='',                            
 @Notes as varchar(200)=null,                        
 @Signed as bit=0,                          
 --@isAbnormal as bit=0,                          
 @StainsDataXML xml=Null,                            
 @DiagnosisDataXML xml=Null,                            
 @CPTDataXML xml=Null,                          
 @UserID varchar(10),                  
 @Jars varchar(10)='',                          
 @Cassettes varchar(10)='',                   
 @Slides varchar(10)='',              
 @Abnormal as varchar(20)=''              
AS                            
BEGIN                            
                          
if @CaseNumber is NULL                          
 begin                          
  set  @CaseNumber = @Accession + '-' + @TestCode                          
 End                          
                          
DECLARE @CheckTestCode varchar(20)                            
SET @CheckTestCode = (SELECT Accession from tblCytologyCases where CaseNumber = @CaseNumber)                            
                            
IF @CheckTestCode IS NOT NULL                            
 BEGIN                            
  Update tblCytologyCases                            
  Set   CaseNumber = @CaseNumber,                          
  --Accession = @Accession,                           
  --TestCode = @TestCode,                           
  Cytologist  = @Cytologist ,                          
  Status = @Status,                           
  Notes =@Notes,                        
  Signed = @Signed,                           
  --isAbnormal = @isAbnormal,                           
  StainsDataXML=@StainsDataXML,                          
  DiagnosisDataXML = @DiagnosisDataXML,                          
  CPTDataXML = @CPTDataXML,                           
  QSSLastUpdateID = @UserID,                            
  QSSUpdateDate = GETDATE() ,                  
  Jars = @Jars  ,                  
  Cassettes= @Cassettes,                  
  --Sources = @Sources,              
  Slides =@Slides ,      
  Abnormal =@Abnormal                    
  where CaseNumber = @CaseNumber                          
                              
  Exec spAuditCytologyCases @CaseNumber = @CaseNumber, @Accession = @Accession, @TestCode = @TestCode, @Cytologist  = @Cytologist ,                          
        @Status = @Status,@Notes=@Notes,@Signed = @Signed,@StainsDataXML=@StainsDataXML, @DiagnosisDataXML = @DiagnosisDataXML,                          
        @CPTDataXML = @CPTDataXML, @UserID = @UserID, @AuditType = 'U'   , @Jars = @Jars   ,@Slides = @Slides,@Cassettes= @Cassettes                  
                              
  IF @Status = 'Final'                             
   BEGIN                            
   --Update Ressult Record                            
    Update tblResultedTests                            
    Set Status = 'Final'                            
    Where Accession = @Accession                             
    and PerformedTest = @TestCode                            
   END                            
  ELSE                            
   BEGIN                            
    Update tblResultedTests                            
    Set Status = 'Pending'                            
    Where Accession = @Accession                             
    and PerformedTest = @TestCode                            
                                
  END                            
                            
 END                            
ELSE                            
 BEGIN                            
  INSERT INTO tblCytologyCases(CaseNumber, Accession, TestCode, Cytologist, Signed , StainsDataXML, DiagnosisDataXML, CPTDataXML ,  QSSCreatedByID ,  QSSLastUpdateID,Notes,Jars,Slides,Cassettes,Abnormal)                            
    
  VALUES (@CaseNumber, @Accession, @TestCode, @Cytologist, @Signed , @StainsDataXML, @DiagnosisDataXML, @CPTDataXML , @UserID ,  @UserID ,@Notes,@Jars,@Slides,@Cassettes,@Abnormal)                            
                              
  Exec spAuditCytologyCases  @CaseNumber = @CaseNumber, @Accession = @Accession, @TestCode = @TestCode, @Cytologist = @Cytologist,                          
         @Status = @Status,@Notes=@Notes, @Signed = @Signed, @StainsDataXML=@StainsDataXML, @DiagnosisDataXML = @DiagnosisDataXML,                          
         @CPTDataXML = @CPTDataXML, @UserID = @UserID, @AuditType = 'A'  , @Jars = @Jars   ,@Slides  = @Slides ,@Cassettes= @Cassettes                          
                              
 END                            
END 


   
GO
/****** Object:  StoredProcedure [dbo].[spSaveCytologyCaseUpdates]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spSaveCytologyCaseUpdates]          
 @CaseNumber  varchar(100), @Accession varchar(100), @TestCode varchar(100), @UpdateType varchar(20), @Reason varchar(200), @Cytologist varchar(100)        
          
          
  as          
  begin    
  insert into tblCytologyCaseUpdates(CaseNumber ,Accession, TestCode,UpdateType , Reason ,          
 Cytologist, SignedDateTime ) values (@CaseNumber ,@Accession, @TestCode,@UpdateType , @Reason ,          
 @Cytologist, getdate())       
 end    
GO
/****** Object:  StoredProcedure [dbo].[spSaveCytoSourcesforAccession]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
            
CREATE PROCEDURE [dbo].[spSaveCytoSourcesforAccession]                  
                 
 @CaseNumber as varchar(100),             
 @SourceID int,            
 @Source as varchar(200)               
                     
AS                  
BEGIN                  
declare @CurrID int               
select @CurrID=id from tblCytologySources where SourceID=@SourceID and CaseNumber=@CaseNumber --and Source=@Source           
if @CurrID is NULL                
 Begin                
  INSERT INTO [dbo].tblCytologySources                
           ([CaseNumber]              
     ,[SourceID]             
           ,[Source]                
           )                
  VALUES                
           (@CaseNumber             
     ,@SourceID               
           ,@Source                
           )                
 END        
 else      
 begin      
  update  tblCytologySources set  Source=@Source   where SourceID=@SourceID and CaseNumber=@CaseNumber      
 end              
END 
GO
/****** Object:  StoredProcedure [dbo].[spSaveCytoStainsforAccession]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveCytoStainsforAccession]          
         
 @StainID as integer ,         
 @CaseNumber as varchar(100),          
 @StainRequest as varchar(500),          
 @RequestDate as datetime=Null,          
 @RequestBy as varchar(100)=Null,          
 @FilledDate as datetime=Null,          
 @FilledBy as varchar(100)=Null           
AS          
BEGIN          
        
if not exists (select * from tblCytoStains where StainID=@StainID )      
 Begin        
         
        
  INSERT INTO [dbo].tblCytoStains        
           ([StainID]        
           ,[CaseNumber]        
           ,[StainRequest]        
           ,[RequestDate]        
           ,[RequestBy]        
           ,[FilledDate]        
           ,[FilledBy])        
  VALUES        
           (@StainID        
           ,@CaseNumber        
           ,@StainRequest        
           ,@RequestDate        
           ,@RequestBy        
           ,@FilledDate        
           ,@FilledBy)        
 END        
ELSe        
 begin        
  Update tblCytoStains          
  Set  CaseNumber = @CaseNumber,         
    StainRequest = @StainRequest,         
    RequestDate = @RequestDate,        
    RequestBy = @RequestBy,         
    FilledDate = @FilledDate,         
    FilledBy = @FilledBy         
  where StainID = @StainID        
 END        
        
END 
GO
/****** Object:  StoredProcedure [dbo].[spSaveDenialDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[spSaveDenialDefinitions]

	@Code as varchar(100),
	@Description as varchar(500),
	@DenialAction as varchar(100), 
	@BillType as varchar(100),
	@MessageCode as varchar(100) 
	
AS

BEGIN

	declare @iCount as int
	select @iCount = count(DenialCode) from tblDenialDefinitions where DenialCode = @Code

	if @iCount > 0
	begin
		update tblDenialDefinitions set DenialDescription = @Description , DenialAction = @DenialAction, 
		BillType = @BillType, MessageCode = @MessageCode
		 where DenialCode = @Code 
	end
	else
	begin
		insert into  tblDenialDefinitions( DenialCode, DenialDescription, DenialAction, BillType, MessageCode)		 
			values( @Code, @Description, @DenialAction, @BillType, @MessageCode)
	end
END



GO
/****** Object:  StoredProcedure [dbo].[spSaveDiagnosisDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveDiagnosisDefinitions]

	@Code as varchar(100),
	@Description as varchar(300),
	@SpecificityFlag as bit
	
AS
BEGIN

	declare @iCount as int
	select @iCount = count(DiagnosisCode) from tblDiagnosis where  DiagnosisCode = @Code

	if @iCount > 0
	begin
		update tblDiagnosis set [Description] = @Description , SpecificityFlag = @SpecificityFlag
		 where DiagnosisCode = @Code 
	end
	else
	begin
		insert into  tblDiagnosis( DiagnosisCode, Description, SpecificityFlag)		 
			values( @Code, @Description, @SpecificityFlag)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveExternalComment]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spSaveExternalComment]  
  
 @Accession as varchar(100),  
 @Comment as varchar (max)  
   
AS  
BEGIN  
  
  update tblAccessions set ExternalComments = @Comment  
   where Accession = @Accession   
  
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveFeeDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveFeeDefinitions]

	@OrderedTestCode as varChar(100),
	@BillTypeCode as varchar(100),
	@ClientCode as varchar(100),
	@CPTcode as varchar(100),
	@Description as varchar(200),
	@FeeAMT as decimal(18,2),
	@ExpPaymentAmt as decimal(18,2),
	@Modifier as varchar(20),
	@EffectiveDate as datetime,
	@Units as int,
	@CPTCounter as int,
	@CPTDiagnosisCode as varchar(20)
	--@QSSCreatedByID as varchar(20),
	--@QSSCreatedDate as varchar(20),
	--@QSSLastUpdateID as varchar(20),
	--@QSSUpdateDate as varchar(20),
	--@QSSVersion	as int
	
		
AS
BEGIN
	declare @iCount as int
	select @iCount = count(ID) from  tblFeeDefinitions
	where  OrderedTestCode = @OrderedTestCode and
	BillTypeCode = @BillTypeCode and CPTcode = @CPTcode and ClientCode = @ClientCode and CPTCounter = @CPTCounter

	if @iCount > 0
	begin
		update tblFeeDefinitions 
		  set  OrderedTestCode = @OrderedTestCode, BillTypeCode = @BillTypeCode, ClientCode = @ClientCode, 
		  CPTcode = @CPTcode, Description = @Description, FeeAmt = @FeeAMT, ExpPaymentAmt = @ExpPaymentAmt,
		  Modifier = @Modifier, EffectiveDate = @EffectiveDate, Units = @Units, CPTCounter = @CPTCounter, DiagnosisCode = @CPTDiagnosisCode 	  
			where  OrderedTestCode = @OrderedTestCode and
			BillTypeCode = @BillTypeCode and CPTcode = @CPTcode and ClientCode = @ClientCode and CPTCounter = @CPTCounter
	end
	else
	begin	     
		insert into tblFeeDefinitions
		           (OrderedTestCode, BillTypeCode, ClientCode, CPTcode, Description, FeeAmt, ExpPaymentAmt, Modifier, EffectiveDate, Units, CPTCounter, DiagnosisCode)
		values(@OrderedTestCode, @BillTypeCode, @ClientCode, @CPTcode, @Description, @FeeAMT, @ExpPaymentAmt, @Modifier, @EffectiveDate, @Units, @CPTCounter, @CPTDiagnosisCode)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveGeneratedReportQuery]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spSaveGeneratedReportQuery]  
 -- Add the parameters for the stored procedure here  
 @QueryName varchar(200),  
 @sqlWithoutReceiveDate varchar(max) ,
 @UpdatedBy varchar(50)
 
 
 AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
  
    -- Insert statements for procedure here  
 IF Exists(Select QueryName from tblBillingGeneratedQueries where QueryName = @QueryName)  
 Begin  
   Update tblBillingGeneratedQueries set SQLstring = @sqlWithoutReceiveDate, DateUpdated = GETDATE(), UpdatedBy=@UpdatedBy
   Where QueryName = @QueryName
 End  
 Else  
 Begin  
 Insert into tblBillingGeneratedQueries (QueryName, SQLstring, DateUpdated, UpdatedBy)
 values(@QueryName, @sqlWithoutReceiveDate, GETDATE(), @UpdatedBy)  
 End  
 
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveGeneratedReportQueryLab]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spSaveGeneratedReportQueryLab]  
 -- Add the parameters for the stored procedure here  
 @QueryName varchar(200),  
 @sqlWithoutReceiveDate varchar(max) ,
 @UpdatedBy varchar(50)
 
 
 AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
  
    -- Insert statements for procedure here  
 IF Exists(Select QueryName from tblLabGeneratedQueries where QueryName = @QueryName)  
 Begin  
   Update tblLabGeneratedQueries set SQLstring = @sqlWithoutReceiveDate, DateUpdated = GETDATE(), UpdatedBy=@UpdatedBy
   Where QueryName = @QueryName
 End  
 Else  
 Begin  
 Insert into tblLabGeneratedQueries (QueryName, SQLstring, DateUpdated, UpdatedBy)
 values(@QueryName, @sqlWithoutReceiveDate, GETDATE(), @UpdatedBy)  
 End  
 
END




GO
/****** Object:  StoredProcedure [dbo].[spSaveHeaderResultCodes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveHeaderResultCodes]
  @Header As Varchar(200),
  @OrderNumber As Int,
  @ResultCodes As Varchar(max),
  @UserID varchar(10),
  @Section int
	
AS 
 
	BEGIN
	IF EXISTS ( SELECT OrderNumber FROM  dbo.tblTestsReportOrder WHERE  Header  = @Header
	 ) 
		 BEGIN
		 IF EXISTS ( SELECT OrderNumber FROM  dbo.tblTestsReportOrder WHERE OrderNumber = @OrderNumber AND Header != @Header
					) 
				BEGIN 
				RAISERROR ('Order Number has been utilized', -- Message text.
						   16, -- Severity.
						   1 -- State.
						   )

				END
		ELSE
		        BEGIN		
					UPDATE dbo.tblTestsReportOrder
					SET ResultCodes = @ResultCodes,
					    OrderNumber = @OrderNumber,
						QSSLastUpdateID = @UserID,
						QSSUpdateDate  = GETDATE(),
						Section = @Section
						
					WHERE Header = @Header
				END
		END
	ELSE
		BEGIN
		INSERT INTO dbo.tblTestsReportOrder(Header,OrderNumber, ResultCodes,QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID , QSSUpdateDate,Section )
		VALUES (@Header, @OrderNumber , @ResultCodes, @UserID , GETDATE(), @UserID , GETDATE(),@Section)
	END
	
	EXEC spRebuildtblTestsReportOrderNew
    END
GO
/****** Object:  StoredProcedure [dbo].[spSaveHeadersBySourceforAccession]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


              
CREATE PROCEDURE [dbo].[spSaveHeadersBySourceforAccession]                
               
 @SourceID int,          
 @HeadingCode as varchar(20),                
 @Result as varchar(Max)=Null                
                   
AS                
BEGIN                
declare @CurrID int             
select @CurrID=id from tblHeadersForSource where SourceID=@SourceID and  HeadingCode=@HeadingCode            
if @CurrID is NULL              
 Begin              
               
  INSERT INTO [dbo].[tblHeadersForSource]              
           ([SourceID]           
           ,[HeadingCode]              
           ,[Result])              
  VALUES              
           (@SourceID             
           ,@HeadingCode              
           ,@Result)              
          
 END              
ELSe              
 begin              
  Update tblHeadersForSource                
  Set    Result = @Result              
  where  SourceID=@SourceID           
  and HeadingCode=@HeadingCode            
            
           
 END      
       
 --declare @status int      
             
 --     select @status=count(*) from tblPathologyResultTemplates where lower(RTRIM(LTRIM((Results)))) = lower(RTRIM(LTRIM((@Result))))      
 --     if(@status = 0)      
 --  begin      
 -- insert into tblPathologyResultTemplates(Results) values (RTRIM(LTRIM(@Result)))      
 --  end      
END 
GO
/****** Object:  StoredProcedure [dbo].[spSaveInstrumentQCResult]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveInstrumentQCResult]  

        @QCResultsID varchar(100),
        @TestCode varchar(100),
        @Result  varchar(100),
        @ResultDate Datetime,
        @QSSCreatedByID varchar(100),
        @QSSCreatedDate Datetime,
        @QcGroupNumber varchar(50)
        
        
		 

AS  
begin
declare @QCID as int = 0
select @QCID =  id from tblQCOrderControls where OrderID = @QCResultsID


declare @iCount as int
select @iCount = count(TestCode) from tblQCResultValues where TestCode = @TestCode and QCResultsID = @QCID and QCGroupNumber = @QcGroupNumber

	if @iCount > 0
BEGIN  
	update tblQCResultValues set Result = @Result, ResultDate = @ResultDate, QSSCreatedByID = @QSSCreatedByID, QSSCreatedDate = @QSSCreatedDate
	where TestCode = @TestCode and QCResultsID = @QCID and QCgroupNumber = @QcGroupNumber
END
else
Begin
insert into tblQCResultValues(QCResultsID, TestCode, Result, ResultDate, Status, QSSCreatedByID, QSSCreatedDate, QCGroupNumber)
	values(@QCID, @TestCode, @Result, @ResultDate, 'Final', @QSSCreatedByID, @QSSCreatedDate, @QcGroupNumber)
	   
End

end
GO
/****** Object:  StoredProcedure [dbo].[spSaveInstrumentResult]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
   
-- =============================================  
-- Update 4/27/2017 Gladson - tblResultedTests can have ResultTest duplication with a Status of Cancelled.  
--         This procedure will only update ResultTest with Status of Pending or Hold.  
-- =============================================  
-- Update 5/17/2017 Hanane - Do not modify Entry Date when the result is modified  
-- =============================================
-- Update 4/16/2020 Gladson - Add Abnormal results from test LD074 (2019 NOVEL CORONAVIRUS SARS-CoV-2 BY PCR) to critical call list
-- Update 5/18/2020 Gladson - Add result comment to SARS element coming from MAGPIX
-- Update 5/18/2020 Gladson - Auto finalize SRC result code with default value “Nasopharyngeal” when results received from Luminex MagPix/Aries for test LD074(result code SARS).
-- ============================================= 
-- Update 5/28/2020 Paul - Send to auto release queue if it passes the test
-- Update 7/02/2020 Paul - Delete auto release; replace with send to hold
-- =============================================
-- Update 3/10/2021 Gladson - Sometimes some untested results are auto finalized by the iRICELL analyzer. Update them if the result is available
-- ============================================= 
CREATE PROCEDURE [dbo].[spSaveInstrumentResult]    
  
        @Accession varchar(100),  
        @TestName varchar(100),  
        @Result  varchar(100),  
        @Outcome varchar(50) = null,  
        @Status varchar(50),          
        @EnteredBy varchar(100),  
        @ResultFlag varchar(100),
		@ResultComment varchar(max) = ''  
          
          
     
  
AS    
BEGIN    
 declare @iCount as int  
 declare @RecordUpdated as int  
 declare @ID as int  
   
DECLARE @ReflexHighValue decimal(20, 8)    
,@ReflexLowValue decimal(20, 8)    
,@ReflexLowTestCode varchar(50)    
,@ReflexHighTestCode varchar(50)    
,@ReflexInconsistantTestCode varchar(50)    
,@ReflexConsistantTestCode varchar(50)    
,@TestComment varchar(200)    
,@ResultTestCode varchar(100)    
,@InternalName varchar(100)    
    
DECLARE @ConfirmAllTests bit,    
  @ConfirmAllMeds bit,    
  @ConfirmConsistancy bit,    
  @ReturnCode int,
  --4/27/2017 these parameters are not used anywhere in this procedure. commenting the code for now.  
  @EnteredByUser varchar(100) --5/17/17  Uncommented to be used in deciding if a result already exists  
  --@Prev_Result varchar(100)= NULL,    
  --@Prev_ResultFlag as varchar(max) = NULL,    
  --@Prev_Outcome varchar(1) = NULL    
     
 --Get values for new reflex testing rules   
 SELECT @ConfirmAllTests = ConfirmAllTests, @ConfirmAllMeds = ConfirmAllMeds, @ConfirmConsistancy = ConfirmConsistancy  FROM dbo.tblAccessions  
 WHERE Accession = @Accession    
  
 --Check if record will be updated  
 select @RecordUpdated = count(Accession) from tblResultedTests   
 where Accession = @Accession and ResultTest = @Testname and Status In ('Pending', 'Hold')  
 --Retrieve ID for Audit  
 select @ID =  ID from tblResultedTests   
 where Accession = @Accession and ResultTest = @Testname and Status In ('Pending', 'Hold')  
   
  --Sometimes these untested results are auto finalized by the analyzer. Update them if the result is available
 IF @ID IS NULL
 BEGIN
	 IF @EnteredBy = 'iRICELL' AND @TestName IN ('RBC', 'RBCC', 'WBC', 'WBCC', 'BACT', 'YST', 'SQEP', 'TREP', 'REEP', 'FAT', 'MUCS', 'SPRM', 'TRCH', 'HYAL', 'EPIC', 'WBCT', 'RBCT', 'GRAN', 'CELL', 'BROAD', 'FATC', 'TPO4', 'CAOX', 'CAPH', 'CACB', 'URIC', 'LEUC', 'CYST', 'TYRO', 'AMOR', 'WAXY', 'BYST', 'HYST')
	 BEGIN
		SELECT @ID = ID from tblResultedTests   
		WHERE Accession = @Accession and ResultTest = @Testname and Status = 'Final';
		IF @ID IS NOT NULL
			SET @RecordUpdated = 1;
	 END
 END

 IF @ID IS NULL SET @ID = 0;

 if( @ID <> 0 )  
   
 begin  
 Declare @InsideId int = 0   
	--5/18/2020 - Add result comment to SARS element
	--5/26/2020 - Auto finalize SRC result code with default value “Nasopharyngeal” when results received from Luminex MagPix/Aries for test LD074(result code SARS).
	--10/30/2020 - When @EnteredBy 'FastDX serial number' USE 'M4'
	IF @Testname = 'SARS' AND (@Status = 'Final' OR @Status = 'Hold')
	BEGIN
		
		IF @EnteredBy = 'MAGPX17144721' OR  @EnteredBy = 'MAGPX17172726' OR  @EnteredBy = 'MAGPX20210721' OR @EnteredBy = 'MAGPX20209722'
			SELECT @ResultComment = Comment FROM tblLabCommentDefinitions WHERE Code = 'M2';
		ELSE IF @EnteredBy = 'M12V119169001' OR  @EnteredBy = 'M12V117090001'
			SELECT @ResultComment = Comment FROM tblLabCommentDefinitions WHERE Code = 'M3';
		ELSE IF @EnteredBy = 'FastDX'
			SELECT @ResultComment = Comment FROM tblLabCommentDefinitions WHERE Code = 'M4';
		ELSE IF @EnteredBy = 'QuantStudio'
			SELECT @ResultComment = Comment FROM tblLabCommentDefinitions WHERE Code = 'M5';
		UPDATE tblResultedTests SET Result = 'Nasopharyngeal', ResultComment = '', 
		Status = 'Final', Outcome = 'C', ResultFlag = 'Normal', QSSLastUpdateID = @EnteredBy,    
		QSSUpdateDate = GETDATE()  
		WHERE Accession = @Accession and ResultTest = 'SRC' and Status In ('Pending', 'Hold');
	END

  --these parameters are not used anywhere in this procedure. commenting the code for now.  
  --SELECT @EnteredByUser = EnteredBy, @Prev_Result = Result, @Prev_ResultFlag = ResultFlag, @Prev_Outcome = Outcome FROM dbo.tblResultedTests  
  -- WHERE id = @ID;   
  SELECT @EnteredByUser = EnteredBy FROM tblResultedTests  
   WHERE id = @ID;   
    

declare @Extcomment as varchar(max)

  IF @EnteredByUser IS NULL  --First time to enter result  
   BEGIN   
  
  --Update result record  
  UPDATE tblResultedTests set  
  Result = @Result,  
  Status = @Status,  
  Outcome = @Outcome,  
  EnteredBy = @EnteredBy,  
  ResultFlag = @ResultFlag,  
  ResultComment= @ResultComment,
    EntryDate = getdate(),   
    QSSLastUpdateID = @EnteredBy,    
    QSSUpdateDate = GETDATE()   
    WHERE id = @ID    --WHERE Accession = @Accession and ResultTest = @Testname and Status In ('Pending', 'Hold')  
     
	    
	--if Resultcode is SARS and entered by QuantStudio, add comment M5 to tblaccession external comment
	--if (@TestName ='SARS' and @enteredby = 'QuantStudio')
	--begin
		
	--	select @Extcomment=comment from tblLabCommentDefinitions
	--	where code='M5'

	--	update tblaccessions
	--	set ExternalComments=@Extcomment
	--	where accession= @accession
	--end

   END  
  Else  
   BEGIN  
    --Update existing results  
    UPDATE tblResultedTests set  
    Result = @Result,  
    Status = @Status,  
    Outcome = @Outcome,  
    --EnteredBy = @EnteredBy,  
    ResultFlag = @ResultFlag,  
	ResultComment= @ResultComment,
    --EntryDate = getdate()  -- Do not update entry date  
    QSSLastUpdateID = @EnteredBy,    
    QSSUpdateDate = GETDATE()  
    WHERE id = @ID   --WHERE Accession = @Accession and ResultTest = @Testname and Status In ('Pending', 'Hold')  
    

	   
	--if Resultcode is SARS and entered by QuantStudio, add comment M5 to tblaccession external comment
	--if (@TestName ='SARS' and @enteredby = 'QuantStudio')
	--begin
		
	--	select @Extcomment=comment from tblLabCommentDefinitions
	--	where code='M5'

	--	update tblaccessions
	--	set ExternalComments=@Extcomment
	--	where accession= @accession
	--end
   END  
 




	--Add critical results to tblCallSheet
	IF @Status = 'Final'
	BEGIN
	IF @ResultFlag = 'C' OR @ResultFlag = 'Critical Low' OR @ResultFlag = 'Critical High'  
     OR @ResultFlag = 'High' OR @ResultFlag = 'HH' OR @ResultFlag = 'H' OR @ResultFlag = 'Low' OR @ResultFlag = 'LL' OR @ResultFlag = 'L'
	 OR @ResultFlag = 'Positive'
		EXEC spAddToCallList @id = @ID;
	ELSE IF @Testname = 'SARS' AND (@ResultFlag = 'A' OR @ResultFlag = 'Abnormal')	
		EXEC spAddToCallList @id = @ID;
	END

  --Check if Review record exisits  
  select @iCount = count(Accession) from tblReviewAccession where Accession = @Accession  
    
    
  if @RecordUpdated > 0  
  begin  
   --Capture Audit  
   Exec spAuditResultedTests @Accession = @Accession, @ID = @ID   
    
   if @iCount = 0  
   begin  
    insert into tblReviewAccession(Accession, QSSLastUpdatedByID, QSSLastUpdatedDate)  
     values(@Accession, @EnteredBy, getdate())  
   end  
   
    --if @ReturnCode = 1, means this was added to the Auto Release queue, and the approved date needs to be set
	--if @ReturnCode = 1 begin
	--	UPDATE tblResultedTests set ApprovedDate = getdate() WHERE id = @ID 
	--end
  End   

  ----  
 --- Check if a Test Code needs to  be ordered    
    --SELECT @ResultTestCode = rtd.TestCode, @InternalName = rtd.InternalName, @ReflexLowValue = CAST(ISNULL(rtd.ReflexLowValue, 0) As Decimal(20, 8)), @ReflexHighValue = CAST(ISNULL(rtd.ReflexHighValue, 9999999) As Decimal(20, 8)), @ReflexLowTestCode = rtd.ReflexLowTestCode, @ReflexHighTestCode = rtd.ReflexHighTestCode    
    SELECT @ResultTestCode = rtd.TestCode, @InternalName = rtd.InternalName, @ReflexLowValue = CAST(ISNULL(rtd.ReflexLowValue, -9999999999) As Decimal(20, 8)),     
    @ReflexHighValue = CAST(ISNULL(rtd.ReflexHighValue, 9999999999) As Decimal(20, 8)), @ReflexLowTestCode = rtd.ReflexLowTestCode,     
    @ReflexHighTestCode = rtd.ReflexHighTestCode,@ReflexInconsistantTestCode = ReflexInconsistentTestCode,@ReflexConsistantTestCode = ReflexConsistentTestCode    
 FROM   tblResultedTestsDefinitions AS rtd WITH (nolock) INNER JOIN    
 tblResultedTests AS rt WITH (nolock) ON rtd.TestCode = rt.ResultTest INNER JOIN    
           tblResultCodeVersions ON rtd.TestCode = tblResultCodeVersions.TestCode AND rtd.Version = tblResultCodeVersions.CurrentVersion    
 WHERE rt.id =  @ID    
            
            
 IF NOT EXISTS ( SELECT OrderedTest FROM tblOrderedTests WHERE     
  Accession = @Accession and (OrderedTest = @ReflexLowTestCode or OrderedTest = @ReflexHighTestCode))    
 BEGIN    
       
    --    IF @Result != '' AND @Accession iS NOT NULL    
        IF @Result != '' AND @Accession iS NOT NULL AND  ISNUMERIC(@Result) = 1 AND @ConfirmAllTests = 1    
        BEGIN    
   IF CAST(@Result As Decimal(20, 8)) < @ReflexLowValue    
   BEGIN    
    --SET @TestComment = 'Created due to low result value for: ' + @ResultTestCode + ' Value was: ' + @Result    
    SET @TestComment = 'Created due to low result value for: ' + @InternalName + ' Value was: ' + @Result    
    EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @ReflexLowTestCode , @TestComment = @TestComment, @Count = 1    
     END    
   ELSE IF CAST(@Result As Decimal(20, 8)) >= @ReflexHighValue    
     BEGIN    
    --SET @TestComment = 'Created due to high result value for: ' + @ResultTestCode + ' Value was: ' + @Result    
    SET @TestComment = 'Created due to high result value for: ' + @InternalName + ' Value was: ' + @Result    
       EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @ReflexHighTestCode , @TestComment = @TestComment, @Count = 1    
             
   END    
  END    
      
  -- Reflexing for Alpha    
  If ISNUMERIC(@Result) =  0  AND @ConfirmAllTests = 1    
  BEGIN    
       
   DECLARE @AlphaReflex varchar(200)    
   Select @AlphaReflex = ReflexTestCode from tblResultedTestDecodes where TestCode = @ResultTestCode and Decode = @Result    
   if @AlphaReflex != ''    
   Begin    
    SET @TestComment = 'Test Created due to '+ @Result +' result value for: ' + @InternalName + ' Value was: ' + @Result    
    EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @AlphaReflex , @TestComment = @TestComment, @Count = 1    
   End    
       
  END     
      
  -- Reflexing Consistancy    
  If ISNUMERIC(@Result) =  1  AND @ConfirmConsistancy = 1 and @Outcome != ''    
   BEGIN    
       
   if @ReflexInconsistantTestCode != '' and @Outcome = 'I'    
   Begin    
    SET @TestComment = 'Test Created due to result inconsistant value for: ' + @InternalName + ' Value was: ' + @Result    
    EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @ReflexInconsistantTestCode, @TestComment = @TestComment, @Count = 1    
   End    
       
   if @ReflexConsistantTestCode != '' and @Outcome = 'C'    
   Begin    
    SET @TestComment = 'Test Created due to result consistant value for: ' + @InternalName + ' Value was: ' + @Result    
    EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @ReflexInconsistantTestCode, @TestComment = @TestComment, @Count = 1    
   End       
    
  END        
      
      
END    
  
 END    
--Call to see if result needs to be placed on hold - would be outside hold limits
--Must be the last thing executed, as it will depend on the state of the record after all
--processing has been done.
Exec spSaveTestsAsHold_OnSave @Accession, @TestName,  @Result, @ReturnCode = @ReturnCode OUTPUT
--Select @ReturnCode  
  
END  

GO
/****** Object:  StoredProcedure [dbo].[spSaveInstrumentResultAU]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
-- =============================================  
-- Update 4/27/2017 Gladson - tblResultedTests can have ResultTest duplication with a Status of Cancelled.  
--         This procedure will only update ResultTest with Status of Pending or Hold.  
-- =============================================  
-- =============================================  
-- Update 5/17/2017 Hanane - Do not modify Entry Date when the result is modified  
-- =============================================  
  
CREATE PROCEDURE [dbo].[spSaveInstrumentResultAU]    
  
        @Accession varchar(100),  
        @TestName varchar(100),  
        @Result  varchar(100),  
        @Outcome varchar(50) = null,  
        @Status varchar(50),          
        @EnteredBy varchar(100),  
        @ResultFlag varchar(100)  
          
          
     
  
AS    
BEGIN    
 declare @iCount as int  
 declare @RecordUpdated as int  
 declare @ID as int  
   
DECLARE @ReflexHighValue decimal(20, 8)    
,@ReflexLowValue decimal(20, 8)    
,@ReflexLowTestCode varchar(50)    
,@ReflexHighTestCode varchar(50)    
,@ReflexInconsistantTestCode varchar(50)    
,@ReflexConsistantTestCode varchar(50)    
,@TestComment varchar(200)    
,@ResultTestCode varchar(100)    
,@InternalName varchar(100)    
    
DECLARE @ConfirmAllTests bit,    
  @ConfirmAllMeds bit,    
  @ConfirmConsistancy bit,    
  
  --4/27/2017 these parameters are not used anywhere in this procedure. commenting the code for now.  
  @EnteredByUser varchar(100) --5/17/17  Uncommented to be used in deciding if a result already exists  
  --@Prev_Result varchar(100)= NULL,    
  --@Prev_ResultFlag as varchar(max) = NULL,    
  --@Prev_Outcome varchar(1) = NULL    
     
  
 set @ID = 0;  
    
    
 --Get values for new reflex testing rules   
 SELECT @ConfirmAllTests = ConfirmAllTests, @ConfirmAllMeds = ConfirmAllMeds, @ConfirmConsistancy = ConfirmConsistancy  FROM dbo.tblAccessions  
 WHERE Accession = @Accession    
  
 --Check if record will be updated  
 select @RecordUpdated = count(Accession) from tblResultedTests   
 where Accession = @Accession and ResultTest = @Testname and Status In ('Pending', 'Hold')  
 --Retrieve ID for Audit  
 select @ID =  ID from tblResultedTests   
 where Accession = @Accession and ResultTest = @Testname and Status In ('Pending', 'Hold')  
   
 if( @ID <> 0 )  
   
 begin  
    
  --these parameters are not used anywhere in this procedure. commenting the code for now.  
  --SELECT @EnteredByUser = EnteredBy, @Prev_Result = Result, @Prev_ResultFlag = ResultFlag, @Prev_Outcome = Outcome FROM dbo.tblResultedTests  
  -- WHERE id = @ID;   
  SELECT @EnteredByUser = EnteredBy FROM tblResultedTests  
   WHERE id = @ID;   
    
  IF @EnteredByUser IS NULL  --First time to enter result  
   BEGIN   
  
  --Update result record  
  UPDATE tblResultedTests set  
  Result = @Result,  
  Status = @Status,  
  Outcome = @Outcome,  
  EnteredBy = @EnteredBy,  
  ResultFlag = @ResultFlag,  
    EntryDate = getdate(),   
    QSSLastUpdateID = @EnteredBy,    
    QSSUpdateDate = GETDATE()   
    WHERE id = @ID    --WHERE Accession = @Accession and ResultTest = @Testname and Status In ('Pending', 'Hold')  
     
   END  
  Else  
   BEGIN  
    --Update existing results  
    UPDATE tblResultedTests set  
    Result = @Result,  
    Status = @Status,  
    Outcome = @Outcome,  
    --EnteredBy = @EnteredBy,  
    ResultFlag = @ResultFlag,  
    --EntryDate = getdate()  -- Do not update entry date  
    QSSLastUpdateID = @EnteredBy,    
    QSSUpdateDate = GETDATE()  
    WHERE id = @ID   --WHERE Accession = @Accession and ResultTest = @Testname and Status In ('Pending', 'Hold')  
    
   END  
    
  --Check if Review record exisits  
  select @iCount = count(Accession) from tblReviewAccession where Accession = @Accession  
    
    
  if @RecordUpdated > 0  
  begin  
   --Capture Audit  
   Exec spAuditResultedTests @Accession = @Accession, @ID = @ID   
    
   if @iCount = 0  
   begin  
    insert into tblReviewAccession(Accession, QSSLastUpdatedByID, QSSLastUpdatedDate)  
     values(@Accession, @EnteredBy, getdate())  
   end  
  End   
    
  ----  
 --- Check if a Test Code needs to  be ordered    
    --SELECT @ResultTestCode = rtd.TestCode, @InternalName = rtd.InternalName, @ReflexLowValue = CAST(ISNULL(rtd.ReflexLowValue, 0) As Decimal(20, 8)), @ReflexHighValue = CAST(ISNULL(rtd.ReflexHighValue, 9999999) As Decimal(20, 8)), @ReflexLowTestCode = rtd.ReflexLowTestCode, @ReflexHighTestCode = rtd.ReflexHighTestCode    
    SELECT @ResultTestCode = rtd.TestCode, @InternalName = rtd.InternalName, @ReflexLowValue = CAST(ISNULL(rtd.ReflexLowValue, -9999999999) As Decimal(20, 8)),     
    @ReflexHighValue = CAST(ISNULL(rtd.ReflexHighValue, 9999999999) As Decimal(20, 8)), @ReflexLowTestCode = rtd.ReflexLowTestCode,     
    @ReflexHighTestCode = rtd.ReflexHighTestCode,@ReflexInconsistantTestCode = ReflexInconsistentTestCode,@ReflexConsistantTestCode = ReflexConsistentTestCode    
 FROM   tblResultedTestsDefinitions AS rtd WITH (nolock) INNER JOIN    
 tblResultedTests AS rt WITH (nolock) ON rtd.TestCode = rt.ResultTest INNER JOIN    
           tblResultCodeVersions ON rtd.TestCode = tblResultCodeVersions.TestCode AND rtd.Version = tblResultCodeVersions.CurrentVersion    
 WHERE rt.id =  @ID    
            
            
 IF NOT EXISTS ( SELECT OrderedTest FROM tblOrderedTests WHERE     
  Accession = @Accession and (OrderedTest = @ReflexLowTestCode or OrderedTest = @ReflexHighTestCode))    
 BEGIN    
       
    --    IF @Result != '' AND @Accession iS NOT NULL    
        IF @Result != '' AND @Accession iS NOT NULL AND  ISNUMERIC(@Result) = 1 AND @ConfirmAllTests = 1    
        BEGIN    
   IF CAST(@Result As Decimal(20, 8)) < @ReflexLowValue    
   BEGIN    
    --SET @TestComment = 'Created due to low result value for: ' + @ResultTestCode + ' Value was: ' + @Result    
    SET @TestComment = 'Created due to low result value for: ' + @InternalName + ' Value was: ' + @Result    
    EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @ReflexLowTestCode , @TestComment = @TestComment, @Count = 1    
     END    
   ELSE IF CAST(@Result As Decimal(20, 8)) >= @ReflexHighValue    
     BEGIN    
    --SET @TestComment = 'Created due to high result value for: ' + @ResultTestCode + ' Value was: ' + @Result    
    SET @TestComment = 'Created due to high result value for: ' + @InternalName + ' Value was: ' + @Result    
       EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @ReflexHighTestCode , @TestComment = @TestComment, @Count = 1    
             
   END    
  END    
      
  -- Reflexing for Alpha    
  If ISNUMERIC(@Result) =  0  AND @ConfirmAllTests = 1    
  BEGIN    
       
   DECLARE @AlphaReflex varchar(200)    
   Select @AlphaReflex = ReflexTestCode from tblResultedTestDecodes where TestCode = @ResultTestCode and Decode = @Result    
   if @AlphaReflex != ''    
   Begin    
    SET @TestComment = 'Test Created due to '+ @Result +' result value for: ' + @InternalName + ' Value was: ' + @Result    
    EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @AlphaReflex , @TestComment = @TestComment, @Count = 1    
   End    
       
  END     
      
  -- Reflexing Consistancy    
  If ISNUMERIC(@Result) =  1  AND @ConfirmConsistancy = 1 and @Outcome != ''    
   BEGIN    
       
   if @ReflexInconsistantTestCode != '' and @Outcome = 'I'    
   Begin    
    SET @TestComment = 'Test Created due to result inconsistant value for: ' + @InternalName + ' Value was: ' + @Result    
    EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @ReflexInconsistantTestCode, @TestComment = @TestComment, @Count = 1    
   End    
       
   if @ReflexConsistantTestCode != '' and @Outcome = 'C'    
   Begin    
    SET @TestComment = 'Test Created due to result consistant value for: ' + @InternalName + ' Value was: ' + @Result    
    EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @ReflexInconsistantTestCode, @TestComment = @TestComment, @Count = 1    
   End       
    
  END        
      
      
END    
   
   
  
   
 END    
   
  
END  
GO
/****** Object:  StoredProcedure [dbo].[spSaveInsuranceInfo]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveInsuranceInfo]
	@InsuranceCode as varchar(20),
	@Name as varchar(100),
    @Address as varchar(100),	
	@Address2 as varchar(100),
	@City as varchar(100),
	@State as varchar(100),	
	@Zip as varchar(20),
	@TelePhone as varchar(20),
	@Attention as varchar(100),
	@ContactName as varchar(100),
	@ContactPhone as varchar(100),
	@DiagnosisRequired as int,
	@FormRequired as int,
	@SubmitDays as varchar(20),
	@note1 as varchar(100),
	@note2 as varchar(100),
	@laborpcode as varchar(20),
	@NEICNumber as varchar(20),
	@ProviderNumber as varchar(20),
	@InsuranceType as varchar(100),
	@PendingWriteOff as int,
	@ExpectedAMT as varchar(20),
	@LabLink as varchar(100),
	@HCFABills as int,
	@ClaimType as varchar(3),
	@BillType as varchar(100), 
	@HCFA23 varchar(100) = NULL,
	@HCFA23Override varchar(200) = NULL,
	@HCFA24i varchar(100) = NULL,
	@HCFA24iOverride varchar(200) = NULL,
	@HCFA24j varchar(100) = NULL,
	@HCFA24jOverride varchar(200) = NULL,
	@HCFA33 varchar(100) = NULL,
	@HCFA33Override varchar(200) = NULL,
	@HCFA33a varchar(100) = NULL,
	@HCFA33aOverride varchar(200) = NULL,
	@HCFA33b varchar(100) = NULL,
	@HCFA33bOverride varchar(200) = NULL
	
AS
BEGIN
	declare @iCount as int
	select @iCount = count(InsuranceCode) from tblInsuranceCompanies where  InsuranceCode = @InsuranceCode
		if @iCount > 0
			begin
				update tblInsuranceCompanies set InsuranceCode = @InsuranceCode, Name = @Name, Address = @Address,
					 Address2 = @Address2 ,City = @City, State = @State,		 
					 Zip = @Zip, Telephone = @Telephone,  Attention = @Attention,
					 ContactName = @ContactName, ContactPhone = @ContactPhone, 
					 DiagnosisRequired = @DiagnosisRequired, FormRequired = @FormRequired, SubmitDays = @SubmitDays, 
					 Note1 = @note1, Note2 = @note2, LaborpCode = @laborpcode, NEICNumber = @NEICNumber, ProviderNumber = @ProviderNumber,
					 InsuranceType = @InsuranceType, PendingWriteOff = @PendingWriteOff, ExpectedAMT = @ExpectedAMT, LabLink = @LabLink,
					 HCFABills = @HCFABills, ClaimType = @ClaimType, BillType = @BillType, HCFA23 = @HCFA23, HCFA23Override = @HCFA23Override
					 , HCFA24i = @HCFA24i, HCFA24iOverride = @HCFA24iOverride, HCFA24j = @HCFA24j, HCFA24jOverride = @HCFA24jOverride, 
					 HCFA33 = @HCFA33, HCFA33Override = @HCFA33Override, HCFA33a = @HCFA33a, HCFA33aOverride = @HCFA33aOverride, HCFA33b = @HCFA33b, HCFA33bOverride = @HCFA33bOverride
					 
				where  InsuranceCode = @InsuranceCode
			end
		else 
			begin	
				insert into tblInsuranceCompanies(InsuranceCode, Name, Address, Address2,
							 City, State, Zip, telephone, Attention, ContactName, ContactPhone,
							 DiagnosisRequired, FormRequired, SubmitDays, Note1, Note2, LaborpCode,
							 NEICNumber, ProviderNumber, InsuranceType, PendingWriteOff, ExpectedAMT, 
							 LabLink, HCFABills, ClaimType, BillType, HCFA23, HCFA23Override, HCFA24i, HCFA24iOverride, HCFA24j, HCFA24jOverride, HCFA33, HCFA33Override, HCFA33a, HCFA33aOverride, HCFA33b, HCFA33bOverride)
				 
				values(		 @InsuranceCode, @Name, @Address, @Address2,
							 @City, @State, @Zip, @telephone, @Attention, @ContactName, @ContactPhone,
							 @DiagnosisRequired, @FormRequired, @SubmitDays, @Note1, @Note2, @LaborpCode,
							 @NEICNumber, @ProviderNumber, @InsuranceType, @PendingWriteOff, @ExpectedAMT, 
							 @LabLink, @HCFABills, @ClaimType, @BillType, @HCFA23, @HCFA23Override, @HCFA24i, @HCFA24iOverride, @HCFA24j, @HCFA24jOverride, @HCFA33, @HCFA33Override, @HCFA33a, @HCFA33aOverride, @HCFA33b, @HCFA33bOverride)
			end		
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveInternalComment]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveInternalComment]

	@Accession as varchar(100),
	@Comment as varchar (max)
	
AS
BEGIN

		update tblAccessions set InternalComment = @Comment
		 where Accession = @Accession 

END
GO
/****** Object:  StoredProcedure [dbo].[spSaveLabCommentDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveLabCommentDefinitions]

	@Code as varchar(100),
	@Comment as varchar(max)
	
AS
BEGIN

	declare @iCount as int
	select @iCount = count(Code) from tblLabCommentDefinitions where  Code = @Code

	if @iCount > 0
	begin
		update tblLabCommentDefinitions  set Comment = @Comment
		 where Code = @Code 
	end
	else
	begin
		insert into  tblLabCommentDefinitions ( Code, Comment)		 
			values( @Code, @Comment)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveLabDefinitionsA]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveLabDefinitionsA]
	@a_LabName as varchar(100),
	@a_LabAdmin as varchar(100),
    @a_Address1 as varchar(100),	
	@a_Address2 as varchar(100),
	@a_City as varchar(100),
	@a_State as varchar(20),	
	@a_Zip as varchar(50),
	@a_LabPhone as varchar(50),
	@a_LabMedicare as varchar(50),
	@a_LabMedicaid as varchar(50),
	@a_LabTaxPayerID as varchar(50),
	@a_LabNPI as varchar(50),
	@a_LabNameonForm as varchar(100)
AS
BEGIN
	--declare @iCount as int
	--select @iCount = count(a_LabName) from tblLabDefinitions where  a_LabName = @a_LabName
	--	if @iCount > 0
			begin
					update tblLabDefinitions set a_LabName = @a_LabName, a_LabAdmin = @a_LabAdmin, a_LabAddress1 = @a_Address1,
					 a_LabAddress2 = @a_Address2 ,a_LabCity = @a_City, a_LabState = @a_State,		 
					 a_LabZip = @a_Zip, a_LabPhone = @a_LabPhone,  a_LabMedicare = @a_LabMedicare,
					 a_LabMedicaid = @a_LabMedicaid, a_TaxPayerID = @a_LabTaxPayerID, 
					 a_LabNPI = @a_LabNPI, a_LabNameonForm = @a_LabNameonForm;
			end
		--else 
		--	begin
		--		insert into  tblLabDefinitions(a_LabName, a_LabAdmin, a_LabAddress1, a_LabAddress2,
		--					 a_LabCity, a_LabState, a_LabZip, a_LabPhone, a_LabMedicare,a_LabMedicaid,a_TaxpayerID,
		--					 a_LabNPI,a_LabNameonForm)
				 
		--		values(@a_LabName, @a_LabAdmin, @a_Address1, @a_Address2, @a_City, @a_State,
		--				@a_Zip, @a_LabPhone,@a_labmedicare,@a_LabMedicaid,@a_LabTaxPayerID,
		--				@a_LabNPI,@a_LabNameonForm)
		--	end		
		
		
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveLabDefinitionsP]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveLabDefinitionsP]
	@p_LabName as varchar(100),
	@p_LabAdmin as varchar(100),
    @p_Address1 as varchar(100),	
	@p_Address2 as varchar(100),
	@p_City as varchar(100),
	@p_State as varchar(20),	
	@p_Zip as varchar(50),
	@p_LabPhone as varchar(50),
	@p_LabMedicare as varchar(50),
	@p_LabMedicaid as varchar(50),
	@p_LabTaxPayerID as varchar(50),
	@p_LabNPI as varchar(50),
	@p_LabNameonForm as varchar(100)
AS
BEGIN
	declare @iCount as int
	select @iCount = count(id) from tblLabDefinitions where  id = 1
		if @iCount > 0
			begin
					update tblLabDefinitions set p_LabName = @p_LabName, p_LabAdmin = @p_LabAdmin, p_LabAddress1 = @p_Address1,
					 p_LabAddress2 = @p_Address2 ,p_LabCity = @p_City, p_LabState = @p_State,		 
					 p_LabZip = @p_Zip, p_LabPhone = @p_LabPhone,  p_LabMedicare = @p_LabMedicare,
					 p_LabMedicaid = @p_LabMedicaid, p_TaxpayerID = @p_LabTaxPayerID, 
					 p_LabNPI = @p_LabNPI, p_LabNameonForm = @p_LabNameonForm;
			end
		else 
			begin	
				insert into tblLabDefinitions( id, p_LabName, p_LabAdmin, p_LabAddress1, p_LabAddress2,
							 p_LabCity, p_LabState, p_LabZip, p_LabPhone, p_LabMedicare,p_LabMedicaid,p_TaxpayerID,
							 p_LabNPI,p_LabNameonForm)
				 
				values( 1, @p_LabName, @p_LabAdmin, @p_Address1, @p_Address2, @p_City, @p_State,
						@p_Zip, @p_LabPhone,@p_labmedicare,@p_LabMedicaid,@p_LabTaxPayerID,
						@p_LabNPI,@p_LabNameonForm)
			end		
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveLabReportImage]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveLabReportImage]
	@Accession varchar(100),
	@LabReportImage varbinary(max)

AS
BEGIN
		update tblAccessions set LabReportImage = @LabReportImage where  Accession = @Accession   
		--if null means there was an error
		If @LabReportImage is null exec spAddToResultsReview @Accession, 'SendingError'
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveLabSetUp]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveLabSetUp]
	@LabCode as varchar(20),
	@LabName as varchar(100),
	@LabAddress as varchar(100),
    @LabCity as varchar(100),
	@LabState as varchar(20),	
	@LabZip as varchar(50),
	@LabPhone as varchar(50),
	@LabEmail as varchar(50),
	@LabFax as varchar(50), 
	@LabDirector as varchar(150), 
	@CLIAnumber as varchar(50)
	
AS
BEGIN


declare @iCount as int
	select @iCount = count(id) from tblLabs where  id = 1
		if @iCount > 0
			begin
					update tblLabs set LabCode = @LabCode, LabName = @LabName, LabAddress = @LabAddress,
					 LabCity = @LabCity, LabState = @LabState,		 
					 LabZip = @LabZip, LabPhone = @LabPhone,  LabEmail = @LabEmail,
					 LabFax = @LabFax, LabDirector = @LabDirector, CLIAnumber = @CLIAnumber;
			end
		else 
			begin	
				 insert into tblLabs(LabCode, LabName, LabAddress, 
							 LabCity, LabState, LabZip, LabPhone, LabEmail,
							 LabFax, LabDirector, CLIAnumber)
   values( @LabCode, @LabName, @LabAddress, @LabCity, @LabState,
						@LabZip, @LabPhone,@LabEmail,
						@LabFax, @LabDirector, @CLIAnumber)
			end		
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveMailoutComments]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spSaveMailoutComments] 
	
	@Accession varchar(100),
	@MailoutLabCode varchar(20), 
	@MailoutComment VARCHAR(500)
AS
BEGIN
	SET NOCOUNT ON;
	IF EXISTS(SELECT MOAccession from tblMailoutOrders WHERE MOAccession = @Accession and MailoutLabCode = @MailoutLabCode)
	BEGIN
		UPDATE tblMailoutOrders SET MailoutComment = @MailoutComment WHERE MOAccession = @Accession and MailoutLabCode = @MailoutLabCode
	END
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveMailoutLabDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveMailoutLabDefinitions]      
      
 @LabCode as varchar(100),      
 @Name as varchar(200),      
    @Address as varchar(200),       
 @Address2 as varchar(200),      
 @City as varchar(100),      
 @State as varchar(100),       
 @Zip as varchar(20),      
 @LabPhone as varchar(100),      
 @LabContact as varchar(100),      
 @LabNPI as varchar(20)= NULL,      
 @AccountPhone as varchar(100),      
 @AccountContact as varchar(100),      
 @RepPhone as varchar(100),      
 @RepContact as varchar(100),      
 @PickupTimes as varchar(100),      
 @ProviderID as varchar(100),      
    @ReportCode as varchar(100)  ,    
 @DisplayText as varchar(20),  
 @AccountNumber as varchar(100)    
        
AS      
BEGIN      
      
 declare @iCount as int      
 select @iCount = count(LabCode) from tblMailoutLabs where  LabCode = @LabCode      
      
 if @iCount > 0      
 begin      
  update tblMailoutLabs set Name = @Name, Address = @Address,      
   Address2  = @Address2 ,City = @City, State = @State,         
   Zip = @Zip, LabPhone =@LabPhone,  LabContact =@LabContact, LabNPI = @LabNPI,      
   AccountPhone = @AccountPhone, AccountContact =@AccountContact,       
   RepPhone = @RepPhone, RepContact =@RepContact,PickupTimes =@PickupTimes,      
   ProviderID =@ProviderID,ReportCode =@ReportCode      
    ,DisplayText=@DisplayText,AccountNumber=@AccountNumber     
   where LabCode = @LabCode       
 end      
 else      
 begin      
  insert into  tblMailoutLabs( LabCode, Name, Address, Address2,      
               City, State, Zip, LabPhone, LabContact, LabNPI, AccountPhone,AccountContact,      
               RepPhone,RepContact,PickupTimes,ProviderID,ReportCode,DisplayText,AccountNumber)      
         
   values( @LabCode, @Name, @Address, @Address2, @City, @State,      
          @Zip, @LabPhone,@LabContact,@LabNPI, @AccountPhone,@AccountContact,      
               @RepPhone,@RepContact,@PickupTimes,@ProviderID,@ReportCode,@DisplayText,@AccountNumber)      
 end      
END   
--insert into tblmailoutlabs( LabCode, Name, Address, Address2,      
--               City, State, Zip, LabPhone, LabContact, LabNPI, AccountPhone,AccountContact,      
--               RepPhone,RepContact,PickupTimes,ProviderID,ReportCode,DisplayText,AccountNumber)values('ABC','','','','','','','','','','','','','','','','','','123456') 
GO
/****** Object:  StoredProcedure [dbo].[spSaveMailoutlabResult]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveMailoutlabResult]  

        @Accession varchar(100),
        @TestName varchar(100),
        @Result  varchar(100),
        @Outcome varchar(50) = null,
        @QSSLastUpdatedByID varchar(20)
       
AS  
BEGIN  
	Declare @ReturnCode int
	UPDATE tblResultedTests set
	--Result = @Result,
	Result = REPLACE(@Result, '999999', '-0' ),
	Status = 'Final',
	Outcome = @Outcome, 
	QSSUpdateDate = getdate(),
	QSSLastUpdateID = @QSSLastUpdatedByID
	where Accession = @Accession and ResultTest = @Testname and Status != 'Final'
   
   exec spAddToResultsReview @Accession = @Accession, @QSSLastUpdatedByID = @QSSLastUpdatedByID
   --Call to see if result needs to be placed on hold - would be outside hold limits
	--Must be the last thing executed, as it will depend on the state of the record after all
	--processing has been done.
	Exec spSaveTestsAsHold_OnSave @Accession, @TestName,  @Result, @ReturnCode = @ReturnCode OUTPUT
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveMailoutlabResultUnsolicitedACCUREFERENCE]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveMailoutlabResultUnsolicitedACCUREFERENCE]      
    
        @Accession varchar(100),    
        @PerformedTestCode varchar(100),    
        @TestCode varchar(100),    
        @Result  varchar(100),    
        @Outcome varchar(50) = null,    
        @QSSLastUpdatedByID varchar(20),    
        @Units varchar(100),    
        @Cutoffs varchar(200),    
        @Worksheet varchar(100),    
        @Version int,    
        @ResultFlag varchar(100),    
        @ResultComment varchar(max),    
        @Status varchar(50),     
        @PerformedTestCodeName varchar(100),    
        @TestName varchar(100) = 'MISC'    
           
AS      
BEGIN      
DECLARE @newVersion as int = @Version    
DECLARE @accessionTestcodeVersion as int= @Version    
    
IF @Result = 'NEGATIVE' AND @Outcome = 'I'    
BEGIN    
 SET @ResultFlag = 'N'    
END    
IF @Result = '.'    
begin    
 set @Result = ''    
end    
--ADDED ON 2020-04-08********    
If @Status = 'Cancelled'    
begin    
 set @Status = 'Hold'    
end    
--**************************    
    
IF NOT EXISTS(SELECT TestCode from tblResultedTestsDefinitions where TestCode = @TestCode)    
BEGIN    
 IF NOT EXISTS(SELECT TestCode from tblResultCodeVersions where TestCode = @TestCode)    
 BEGIN    
  INSERT INTO tblResultCodeVersions (TestCode, CurrentVersion, QSSLastUpdateID, QSSUpdateDate)    
  VALUES (@TestCode, 0, 'ACCUREFERENCE', GetDate())    
 END    
     
 INSERT INTO tblResultedTestsDefinitions (TestCode, InternalName, ExternalName, Worksheet, Department, DefaultValue, NullFlag,     
 ReviewFlag, Decimals, Units, Comment, SuppressFlag, SecureFlag, LOINCcode, QSSCreatedByID, QSSCreatedDate,     
 ConsistentCommentCode, InconsistentCommentCode, CutoffLowLimit, CutoffHighLimit, DynamicLowLimit, DynamicHighLimit, ReportNormalRangeLow,    
 ReportNormalRangeHigh, ReportAs, ExpectedWindow, UseAlpha, AutoReleaseFlag, DecodedFlagRequired, MedicationData, Calculation, ReflexHighValue,     
 ReflexLowTestCode, ReflexHighTestCode, ReflexLowValue, UseRangeLimits, alphaNormal, UseCutoffLimit, MedicationDataIndirect, AbnormalCommentCode,     
 Version, LowReportAs, ReflexInconsistentTestCode, ReflexConsistentTestCode)    
 VALUES (@TestCode, @TestName, @TestName, @Worksheet, '', '', 'False',     
 'False', '', '', '', 'False', 'False', '', 'ACCUREFERENCE', GETDATE(),     
 '', '', '', '','', '', '',     
 '', '', '', 'False', 'False', 'False', '', '', '',     
 '', '', '', 'False', '', 'False', '', '',     
 0, '', '', '')    
     
 INSERT INTO tblResultedTestsParams (ResultedTest, MinAge, MaxAge, Sex, LowLimit, NormalLowLimit, CriticalLowLimit, AutoReleaseLowLimit, HighLimit,     
 NormalHighLimit, CriticalHighLimit, AutoReleaseHighLimit, DisplayResultAs, DynamicLow, DynamicLowReportAs, DynamicHigh, DynamicHighReportAs, Version    
 , QSSCreatedByID, QSSCreatedDate)    
 VALUES (@TestCode, 0, 999, 'M', '0', '', '', '', '999999',     
 '', '', '', '', '', '', '', '', 0    
 , 'ACCUREFERENCE', getdate())    
 INSERT INTO tblResultedTestsParams (ResultedTest, MinAge, MaxAge, Sex, LowLimit, NormalLowLimit, CriticalLowLimit, AutoReleaseLowLimit, HighLimit,     
 NormalHighLimit, CriticalHighLimit, AutoReleaseHighLimit, DisplayResultAs, DynamicLow, DynamicLowReportAs, DynamicHigh, DynamicHighReportAs, Version    
 , QSSCreatedByID, QSSCreatedDate)    
 VALUES (@TestCode, 0, 999, 'F', '0', '', '', '', '999999',     
 '', '', '', '', '', '', '', '', 0    
 , 'ACCUREFERENCE', getdate())    
     
END    
ELSE    
BEGIN    
 IF NOT EXISTS(SELECT TestCode from tblResultedTestsDefinitions where TestCode = @TestCode AND InternalName = @TestName)        
 BEGIN    
  SET @newVersion  = @Version + 1    
  INSERT INTO tblResultedTestsDefinitions (TestCode, InternalName, ExternalName, Worksheet, Department, DefaultValue, NullFlag,     
 ReviewFlag, Decimals, Units, Comment, SuppressFlag, SecureFlag, LOINCcode, QSSCreatedByID, QSSCreatedDate,     
 ConsistentCommentCode, InconsistentCommentCode, CutoffLowLimit, CutoffHighLimit, DynamicLowLimit, DynamicHighLimit, ReportNormalRangeLow,    
 ReportNormalRangeHigh, ReportAs, ExpectedWindow, UseAlpha, AutoReleaseFlag, DecodedFlagRequired, MedicationData, Calculation, ReflexHighValue,     
 ReflexLowTestCode, ReflexHighTestCode, ReflexLowValue, UseRangeLimits, alphaNormal, UseCutoffLimit, MedicationDataIndirect, AbnormalCommentCode,     
 Version, LowReportAs, ReflexInconsistentTestCode, ReflexConsistentTestCode)    
 VALUES (@TestCode, @TestName, @TestName, @Worksheet, '', '', 'False',     
 'False', '', '', '', 'False', 'False', '', 'ACCUREFERENCE', GETDATE(),     
 '', '', '', '','', '', '',     
 '', '', '', 'False', 'False', 'False', '', '', '',     
 '', '', '', 'False', '', 'False', '', '',     
   @newVersion, '', '', '')        
     
   UPDATE tblResultCodeVersions SET CurrentVersion = @newVersion, QSSLastUpdateID = @QSSLastUpdatedByID, QSSUpdateDate = GETDATE()    
   WHERE TestCode =  @TestCode       
   --UPDATE tblResultedTestsParams SET Version = @newVersion   
   --WHERE ResultedTest = @TestCode  

   INSERT INTO tblResultedTestsParams (ResultedTest, MinAge, MaxAge, Sex, LowLimit, NormalLowLimit, CriticalLowLimit, AutoReleaseLowLimit, HighLimit,   
 NormalHighLimit, CriticalHighLimit, AutoReleaseHighLimit, DisplayResultAs, DynamicLow, DynamicLowReportAs, DynamicHigh, DynamicHighReportAs, Version  
 , QSSCreatedByID, QSSCreatedDate)  
 VALUES (@TestCode, 0, 999, 'M', '0', '', '', '', '999999',   
 '', '', '', '', '', '', '', '', @newVersion  
 , 'ACCUREFERENCE', getdate())  
 INSERT INTO tblResultedTestsParams (ResultedTest, MinAge, MaxAge, Sex, LowLimit, NormalLowLimit, CriticalLowLimit, AutoReleaseLowLimit, HighLimit,   
 NormalHighLimit, CriticalHighLimit, AutoReleaseHighLimit, DisplayResultAs, DynamicLow, DynamicLowReportAs, DynamicHigh, DynamicHighReportAs, Version  
 , QSSCreatedByID, QSSCreatedDate)  
 VALUES (@TestCode, 0, 999, 'F', '0', '', '', '', '999999',   
 '', '', '', '', '', '', '', '', @newVersion  
 , 'ACCUREFERENCE', getdate())  
   

END    
END      
SELECT @accessionTestcodeVersion = Version from tblResultedTestsDefinitions where TestCode = @TestCode AND InternalName = @TestName    
--IF NOT EXISTS(SELECT TestCode from tblResultedTestsDefinitions where TestCode = @TestCode)    
--BEGIN    
-- IF NOT EXISTS(SELECT TestCode from tblResultCodeVersions where TestCode = @TestCode)    
-- BEGIN    
-- INSERT INTO tblResultCodeVersions (TestCode, CurrentVersion, QSSLastUpdateID, QSSUpdateDate)    
--  VALUES (@TestCode, 0, 'ACCUREFERENCE', GetDate())    
-- END    
     
-- INSERT INTO tblResultedTestsDefinitions (TestCode, InternalName, ExternalName, Worksheet, Department, DefaultValue, NullFlag,     
-- ReviewFlag, Decimals, Units, Comment, SuppressFlag, SecureFlag, LOINCcode, QSSCreatedByID, QSSCreatedDate,     
-- ConsistentCommentCode, InconsistentCommentCode, CutoffLowLimit, CutoffHighLimit, DynamicLowLimit, DynamicHighLimit, ReportNormalRangeLow,    
-- ReportNormalRangeHigh, ReportAs, ExpectedWindow, UseAlpha, AutoReleaseFlag, DecodedFlagRequired, MedicationData, Calculation, ReflexHighValue,     
-- ReflexLowTestCode, ReflexHighTestCode, ReflexLowValue, UseRangeLimits, alphaNormal, UseCutoffLimit, MedicationDataIndirect, AbnormalCommentCode,     
-- Version, LowReportAs, ReflexInconsistentTestCode, ReflexConsistentTestCode)    
-- VALUES (@TestCode, @TestName, @TestName, '', '', '', 'False',     
-- 'False', '', '', '', 'False', 'False', '', 'ACCUREFERENCE', GETDATE(),     
-- '', '', '', '','', '', '',     
-- '', '', '', 'False', 'False', 'False', '', '', '',     
-- '', '', '', 'False', '', 'False', '', '',     
-- 0, '', '', '')    
     
-- INSERT INTO tblResultedTestsParams (ResultedTest, MinAge, MaxAge, Sex, LowLimit, NormalLowLimit, CriticalLowLimit, AutoReleaseLowLimit, HighLimit,     
-- NormalHighLimit, CriticalHighLimit, AutoReleaseHighLimit, DisplayResultAs, DynamicLow, DynamicLowReportAs, DynamicHigh, DynamicHighReportAs, Version)    
-- VALUES (@TestCode, 0, 999, 'M', '0', '', '', '', '999999',     
-- '', '', '', '', '', '', '', '', 0)    
-- INSERT INTO tblResultedTestsParams (ResultedTest, MinAge, MaxAge, Sex, LowLimit, NormalLowLimit, CriticalLowLimit, AutoReleaseLowLimit, HighLimit,     
-- NormalHighLimit, CriticalHighLimit, AutoReleaseHighLimit, DisplayResultAs, DynamicLow, DynamicLowReportAs, DynamicHigh, DynamicHighReportAs, Version)    
-- VALUES (@TestCode, 0, 999, 'F', '0', '', '', '', '999999',     
-- '', '', '', '', '', '', '', '', 0)    
     
--END    
    
 -- --IF EXISTS(SELECT TestCode from tblResultedTestsDefinitions where TestCode = @TestCode)    
 -- --BEGIN    
 --if NOT EXISTS (select PerformedTest from tblPerformedTestsDefinitions where PerformedTest = @PerformedTestCode)    
  --BEGIN    
 -- INSERT INTO tblPerformedTestsDefinitions (PerformedTest, InternalDescription, ExternalDescription, ResultTestCode, PerformedBy, MailoutFlag,    
 -- MailoutLab, RequiredSpeciments, RequiredVolume, Preservative, ShippingTemp, Instructions, Turnaround, AdditionalInfoScreen, AdditionalInfoScreenTemplate,    
 -- QSSCreatedByID, QSSCreatedDate)    
 -- VALUES (@PerformedTestCode, @PerformedTestCodeName, @PerformedTestCodeName, @TestCode, 'AccuReference', 'M', 'ACCUREFERENCE', '', '', '', 'ambient', '', '', 'False', '', @QSSLastUpdatedByID,     
 -- GetDate())    
 --END    
     
     
 if NOT EXISTS (select PerformedTest from tblOrderedTests where Accession = @Accession and PerformedTest = @PerformedTestCode)     
 BEGIN    
  INSERT INTO tblOrderedTests (Accession, OrderedTest, PerformedTest, BillStatus, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate)    
  VALUES (@Accession, @PerformedTestCode,@PerformedTestCode, 'BILL', @QSSLastUpdatedByID, GetDate(), @QSSLastUpdatedByID, GetDate())    
 END    
 ELSE    
 BEGIN    
  UPDATE tblOrderedTests     
  SET QSSLastUpdateID = @QSSLastUpdatedByID    
  where Accession = @Accession and PerformedTest = @PerformedTestCode    
 END    
     
     
 if exists (select * from tblResultedTests where Accession = @Accession and ResultTest = @TestCode and PerformedTest = @PerformedTestCode)    
 BEGIN    
  UPDATE tblResultedTests set    
  Result = @Result,    
  --Status = 'Final',    
  Status = @Status,    
  Outcome = @Outcome,     
  ResultComment = @ResultComment,    
  ResultFlag = @ResultFlag,    
  Units = @Units,    
  NormalRange = @Cutoffs,    
  QSSUpdateDate = getdate(),    
  QSSLastUpdateID = @QSSLastUpdatedByID    
  , SiteID = @QSSLastUpdatedByID    
  where Accession = @Accession and ResultTest = @TestCode and PerformedTest = @PerformedTestCode--and Status != 'Final'    
 END    
 ELSE    
 BEGIN    
  Insert into tblResultedTests (Accession, PerformedTest, ResultTest, Worksheet, Result, ResultFlag, NormalRange, Units,     
         Status, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion, Outcome, ResultComment,    
        Version, SiteID, EnteredBy)    
    values (@Accession, @PerformedTestCode, @TestCode, @Worksheet, @Result, @ResultFlag, @Cutoffs, @Units,     
         @Status, @QSSLastUpdatedByID, GetDate(), @QSSLastUpdatedByID, GetDate(), 0, @Outcome, @ResultComment,    
        @accessionTestcodeVersion, @QSSLastUpdatedByID, @QSSLastUpdatedByID)    
    exec spAddToResultsReview @Accession = @Accession, @QSSLastUpdatedByID = @QSSLastUpdatedByID    
   END    
   exec spAuditResultedTestsFromMailout @Accession = @Accession, @PerformedTest = @PerformedTestCode, @ResultTest = @TestCode, @Version = @accessionTestcodeVersion    
 -- END       
 DECLARE @rowid as varchar(100)    
set @rowid=(select id from tblresultedtests where accession=@accession and ResultTest = @TestCode and PerformedTest = @PerformedTestCode  and QSSLastUpdateID=@QSSLastUpdatedByID )    
--exec spaddtocalllist @id=@rowid    
--Call to see if result needs to be placed on hold - would be outside hold limits    
--Must be the last thing executed, as it will depend on the state of the record after all    
--processing has been done.    
Declare @ReturnCode int    
Exec spSaveTestsAsHold_OnSave @Accession, @TestCode,  @Result, @ReturnCode = @ReturnCode OUTPUT    
END    
GO
/****** Object:  StoredProcedure [dbo].[spSaveMailoutlabResultUnsolicitedSUNRISE]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
-- =============================================        
-- Update 12/21/2018 Hanane - QSSFinalizedDate is updated only the first time the result is finalized         
-- =============================================       
CREATE PROCEDURE [dbo].[spSaveMailoutlabResultUnsolicitedSUNRISE]          
        
        @Accession varchar(100),        
        @PerformedTestCode varchar(100),        
        @TestCode varchar(100),        
        @Result  varchar(100),        
        @Outcome varchar(50) = null,        
        @QSSLastUpdatedByID varchar(20),        
        @Units varchar(100),        
        @Cutoffs varchar(200),        
        @Worksheet varchar(100),        
        @Version int,        
        @ResultFlag varchar(100),        
        @ResultComment varchar(max),        
        @Status varchar(50),         
        @PerformedTestCodeName varchar(100),        
        @TestName varchar(100) = 'MISC',        
  @AccessionComment varchar(max)        
               
AS          
BEGIN          
        
        
IF @Result = 'NEGATIVE' AND @Outcome = 'I'        
BEGIN        
 SET @ResultFlag = 'N'        
END        
        
        
IF NOT EXISTS(SELECT TestCode from tblResultedTestsDefinitions where TestCode = @TestCode)        
BEGIN        
 INSERT INTO tblResultCodeVersions (TestCode, CurrentVersion, QSSLastUpdateID, QSSUpdateDate)        
 VALUES (@TestCode, 0, 'SUNRISE', GetDate())        
 INSERT INTO tblResultedTestsDefinitions (TestCode, InternalName, ExternalName, Worksheet, Department, DefaultValue, NullFlag,         
 ReviewFlag, Decimals, Units, Comment, SuppressFlag, SecureFlag, LOINCcode, QSSCreatedByID, QSSCreatedDate,         
 ConsistentCommentCode, InconsistentCommentCode, CutoffLowLimit, CutoffHighLimit, DynamicLowLimit, DynamicHighLimit, ReportNormalRangeLow,        
 ReportNormalRangeHigh, ReportAs, ExpectedWindow, UseAlpha, DecodedFlagRequired, MedicationData, Calculation, ReflexHighValue,         
 ReflexLowTestCode, ReflexHighTestCode, ReflexLowValue, UseRangeLimits, alphaNormal, UseCutoffLimit, MedicationDataIndirect, AbnormalCommentCode,         
 Version, LowReportAs, ReflexInconsistentTestCode, ReflexConsistentTestCode)        
 VALUES (@TestCode, @TestName, @TestName, '', '', '', 'False',         
 'False', '', '', '', 'False', 'False', '', 'SUNRISE', GETDATE(),         
 '', '', '', '','', '', '',         
 '', '', '',  'False', 'False', '', '', '',         
 '', '', '', 'False', '', 'False', '', '',         
 0, '', '', '')        
         
 INSERT INTO tblResultedTestsParams (ResultedTest, MinAge, MaxAge, Sex, LowLimit, NormalLowLimit, CriticalLowLimit, AutoReleaseLowLimit, HighLimit,         
 NormalHighLimit, CriticalHighLimit, AutoReleaseHighLimit, DisplayResultAs, DynamicLow, DynamicLowReportAs, DynamicHigh, DynamicHighReportAs, Version)        
 VALUES (@TestCode, 0, 999, 'M', '0', '', '', '', '999999',         
 '', '', '', '', '', '', '', '', 0)        
 INSERT INTO tblResultedTestsParams (ResultedTest, MinAge, MaxAge, Sex, LowLimit, NormalLowLimit, CriticalLowLimit, AutoReleaseLowLimit, HighLimit,         
 NormalHighLimit, CriticalHighLimit, AutoReleaseHighLimit, DisplayResultAs, DynamicLow, DynamicLowReportAs, DynamicHigh, DynamicHighReportAs, Version)        
 VALUES (@TestCode, 0, 999, 'F', '0', '', '', '', '999999',         
 '', '', '', '', '', '', '', '', 0)        
         
END        
        
  --IF EXISTS(SELECT TestCode from tblResultedTestsDefinitions where TestCode = @TestCode)        
  --BEGIN        
 if NOT EXISTS (select PerformedTest from tblPerformedTestsDefinitions where PerformedTest = @PerformedTestCode)        
 BEGIN        
  INSERT INTO tblPerformedTestsDefinitions (PerformedTest, InternalDescription, ExternalDescription, ResultTestCode, PerformedBy, MailoutFlag,        
  RequiredSpeciments, RequiredVolume, Preservative, ShippingTemp, Instructions, Turnaround, AdditionalInfoScreen, AdditionalInfoScreenTemplate,        
  QSSCreatedByID, QSSCreatedDate)        
  VALUES (@PerformedTestCode, @PerformedTestCodeName, @PerformedTestCodeName, @TestCode, 'SUNRISE', 'M', '', '', '', 'ambient', '', '', 'False', '', @QSSLastUpdatedByID,         
  GetDate())        
 END        
         
         
 if NOT EXISTS (select PerformedTest from tblOrderedTests where Accession = @Accession and PerformedTest = @PerformedTestCode)         
 BEGIN        
  INSERT INTO tblOrderedTests (Accession, OrderedTest, PerformedTest, BillStatus, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate)        
  VALUES (@Accession, @PerformedTestCode,@PerformedTestCode, 'BILL', @QSSLastUpdatedByID, GetDate(), @QSSLastUpdatedByID, GetDate())        
 END        
 ELSE        
 BEGIN        
  UPDATE tblOrderedTests         
  SET QSSLastUpdateID = @QSSLastUpdatedByID        
  where Accession = @Accession and PerformedTest = @PerformedTestCode        
 END        
 ---- 12/21/2018 Hanane Set QSSFinalizedDate      
 -- Declare @QSSFinalizedDate datetime = NULL      
 --  select @QSSFinalizedDate=QSSFinalizedDate from tblresultedtests WHERE  Accession = @Accession and ResultTest = @TestCode       
 --   if @QSSFinalizedDate is NULL      
 --   Begin       
 --    If @Status='Final'      
 --    set @QSSFinalizedDate=getdate()      
 --   End      
    IF EXISTS (SELECT * FROM tblAccessions WHERE ACCESSION=@ACCESSION)
	BEGIN 
	UPDATE tblAccessions SET ExternalComments =@AccessionComment WHERE ACCESSION=@ACCESSION
	END        
 if exists (select * from tblResultedTests where Accession = @Accession and ResultTest = @TestCode)        
 BEGIN       
         
         
        
  UPDATE tblResultedTests set        
  Result = @Result,        
  --Status = 'Final',        
  Status = @Status,        
  Outcome = @Outcome,         
  ResultComment = @ResultComment,        
  ResultFlag = @ResultFlag,        
  Units = @Units,        
  NormalRange = @Cutoffs,        
  QSSUpdateDate = getdate(),        
  QSSLastUpdateID = @QSSLastUpdatedByID ,       
  SiteID = @QSSLastUpdatedByID       
 -- QSSFinalizedDate=@QSSFinalizedDate      
  where Accession = @Accession and ResultTest = @TestCode --and Status != 'Final'        
 END        
 ELSE        
 BEGIN        
  Insert into tblResultedTests (Accession, PerformedTest, ResultTest, Worksheet, Result, ResultFlag, NormalRange, Units,         
         Status, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion, Outcome, ResultComment,        
        Version, SiteID)        
    values (@Accession, @PerformedTestCode, @TestCode, @Worksheet, @Result, @ResultFlag, @Cutoffs, @Units,         
         @Status, @QSSLastUpdatedByID, GetDate(), @QSSLastUpdatedByID, GetDate(), 0, @Outcome, @ResultComment,        
        @Version, @QSSLastUpdatedByID)        
    exec spAddToResultsReview @Accession = @Accession, @QSSLastUpdatedByID = @QSSLastUpdatedByID        
   END        
   exec spAuditResultedTestsFromMailout @Accession = @Accession, @PerformedTest = @PerformedTestCode, @ResultTest = @TestCode, @Version = @Version        
 -- END
--Call to see if result needs to be placed on hold - would be outside hold limits
--Must be the last thing executed, as it will depend on the state of the record after all
--processing has been done.
Declare @ReturnCode int
Exec spSaveTestsAsHold_OnSave @Accession, @TestCode,  @Result, @ReturnCode = @ReturnCode OUTPUT
END 

GO
/****** Object:  StoredProcedure [dbo].[spSaveMailoutOrders]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveMailoutOrders]   
@MailoutLabCode varchar(20) ,  
@MOAccession varchar(100),  
@PatientID varchar(100),  
@MailoutOrderSetCode  varchar(max) ,  
@OrderSetCode Varchar(780),  
@SentBatchID varchar(200)   
  
AS  
BEGIN  
 declare @iCount as int  
 declare @MailOutDate as varchar(20)  
 select @iCount = count(MOAccession) from tblMailoutOrders where MailoutLabCode = @MailoutLabCode and  MOAccession = @MOAccession and PatientID = @PatientID and MailoutOrderSetCode = @MailoutOrderSetCode  
  if @iCount = 0  
   insert into tblMailoutOrders(MailoutLabCode, MOAccession,PatientID, MailoutOrderSetCode, OrderSetCode, SentBatchID)  
   values(@MailoutLabCode, @MOAccession, @PatientID, @MailoutOrderSetCode, @OrderSetCode, @SentBatchID)  
   
     
 select @MailOutDate = MailOutDate from tblAccessions where Accession = @MOAccession  
  if  @MailOutDate is null  
   Update tblAccessions set MailOutDate = GETDATE() where Accession = @MOAccession   
  
END  
GO
/****** Object:  StoredProcedure [dbo].[spSaveMailoutTestcodes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[spSaveMailoutTestcodes]
	@MailoutLabCode varchar(20),
	@MailoutTestCode as varchar(100),
	@LabTestCode as varchar(100)	
AS

BEGIN

	--declare @iCount as int
	--select @iCount = count(MailoutTestCode) from tblMailoutTestCodes where MailoutLabCode = @MailoutLabCode and TestCode = @LabTestCode

	--if @iCount > 0
	--begin
	--	update tblMailoutTestCodes set TestCode = @LabTestCode 
	--	 where MailoutLabCode = @MailoutLabCode and TestCode = @LabTestCode
	--end
	--else
	--begin
		insert into  tblMailoutTestCodes(MailoutLabCode, MailoutTestCode, TestCode)		 
			values( @MailoutLabCode, @MailoutTestCode, @LabTestCode)
	--end
END




--GO
--/****** Object:  StoredProcedure [dbo].[spGetMailoutLabs]    Script Date: 6/20/2019 9:54:20 AM ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO
--create PROCEDURE [dbo].[spGetMailoutLabs] 
--AS
--BEGIN

--	SELECT LabCode,  Name, LabCode + ' - (' + Name + ')' as LabIdName
--		FROM dbo.tblMailoutLabs (NOLOCK)
		
--		order by  LabCode asc
--END




GO
/****** Object:  StoredProcedure [dbo].[spSaveManualHoldReason]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
create PROCEDURE [dbo].[spSaveManualHoldReason]    
 @Reason varchar(500)
     
AS    
BEGIN    
 SET NOCOUNT ON;    
    
  Insert into tblManualHoldReasons(Reason)
  values(@Reason)    
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveMasterPatientData]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveMasterPatientData]
       @PatientId varchar(50) ,
       @ptLastName  varchar(50) ,
       @ptFirstName  varchar (50) ,
       @ptMiddleName   varchar(50) = '',
       @ptNameSuffix   varchar (20)= '',
       @ptDateOfBirth   datetime = '',
       @ptSex   varchar (20)= '',
       @ptSSN   varchar (20)= '',
       @ptAddress1   varchar (100)= '',
       @ptAddress2   varchar (100) = '',
       @ptCity   varchar (100)= '',
       @ptState   varchar (2)= '',
       @ptZip   varchar (20)= '',
       @PTContactHomePhone   varchar (20)= '',
       @PTContactWorkPhone   varchar (20)= '',
       @PTContactCellPhone   varchar (20)= '',
       @PTContactEmail   varchar (20)= '',
       @PTContactFax   varchar (50) = '',
       @PrimaryInsuranceID   varchar (20) = '',
       @PrimaryPatRelationtoIns   varchar (20)= '',
       @PrimaryInsuredID   varchar (20) = '',
       @SecondaryInsuranceID   varchar (20) = '',
       @SecondaryPatRelationtoIns   varchar (20) = '',
       @SecondaryInsuredID   varchar (20) = '',
         @QSSLastUpdateID  varchar (20)='',
         @ClientCode varchar(50)
         , @WorkInjuryDate datetime = NULL
         , @AutoInjuryDate datetime = NULL
              

AS  
BEGIN 

       declare @iCount as int
       select @iCount = count(PatientId ) from tblPatient  where  PatientId  = @PatientId 

       if @iCount > 0
       
       BEGIN

--  SET @ReturnCode = @QSSVersionNumber + 1
  UPDATE tblPatient
    SET 
       ptLastName                     =   @ptLastName  ,
       ptFirstName                    = @ptFirstName  ,
       ptMiddleName            = @ptMiddleName  ,
       --ptNameSuffix      @ptNameSuffix   ,
       ptDateOfBirth           = @ptDateOfBirth   ,
       ptSex                          =   @ptSex   ,
       ptSSN                          =   @ptSSN   ,
       ptAddress1                     = @ptAddress1  ,
       ptAddress2                     = @ptAddress2   ,
       ptCity                         =   @ptCity   ,
       ptState                              =   @ptState  ,
       ptZip                          = @ptZip   ,
       PTContactHomePhone        = @PTContactHomePhone   ,
       PTContactWorkPhone        = @PTContactWorkPhone   ,
       PTContactCellPhone        = @PTContactCellPhone  ,
       PTContactEmail            = @PTContactEmail   ,
       PTContactFax            = @PTContactFax   ,
       PrimaryInsuranceID        = @PrimaryInsuranceID   ,
       PrimaryPatRelationtoIns   = @PrimaryPatRelationtoIns   ,
       PrimaryInsuredID          = @PrimaryInsuredID   ,
       SecondaryInsuranceID      = @SecondaryInsuranceID   ,
       SecondaryPatRelationtoIns = @SecondaryPatRelationtoIns   ,
       SecondaryInsuredID        = @SecondaryInsuredID ,  
        QSSLastUpdateID           = @QSSLastUpdateID,
       QSSUpdateDate                   = getDate(),
       ClientCode                         = @ClientCode,
       WorkRelatedInjuryDate       = @WorkInjuryDate,
       AutoRelatedInjuryDate       = @AutoInjuryDate
       
              
       WHERE  PatientId      = @PatientId
    END
else
       begin
              insert into  tblPatient(
                            PatientId, EntryDate, ptLastName, ptFirstName, ptMiddleName,
                            ptDateOfBirth, ptSex, ptSSN, ptAddress1, ptAddress2, ptCity, ptState, ptZip,
                            PTContactHomePhone ,PTContactWorkPhone, PTContactCellPhone, PTContactEmail, PTContactFax,  
                      PrimaryInsuranceID, PrimaryPatRelationtoIns, PrimaryInsuredID,
                      SecondaryInsuranceID, SecondaryPatRelationtoIns, SecondaryInsuredID, 
                       QSSCreatedDate, QSSUpdateDate, QSSVersion,ClientCode, WorkRelatedInjuryDate, AutoRelatedInjuryDate)
              
                     values( 
                                  @PatientId,
                               getDate() ,
                                  @ptLastName  ,
                                  @ptFirstName  ,
                                  @ptMiddleName  ,
                                  @ptDateOfBirth   ,
                                  @ptSex   ,
                                  @ptSSN   ,
                                  @ptAddress1  ,
                                  @ptAddress2   ,
                                  @ptCity   ,
                                  @ptState  ,
                                  @ptZip   ,
                              @PTContactHomePhone   ,
                              @PTContactWorkPhone   ,
                              @PTContactCellPhone  ,
                              @PTContactEmail   ,
                              @PTContactFax   ,
                              @PrimaryInsuranceID   ,
                              @PrimaryPatRelationtoIns   ,
                              @PrimaryInsuredID   ,
                              @SecondaryInsuranceID   ,
                              @SecondaryPatRelationtoIns   ,
                              @SecondaryInsuredID,  
                              getDate() ,
                              getDate() ,
                              0,
                              @ClientCode,
                              @WorkInjuryDate, 
                              @AutoInjuryDate)
       end
END




GO
/****** Object:  StoredProcedure [dbo].[spSaveMasterPatientInsuredInfo]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveMasterPatientInsuredInfo]  
@InsuredID varchar(50),
@InsuranceID varchar(20),
@LastName  varchar(50) ,
@FirstName  varchar (50) ,
@MiddleName   varchar (50) = '',
@DateOfBirth   datetime = '',
@Sex   varchar (20)= '',
@SSN   varchar (20)= '',
@Address1   varchar (100)= '',
@Address2   varchar (100) = '',
@City   varchar (100)= '',
@State   varchar (2)= '',
@Zip   varchar (20)= '',
@ContactHomePhone   varchar (20)= '',
@ContactWorkPhone   varchar (20)= '',
@ContactCellPhone   varchar (20)= '',
@ContactEmail   varchar (20)= '',
@ContactFax   varchar (50) = '',
@Policy varchar(100) ='',   
@Plan varchar(100) ='',  
@Group varchar(100) ='',
@Copay varchar(100) ='',
@Employer varchar(100) ='',
@QSSLastUpdatedID varchar(20) ='' ,
@WorkInjuryDate datetime = NULL,
@AutoInjuryDate datetime = NULL,
 --@QSSVersionNumber int ,
@ReturnCode int output
 

AS  
BEGIN  
SET @ReturnCode = 0
IF EXISTS( SELECT InsuredID from tblInsuredInfo WHERE  InsuredID = @InsuredID)
 BEGIN
  
  UPDATE tblInsuredInfo
    SET 
    
        FirstName       = @FirstName,  
        MiddleName      = @MiddleName,
        LastName        = @LastName,
        InsuranceID     = @InsuranceID,
        Address1        = @Address1, 
        Address2        = @Address2, 
        City            = @City,
        [State]         = @State,
        Zip             = @Zip,            
        HomePhone       = @ContactHomePhone,
        WorkPhone       = @ContactWorkPhone, 
        CellPhone       = @ContactCellPhone,
        Email           = @ContactEmail, 
        Fax             = @ContactFax,
        DateOfBirth     =  @DateOfBirth,
        Sex             = @Sex ,
        SSN             = @SSN,
		[Plan]    		= @Plan ,		
		Policy  		= @Policy,
		[Group]   		= @Group ,
	    Copay 		    = @Copay ,
		Employer		= @Employer,
		WorkRelatedInjuryDate	= @WorkInjuryDate,
		AutoRelatedInjuryDate	= @AutoInjuryDate,
		QSSLastUpdateID = @QSSLastUpdatedID,
		QSSUpdateDate 	= getDate() ,
		QSSVersion  	= QSSVersion + 1	
		
	WHERE InsuredID = @InsuredID
  END
  ELSE
  BEGIN
  INSERT INTO tblInsuredInfo
  
 ( InsuredID, FirstName, MiddleName, LastName, InsuranceID, Address1, Address2, City, [State], Zip,
  HomePhone, WorkPhone, CellPhone, Email, Fax, DateOfBirth, Sex, SSN, Policy, [Group], [Plan],
  Copay, Employer, WorkRelatedInjuryDate, AutoRelatedInjuryDate,
  QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate, QSSVersion)

  VALUES
  ( @InsuredID, @FirstName, @MiddleName, @LastName, @InsuranceID, @Address1, @Address2, @City, @State, @Zip,
  @ContactHomePhone, @ContactWorkPhone, @ContactCellPhone, @ContactEmail, @ContactFax, @DateOfBirth, @Sex,
  @SSN, @Policy, @Group, @Plan, @Copay, @Employer, @WorkInjuryDate, @AutoInjuryDate,
   @QSSLastUpdatedID,  GETDATE(), @QSSLastUpdatedID,  GETDATE(),0)
  END

END
GO
/****** Object:  StoredProcedure [dbo].[spSaveMedicationDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveMedicationDefinitions]

	@Code as varchar(50),
	@Description as varchar(200),
	@GenericName as varchar(500),
	@ReflexCode as varchar(200),
	@ReflexDesc as varchar(200),
	@Category as varchar(10)
AS
BEGIN

	declare @iCount as int
	select @iCount = count(MedicationCode) from tblMedications where  MedicationCode = @Code

	if @iCount > 0
	begin
		update tblMedications set [Description] = @Description, GenericName = @GenericName, ReflexCode = @ReflexCode, 
			ReflexDesc = @ReflexDesc, Category=@Category
		 where MedicationCode = @Code 
	end
	else
	begin
		insert into  tblMedications( MedicationCode, [Description], GenericName,ReflexCode,ReflexDesc,Category)		 
			values( @Code, @Description, @GenericName,@ReflexCode,@ReflexDesc, @Category)
	end
END

GO
/****** Object:  StoredProcedure [dbo].[spSaveMicroAntibiotics]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveMicroAntibiotics]

	@ID as int,
	@Accession as varchar(100),
	@MicroTestOrganismID as varchar(100),
	@AntibioticName as varchar(200),
	@Sensitivity as varchar(200),
	@MICValue as varchar(200),	
	@Comment as varchar(max),		
	@UserID varchar(10)

	
AS
BEGIN
DECLARE @CheckTestCode varchar(20)

SET @CheckTestCode = (SELECT Accession from tblMicroTestAntibiotics where ID = @ID)

IF @CheckTestCode IS NOT NULL
	BEGIN
		Update tblMicroTestAntibiotics
		Set AntibioticName = @AntibioticName,
			Sensitivity =  @Sensitivity,		
			MICValue = @MICValue,
			Comment = @Comment,
		    QSSUpdateDate = GETDATE()
		where ID = @ID
		
		
		Exec spAuditMicroTestAntibiotics @ID = @ID, @AuditType = 'U'
		
	END
ELSE
	BEGIN
			
		Insert into tblMicroTestAntibiotics(Accession, MicroTestOrganismID,AntibioticName,Sensitivity,MICValue,Comment,QSSCreatedByID,QSSCreatedDate,QSSLastUpdateID,QSSUpdateDate)
		                               
		VALUES (@Accession, @MicroTestOrganismID, @AntibioticName, @Sensitivity, @MICValue, @Comment, @UserID , GETDATE(), @UserID, GETDATE() )
		
		Exec spAuditMicroTestAntibiotics @ID = @ID, @AuditType = 'A'
	END
END

GO
/****** Object:  StoredProcedure [dbo].[spSaveMicroOrganisms]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveMicroOrganisms]

	@ID as int,
	@Accession as varchar(100),
	@MicroTestID as int,
	@MicroTestOrganismID as varchar(100),
	@OrganismName as varchar(200),
	@ColonyCount as varchar(200),
	@GramStain as varchar(200),	
	@Comment as varchar(max),		
	@UserID varchar(10)

	
AS
BEGIN
DECLARE @CheckTestCode varchar(20)

SET @CheckTestCode = (SELECT Accession from tblMicroTestOrganisms where ID = @ID)

IF @CheckTestCode IS NOT NULL
	BEGIN
		Update tblMicroTestOrganisms
		Set OrganismName = @OrganismName,
			GramStain =  @GramStain,		
			ColonyCount = @ColonyCount,
			Comment = @Comment,
		    QSSUpdateDate = GETDATE()
		where ID = @ID
		
		Exec spAuditMicroTestOrganisms @ID = @ID, @AuditType = 'U'
		
	END
ELSE
	BEGIN
			
		Insert into tblMicroTestOrganisms(Accession,MicroTestID ,MicroTestOrganismID,OrganismName,ColonyCount,GramStain,Comment,QSSCreatedByID,QSSCreatedDate,QSSLastUpdateID,QSSUpdateDate)
		                               
		VALUES (@Accession, @MicroTestID,@MicroTestOrganismID, @OrganismName, @ColonyCount, @GramStain, @Comment, @UserID , GETDATE(), @UserID, GETDATE() )
		
		Exec spAuditMicroTestOrganisms @ID = @ID, @AuditType = 'A'
	END
END

GO
/****** Object:  StoredProcedure [dbo].[spSaveMicroTesting]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveMicroTesting]

	@Accession as varchar(100),
	@PatientID as varchar(100),
	@ClientCode as varchar(50),
	@PhysicianCode as varchar(100),
	@CollectionDate as date,
	@TestCode as varchar(100),
	@TestDescription as varchar(500),
	@SpecimenSource as varchar(500),
	@Comment as varchar(max),
	@Status as varchar(100),
	@UserID varchar(10)

	
AS
BEGIN
DECLARE @CheckTestCode varchar(20)
SET @CheckTestCode = (SELECT Accession from tblMicroTests where Accession = @Accession and TestCode = @TestCode)

IF @CheckTestCode IS NOT NULL
	BEGIN
		Update tblMicroTests
		Set PatientID = @PatientID,
			ClientCode = @ClientCode,
			PhysicianCode = @PhysicianCode,
			CollectionDate = @CollectionDate,
			SpecimenSource = @SpecimenSource,
			Comment = @Comment,
			Status = @Status,
			QSSLastUpdateID =  @UserID,
		    QSSUpdateDate = GETDATE()
		where Accession = @Accession
		and TestCode = @TestCode
		
		Exec spAuditMicroTest @Accession = @Accession, @TestCode = @TestCode , @AuditType = 'U'	
		
		IF @Status = 'Final' 
			BEGIN
			--Update Ressult Record
				Update tblResultedTests
				Set Status = 'Final'
				Where Accession = @Accession 
				and PerformedTest = @TestCode
			END
		ELSE
			BEGIN
				Update tblResultedTests
				Set Status = 'Pending'
				Where Accession = @Accession 
				and PerformedTest = @TestCode
				
		END

	END
ELSE
	BEGIN
		INSERT INTO tblMicroTests(Accession, PatientID, ClientCode, PhysicianCode, CollectionDate, TestCode, TestDescription, SpecimenSource, Comment, Status,  QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID ,QSSUpdateDate)
		                               
		VALUES (@Accession, @PatientID, @ClientCode, @PhysicianCode, @CollectionDate, @TestCode, @TestDescription, @SpecimenSource, @Comment, 'Pending', @UserID , GETDATE(), @UserID, GETDATE() )
		
		Exec spAuditMicroTest @Accession = @Accession, @TestCode = @TestCode , @AuditType = 'A'
		
	END
END


GO
/****** Object:  StoredProcedure [dbo].[spSaveMissingInformation]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*** 
--Add Temporary patientIDs
DECLARE @ID varchar(50), @PatientIDs varchar(4000)
SET @ID = '0369'
SET @PatientIDs = 'dfrghio'
EXEC [dbo].[spAddPatientIDs] @ID, @PatientIDs
***/
CREATE Procedure [dbo].[spSaveMissingInformation]
(
	@accession varchar(50),
	@ClientCode varchar(50) = null,
	@ClientName varchar(50) = null,
	@plastname varchar(50) = null,
	@pfirstname varchar(50)= null,
	@entrydate date,
	@Reason varchar(max),
	@setting varchar(50) = null
)
As
BEGIN
declare @iCount as int
	select @iCount = count(accession) from tblMissingInformation where  accession = @accession and Reason = @reason

	if @iCount > 0
	begin
		update tblMissingInformation set accession = @accession, plastname = @plastname, pfirstname = @pfirstname, entrydate = @entrydate, clientcode = @ClientCode,
		clientname = @ClientName, Reason = @Reason, setting = @setting
		 where accession = @accession and reason = @reason
	end
	else
	begin
		INSERT INTO dbo.tblMissingInformation(accession, plastname, pfirstname, entrydate, ClientCode, ClientName, reason, setting)
	VALUES (@accession, @plastname, @pfirstname, @entrydate, @ClientCode, @ClientName, @Reason, @setting)
	end
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveOrderedTestComment]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveOrderedTestComment] 
@Accession varchar(50) ,
@OrderedTest varchar(100),
@PerformedTest  varchar(100) ,
@TestComment Varchar(200) = '' ,
@EnteredBy varchar (100) = NULL 

AS
BEGIN
DECLARE @EnteredByUser varchar(100)

	SELECT @EnteredByUser = QSSCreatedByID FROM dbo.tblOrderedTests
	WHERE Accession = @Accession
	AND OrderedTest = @OrderedTest
	AND PerformedTest = @PerformedTest
	
	IF @EnteredByUser IS NULL
	BEGIN
		UPDATE dbo.tblOrderedTests
		SET TestComment = @TestComment,
			
			QSSCreatedByID =  @EnteredBy,
			QSSCreatedDate = GETDATE(),
			QSSLastUpdateID = @EnteredBy,
			QSSUpdateDate = GETDATE(),
			QSSVersion = QSSVersion + 1
		WHERE Accession = @Accession
		AND OrderedTest = @OrderedTest
		AND PerformedTest = @PerformedTest
	END
	ELSE
	BEGIN
		UPDATE dbo.tblOrderedTests
		SET TestComment = @TestComment,			
			QSSLastUpdateID = @EnteredBy,
			QSSUpdateDate = GETDATE(),
			QSSVersion = QSSVersion + 1
		WHERE Accession = @Accession
		AND OrderedTest = @OrderedTest
		AND PerformedTest = @PerformedTest
	END

	
	
	
		
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveOrderedTestDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
CREATE PROCEDURE [dbo].[spSaveOrderedTestDefinitions]

	@Code as varchar(100),
	@Description as varchar(200),
    @PerformedTestCode as varchar(500),	
	@ActiveFlag as bit,
	@InSearchFlag as bit,
	@ReportFlag as bit,
	@InstrumentCode as varchar(200),
	@UTI as bit,
	@iDocAvailable as bit = 1
		
AS
BEGIN
	SET NOCOUNT ON;
	declare @iCount as int
	select @iCount = count(OrderedTest) from tblOrderedTestsDefinitions 
	where  OrderedTest = @Code

	if @iCount > 0
	begin
		update tblOrderedTestsDefinitions  set [Description]  = @Description ,
		  PerformedTestCode  = @PerformedTestCode ,ActiveFlag  = @ActiveFlag  ,
		  InSearchFlag  = @InSearchFlag, ReportFlag = @ReportFlag, InstrumentCode = @InstrumentCode, UTI = @UTI, iDocAvailable = @iDocAvailable, NeedsSync = 1
		 where OrderedTest = @Code;
	end
	else
	begin
		insert into  tblOrderedTestsDefinitions( OrderedTest,[Description], 
		PerformedTestCode, ActiveFlag, InSearchFlag, ReportFlag, InstrumentCode, UTI, iDocAvailable, NeedsSync)
				 
			values( @Code, @Description, @PerformedTestCode,
			 @ActiveFlag, @InSearchFlag, @ReportFlag, @InstrumentCode, @UTI, @iDocAvailable, 1)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveOrderedTestDefinitionsTestCodes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveOrderedTestDefinitionsTestCodes]
	@Code as varchar(100),
	@PerformedTestCode as varchar(500)	
	
AS
BEGIN

	declare @iCount as int
	select @iCount = count(OrderedTest) from tblOrderedTestsDefinitions 
	where  OrderedTest = @Code

	if @iCount > 0
	begin
		update tblOrderedTestsDefinitions  set PerformedTestCode  = @PerformedTestCode 
		 where OrderedTest = @Code 
	end
	else
	begin
		insert into  tblOrderedTestsDefinitions( OrderedTest, PerformedTestCode)
				 
			values( @Code, @PerformedTestCode)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSavePanelCommentACCUREFERENCE]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[spSavePanelCommentACCUREFERENCE]
	@Accession varchar(100),
	@PerformedTestCode varchar(100),
	@PanelComment varchar(max)
AS
BEGIN
	IF exists(select 1 from tblOrderedTests where Accession = @Accession and  PerformedTest = @PerformedTestCode)
	BEGIN
		UPDATE tblOrderedTests 
		SET 	
				TestComment = @PanelComment
		where Accession = @Accession and  PerformedTest = @PerformedTestCode 
	END
	ELSE
	BEGIN
		INSERT INTO tblOrderedTests(Accession, OrderedTest, PerformedTest, TestComment, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate)
		VALUES (@Accession, @PerformedTestCode, @PerformedTestCode, @PanelComment, 'ACCUREFERENCE', GETDATE(), 'ACCUREFERENCE', GETDATE())
	END
	
END










GO
/****** Object:  StoredProcedure [dbo].[spSavePanelCommentSUNRISE]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
      
create PROCEDURE [dbo].[spSavePanelCommentSUNRISE]      
 @Accession varchar(100),      
 @PerformedTestCode varchar(100),      
 @PanelComment varchar(max)      
AS      
BEGIN      
 IF exists(select 1 from tblOrderedTests where Accession = @Accession and  PerformedTest = @PerformedTestCode)      
 BEGIN      
  UPDATE tblOrderedTests       
  SET        
    TestComment = @PanelComment      
  where Accession = @Accession and  PerformedTest = @PerformedTestCode       
 END      
 ELSE      
 BEGIN      
  INSERT INTO tblOrderedTests(Accession, OrderedTest, PerformedTest, TestComment, QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate)      
  VALUES (@Accession, @PerformedTestCode, @PerformedTestCode, @PanelComment, 'SUNRISE', GETDATE(), 'SUNRISE', GETDATE())      
 END      
       
END 
GO
/****** Object:  StoredProcedure [dbo].[spSavePassword]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--exec spSavePassword '04503', '04503'

CREATE PROCEDURE [dbo].[spSavePassword]
(

	@UserID varchar(20) ,
	@Password varchar(100)
)
As
BEGIN
	  UPDATE dbo.tblUsersID
	  SET	[Password] = @Password ,
			TempPassword = '' ,
			LoginCounter = 0,
			DeactivatedBy = '',
			DeactivatedDate = NULL,
			LastUpdatedBy = @UserID ,
			LastUpdatedDate =  GETDATE()
	  WHERE 
	        UserID = @UserID 
	        
	  --log  the activity
	  --if @@ERROR = 0
	  --begin
		 -- exec spAddUserActivity 
		 -- @ClientCode = @ClientCode, 
		 -- @UserID  = @UserID, 
		 -- @Action = 'Set New Password' , 
		 -- @Password = @Password , 
		 -- @TempPassword = '' ,
		 -- @CreatedBy = @UserID
	  --end
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSavePathologyCases]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSavePathologyCases]           
 @Accession as varchar(100),                      
 @TestCode as varchar(100),                      
 @CaseNumber as varchar(100)=NULL,                      
 @Pathologist as varchar(100)=Null,                      
 @Status as varchar(100)='',                      
 @Notes as varchar(200)=null,                  
 @Signed as bit=0,                    
 --@isAbnormal as bit=0,                    
 @StainsDataXML xml=Null,                      
 @DiagnosisDataXML xml=Null,                      
 @CPTDataXML xml=Null,                    
 @UserID varchar(10),            
 @Jars varchar(10)='',                    
 @Cassettes varchar(10)='',             
 @Slides varchar(10)='',        
 @Abnormal as varchar(20)=''        
AS                      
BEGIN                      
                    
if @CaseNumber is NULL                    
 begin                    
  set  @CaseNumber = @Accession + '-' + @TestCode                    
 End                    
                    
DECLARE @CheckTestCode varchar(20)                      
SET @CheckTestCode = (SELECT Accession from tblPathologyCases where CaseNumber = @CaseNumber)                      
                      
IF @CheckTestCode IS NOT NULL                      
 BEGIN                      
  Update tblPathologyCases                      
  Set   CaseNumber = @CaseNumber,                    
  --Accession = @Accession,                     
  --TestCode = @TestCode,                     
  Pathologist = @Pathologist,                    
  Status = @Status,                     
  Notes =@Notes,                  
  Signed = @Signed,                     
  --isAbnormal = @isAbnormal,                     
  StainsDataXML=@StainsDataXML,                    
  DiagnosisDataXML = @DiagnosisDataXML,                    
  CPTDataXML = @CPTDataXML,                     
  QSSLastUpdateID = @UserID,                      
  QSSUpdateDate = GETDATE() ,            
  Jars = @Jars  ,            
  Cassettes= @Cassettes,            
  --Sources = @Sources,        
  Slides =@Slides ,
  Abnormal =@Abnormal              
  where CaseNumber = @CaseNumber                    
                        
  Exec spAuditPathologyCases @CaseNumber = @CaseNumber, @Accession = @Accession, @TestCode = @TestCode, @Pathologist = @Pathologist,                    
        @Status = @Status,@Notes=@Notes,@Signed = @Signed,@StainsDataXML=@StainsDataXML, @DiagnosisDataXML = @DiagnosisDataXML,                    
        @CPTDataXML = @CPTDataXML, @UserID = @UserID, @AuditType = 'U'   , @Jars = @Jars   ,@Slides = @Slides,@Cassettes= @Cassettes            
                        
  IF @Status = 'Final'                       
   BEGIN                      
   --Update Ressult Record                      
    Update tblResultedTests                      
    Set Status = 'Final'                      
    Where Accession = @Accession                       
    and PerformedTest = @TestCode                      
   END                      
  ELSE                      
   BEGIN                      
    Update tblResultedTests                      
    Set Status = 'Pending'                      
    Where Accession = @Accession                       
    and PerformedTest = @TestCode                      
                          
  END                      
                      
 END                      
ELSE                      
 BEGIN                      
  INSERT INTO tblPathologyCases(CaseNumber, Accession, TestCode, Pathologist, Signed , StainsDataXML, DiagnosisDataXML, CPTDataXML ,  QSSCreatedByID ,  QSSLastUpdateID,Notes,Jars,Slides,Cassettes,Abnormal)                      
                                                       
  VALUES (@CaseNumber, @Accession, @TestCode, @Pathologist, @Signed , @StainsDataXML, @DiagnosisDataXML, @CPTDataXML , @UserID ,  @UserID ,@Notes,@Jars,@Slides,@Cassettes,@Abnormal)                      
                        
  Exec spAuditPathologyCases  @CaseNumber = @CaseNumber, @Accession = @Accession, @TestCode = @TestCode, @Pathologist = @Pathologist,                    
         @Status = @Status,@Notes=@Notes, @Signed = @Signed, @StainsDataXML=@StainsDataXML, @DiagnosisDataXML = @DiagnosisDataXML,                    
         @CPTDataXML = @CPTDataXML, @UserID = @UserID, @AuditType = 'A'  , @Jars = @Jars   ,@Slides  = @Slides ,@Cassettes= @Cassettes                    
                        
 END                      
END       
      
GO
/****** Object:  StoredProcedure [dbo].[spSavePathologyCaseUpdates]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[spSavePathologyCaseUpdates]      
 @CaseNumber  varchar(100), @Accession varchar(100), @TestCode varchar(100), @UpdateType varchar(20), @Reason varchar(200), @Pathologist varchar(100)    
      
      
  as      
  begin
  insert into tblPathologyCaseUpdates(CaseNumber ,Accession, TestCode,UpdateType , Reason ,      
 Pathologist, SignedDateTime ) values (@CaseNumber ,@Accession, @TestCode,@UpdateType , @Reason ,      
 @Pathologist, getdate())   
 end
GO
/****** Object:  StoredProcedure [dbo].[spSavePathologyResultTemplates]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[spSavePathologyResultTemplates]      
@Code varchar(10),      
@Results varchar(max),  
@Heading varchar(20),  
@Abnormal varchar(50)  
as      
begin      
declare @cnt  int      
select @cnt = count(*) from tblPathologyResultTemplates where Code=@Code   
 if @cnt =0      
 begin      
  insert into tblPathologyResultTemplates(Code,Results,Heading,Abnormal) values(@Code,@Results,@Heading,@Abnormal)      
 end     
 else  
   update tblPathologyResultTemplates set Results=@Results,Heading=@Heading,Abnormal=@Abnormal where Code=@Code   
  
end 
GO
/****** Object:  StoredProcedure [dbo].[spSavePatientData]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spSavePatientData]
	@LabCode as varchar(20),
	@ClientCode as varchar(20),
	@PatientId as varchar(50),
	@LastName as varchar(50),
	@FirstName as varchar(50),
	@Address as varchar(100),
	@City as varchar(100),
	@State as varchar(2),
	@Zip as varchar(10),
	@DateOfBirth as datetime,
	@Sex as varchar(50),
	@Telephone as varchar(20),
	@AdditionalFieldInfo as xml,
	@InsuranceId as varchar(100),
	@Relation as varchar(20),
	@InsuranceCompany as varchar(100)
AS
BEGIN

	declare @iCount as int
	select @iCount = count(patientid) from tblPatients where labcode = @labcode and clientcode = @clientcode and patientid = @Patientid

	if @iCount > 0
	begin
		update tblpatients set lastname = @lastname, firstname = @firstname, [address] = @address, city = @city, 
			[state] = @state, zip = @zip, dateofbirth = @DateOfBirth, sex = @sex, telephone = @telephone, 
			additionalfieldinfo = @additionalfieldinfo, insuranceid = @insuranceid, relation =@relation, insurancecompany = @insurancecompany		
			where labcode = @labcode and clientcode = @clientcode and patientid = @patientid
	end
	else
	begin
		insert into tblpatients(labcode, clientcode, patientid, lastname, firstname, [address], city, [state], zip, dateofbirth, sex, telephone, additionalfieldinfo, insuranceid, relation, insurancecompany)
			values(@labcode, @clientcode,@patientid, @lastname, @firstname, @address, @city, @state, @zip, @dateofbirth, @sex, @telephone, @additionalfieldinfo, @insuranceid, @relation, @insurancecompany)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSavePendingOrder]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*** 
--Add Temporary patientIDs
DECLARE @ID varchar(50), @PatientIDs varchar(4000)
SET @ID = '0369'
SET @PatientIDs = 'dfrghio'
EXEC [dbo].[spAddPatientIDs] @ID, @PatientIDs
***/
CREATE PROCEDURE [dbo].[spSavePendingOrder]
(
	@accession varchar(50),
	@lastname varchar(50),
	@firstname varchar(50),
	@entrydate date,
	@client varchar(50)
)
As
BEGIN
declare @iCount as int
	select @iCount = count(accession) from tblPendingOrders where  accession = @accession

	if @iCount > 0
	begin
		update tblPendingOrders set accession = @accession, lastname = @lastname, firstname = @firstname, entrydate = @entrydate, client = @client
		 where accession = @accession
	end
	else
	begin
		INSERT INTO dbo.tblPendingOrders(accession, lastname, firstname, entrydate, client)
	VALUES (@accession, @lastname, @firstname, @entrydate, @client)
	end
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSavePerformedTestDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
    
CREATE PROCEDURE [dbo].[spSavePerformedTestDefinitions]            
              
 @Code as varchar(100),              
 @InternalDescription as varchar(200),              
 @ExternalDescription  as varchar(200),              
    @ResultTestCode as varchar(Max),               
 @PerformedBy as varchar(200),              
 @MailoutFlag as varchar(20),              
 @RequiredSpeciments varchar(50),              
 @RequiredVolume as varchar(20),              
 @Preservative as varchar(500),              
    @ShippingTemp as varchar(20),                  
    @Instructions as varchar(500),              
    @Turnaround as varchar(20),              
    @AdditionalInfoScreen as varchar(200),              
 @AdditionalInfoScreenTemplate as varchar(200),              
 @MailOutLab as varchar(50),              
 @MicrobioFlag as bit,              
 @InstrumentCode as varchar(200),              
 @PathologyFlag as bit,        
 @CytologyFlag as bit,          
 @ProstateFlag as bit,    
 @MailoutTestCode as varchar(100),      
 @ToxicologyFlag as bit,    
 @Category as varchar(50),  
 @CategoryReportOrder DECIMAL(6,2),
 @PodiatryFlag bit          
AS              
BEGIN              
              
 declare @iCount as int              
 select @iCount = count(PerformedTest) from  tblPerformedTestsDefinitions              
 where  PerformedTest = @Code              
              
 if @iCount > 0              
 begin              
  update tblPerformedTestsDefinitions                
    set  InternalDescription  = @InternalDescription ,                  
         ExternalDescription = @ExternalDescription,               
      ResultTestCode = @ResultTestCode,              
      PerformedBy = @PerformedBy,              
      MailoutFlag = @MailoutFlag,              
      MailoutLab = @MailOutLab,              
      RequiredSpeciments = @RequiredSpeciments,                    
      RequiredVolume = @RequiredVolume,              
      Preservative = @Preservative,              
      ShippingTemp = @ShippingTemp,              
      Instructions = @Instructions,              
      Turnaround = @Turnaround,              
      AdditionalInfoScreen = @AdditionalInfoScreen,              
      AdditionalInfoScreenTemplate = @AdditionalInfoScreenTemplate,              
      MicrobioFlag = @MicrobioFlag,              
      InstrumentCode = @InstrumentCode,              
      PathologyFlag = @PathologyFlag ,        
      CytologyFlag =@CytologyFlag ,    
   ProstateFlag = @ProstateFlag ,    
   ToxicologyFlag=@ToxicologyFlag,  
   Category=@Category,  
   CategoryReportOrder=@CategoryReportOrder,
   PodiatryFlag=@PodiatryFlag           
            
   where PerformedTest = @Code               
 end              
 else              
 begin              
  insert into tblPerformedTestsDefinitions              
             (PerformedTest,InternalDescription,               
              ExternalDescription,ResultTestCode,              
              PerformedBy,MailoutFlag,MailoutLab, RequiredSpeciments,              
              RequiredVolume,Preservative, ShippingTemp,              
              Instructions, Turnaround,              
              AdditionalInfoScreen,AdditionalInfoScreenTemplate, 
              MicrobioFlag,InstrumentCode,PathologyFlag,CytologyFlag,ProstateFlag,
              ToxicologyFlag,Category,CategoryReportOrder,PodiatryFlag)                
                   
   values(@Code, @InternalDescription, @ExternalDescription,               
           @ResultTestCode, @PerformedBy, @MailoutFlag,@MailOutLab, @RequiredSpeciments,              
           @RequiredVolume ,@Preservative, @ShippingTemp,              
           @Instructions, @Turnaround, 
           @AdditionalInfoScreen, @AdditionalInfoScreenTemplate, 
           @MicrobioFlag, @InstrumentCode,@PathologyFlag,@CytologyFlag,@ProstateFlag,
           @ToxicologyFlag,@Category,@CategoryReportOrder,@PodiatryFlag)                
 end              
       
 delete from tblMailoutTestCodes where TestCode = @Code      
 if @MailoutTestCode <> ''      
 begin      
 insert into  tblMailoutTestCodes(MailoutLabCode, MailoutTestCode, TestCode)         
 values( @MailOutLab, @MailoutTestCode, @Code)      
 delete from tblMissingTransaltionCode where MailoutLabCode = @MailOutLab and TestCode = @MailoutTestCode      
END       
      
END       
      
GO
/****** Object:  StoredProcedure [dbo].[spSavePerformedTestDefinitionsTestCodes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSavePerformedTestDefinitionsTestCodes]

	@Code as varchar(100),
	@ResultTestCode as varchar(Max)	
	
		
AS
BEGIN

	declare @iCount as int
	select @iCount = count(PerformedTest) from  tblPerformedTestsDefinitions
	where  PerformedTest = @Code

	if @iCount > 0
	begin
		update tblPerformedTestsDefinitions  
		  set  ResultTestCode = @ResultTestCode
			   		  
		 where PerformedTest = @Code 
	end
	else
	begin
		insert into tblPerformedTestsDefinitions
		           (PerformedTest,ResultTestCode)
				 
			values(@Code, @ResultTestCode)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSavePhysicianDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
CREATE PROCEDURE [dbo].[spSavePhysicianDefinitions]


	@PhysicianCode as varchar(100),
	@FirstName as varchar(200),
    @MiddleName as varchar(200),	
	@LastName as varchar(200),
	@FullName as varchar(300),
	@NPI as varchar(100),	
	@License as varchar(100),
	@MedicareNumber as varchar(100),
	@UPIN as varchar(100),
	@MedicaidNumber as varchar(100),
	@SeriesName as varchar(20),
	@idocstatus as bit = 1

		
AS
BEGIN

	declare @iCount as int
	select @iCount = count(PhysicianCode) from tblPhysicians where  PhysicianCode = @PhysicianCode

	if @iCount > 0
	begin
		update tblPhysicians set FirstName  = @FirstName,MiddleName  = @MiddleName ,
		 LastName  = @LastName  , FullName  = @FullName , NPI  = @NPI ,		 
		 License  = @License , UPIN =@UPIN, MedicareNumber  =@MedicareNumber,
		 MedicaidNumber  = @MedicaidNumber, SeriesName = @SeriesName, iDocAvailable = @idocstatus, NeedsSync = 1
		 where PhysicianCode = @PhysicianCode 
	end
	else
	begin
		insert into  tblPhysicians(PhysicianCode, FirstName , MiddleName ,
		 LastName , FullName , NPI, License, UPIN, 
		 MedicareNumber , MedicaidNumber, SeriesName, iDocAvailable, NeedsSync)
		 
			values(@PhysicianCode, @FirstName, @MiddleName , @LastName , 
			      @FullName , @NPI , @License , @UPIN ,
			       @MedicareNumber, @MedicaidNumber, @SeriesName, @idocstatus, 1)
	end

	UPDATE a SET NeedsSync = 1
	FROM tblClients a
	JOIN tblClientsPhysicians b ON a.ClientCode = b.ClientCode
	JOIN tblPhysicians c ON c.PhysicianCode = b.PhysicianCode
	WHERE c.PhysicianCode = @PhysicianCode;

END
GO
/****** Object:  StoredProcedure [dbo].[spSavePhysicianSynced]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spSavePhysicianSynced]
	@PhysicianCode as varchar(50)	
AS
BEGIN
	UPDATE tblPhysicians set NeedsSync = 0, LastSyncDate = GETDATE()
	WHERE PhysicianCode = @PhysicianCode
END

GO
/****** Object:  StoredProcedure [dbo].[spSavePostCashCoPayment]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [dbo].[spSavePostCashCoPayment]  
 @Accession varchar(50),
 @BTCode varchar(100),   
 @CoPayPostCash decimal(18, 2) = 0.00
 
AS  
BEGIN  
	update tblAccessions set CoPayPostCash = @CoPayPostCash where Accession = @Accession
END
GO
/****** Object:  StoredProcedure [dbo].[spSavePostCashPayment]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  <Author,,Name>  
-- Create date: <Create Date,,>  
-- Description: <Description,,>  
-- =============================================  
CREATE PROCEDURE [dbo].[spSavePostCashPayment]    
 @Accession varchar(50),  
 @BTCode varchar(100),     
 @OrderedTest varchar(100),    
 @CPTCode varchar(100),  
 @GroupFlag bit, 
 @ptRespFlag bit,
 @PaymentAmt decimal(18,2),  
 @AdjustmentAmt decimal(18,2) = 0,  
 @AdjustmentReason varchar(150) = '' ,  
 @CoPayPostCash decimal(18, 2) = 0.00,  
 @CheckNumber varchar(100) ,  
 @CheckDate datetime ='' ,   
 @NextBillDate datetime = '',  
 @QSSLastUpdatedID varchar(20) ,
 @Payer varchar(200) =''
   
  
AS    
BEGIN   
  

  declare @FeeDescription as varchar(200), @TotalFeeAmt decimal(18, 2), @ExpAmt decimal(18, 2)
  if charindex(':', @cptcode) > 0 
  begin 
	Select top 1 @FeeDescription = ISNULL(FeeDescription, ''), @TotalFeeAmt = ISNULL(TotalFeeAmt, 0.00), @ExpAmt = ISNULL(ExpAmt, 0.00) from tblbill where Accession = @Accession and CPTCode + ':' + Modifier = @CPTCode and OrderedTestCode = @OrderedTest
  end
  else
  begin
	Select top 1 @FeeDescription = ISNULL(FeeDescription, ''), @TotalFeeAmt = ISNULL(TotalFeeAmt, 0.00), @ExpAmt = ISNULL(ExpAmt, 0.00) from tblbill where Accession = @Accession and CPTCode = @CPTCode and OrderedTestCode = @OrderedTest
  end

Declare @Modifier varchar(100) = ''  
Declare @splitpos tinyint  
if charindex(':', @cptcode) > 0 begin  
 set @splitPos = charindex(':', @cptcode)  
 set @Modifier = substring(@cptcode, @splitPos + 1, len(@cptcode) - @splitpos)  
 set @cptcode = substring(@cptcode, 1, @splitpos - 1)  
end   
  
--if not ((select count(*) from tblPayment where Accession = @Accession and CPTcode = @CPTCode and Upper(CheckNumber) = Upper(@CheckNumber)) > 0)  
--  begin  
  
IF @CPTCode = 'Unallocated' and @AdjustmentAmt = 0 and @PaymentAmt = 0  
begin  
 print 'this'  
end   
else  
begin  
   INSERT INTO dbo.tblPayment  
   (Accession, BTcode, OrderedTest , CPTcode, EntryDate, PaymentAmt,  
   AdjustmentAmt , AdjustmentReason, CheckNumber, CheckDate,   
   QSSCreatedByID , QSSCreatedDate , QSSLastUpdateID , QSSUpdateDate, QSSVersion, Modifier, GroupFlag, Payer, 
   FeeDescription, TotalFeeAmt, ExpAmt, ptRespFlag)  
  
   VALUES (@Accession, @BTcode, @OrderedTest , @CPTcode, GETDATE(), @PaymentAmt,  
     @AdjustmentAmt , @AdjustmentReason, @CheckNumber , @CheckDate,  
     @QSSLastUpdatedID, GETDATE() , @QSSLastUpdatedID, GETDATE(), 0, @Modifier, @GroupFlag, @Payer, 
	 @FeeDescription, @TotalFeeAmt, @ExpAmt, @ptRespFlag)  
end       
    update tblBill set NextBillDate = @NextBillDate where accession = @Accession  
      
    --IF @CoPayPostCash<>'' AND @CoPayPostCash IS NOT NULL AND @CoPayPostCash > 0  
    --IF @CoPayPostCash > 0.0  
    --BEGIN  
    update tblBillAccessions  set CoPayPostCash = @CoPayPostCash where Accession = @Accession  
   -- END  
      
   --end  
END  

GO
/****** Object:  StoredProcedure [dbo].[spSaveQCcomment]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spSaveQCcomment]

	@OrderID as varchar(50),
	@GroupNumber as varchar(50),
	@Comment as varchar (max)
	
AS
BEGIN

	declare @iCount as int
	select @iCount = count(OrderID) from tblQccomments where OrderID = @OrderID and  GroupNumber = @GroupNumber
	if @iCount > 0
	begin
		update tblQccomments set Comment = @Comment
		 where OrderID = @OrderID and @GroupNumber = GroupNumber
	end
	else
	begin
		insert into  tblQccomments( OrderID, GroupNumber, Comment)		 
			values( @OrderID, @GroupNumber, @Comment)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveQuantumBatchID]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--exec spSavePassword '04503', '04503'

CREATE PROCEDURE [dbo].[spSaveQuantumBatchID]
(
	@Accession varchar(100), 
	@BatchID varchar(500)
)
As
BEGIN
	  UPDATE dbo.tblAccessions
	  SET QuantumBatchID = @BatchID
	  WHERE 
	        Accession = @Accession 
        
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveQuantumReceivedDate]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--exec spSavePassword '04503', '04503'

CREATE PROCEDURE [dbo].[spSaveQuantumReceivedDate]
(
	@Accession varchar(100)
)
As
BEGIN
	  UPDATE dbo.tblAccessions
	  SET QuantumReceivedDate =  GETDATE()
	  WHERE 
	        Accession = @Accession 
        
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveQuantumRequestedDate]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--exec spSavePassword '04503', '04503'

CREATE PROCEDURE [dbo].[spSaveQuantumRequestedDate]
(
	@Accession varchar(100)
)
As
BEGIN
	  UPDATE dbo.tblAccessions
	  SET QuantumRequestedDate =  GETDATE()
	  WHERE 
	        Accession = @Accession 
        
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveRack]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
CREATE PROCEDURE [dbo].[spSaveRack]
	@RackID varchar(50), 
	@CreatedBy varchar(50),
	@RackValueTable RackType READONLY,
	@SpecimenCode [varchar](20),
	@TraySize [varchar](20)
AS
BEGIN
	SET NOCOUNT ON;
	
	IF EXISTS (SELECT RackID FROM [dbo].tblRack WHERE RackID = @RackID)
	BEGIN
		DECLARE @UpdateTable TABLE([id] [int] NULL, [RowID] [tinyint] NULL,
		[ColumnID] [tinyint] NULL, ColumnValue [varchar](100) NULL,
		UpdateVersion [smallint] NULL, UpdatedOn datetime NULL);
		
		DECLARE @UpdateVersion smallint = 0;
		SELECT @UpdateVersion = MAX(UpdateVersion) + 1 FROM tblRackValues WHERE RackID = @RackID;

		INSERT @UpdateTable ([id], [RowID], [ColumnID], [ColumnValue], [UpdateVersion], [UpdatedOn])
		SELECT [id], a.[RowID], a.[ColumnID], a.[ColumnValue], @UpdateVersion, GETDATE()
		FROM @RackValueTable a
		JOIN tblRackValues b ON RackID = @RackID AND a.[RowID] = b.[RowID] AND a.[ColumnID] = b.[ColumnID]
		WHERE a.[ColumnValue] != b.[ColumnValue];

		UPDATE a SET [ColumnValue] = b.[ColumnValue], UpdateVersion = b.UpdateVersion, UpdatedOn = b.UpdatedOn, UpdatedBy = @CreatedBy
		FROM tblRackValues a
		JOIN @UpdateTable b ON a.[id] = b.[id];

		INSERT tblRackValues ([RackID], [RowID], [ColumnID], [ColumnValue], [UpdateVersion], [UpdatedBy], [UpdatedOn])
		SELECT @RackID, a.[RowID], a.[ColumnID], a.[ColumnValue], @UpdateVersion, @CreatedBy, GETDATE()
		FROM @RackValueTable a
		LEFT JOIN tblRackValues b ON RackID = @RackID AND a.[RowID] = b.[RowID] AND a.[ColumnID] = b.[ColumnID]
		WHERE a.[ColumnValue] != '' AND RackID IS NULL;

		INSERT tblRackValuesAudit ([RackID], [RowID], [ColumnID], [ColumnValue], [UpdateVersion], [UpdatedBy], [UpdatedOn])
		SELECT RackID, [RowID], [ColumnID], [ColumnValue], UpdateVersion, UpdatedBy, UpdatedOn
		FROM tblRackValues
		WHERE RackID = @RackID AND [UpdateVersion] = @UpdateVersion;

	END
	ELSE
	BEGIN
		--SST-20201120-01
		DECLARE @Position smallint = 0;
		SELECT @Position = COUNT(RackID) + 1 FROM [dbo].tblRack WHERE SpecimenCode = @SpecimenCode 
		AND DATEADD(dd, 0, DATEDIFF(dd, 0, CreatedOn)) = DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE()));
		 
		SET @RackID = @SpecimenCode + '-' + CONVERT(VARCHAR(10), GETDATE(), 112) + '-' + FORMAT(@Position, '0#');

		INSERT tblRack ([RackID], [CreatedBy], [CreatedOn], SpecimenCode, TraySize)
		VALUES (@RackID, @CreatedBy, GETDATE(), @SpecimenCode, @TraySize);

		INSERT tblRackValues ([RackID], [RowID], [ColumnID], [ColumnValue], [UpdateVersion], [UpdatedBy], [UpdatedOn])
		SELECT @RackID, [RowID], [ColumnID], [ColumnValue], 0, @CreatedBy, GETDATE() FROM @RackValueTable
		WHERE ColumnValue != '';

		INSERT tblRackValuesAudit ([RackID], [RowID], [ColumnID], [ColumnValue], [UpdateVersion], [UpdatedBy], [UpdatedOn])
		SELECT @RackID, [RowID], [ColumnID], [ColumnValue], 0, @CreatedBy, GETDATE() FROM @RackValueTable
		WHERE ColumnValue != '';
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveRemittanceAllowedAmounts]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spSaveRemittanceAllowedAmounts]
	@FileName varchar(120),
	@Accession varchar(100),
	@CheckNumber varchar(100),
	@CPT_Code varchar(100),
	@Modifier varchar(100),
	@AllowedAmount decimal(18, 2)
AS
BEGIN
	update tblBillingTempRemit
	set AllowedAmount = @AllowedAmount
	where [FileName] = @FileName and Accession = @Accession and CheckNumber = @CheckNumber and CPT_Code = @CPT_Code and Modifier = @Modifier

END
GO
/****** Object:  StoredProcedure [dbo].[spSaveRemittanceRemarks]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveRemittanceRemarks]
	@Accession varchar(100),
	@CheckNumber varchar(100),
	@CPT_Code varchar(100),
	@Modifier varchar(100),
	@RemarkCode varchar(20)
AS
BEGIN

if @Accession = ''
begin
	set @Accession = 'NA'
end
	if not exists(select * from tblBillingRemitRemarks where Accession = @Accession and CheckNumber = @CheckNumber and CPT_Code = @CPT_Code and Modifier = @Modifier and RemarkCode = @RemarkCode)
	begin
		insert into tblBillingRemitRemarks
		(Accession,
		CheckNumber,
		CPT_Code,
		Modifier, 
		RemarkCode)

		values(
		@Accession,
		@CheckNumber,
		@CPT_Code,
		@Modifier, 
		@RemarkCode)
	end    
  
END


GO
/****** Object:  StoredProcedure [dbo].[spSaveRemittanceTempFile]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveRemittanceTempFile]
	@Accession varchar(100),
	@FileName varchar(150),
	@ptLastName varchar(100),
	@ptFirstName varchar(100),
	@CheckNumber varchar(100),
	@CheckDate datetime,
	@CPT_Code varchar(30),
	@Modifier varchar(100),
	@Units int,
	@CPT_Charge [decimal](18, 2),
	@CPT_Paid [decimal](18, 2),
	@AdjustmentCode varchar(20),
	@AdjustmentReason varchar(20),
	@AdjustmentAmount [decimal](18, 2),
	@ICN varchar(100),
	@Payer varchar(100),
	@PayerClaimNumber varchar(200) = '',
	@QSSCreatedByID varchar(20)
AS
BEGIN

--if not exists (select BatchID from tblBillingECSBatchList where BatchID = @BatchID)
begin
	insert into tblBillingTempRemit
	(accession,
	[FileName],
	ptLastName,
	ptFirstName,
	CheckNumber,
	CheckDate,
	CPT_Code,
	Units,
	CPT_Charge,
	CPT_Paid,
	AdjustmentCode,
	AdjustmentReason,
	AdjustmentAmount,
	ICN,
	Payer,
	PayerClaimNumber,
	QSSCreatedByID,
	QSSCreatedDate,
	Modifier)

    values(
    @accession,
    @FileName,
	@ptLastName,
	@ptFirstName,
	@CheckNumber,
	@CheckDate,
	@CPT_Code,
	@Units,
	@CPT_Charge,
	@CPT_Paid,
	@AdjustmentCode,
	@AdjustmentReason,
	@AdjustmentAmount,
	@ICN,
	@Payer,
	@PayerClaimNumber,
	@QSSCreatedByID, 
	GETDATE(),
	@Modifier)
    
end    
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveReportForAccession]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spSaveReportForAccession]
          @Accession varchar(50),
	      @AddScannedPaperWork bit
AS
BEGIN
       update tblAccessions 
       set AddScannedPaperWork=@AddScannedPaperWork
        where  accession = @accession
           
         
END

GO
/****** Object:  StoredProcedure [dbo].[spSaveReservedAccessions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveReservedAccessions]
	@AccessionID varchar(100),
	@Printed bit = NULL, 
	@PrintedDate	datetime = NULL,	
	@UserID varchar(20)	
	
	

AS
BEGIN
	IF exists(select 1 from tblReservedAccessionsPool where AccessionID = @AccessionID )
	BEGIN
		UPDATE tblReservedAccessionsPool 
		SET 	
				Printed = @Printed,
				PrintedDate = @PrintedDate,
				QSSLastUpdateID = @UserID,
				QSSUpdateDate = getdate()
		WHERE AccessionID = @AccessionID 
	END
	ELSE
	BEGIN
	
			INSERT INTO tblReservedAccessionsPool
		          (AccessionID,    Printed , PrintedDate,  QSSCreatedByID, QSSCreatedDate, QSSLastUpdateID, QSSUpdateDate)
				 
			VALUES(@AccessionID,  @Printed, @PrintedDate, @UserID, GETDATE(), @UserID, GETDATE() )

	END
	

END

GO
/****** Object:  StoredProcedure [dbo].[spSaveResultedTestAlphaDecodes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveResultedTestAlphaDecodes] 

	@ResultTest varchar(100) ,
	@ReflexTest varchar(100) ,
	@Decode varchar(50)      ,
	@UserID varchar(20) 
	
AS
BEGIN

	UPDATE dbo.tblResultedTestDecodes
	SET ReflexTestCode = @ReflexTest,
	QSSCreatedByID = @UserID ,
	QSSLastUpdateID =  @UserID ,
	QSSCreatedDate = GETDATE() ,
	QSSUpdateDate = GETDATE() ,
	QSSVersion = QSSVersion + 1
	WHERE TestCode = @ResultTest
	AND Code = @Decode
			
		
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveResultedTestDecodes]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveResultedTestDecodes]  

            @TestCode varchar(20),
            @Code varchar(20),
			@Decode varchar(100),
			@Flag varchar(20),
			@UserID varchar(20) = NULL,
			@UpdateMode varchar(20) = NULL,
			@AutoReleaseFlag bit = 0
            
AS  
BEGIN  
IF @UpdateMode is null 
	begin
		INSERT INTO   tblResultedTestDecodes
	             ( TestCode, Code, Decode, Flag, AutoReleaseFlag)
                   VALUES
	             (@TestCode,@Code, @Decode, @Flag, @AutoReleaseFlag)
	end
ELSE IF @UpdateMode = 'Update' 
	begin
		Update tblResultedTestDecodes
			set Decode = @Decode, Flag = @Flag, AutoReleaseFlag = @AutoReleaseFlag,
			QSSUpdateDate = GETDATE() ,
			QSSVersion = QSSVersion + 1
			where TestCode = @TestCode and Code = @Code
	end
	   
 END

GO
/****** Object:  StoredProcedure [dbo].[spSaveResultedTestDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveResultedTestDefinitions]

	@TestCode as varchar(100),
	@InternalName as varchar(200),
    @ExternalName as varchar(200),	
	@Worksheet as varchar(100),
	@Department as varchar(100),
	@DefaultValue as varchar(100),	
	@NullFlag as bit,
	@AutoReleaseFlag as bit,
	@Decimals as varchar(100),
	@Units as varchar(100),
	@Comment as varchar(max),
	@SuppressFlag as bit,
	@SecureFlag as bit,
	@LOINCcode as varchar(100),
	@InconsistentCommentCode as varchar(max), 
	@ConsistentCommentCode as varchar(max), 
	@AbnormalCommentCode as varchar(max), 
	@MedicationData as varchar(max), 
	@CutoffLowLimit as varchar(100),
	@CutoffHighLimit as varchar(100),
	@CutoffHoldLimit as varchar(100),
	@DynamicLowLimit as varchar(100),
	@DynamicHighLimit as varchar(100),
	@ReportNormalRangeLow as varchar(100),
	@ReportNormalRangeHigh as varchar(100),
	@ReportAs as varchar(100),
	@ExpectedWindow as varchar(max),
	@UseAlpha as bit, 
	@DecodedFlagRequired as bit, 
	@UseRangeLimits as bit, 
	@UseCutoffLimit as bit,
	@MedicationDataIndirect as varchar(max),
	@UpdateVersion as bit = 0,
	@QSSLastUpdatedID as varchar(20),
	@LowReportAs as varchar(100),
	@ReportAlphaRange as varchar(200)
		
AS
BEGIN

	declare @iCount as int
	declare @iCurrentVersion as int
	declare @ReflexHighValue as varchar(100)
	declare @ReflexHighTestCode as varchar(100) 
	declare @ReflexLowValue as varchar(100)
	declare @ReflexLowTestCode as varchar(100)
	declare @ReflexInconsistentTestCode as varchar(100)
	declare @ReflexConsistentTestCode as varchar(100)	
	
	
	select @iCount = count(TestCode) from tblResultedTestsDefinitions where  TestCode = @TestCode
	select @iCurrentVersion = CurrentVersion from tblResultCodeVersions  where  TestCode = @TestCode
	
	--retain reflex testing
	select @ReflexHighValue = ReflexHighValue,@ReflexHighTestCode = ReflexHighTestCode,
			@ReflexLowValue = ReflexLowValue, @ReflexLowTestCode = ReflexLowTestCode,
			@ReflexInconsistentTestCode = ReflexInconsistentTestCode,
			@ReflexConsistentTestCode = ReflexConsistentTestCode
			from tblResultedTestsDefinitions  where  TestCode = @TestCode

	if @iCount > 0
	
	
		if @UpdateVersion = 1
			begin
			
				declare @Calculation as varchar(Max)
				declare @Formula as varchar(200)
			
				select @Calculation = Calculation, @Formula = Formula  from tblResultedTestsDefinitions  where  TestCode = @TestCode and Version = @iCurrentVersion
			
				insert into  tblResultedTestsDefinitions(TestCode, InternalName,
						  ExternalName, Worksheet, Department, DefaultValue, NullFlag,
						  Decimals, Units, Comment, SuppressFlag, SecureFlag,LOINCcode, 
						  InconsistentCommentCode, ConsistentCommentCode,AbnormalCommentCode, MedicationData, Calculation, CutoffLowLimit, CutoffHighLimit, CutoffHoldLimit, DynamicLowLimit, DynamicHighLimit, ReportNormalRangeLow,
						   ReportNormalRangeHigh, ReportAs, ExpectedWindow, AutoReleaseFlag, UseAlpha, DecodedFlagRequired, UseRangeLimits, UseCutoffLimit, MedicationDataIndirect, Version, QSSLastUpdateID, QSSUpdateDate,LowReportAs,
						   ReflexConsistentTestCode,ReflexInconsistentTestCode,ReflexHighValue,ReflexHighTestCode, ReflexLowValue, ReflexLowTestCode,ReportAlphaRange,Formula)
				 
					values(@TestCode, @InternalName, @ExternalName, @Worksheet, 
						  @Department, @DefaultValue, @NullFlag, @Decimals, @Units, @Comment,
						  @SuppressFlag, @SecureFlag, @LOINCcode, @InconsistentCommentCode, @ConsistentCommentCode, @AbnormalCommentCode, @MedicationData,@Calculation, 
						  @CutoffLowLimit, @CutoffHighLimit, @CutoffHoldLimit, @DynamicLowLimit,@DynamicHighLimit, @ReportNormalRangeLow, 
						   @ReportNormalRangeHigh, @ReportAs, @ExpectedWindow, @AutoReleaseFlag, @UseAlpha, @DecodedFlagRequired, @UseRangeLimits, @UseCutoffLimit, @MedicationDataIndirect, @iCurrentVersion + 1, @QSSLastUpdatedID,getDate(),@LowReportAs,
						   @ReflexConsistentTestCode,@ReflexInconsistentTestCode,@ReflexHighValue,@ReflexHighTestCode, @ReflexLowValue, @ReflexLowTestCode,@ReportAlphaRange,@Formula)		
				
				--Update Current Version
				Update tblResultCodeVersions
				Set CurrentVersion = @iCurrentVersion + 1,
					QSSLastUpdateID = @QSSLastUpdatedID,
					QSSUpdateDate = GETDATE()
				where TestCode = @TestCode			
			
			end 
		
	    else
			begin
	    				update tblResultedTestsDefinitions set InternalName  = @InternalName ,ExternalName = @ExternalName,
				 Worksheet  = @Worksheet ,Department = @Department, DefaultValue = @DefaultValue,		 
				 NullFlag = @NullFlag, Decimals =@Decimals,
				 Units = @Units, Comment =@Comment,SuppressFlag = @SuppressFlag, 
				  SecureFlag =@SecureFlag,LOINCcode =@LOINCcode,InconsistentCommentCode =@InconsistentCommentCode,ConsistentCommentCode =@ConsistentCommentCode, 
				  AbnormalCommentCode=@AbnormalCommentCode,
				  MedicationData=@MedicationData, CutoffLowLimit = @CutoffLowLimit, CutoffHighLimit=@CutoffHighLimit, CutoffHoldLimit=@CutoffHoldLimit, 
				DynamicLowLimit=@DynamicLowLimit, DynamicHighLimit=@DynamicHighLimit, 
				ReportNormalRangeLow=@ReportNormalRangeLow, ReportNormalRangeHigh=@ReportNormalRangeHigh,
				ReportAs=@ReportAs, ExpectedWindow=@ExpectedWindow, AutoReleaseFlag = @AutoReleaseFlag, UseAlpha=@UseAlpha, DecodedFlagRequired=@DecodedFlagRequired, UseRangeLimits=@UseRangeLimits, UseCutoffLimit=@UseCutoffLimit, MedicationDataIndirect = @MedicationDataIndirect,
				QSSLastUpdateID = @QSSLastUpdatedID, QSSUpdateDate = getDate(), LowReportAs = @LowReportAs, ReportAlphaRange = @ReportAlphaRange
				 
				 where TestCode = @TestCode and Version = @iCurrentVersion
	    
	    
	    end

	else
	begin
		insert into  tblResultedTestsDefinitions(TestCode, InternalName,
		          ExternalName, Worksheet, Department, DefaultValue, NullFlag,
		          Decimals, Units, Comment, SuppressFlag, SecureFlag,LOINCcode, 
				  InconsistentCommentCode, ConsistentCommentCode,AbnormalCommentCode, MedicationData, CutoffLowLimit, CutoffHighLimit, CutoffHoldLimit, DynamicLowLimit, DynamicHighLimit, ReportNormalRangeLow,
				   ReportNormalRangeHigh, ReportAs, ExpectedWindow, AutoReleaseFlag, UseAlpha, DecodedFlagRequired, UseRangeLimits, UseCutoffLimit, MedicationDataIndirect, QSSLastUpdateID, QSSCreatedByID, QSSUpdateDate, QSSCreatedDate,LowReportAs,ReportAlphaRange)
		 
			values(@TestCode, @InternalName, @ExternalName, @Worksheet, 
			      @Department, @DefaultValue, @NullFlag, @Decimals, @Units, @Comment,
			      @SuppressFlag, @SecureFlag, @LOINCcode, @InconsistentCommentCode, @ConsistentCommentCode, @AbnormalCommentCode, @MedicationData, 
			      @CutoffLowLimit, @CutoffHighLimit, @CutoffHoldLimit, @DynamicLowLimit,@DynamicHighLimit, @ReportNormalRangeLow, 
				   @ReportNormalRangeHigh, @ReportAs, @ExpectedWindow, @AutoReleaseFlag, @UseAlpha, @DecodedFlagRequired, @UseRangeLimits, @UseCutoffLimit, @MedicationDataIndirect, @QSSLastUpdatedID, @QSSLastUpdatedID, getDate(), getDate(),@LowReportAs, @ReportAlphaRange)
		
		--Insert new reocrd to version table		   
		Insert into tblResultCodeVersions (TestCode, CurrentVersion, QSSLastUpdateID, QSSUpdateDate) Values (@TestCode, 0,@QSSLastUpdatedID,getDate() )
							   
	end
END

GO
/****** Object:  StoredProcedure [dbo].[spSaveResultedTestReflexParams]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveResultedTestReflexParams] 

	@TestCode varchar(100) ,
	@ReflexLowValue varchar(50) ,
	@ReflexHighValue varchar(50) ,
	@ReflexLowTestCode varchar(50) ,
	@ReflexHighTestCode varchar(50) ,
	@ReflexInconsistentTestCode varchar(50) ,
	@ReflexConsistentTestCode varchar(50) ,	
	@UserID varchar(20)
AS
BEGIN

	Declare @iCurrentVersion as int
	select @iCurrentVersion = CurrentVersion from tblResultCodeVersions  where  TestCode = @TestCode
	
	UPDATE dbo.tblResultedTestsDefinitions
	SET ReflexLowValue = @ReflexLowValue ,
	    ReflexHighValue = @ReflexHighValue , 
	    ReflexLowTestCode = @ReflexLowTestCode , 
	    ReflexHighTestCode = @ReflexHighTestCode ,
	    ReflexInconsistentTestCode =  @ReflexInconsistentTestCode ,
	    ReflexConsistentTestCode =  @ReflexConsistentTestCode ,	
	    QSSLastUpdateID =  @UserID ,
	    QSSUpdateDate = GETDATE() ,
	    QSSVersion = QSSVersion + 1
		WHERE TestCode = @TestCode and Version = @iCurrentVersion

		
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveResultForCoriell]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spSaveResultForCoriell] 
@Accession varchar(50) = NULL,
@Result varchar(50) = NULL,
@TestCode varchar(50) = NULL
AS
BEGIN

SET NOCOUNT ON


UPDATE tblResultedTests SET QSSUpdateDate =  GETDATE(), Result = @Result,ResultFlag = @Result, [Status] = 'Final',  QSSLastUpdateID = 'Coriell Interface' where accession = @Accession and [ResultTest] = @TestCode


END

GO
/****** Object:  StoredProcedure [dbo].[spSaveResultStatus]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spSaveResultStatus] 
@Accession varchar(50) =  NULL,
@Status varchar(100) = NULL,
@PerformedTest varchar(100) = NULL
AS
BEGIN

		UPDATE dbo.tblResultedTests
		SET Status = @Status, EntryDate = GETDATE() WHERE Accession = @Accession and @PerformedTest = PerformedTest
	
END


GO
/****** Object:  StoredProcedure [dbo].[spSaveResultTest]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Update 5/17/2017 Hanane - Do not modify Entry Date when the result is modified
-- Update 5/22/2020 Paul - Add save of ApprovedDate
-- =============================================
CREATE PROCEDURE [dbo].[spSaveResultTest]     
@ID integer ,    
@Result varchar(100),    
@Status varchar(50) ,    
@Comment  Varchar(max) = NULL ,    
@EnteredBy varchar (100) = NULL,     
@ResultFlag varchar (max) = NULL,    
@Accession varchar(50) =  NULL,    
@Outcome varchar(1) = NULL,    
@ReportAs varchar(100) = NULL, 
@ApprovedDate datetime = NULL,
@AutoManualFlag bit = NULL  
    
AS    
BEGIN    
DECLARE @EnteredByUser varchar(100),    
@ReflexHighValue decimal(20, 8)    
,@ReflexLowValue decimal(20, 8)    
,@ReflexLowTestCode varchar(50)    
,@ReflexHighTestCode varchar(50)    
,@ReflexInconsistantTestCode varchar(50)    
,@ReflexConsistantTestCode varchar(50)    
,@TestComment varchar(200)    
,@ResultTestCode varchar(100)    
,@InternalName varchar(100)    
,@QSSReleasedBy varchar(20) = NULL  
    
DECLARE @ConfirmAllTests bit,    
  @ConfirmAllMeds bit,    
  @ConfirmConsistancy bit,    
  @Prev_Result varchar(100)= NULL,    
  @Prev_ResultFlag as varchar(max) = NULL,    
  @Prev_Outcome varchar(1) = NULL    
     
 --Get values for new reflex testing rules     
 SELECT @ConfirmAllTests = ConfirmAllTests, @ConfirmAllMeds = ConfirmAllMeds, @ConfirmConsistancy = ConfirmConsistancy  FROM dbo.tblAccessions    
 WHERE Accession = @Accession      
    
    
 SELECT @EnteredByUser = EnteredBy, @Prev_Result = Result, @Prev_ResultFlag = ResultFlag, @Prev_Outcome = Outcome FROM dbo.tblResultedTests    
 WHERE id = @ID    
     
 If @ApprovedDate is not null and @ApprovedDate <> '' set @QSSReleasedBy = @EnteredBy 
     
    
 IF @EnteredByUser IS NULL    
 BEGIN    
  UPDATE dbo.tblResultedTests    
  SET Result = @Result,    
   Status = @Status ,    
   ResultComment = @Comment,    
   EnteredBy =  @EnteredBy,    
   ResultFlag = @ResultFlag,    
   EntryDate = GETDATE(),    
   QSSLastUpdateID = @EnteredBy,    
   QSSUpdateDate = GETDATE(),    
   QSSVersion = QSSVersion + 1,    
   Outcome = @Outcome,    
   ReportAs = @ReportAs,
   ApprovedDate = @ApprovedDate,
   AutoManualFlag = @AutoManualFlag,
   QSSReleasedID = @QSSReleasedBy  
       
  WHERE id =  @ID    
 END    
 ELSE    
 BEGIN    
  UPDATE dbo.tblResultedTests    
   SET Result = @Result,    
   Status = @Status ,    
   ResultComment = @Comment,    
   ResultFlag = @ResultFlag,    
  -- EnteredBy =  @EnteredBy,  'do not modify when a result is modified  
  -- EntryDate = GETDATE(),          
   QSSLastUpdateID = @EnteredBy,    
   QSSUpdateDate = GETDATE(),    
   QSSVersion = QSSVersion + 1,    
   Outcome = @Outcome,    
   ReportAs = @ReportAs,
   ApprovedDate = @ApprovedDate,
   AutoManualFlag = @AutoManualFlag,
   QSSReleasedID = @QSSReleasedBy
  WHERE id =  @ID    
 END    
     
     
     
    
--- Check if a Test Code needs to  be ordered    
    --SELECT @ResultTestCode = rtd.TestCode, @InternalName = rtd.InternalName, @ReflexLowValue = CAST(ISNULL(rtd.ReflexLowValue, 0) As Decimal(20, 8)), @ReflexHighValue = CAST(ISNULL(rtd.ReflexHighValue, 9999999) As Decimal(20, 8)), @ReflexLowTestCode = rtd.ReflexLowTestCode, @ReflexHighTestCode = rtd.ReflexHighTestCode    
    SELECT @ResultTestCode = rtd.TestCode, @InternalName = rtd.InternalName, 
	@ReflexLowValue = CAST(ISNULL(Case rtd.ReflexLowValue When '' then Null else rtd.ReflexLowValue End, -9999999999) As Decimal(20, 8)), 
    @ReflexHighValue = CAST(ISNULL(Case rtd.ReflexHighValue When '' then Null else rtd.ReflexHighValue End, -9999999999) As Decimal(20, 8)),  
	@ReflexLowTestCode = rtd.ReflexLowTestCode,      
    @ReflexHighTestCode = rtd.ReflexHighTestCode,@ReflexInconsistantTestCode = ReflexInconsistentTestCode,@ReflexConsistantTestCode = ReflexConsistentTestCode    
 FROM   tblResultedTestsDefinitions AS rtd WITH (nolock) INNER JOIN    
           tblResultedTests AS rt WITH (nolock) ON rtd.TestCode = rt.ResultTest INNER JOIN    
           tblResultCodeVersions ON rtd.TestCode = tblResultCodeVersions.TestCode AND rtd.Version = tblResultCodeVersions.CurrentVersion    
 WHERE rt.id =  @ID    
            
            
 IF NOT EXISTS ( SELECT OrderedTest FROM tblOrderedTests WHERE     
  Accession = @Accession and (OrderedTest = @ReflexLowTestCode or OrderedTest = @ReflexHighTestCode))    
 BEGIN    
       
    --    IF @Result != '' AND @Accession iS NOT NULL    
        IF @Result != '' AND @Accession iS NOT NULL AND  ISNUMERIC(@Result) = 1 AND @ConfirmAllTests = 1    
        BEGIN    
   IF CAST(@Result As Decimal(20, 8)) < @ReflexLowValue    
   BEGIN    
    --SET @TestComment = 'Created due to low result value for: ' + @ResultTestCode + ' Value was: ' + @Result    
    SET @TestComment = 'Created due to low result value for: ' + @InternalName + ' Value was: ' + @Result    
    EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @ReflexLowTestCode , @TestComment = @TestComment, @Count = 1    
     END    
   ELSE IF CAST(@Result As Decimal(20, 8)) >= @ReflexHighValue    
     BEGIN    
    --SET @TestComment = 'Created due to high result value for: ' + @ResultTestCode + ' Value was: ' + @Result    
    SET @TestComment = 'Created due to high result value for: ' + @InternalName + ' Value was: ' + @Result    
       EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @ReflexHighTestCode , @TestComment = @TestComment, @Count = 1    
             
   END    
  END    
      
  -- Reflexing for Alpha    
  If ISNUMERIC(@Result) =  0  AND @ConfirmAllTests = 1    
  BEGIN    
       
   DECLARE @AlphaReflex varchar(200)    
   Select @AlphaReflex = ReflexTestCode from tblResultedTestDecodes where TestCode = @ResultTestCode and Decode = @Result    
   if @AlphaReflex != ''    
   Begin    
    SET @TestComment = 'Test Created due to '+ @Result +' result value for: ' + @InternalName + ' Value was: ' + @Result    
    EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @AlphaReflex , @TestComment = @TestComment, @Count = 1    
   End    
       
  END     
      
  -- Reflexing Consistancy    
  If ISNUMERIC(@Result) =  1  AND @ConfirmConsistancy = 1 and @Outcome != ''    
   BEGIN    
       
   if @ReflexInconsistantTestCode != '' and @Outcome = 'I'    
   Begin    
    SET @TestComment = 'Test Created due to result inconsistant value for: ' + @InternalName + ' Value was: ' + @Result    
    EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @ReflexInconsistantTestCode, @TestComment = @TestComment, @Count = 1    
   End    
       
   if @ReflexConsistantTestCode != '' and @Outcome = 'C'    
   Begin    
    SET @TestComment = 'Test Created due to result consistant value for: ' + @InternalName + ' Value was: ' + @Result    
    EXEC spCreateHighLowTests @Accession = @Accession , @OrderedTest = @ReflexInconsistantTestCode, @TestComment = @TestComment, @Count = 1    
   End       
    
  END        
      
      
END    
    
-- If either of these values change the capture audit    
If @Prev_Result <> @Result or @Result is not Null--or (@ResultFlag <> @Prev_ResultFlag) or (@OutCome <> @Prev_Outcome)     
BEGIN    
    
Exec spAuditResultedTests @Accession = @Accession, @ID = @ID     
    
END    
     
END 
GO
/****** Object:  StoredProcedure [dbo].[spSaveResultTestParams]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveResultTestParams]    
  
            @TestCode varchar(20),  
            @Sex varchar(20),  
            @MinAge   decimal(11,5),    
            @MaxAge   decimal(11,5), 
            @LowLimit varchar(100),  
            @HighLimit  varchar(100),  
            @NormalLowLimit varchar(100),  
            @NormalHighLimit varchar(100),  
            @CriticalLowLimit varchar(100),  
            @CriticalHighLimit varchar(100),  
            @AutoReleaseLowLimit varchar(100),
            @AutoReleaseHighLimit varchar(100),
            @DisplayResultAs  varchar(100),  
            @DynamicLow varchar(100),  
            @DynamicLowReportAs varchar(100),  
            @DynamicHigh varchar(100),  
            @DynamicHighReportAs varchar(100),    
			@LLAge Integer,
			@HLAge Integer,
			@LLAgeUnit varchar(10),    
            @HLAgeUnit varchar(10),
      
    @ReturnCode int output  
      
      
  
AS    
BEGIN   
  
 declare @iCurrentVersion as int  
 select @iCurrentVersion = CurrentVersion from tblResultCodeVersions  where  TestCode = @TestCode  
  
  
   
  SET @ReturnCode = 0  
     BEGIN  
          INSERT INTO   tblResultedTestsParams  
              ( ResultedTest, Sex, MinAge, MaxAge,  LowLimit,   
                   HighLimit, NormalLowLimit, NormalHighLimit,  CriticalLowLimit,  
                   CriticalHighLimit,  AutoReleaseLowLimit, AutoReleaseHighLimit,  
                   DisplayResultAs, HighFlag, LowFlag, CriticalHighFlag, CriticalLowFlag,  
                   ReviewHighFlag, ReviewLowFlag,DynamicLow,DynamicLowReportAs,DynamicHigh,DynamicHighReportAs,Version,
                   LLAge, HLAge, LLAgeUnit,HLAgeUnit)    
                   VALUES  
              (@TestCode,@Sex, @MinAge, @MaxAge,  @LowLimit,   
                   @HighLimit, @NormalLowLimit,@NormalHighLimit,@CriticalLowLimit,  
                   @CriticalHighLimit,@AutoReleaseLowLimit, @AutoReleaseHighLimit,  
                   @DisplayResultAs, 'H', 'L', 'CH' , 'CL', 'RH' , 'RL',@DynamicLow,@DynamicLowReportAs,@DynamicHigh,@DynamicHighReportAs, @iCurrentVersion,
                   @LLAge, @HLAge, @LLAgeUnit,@HLAgeUnit)    
     END  
 END  

GO
/****** Object:  StoredProcedure [dbo].[spSaveRouteInfo]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveRouteInfo]
	@RouteCode as varchar(200),
	@RouteName as varchar(200),
    @PrinterName as varchar(200),
    @InHouseRoute as int,
    @ClientCodes as varchar(max),
    @Contact as varchar(200),
    @Address as varchar(200),	
	@Address2 as varchar(200),
	@City as varchar(200),
	@State as varchar(200),	
	@Zip as varchar(200),
	@TelePhone as varchar(200),
	@EXT as varchar(200),
	@Notes as varchar(200),
	@ActiveRoute as int,
	@DialUpNumber as varchar(200),
	@Format as varchar(200),
	@PaperType as varchar(200),
	@PowerDoc as int,
	@PrinterType as varchar(200),
	@MailOutOverride as int,
	@PrinterTimeOptions as varchar(200),
	@Reprint as int,
	@PrintTimes as varchar(max),
	@PrintDays as varchar(max)
	
	
AS
BEGIN
	declare @iCount as int
	select @iCount = count(RouteCode) from tblRptRoutesDefinitions where  RouteCode = @RouteCode
		if @iCount > 0
			begin
				update tblRptRoutesDefinitions set RouteCode = @RouteCode, RouteName = @RouteName, PrinterName = @PrinterName,
					 InHouseRoute = @InHouseRoute, ClientCodes = @ClientCodes, Address = @Address, Address2 = @Address2 ,City = @City, 
					 State = @State, Zip = @Zip, Telephone = @Telephone,  EXT = @EXT,Contact = @Contact,
					 Notes = @Notes, ActiveRoute = @ActiveRoute, 
					 DialupNumber = @DialUpNumber, Format = @Format, PaperType = @PaperType, PowerDoc = @PowerDoc,PrinterType=@PrinterType,
					 MailOutOverride = @MailOutOverride, PrinterTimeOptions = @PrinterTimeOptions, Reprint = @Reprint, PrintTimes = @PrintTimes,
					 PrintDays = @PrintDays
					 
				where  RouteCode = @RouteCode
			end
		else 
			begin	
				insert into tblRptRoutesDefinitions(RouteCode, RouteName, PrinterName, InhouseRoute, ClientCodes,
							 Contact, Address, Address2,
							 City, State, Zip, telephone, Ext, Notes, ActiveRoute,
							 DialupNumber, Format, PaperType, PowerDoc, PrinterType, MailOutOverride, PrinterTimeOptions, Reprint,
							 PrintTimes, PrintDays)
				 
				values(		 @RouteCode, @RouteName, @PrinterName, @InHouseRoute, @ClientCodes, @Contact, @Address, @Address2,
							 @City, @State, @Zip, @telephone, @EXT, @Notes, @ActiveRoute,
							 @DialUpNumber, @Format, @PaperType, @PowerDoc, @PrinterType, @MailOutOverride, @PrinterTimeOptions, @Reprint,
							 @PrintTimes, @Printdays)
			end		
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveSalesmanInfo]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveSalesmanInfo]
	@SalesmanCode as varchar(20),
	@SalesmanName as varchar(100),
	@Territory as varchar(100)= null,
    @SalesGroup as varchar(100)= null,
    @Specialty as varchar(100)= null,
    @Service as varchar(100)= null,
    @isManager as varchar = 0
    
	
AS
BEGIN
	declare @iCount as int
	select @iCount = count(SalesmanCode) from tblSalesman where  SalesmanCode = @SalesmanCode
	
		if @isManager = 'True' or @isManager = 1
		begin
			if @iCount > 0
				begin
					update tblSalesman set salesmanName = @SalesmanName, territory = @Territory, salesGroup = @SalesmanCode,
							specialty = @Specialty, service = @service , isManager = @isManager
						 
					where  SalesmanCode = @SalesmanCode
				end
			else 
				begin	
					insert into tblSalesman(Salesmancode, salesmanName, territory, salesgroup, specialty, service, isManager)
					 
					values(@SalesmanCode, @salesmanname, @territory, @SalesmanCode, @specialty, @service, @isManager)
				end		
		end
		else
		begin
			if @iCount > 0
				begin
					update tblSalesman set salesmanName = @SalesmanName, territory = @Territory, salesGroup = @SalesGroup,
							specialty = @Specialty, service = @service , isManager = @isManager
						 
					where  SalesmanCode = @SalesmanCode
				end
			else 
				begin	
					insert into tblSalesman(Salesmancode, salesmanName, territory, salesgroup, specialty, service, isManager)
					 
					values(@SalesmanCode, @salesmanname, @territory, @salesgroup, @specialty, @service, @isManager)
				end		
		end
	
		
END





--**************************************

GO
/****** Object:  StoredProcedure [dbo].[spSaveScannedReportsAudit]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveScannedReportsAudit]
	@Accession varchar(50) ,
	@FileName  varchar(200) ,
	@Action  varchar (10) ,
	@QSSUserID   varchar (20)

AS  
BEGIN  

 INSERT INTO [tblScannedReportsAudit]
           ([Accession]
           ,[FileName]
           ,[Action]
           ,[QSSUserID]
           ,[LoginTimestamp])
     VALUES
           (@Accession
           ,@FileName
           ,@Action
           ,@QSSUserID
           ,GETDATE())

END
GO
/****** Object:  StoredProcedure [dbo].[spSaveSourcesforAccession]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveSourcesforAccession]                  
                 
 @CaseNumber as varchar(100),             
 @SourceID int,            
 @Source as varchar(200)   ,  
 @Cassettes as varchar(100)            
                     
AS                  
BEGIN                  
declare @CurrID int               
select @CurrID=id from tblPathologySources where SourceID=@SourceID and CaseNumber=@CaseNumber --and Source=@Source           
if @CurrID is NULL                
 Begin                
  INSERT INTO [dbo].[tblPathologySources]                
           ([CaseNumber]              
     ,[SourceID]             
           ,[Source] ,  
     Cassettes                
           )                
  VALUES                
           (@CaseNumber             
     ,@SourceID               
           ,@Source            
         ,@Cassettes   
           )                
 END        
 else      
 begin      
  update  [tblPathologySources] set  Source=@Source,Cassettes=@Cassettes    where SourceID=@SourceID and CaseNumber=@CaseNumber      
 end              
END     
GO
/****** Object:  StoredProcedure [dbo].[spSaveSpecimenTypeDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveSpecimenTypeDefinitions]

	@Code as varchar(25),
	@Description as varchar(50)
	
AS
BEGIN

	declare @iCount as int
	select @iCount = count(SpecimenCode) from tblSpecimens where  SpecimenCode = @Code

	if @iCount > 0
	begin
		update tblSpecimens set Specimen = @Description
		 where SpecimenCode  = @Code 
	end
	else
	begin
		insert into  tblSpecimens( SpecimenCode , Specimen)		 
			values( @Code, @Description)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveStainDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveStainDefinitions]        
 @StainID as varchar(20),        
 @StainDescription as varchar(100),      
 @isActive as bit,  
 @XCounter as varchar  
AS        
BEGIN        
 declare @iCount as int        
 select @iCount = count(StainID) from tblStainMaster  where  StainID = @StainID        
        
 if @iCount > 0        
 begin        
   update tblStainMaster set StainDescription=@StainDescription,isActive=@isActive,XCounter=@XCounter  where StainID = @StainID      
 end        
 else        
 begin        
  insert into tblStainMaster(StainID,StainDescription,isActive,XCounter)   values (@StainID,@StainDescription,@isActive,@XCounter)      
 end        
END 
GO
/****** Object:  StoredProcedure [dbo].[spSaveStainsforAccession]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveStainsforAccession]              
             
 @StainID as integer ,             
 @CaseNumber as varchar(100),              
 @StainRequest as varchar(500),              
 @Source as varchar(100)              
       
       
       
AS              
BEGIN              
            
if not exists (select * from tblPathologyStains where Source=@Source and CaseNumber=@CaseNumber and StainRequest=@StainRequest )          
 Begin            
             
            
  INSERT INTO [dbo].tblPathologyStains            
           ([StainID]            
           ,[CaseNumber]            
           ,[StainRequest]            
     ,Source      
     )            
  VALUES            
           (@StainID            
           ,@CaseNumber            
           ,@StainRequest            
          ,@Source)            
 END            
ELSe            
 begin            
  Update tblPathologyStains              
  Set  CaseNumber = @CaseNumber,             
    StainRequest = @StainRequest,             
    Source=@Source            
  where StainID = @StainID            
 END            
            
END       
GO
/****** Object:  StoredProcedure [dbo].[spSaveSuspensionReason]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spSaveSuspensionReason]

	@Code as varchar(50),
	@PNM as bit = null,
	@SM as bit = null,
	@BTAM as bit = null,
	@CLM as bit = null,
	@SSM as bit = null,
	@DCM as bit = null,
	@ICM as bit = null,
	@DOBM as bit = null,
	@PCM as bit = null,
	@CCM as bit = null,
	@IPM as bit = null,
	@PNMS as varchar(20) = null,
	@SMS as varchar(20) = null,
	@BTAMS as varchar(20) = null,
	@CLMS as varchar(20) = null,
	@SSMS as varchar(20) = null,
	@DCMS as varchar(20) = null,
	@ICMS as varchar(20) = null,
	@DOBMS as varchar(20) = null,
	@PCMS as varchar(20) = null,
	@CCMS as varchar(20) = null,
	@IPMS as varchar(20) = null,
	@IMC as varchar(50) = null
	

AS
BEGIN

	declare @iCount as int
	select @iCount = count(BTCode) from tblSuspensionReason where  BTCode = @Code

	if @iCount > 0
	begin
		update tblSuspensionReason set PNM = @PNM , SM = @SM, BTAM = @BTAM, CLM = @CLM, 
		SSM = @SSM, DCM = @DCM, ICM = @ICM, DOBM = @DOBM,  PCM = @PCM, CCM = @CCM,
		IPM = @IPM, IMC = @IMC, PNMS = @PNMS , SMS = @SMS, BTAMS = @BTAMS, CLMS = @CLMS, 
		SSMS = @SSMS, DCMS = @DCMS, ICMS = @ICMS, DOBMS = @DOBMS, PCMS = @PCMS, CCMS = @CCMS,
		IPMS = @IPMS
		where BTCode = @Code 
	end
	else
	begin
		insert into  tblSuspensionReason( BTCode, PNM, SM, BTAM, CLM, SSM, DCM, ICM, DOBM,  PCM, CCM,
		IPM, IMC, PNMS, SMS, BTAMS, CLMS, SSMS, DCMS, ICMS, DOBMS, PCMS, CCMS,
		IPMS)		 
			values( @Code, @PNM, @SM, @BTAM, @CLM, @SSM, @DCM, @ICM, @DOBM,  @PCM, @CCM, @IPM, @IMC,
			@PNMS, @SMS, @BTAMS, @CLMS, @SSMS, @DCMS, @ICMS, @DOBMS, @PCMS, @CCMS, @IPMS)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveTestsAsHold]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 -- =============================================    
CREATE PROCEDURE [dbo].[spSaveTestsAsHold]
	@ResultTable as ResultedTestsType ReadOnly
AS
	SET NOCOUNT ON;

	Declare @Accession varchar(100),
		@ResultTest varchar(100),
		@PerformedTest varchar(100),
		@Result varchar(100),
		@NormalRangeRT varchar(200),
		@Version int
	
	/*** !!!!!!!!!!!!!!!!!! CHANGE BACK to @ResultTable before going live !!!!!!!!!!!!!!!!!!!!!! *****/
	DECLARE Result_Cursor CURSOR FAST_FORWARD FOR
	Select Accession, ResultTest, PerformedTest, Result, NormalRange, [Version] FROM @ResultTable
	where PerformedTest not in
	(Select PerformedTest from tblPerformedTestsDefinitions where MailoutFlag = 'M')
	--!!!!!!!!!!!!!!!!!!!! Delete this before going live !!!!!!!!!!!!!!!!!!!!!!!!!!!!
	--and Accession = '1906260003' and ResultTest = 'LD001' and PerformedTest = 'LD040'

	OPEN Result_Cursor
	
	FETCH NEXT FROM Result_Cursor
	INTO @Accession, @ResultTest, @PerformedTest, @Result, @NormalRangeRT, @Version

	WHILE @@FETCH_STATUS = 0
	BEGIN
		--Select @Accession, @ResultTest, @PerformedTest
		Declare @UseCutoffLimit as bit = 0,
				@UseRangeLimits as bit = 0,
				@LowLimit as decimal(11,5) = 0.00,
				@HighLimit as decimal(11,5) = 99999.99
		--Algo: 1.	Normal range: if has a ‘-‘ in any place but the first place in NormalRange field, convert numbers. 
			--Put this in a try/catch so that if the convert fails, you do a strict alpha test.
			--2.	If it has it in the first position, try to convert. If fails, run a straight alpha test.
			--3.	For all others, and for those that failed steps 2 and 3, run an alpha test only.
			--4.	For those passing step 2, compare each number to either: params or cutoffs, depending on how the flag is set.
		--Select @Accession, @NormalRangeRT
		--If charindex('-', @NormalRangeRT) > 1 begin
		Begin Try
			--Dash means use range limits was checked 99% of the time, so load up the patient demo stuff
			Declare @PatientGender varchar(20),
					@PatientDOB datetime,
					@Age decimal(11,5)
			SELECT @PatientGender = ptSex , @PatientDOB = ptDateOfBirth     
					from tblPatient pat (nolock)    
					INNER JOIN tblAccessions acc (nolock)    
					ON pat.PatientId = acc.PatientID    
					where acc.Accession = @Accession
			Set @Age = DATEDIFF(DAY,@PatientDOB, getDate()) / CONVERT(decimal(11,5),365) 
			declare @sex as varchar(20)    
			declare @minage as decimal(11,5)     
			declare @maxage as decimal(11,5)     
    
			select @sex = tblResultedTestsParams.sex, @minage = tblResultedTestsParams.minage, @maxage = tblResultedTestsParams.maxage   FROM  tblResultedTests     
			INNER JOIN tblResultedTestsParams    
			on tblResultedTests.ResultTest =  tblResultedTestsParams.ResultedTest 
			and tblResultedTestsParams.sex = @PatientGender  
			AND @Age BETWEEN tblResultedTestsParams.MinAge and tblResultedTestsParams.MaxAge
			WHERE Accession = @Accession
			--Select @sex, @minage, @maxage, @age
			Declare @NormalRange varchar(200) --CURRENT normal range (for this accession, NOT for the test); compare to this
			/************* for testing ***************/
			--Declare @HighLimitVar varchar(100), @ParamsVersion varchar(100)
			if @sex is null or @sex = ''    
			begin    
				Select @UseCutoffLimit = UseCutoffLimit, @UseRangeLimits = UseRangeLimits, 
					@NormalRange = case      
					when tblResultedTestsDefinitions.UseRangeLimits = 'True' then tblResultedTestsParams.NormalLowLimit + '-' + tblResultedTestsParams.NormalHighLimit    
					When tblResultedTestsDefinitions.UseCutoffLimit = 'True' then case when tblResultedTestsDefinitions.CutoffLowLimit != '' AND tblResultedTestsDefinitions.CutoffHighLimit != '' then '>' + tblResultedTestsDefinitions.CutoffLowLimit + ' ' +  '<' + tblResultedTestsDefinitions.CutoffHighLimit    
							when tblResultedTestsDefinitions.CutoffLowLimit != '' AND tblResultedTestsDefinitions.CutoffHighLimit = '' then '>' + tblResultedTestsDefinitions.CutoffLowLimit    
							when tblResultedTestsDefinitions.CutoffLowLimit  = '' AND tblResultedTestsDefinitions.CutoffHighLimit != '' then '<' + tblResultedTestsDefinitions.CutoffHighLimit    
							end    
						end,
					@LowLimit = case
				when tblResultedTestsDefinitions.UseRangeLimits = 'True' then
					case when IIF(TRY_PARSE(tblResultedTestsParams.AutoReleaseLowLimit AS decimal(11, 5)) IS NOT NULL, 'True', 'False') = 'True' Then	
						Cast(tblResultedTestsParams.AutoReleaseLowLimit AS decimal(11, 5))
					Else 0.00 end
				end,
				@HighLimit = case
				when tblResultedTestsDefinitions.UseRangeLimits = 'True' then
					case when IIF(TRY_PARSE(tblResultedTestsParams.AutoReleaseHighLimit AS decimal(11, 5)) IS NOT NULL, 'True', 'False') = 'True' Then
						Cast(tblResultedTestsParams.AutoReleaseHighLimit AS decimal(11, 5))
					Else 99999.99 End
				when tblResultedTestsDefinitions.UseCutoffLimit = 'True' then
					case when IIF(TRY_PARSE(tblResultedTestsDefinitions.CutoffHoldLimit AS decimal(11, 5)) IS NOT NULL, 'True', 'False') = 'True' Then
						Cast(tblResultedTestsDefinitions.CutoffHoldLimit AS decimal(11, 5))
					Else 99999.99 end
				end
				FROM  tblResultedTests     
				INNER JOIN tblResultedTestsParams    
				on tblResultedTests.ResultTest =  tblResultedTestsParams.ResultedTest    
				and tblResultedTests.version =  tblResultedTestsParams.version    
				inner join tblResultedTestsDefinitions    
				on tblResultedTests.ResultTest =  tblResultedTestsDefinitions.TestCode
				and tblResultedTests.Version = tblResultedTestsDefinitions.Version
				and Accession = @Accession and ResultTest = @ResultTest and PerformedTest = @PerformedTest
			end
			else begin
				--print '!!!' 
				Select @UseCutoffLimit = UseCutoffLimit, @UseRangeLimits = UseRangeLimits, 
					--@ParamsVersion = tblResultedTestsParams.Version, 
					--@minage = tblResultedTestsParams.minage,
					--@maxage = tblResultedTestsParams.maxage,
					@NormalRange = case     
					when tblResultedTestsDefinitions.UseRangeLimits = 'True' then tblResultedTestsParams.NormalLowLimit + '-' + tblResultedTestsParams.NormalHighLimit    
					When tblResultedTestsDefinitions.UseCutoffLimit= 'True' then 
					case when tblResultedTestsDefinitions.CutoffLowLimit != '' AND tblResultedTestsDefinitions.CutoffHighLimit != '' then '>' + tblResultedTestsDefinitions.CutoffLowLimit + ' ' +  '<' + tblResultedTestsDefinitions.CutoffHighLimit     
						when tblResultedTestsDefinitions.CutoffLowLimit != '' AND tblResultedTestsDefinitions.CutoffHighLimit = '' then '>' + tblResultedTestsDefinitions.CutoffLowLimit    
						when tblResultedTestsDefinitions.CutoffLowLimit  = '' AND tblResultedTestsDefinitions.CutoffHighLimit != '' then '<' + tblResultedTestsDefinitions.CutoffHighLimit    
						end    
					end,
					@LowLimit = case
					when tblResultedTestsDefinitions.UseRangeLimits = 'True' then
						case when IIF(TRY_PARSE(tblResultedTestsParams.AutoReleaseLowLimit AS decimal(11, 5)) IS NOT NULL, 'True', 'False') = 'True' Then	
							Cast(tblResultedTestsParams.AutoReleaseLowLimit AS decimal(11, 5))
						Else 0.00 end
					end,
					@HighLimit = case
					when tblResultedTestsDefinitions.UseRangeLimits = 'True' then
						case when IIF(TRY_PARSE(tblResultedTestsParams.AutoReleaseHighLimit AS decimal(11, 5)) IS NOT NULL, 'True', 'False') = 'True' Then
							Cast(tblResultedTestsParams.AutoReleaseHighLimit AS decimal(11, 5))
						Else 99999.99 End
					when tblResultedTestsDefinitions.UseCutoffLimit = 'True' then
						case when IIF(TRY_PARSE(tblResultedTestsDefinitions.CutoffHoldLimit AS decimal(11, 5)) IS NOT NULL, 'True', 'False') = 'True' Then
							Cast(tblResultedTestsDefinitions.CutoffHoldLimit AS decimal(11, 5))
						Else 99999.99 end
					end
				FROM  tblResultedTests     
				INNER JOIN tblResultedTestsParams    
				on tblResultedTests.ResultTest =  tblResultedTestsParams.ResultedTest    
				and tblResultedTests.version =  tblResultedTestsParams.version    
				inner join tblResultedTestsDefinitions    
				on tblResultedTests.ResultTest =  tblResultedTestsDefinitions.TestCode    
				and tblResultedTests.Version = tblResultedTestsDefinitions.Version
				WHERE Accession = @Accession  and ResultTest = @ResultTest and PerformedTest = @PerformedTest  
				AND tblResultedTestsParams.Sex = @PatientGender
				and tblResultedTestsParams.MinAge = @MinAge and tblResultedTestsParams.MaxAge = @MaxAge
				--AND @Age BETWEEN tblResultedTestsParams.MinAge and tblResultedTestsParams.MaxAge    
				--- Update Records that have no values set in NormalRange.    
				If @NormalRange is null or @NormalRange = '' SET @NormalRange = 'No Range'  
			end
			--Select @NormalRange, @NormalRangeRT, @UseRangeLimits as UseRangeLimits, @UseCutoffLimit
			if @NormalRange <> @NormalRangeRT
			begin
				/*** ONLY HOLD IF FALLS ABOVE/BELOW HOLD LEVELS!!!! ***/
				Declare @ResultDec as decimal(11, 5)
				Select @ResultDec = 
				case when IIF(TRY_PARSE(@Result AS decimal(11, 5)) IS NOT NULL, 'True', 'False') = 'True' Then	
						Cast(@Result AS decimal(11, 5))
				Else 0.00 End
				--Select @Result, @ResultDec, @LowLimit, @HighLimit, @HighLimitVar as autoreleasehighlimit, @ParamsVersion, @minage, @maxage, @PatientGender
				if @UseRangeLimits = 'true' 
				begin
					if @ResultDec < @LowLimit or @ResultDec > @HighLimit
					begin
						Update tblResultedTests set Status = 'Hold', NormalRange = @NormalRange
						Where Accession = @Accession and ResultTest = @ResultTest and PerformedTest = @PerformedTest
					end
				end
				else begin
					if @UseCutoffLimit = 'true' begin
						--Select @NormalRange, @LowLimit, @HighLimit
						if @ResultDec > @HighLimit
						begin
							Update tblResultedTests set Status = 'Hold', NormalRange = @NormalRange
							Where Accession = @Accession and ResultTest = @ResultTest and PerformedTest = @PerformedTest
						end
					end
				end
			end
		End Try
		Begin Catch

		End Catch
		--end
		FETCH NEXT FROM Result_Cursor
		INTO @Accession, @ResultTest, @PerformedTest, @Result, @NormalRangeRT, @Version
	END
	CLOSE Result_Cursor
	DEALLOCATE Result_Cursor

GO
/****** Object:  StoredProcedure [dbo].[spSaveTestsAsHold_OnSave]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Paul Antompietri
-- Create date: 6/30/2020
-- Description:	Companion to spSaveTestsAsHold, except that this one does it as the result
--				is being saved, so no comparison needed. Just gets the parameters, compares, 
--				and puts on hold if outside the hold limits.
-- =============================================
CREATE PROCEDURE [dbo].[spSaveTestsAsHold_OnSave]
	@Accession varchar(100),
	@TestCode varchar(100),
--	@PerformedTest varchar(100),
    @Result varchar(100),
	@ReturnCode int output
AS
Set @ReturnCode = 0
BEGIN
	/** !!!!! below based on DataFunctions.AutoRelease !!!!! **/
	Select * into #tmpResultInfo from dbo.udf_GetDataForTestResult(@Accession, @TestCode, @Result) 
	Declare @UseCutoffLimit bit
	Declare @UseRangeLimits bit
	Declare @CutoffHoldLimit varchar(100)
	Declare @AutoReleaseLowLimit varchar(100)
	Declare @AutoReleaseHighLimit varchar(100)
	Declare @blnAlphaMatch bit = 0

	DECLARE RESULTTESTCODE_CURSOR CURSOR FAST_FORWARD FOR 
	SELECT UseCutoffLimit, UseRangeLimits, CutoffHoldLimit, AutoReleaseLowLimit, AutoReleaseHighLimit
	FROM #tmpResultInfo
	OPEN RESULTTESTCODE_CURSOR

	FETCH NEXT FROM RESULTTESTCODE_CURSOR
	INTO @UseCutoffLimit, @UseRangeLimits, @CutoffHoldLimit, @AutoReleaseLowLimit, @AutoReleaseHighLimit
	Print @AutoReleaseLowLimit
	Print @AutoReleaseHighLimit
	WHILE @@FETCH_STATUS = 0
	BEGIN	
		
		--check that @Result is numeric 
		Declare @blnParse as bit = (IIF(TRY_PARSE(@Result AS decimal(11, 5)) IS NOT NULL, 'True', 'False'))		
	--	if (@Result LIKE '%[0-9]%.%[0-9]%' OR @Result LIKE '.%[0-9]%' OR @Result LIKE '%[0-9]%.' OR @Result LIKE '%[0-9]%') 
	--AND @Result NOT LIKE '%[^0-9.]%'
		if @blnParse = 'True'
		Begin
			Declare @decResult decimal(11, 5) = Cast(@Result as decimal(11, 5))
			Declare @LowLimit decimal(11, 5) = 0.00
			Declare @HiLimit decimal(11, 5) = 99999.99
			
			if @UseRangeLimits = 'True' 
			begin
				Set @LowLimit = IIF(TRY_PARSE(@AutoReleaseLowLimit AS decimal(11, 5)) IS NOT NULL, 
						Cast(@AutoReleaseLowLimit AS decimal(11, 5)), 0.00)
				Set @HiLimit = IIF(TRY_PARSE(@AutoReleaseHighLimit AS decimal(11, 5)) IS NOT NULL, 
						Cast(@AutoReleaseHighLimit AS decimal(11, 5)), 99999.99)
			end
			if @UseCutoffLimit = 'True' 
			begin
				Set @HiLimit = Cast(isnull(@CutoffHoldLimit, 0) as decimal(11, 5))
			end
			If @DecResult < @LowLimit or @DecResult > @HiLimit 
			begin
				Update tblResultedTests set Status = 'Hold'
				Where Accession = @Accession and ResultTest = @TestCode --and PerformedTest = @PerformedTest
			End
		End
		
		FETCH NEXT FROM RESULTTESTCODE_CURSOR
		INTO @UseCutoffLimit, @UseRangeLimits, @CutoffHoldLimit, @AutoReleaseLowLimit, @AutoReleaseHighLimit
	END
	CLOSE RESULTTESTCODE_CURSOR
	DEALLOCATE RESULTTESTCODE_CURSOR
	Set @ReturnCode = 1
END

GO
/****** Object:  StoredProcedure [dbo].[spSaveTestSynced]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spSaveTestSynced]
	@TestCode as varchar(50)	
AS
BEGIN
	UPDATE tblOrderedTestsDefinitions set NeedsSync = 0, LastSyncDate = GETDATE()
	WHERE OrderedTest = @TestCode
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveThreadAudit]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spSaveThreadAudit] 
	-- Add the parameters for the stored procedure here
	@PageName varchar(100),
	@ThreadName varchar(100),
	@Accession varchar(50) = NULL,
	@QSSUpdateID varchar(20),
	@blnDeleteReviewAccession bit = 0
	--@StartEnd varchar(3)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	if not exists(select * from tblThreadAudit where ThreadName = @ThreadName)
	begin
		Insert into tblThreadAudit 
		(PageName, ThreadName, ThreadStart, ThreadEnd, Accession, QSSUpdateID)
		values(@PageName, @ThreadName, getdate(), '', @Accession, @QSSUpdateID)
	end
	else begin
		Update tblThreadAudit
		set ThreadEnd = getdate()
		where ThreadName = @ThreadName 
		--(PageName, ThreadName, ThreadStart, ThreadEnd, Accession, QSSUpdateID)
		--values(@PageName, @ThreadName, '', getdate(), @Accession, @QSSUpdateID)
	end
	if @blnDeleteReviewAccession = 'True' and @Accession is not null Delete from tblReviewAccession where Accession =@Accession 
END
GO
/****** Object:  StoredProcedure [dbo].[spSaveToErrorLog]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--=============================================
CREATE PROCEDURE [dbo].[spSaveToErrorLog]
       
    @WebUserId varchar(50),
    @ErrorSource varchar(200),
    @Accession varchar(100),
    @Note varchar(max) 

AS
BEGIN
    SET NOCOUNT ON;

	INSERT tblErrorLog (ErrorDate, WebUserID, ErrorSource, Accession, Note)
    VALUES(GETDATE(), @WebUserId, @ErrorSource, @Accession, @Note);

END
GO
/****** Object:  StoredProcedure [dbo].[spSaveWorksheetDefinitions]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveWorksheetDefinitions]

	@WCode as varchar(100),
	@Description as varchar(300),
    @CupsPerTray as varchar(100),	
	@LastTray as varchar(100),
	@LastCup as varchar(100),
	@TraySerialNumber as varchar(100),	
	@Department as varchar(100),
	@PrintGroup as varchar(100),
	@TotalCount as varchar(100),
	@LabelPrintGroup as varchar(100),	
	@TrayCupXREF as varchar(100),
	@MailoutLab as varchar(100),
	@Suffix as varchar(50)=null	
	
AS
BEGIN

	declare @iCount as int
	select @iCount = count(WKCode) from tblWorkSheetsDefinitions where  WKCode = @WCode

	if @iCount > 0
	begin
		update tblWorkSheetsDefinitions set [Description] = @Description, CupsPerTray = @CupsPerTray,
		 LastTray  = @LastTray ,LastCup = @LastCup, TraySerialNumber = @TraySerialNumber,		 
		 Department = @Department, PrintGroup =@PrintGroup,  TotalCount =@TotalCount,
		 LabelPrintGroup =@LabelPrintGroup,TrayCupXREF =@TrayCupXREF,MailoutLab =@MailoutLab,
		 Suffix = @Suffix
		 where WKCode = @WCode 
	end
	else
	begin
		insert into  tblWorkSheetsDefinitions( WKCode, Description, CupsPerTray, LastTray,
		             LastCup, TraySerialNumber, Department, PrintGroup, TotalCount,LabelPrintGroup,
		             TrayCupXREF, MailoutLab, Suffix)
		 
			values( @WCode, @Description, @CupsPerTray, @LastTray, @LastCup, @TraySerialNumber,
			       @Department, @PrintGroup,@TotalCount,@LabelPrintGroup, @TrayCupXREF, @MailoutLab, @Suffix)
	end
END
GO
/****** Object:  StoredProcedure [dbo].[spSearchCPTGroupByName]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spSearchCPTGroupByName]
	@GroupName As Varchar(200)
AS
BEGIN
	SET NOCOUNT ON;

    Select distinct GroupName from tblCPTGroups where GroupName like @GroupName

END

GO
/****** Object:  StoredProcedure [dbo].[spSearchResultTestCodesForInstrument]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSearchResultTestCodesForInstrument]
	@InstrumentCode varchar(200) = NULL

AS
BEGIN
	select rtd.TestCode  As Code, rtd.ExternalName as [Description], rtd.InternalName , rtd.Worksheet, rtd.Department, rtd.LOINCcode 
	from tblInstrumentElements ie (nolock)
	inner join tblResultedTestsDefinitions  rtd (nolock)
	ON ie.ResultTest = rtd.TestCode
	
	INNER JOIN  tblResultCodeVersions ON rtd.TestCode = tblResultCodeVersions.TestCode AND 
           rtd.Version = tblResultCodeVersions.CurrentVersion	
           
	AND ie.InstrumentCode = @InstrumentCode	
	
	
	
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSearchUsers]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spSearchUsers]
   
	@UserID varchar(20) = NULL,
	@LastName varchar(100) = NULL ,
	@UserName varchar(100) = NULL 
	

AS
BEGIN
	select UserID, UserName ,  UserLastName As LastName
	
	from tblUsersID  (nolock)
	
	where 
		  ISNULL(UserID,'') LIKE ISNULL(@UserID,  UserID)     
	  and ISNULL(UserLastName,'') LIKE ISNULL(@LastName,  UserLastName)
      and ISNULL(UserName,'') LIKE ISNULL(@UserName, UserName)
    
	ORDER By UserName , UserLastName asc
	
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[spSetCallListInactive]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSetCallListInactive]
	@accession varchar(50)
	
AS
BEGIN
    Begin
			 Update tblCallSheet  set ActiveFlag = '1'
						
			where accession = @accession
			
    end
    

END
GO
/****** Object:  StoredProcedure [dbo].[spSetCallListInactiveDOH]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSetCallListInactiveDOH]    
 @accession varchar(50)    
     
AS    
BEGIN    
    Begin    
    Update tblCallSheetDOH  set ActiveFlag = '1'    
          
   where accession = @accession    
       
    end    
        
    
END 
GO
/****** Object:  StoredProcedure [dbo].[spSetPostCashDifferenceToAdjust]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
 	
CREATE PROCEDURE [dbo].[spSetPostCashDifferenceToAdjust] 	
	@Accession varchar(50),
	@BTCode varchar(100),   
	@QSSLastUpdatedID varchar(20)
AS
BEGIN
	DECLARE @i decimal(18, 2)
	SET NOCOUNT ON;

Select @i =
((SELECT SUM(TotalFeeAmt) FROM tblBill WHERE Accession = @Accession and substring([Status], 1, 4) = 'BILL') 
- (select isnull(sum(PaymentAmt), 0)FROM tblPayment WHERE Accession = @Accession)
 - (select isnull(sum(AdjustmentAmt), 0)FROM tblPayment WHERE Accession = @Accession)
  - (select isnull(CoPayPostCash, 0.00) from tblBillAccessions where Accession = @Accession))
   from tblBillAccessions
    WHERE Accession = @Accession
	
	
	if @i > 0.00 
	begin
	--Adjust to get 0 balance
	Insert into tblPayment 
	(Accession, BTCode, OrderedTest, CPTcode, EntryDate, PaymentAmt, AdjustmentAmt, AdjustmentReason, QSSCreatedByID, QSSCreatedDate, Modifier, GroupFlag)
	values
	(@Accession, @BTCode, 'Unallocated', 'Unallocated', getdate(), 0.00, isnull(@i, 0.00), '', @QSSLastUpdatedID, getdate(), '', 0)

	--Add Unallocated to tblBill if it's not already there
	exec spAddUnallocatedToBill @Accession, @BTCode, @QSSLastUpdatedID
	

	DECLARE @Note varchar(200) = 'An unallocated adjustment of ' + CAST(@i as varchar) + ' was submitted. Bill Type: ' + @BTCode + ' Reason: Adjust to $0 or Copay'
	exec spSaveBillAuditDetails @Accession, 'Post Cash', @Note, @QSSLastUpdatedID
	end
end
GO
/****** Object:  StoredProcedure [dbo].[spSetResultReportOrder]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spSetResultReportOrder]  
 -- Add the parameters for the stored procedure here  
 @PerformedTest varchar(20),
 @ResultTestCode varchar(20), 
 @ReportOrder int
 AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
  
    -- Insert statements for procedure here  
 IF Exists(Select ResultTestCode from tblTestsReportOrderNew where PerformedTest = @PerformedTest and ResultTestCode =@ResultTestCode)
 Begin  
   Update tblTestsReportOrderNew set 
   ReportOrder = @ReportOrder
   where PerformedTest = @PerformedTest and ResultTestCode =@ResultTestCode
    
 End  
 else
 begin
 insert into tblTestsReportOrderNew
 (PerformedTest, ResultTestCode, ReportOrder)
 values
 (@PerformedTest, @ResultTestCode, @ReportOrder)
 end

END
GO
/****** Object:  StoredProcedure [dbo].[spSetUserPrefix]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spSetUserPrefix] 

@LabCode varchar (20),
@ClientCode varchar (20),
@Password varchar(20),
@AccessionPrefix varchar (50),
@AccessionNumber int,
@PatientPrefix varchar (50),
@PatientNumber int



AS
BEGIN


INSERT INTO tblUsers( LabCode, ClientCode, [Password],  AccessionPrefix, AccessionNumber, PatientPrefix, PatientNumber)
VALUES (@LabCode, @ClientCode, @Password,  @ClientCode, @AccessionNumber, 'P'+@ClientCode, @PatientNumber)
 
END
GO
/****** Object:  StoredProcedure [dbo].[spStoreForInterfaceProcessing]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
----- *Hanane-05/18/2020*  ---- Check the accession is in tblaccessions before adding it to tblreleasedforReview
						   ---- to correct issue of accessions failing to save on submit (reqEntry) but a pending entry is still released	

--PA 5/22/2020 - Rem out Delete from tblReviewAccession for AutoRelease
CREATE PROCEDURE [dbo].[spStoreForInterfaceProcessing]    
 -- Add the parameters for the stored procedure here    
 @Accession varchar(100),   
 @PreAccession varchar(50),   
 @ClientCode varchar(20),   
 @ClientName varchar(100),   
 @PhysicianCode varchar(20),   
 @PhysicianName varchar(100),  
 @LastName varchar(50),   
 @FirstName varchar(50),  
 @CollectionDate datetime,  
 @Status varchar(20),   
 @DateOfBirth datetime,  
 @Sex varchar(1),  
 @ReleasedBy varchar(20),  
 @Interface varchar(50)  
   
   
   
 AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;    
    IF Exists(Select Accession from tblAccessions where Accession =@Accession) 
    begin
    -- Insert statements for procedure here    
 IF Exists(Select Accession from tblReleasedForReview where Accession =@Accession and ClientCode = @ClientCode and Interface = @Interface)    
 Begin    
   Update tblReleasedForReview set   
   PreAccession = @PreAccession,  
   ClientCode = @ClientCode,  
   ClientName = @ClientName,  
   PhysicianCode = @PhysicianCode,  
   PhysicianName = @PhysicianName,  
   LastName = @LastName,  
   FirstName = @FirstName,  
   CollectionDate = @CollectionDate,  
   Status = @Status,  
   DateOfBirth = @DateOfBirth,  
   Sex = @Sex,  
   ReleaseDate=GETDATE(),   
   ReleasedBy = @ReleasedBy  
   --Interface = @Interface  
   Where Accession=@Accession  and ClientCode = @ClientCode and Interface = @Interface  
      
 End    
 Else    
 Begin    
 Insert into tblReleasedForReview values(@Accession, @ClientCode, @ClientName, @PhysicianCode, @PhysicianName, @LastName, @FirstName,  
 @CollectionDate, @Status, @DateOfBirth, @Sex, @PreAccession,   
 GETDATE(), @ReleasedBy, @Interface)    
 End    
   
 If UPPER(@Interface)='IPOWERDOC'   
 BEGIN  
     IF Exists(Select Accession from tbliPowerDoc where Accession =@Accession)   
    BEGIN  
    UPDATE tbliPowerdoc set ClientCode = @ClientCode where Accession=@Accession  
    END  
    ELSE  
    BEGIN  
    Insert into tbliPowerDoc values(@Accession, @ClientCode)  
    END  
END      
  
If  UPPER(@Interface)='2'  
 BEGIN  
     IF Exists(Select Accession from tblElectronicInterfacePracticeFusion where Accession =@Accession)   
    BEGIN  
    UPDATE tblElectronicInterfacePracticeFusion set ClientCode = @ClientCode where Accession=@Accession  
    END  
    ELSE  
      
    Insert into tblElectronicInterfacePracticeFusion (Accession, ClientCode)  
            values(@Accession, @ClientCode)  
      
END   
  
If  UPPER(@Interface)='3' and UPPER(@Status) = 'FINAL'    
 BEGIN  
     IF Exists(Select Accession from tblElectronicInterfaceCureMD where Accession =@Accession)   
    BEGIN  
    UPDATE tblElectronicInterfaceCureMD set ClientCode = @ClientCode where Accession=@Accession  
    END  
    ELSE  
      
    Insert into tblElectronicInterfaceCureMD (Accession, ClientCode)  
            values(@Accession, @ClientCode)  
      
END   
  
If  UPPER(@Interface)='4'  
 BEGIN  
     IF Exists(Select Accession from tblElectronicInterfaceOptiMantra where Accession =@Accession)   
    BEGIN  
    UPDATE tblElectronicInterfaceOptiMantra set ClientCode = @ClientCode where Accession=@Accession  
    END  
    ELSE  
      
    Insert into tblElectronicInterfaceOptiMantra (Accession, ClientCode)  
            values(@Accession, @ClientCode)  
      
END   
  
If  UPPER(@Interface)='5'  
 BEGIN  
     IF Exists(Select Accession from tblElectronicInterfaceEHI where Accession =@Accession)   
    BEGIN  
 UPDATE tblElectronicInterfaceEHI set ClientCode = @ClientCode where Accession=@Accession  
    END  
    ELSE  
      
    Insert into tblElectronicInterfaceEHI (Accession, ClientCode)  
            values(@Accession, @ClientCode)  
      
END   
  
If  UPPER(@Interface)='6'  
 BEGIN  
     IF Exists(Select Accession from tblElectronicInterfaceMedGen where Accession =@Accession)   
    BEGIN  
    UPDATE tblElectronicInterfaceMedGen set ClientCode = @ClientCode where Accession=@Accession  
    END  
    ELSE  
      
    Insert into tblElectronicInterfaceMedGen (Accession, ClientCode)  
            values(@Accession, @ClientCode)  
      
END   
  
If  (UPPER(@Interface)='7') and (@ClientCode not in ('1463', '2113', '2122') or UPPER(@Status) = 'FINAL' )  
 BEGIN  
     IF Exists(Select Accession from tblElectronicInterfaceAthena where Accession =@Accession)   
    BEGIN  
    UPDATE tblElectronicInterfaceAthena set ClientCode = @ClientCode where Accession=@Accession  
    END  
    ELSE  
      
    Insert into tblElectronicInterfaceAthena (Accession, ClientCode)  
            values(@Accession, @ClientCode)  
      
END  
  
If  UPPER(@Interface)='8'  
 BEGIN  
     IF Exists(Select Accession from tblElectronicInterfaceElation where Accession =@Accession)   
    BEGIN  
    UPDATE tblElectronicInterfaceElation set ClientCode = @ClientCode where Accession=@Accession  
    END  
    ELSE  
      
    Insert into tblElectronicInterfaceElation (Accession, ClientCode)  
            values(@Accession, @ClientCode)  
      
END  
  
  
If  (UPPER(@Interface)='9') and (@ClientCode <> '1904' or UPPER(@Status) = 'FINAL' )  
 BEGIN  
     IF Exists(Select Accession from tblElectronicInterfaceEclinical where Accession =@Accession)   
    BEGIN  
    UPDATE tblElectronicInterfaceEClinical set ClientCode = @ClientCode where Accession=@Accession  
    END  
    ELSE  
      
    Insert into tblElectronicInterfaceEClinical (Accession, ClientCode)  
            values(@Accession, @ClientCode)  
      
END  
  
If  (UPPER(@Interface)='10') and (@ClientCode <> '1835' or UPPER(@Status) = 'FINAL' )   
 BEGIN  
     IF Exists(Select Accession from tblElectronicInterfaceMDLAND where Accession =@Accession)   
    BEGIN  
    UPDATE tblElectronicInterfaceMDLAND set ClientCode = @ClientCode where Accession=@Accession  
    END  
    ELSE  
      
    Insert into tblElectronicInterfaceMDLAND (Accession, ClientCode)  
            values(@Accession, @ClientCode)  
      
END  
  

  If  ( (UPPER(@Interface)='11')  and (@ClientCode <> '2078' and @ClientCode <> '2087') ) or  ( (UPPER(@Interface)='11')  and (@ClientCode = '2078' or @ClientCode = '2087') and  UPPER(@Status) = 'FINAL')
 BEGIN  
     IF Exists(Select Accession from tblElectronicInterfaceChangeHealthcare where Accession =@Accession)   
    BEGIN  
    UPDATE tblElectronicInterfaceChangeHealthcare set ClientCode = @ClientCode where Accession=@Accession  
    END  
    ELSE  
      
    Insert into tblElectronicInterfaceChangeHealthcare (Accession, ClientCode)  
            values(@Accession, @ClientCode)  
      
END  

If  UPPER(@Interface)='12'  
 BEGIN  
     IF Exists(Select Accession from tblElectronicInterfaceNextGen where Accession =@Accession)   
    BEGIN  
    UPDATE tblElectronicInterfaceNextGen set ClientCode = @ClientCode where Accession=@Accession  
    END  
    ELSE  
      
    Insert into tblElectronicInterfaceNextGen (Accession, ClientCode)  
            values(@Accession, @ClientCode)  
      
END  

 
If  UPPER(@Interface)='DOH' and  UPPER(@Status) = 'FINAL' 
 BEGIN  
     IF not Exists(Select Accession from tblElectronicInterfaceNYSDOH where Accession =@Accession)   
    BEGIN  
        
    Insert into tblElectronicInterfaceNYSDOH (Accession, ClientCode)  
            values(@Accession, @ClientCode)  
	end
      
END 

 If (@Status = 'Final' )       
BEGIN    
if exists(select rt.Accession,ac.clientCode from    
 tblResultedTests rt inner join tblAccessions ac on ac.Accession =rt.Accession   inner join  tblPatient p on ac.PatientID =p.PatientId    
 inner join tblClients c on c.ClientCode =ac.ClientCode   
 where (  
 (  
 rt.ResultTest in ('sars')  and rt.PerformedTest  ='LD074') or   
 (rt.ResultTest in ('LD300')  and rt.PerformedTest  ='LD300') or  
 (rt.ResultTest in ('LD301')  and rt.PerformedTest  ='LD301')   
 )  
 and ac.ClientCode not in ('demo','demo2')   
 and rt.Result <> 'TNP' and (p.ptState ='GA' or c.State ='GA')  
 and rt.Status='Final'     
and ac.PatientID not in (select PatientId  from tblPatient where ptLastName Like '%Test%' or ptFirstName  Like '%Test%'  and   
PatientId not in ('P9927854','P9975323','P9990300')) and rt.Accession =@Accession)
begin   
  IF not Exists(Select Accession from tblElectronicInterfaceGADOH where Accession =@Accession)         
    BEGIN        
    Insert into tblElectronicInterfaceGADOH (Accession, ClientCode)     
	values(@Accession, @ClientCode)    
   end       
 end
END  

-- If (UPPER(@Status) = 'FINAL' and UPPER(@Interface)='DOH')     
--BEGIN     
--  IF not Exists(Select Accession from tblElectronicInterfaceGADOH where Accession =@Accession)       
--    BEGIN      
 
--    Insert into tblElectronicInterfaceGADOH (Accession, ClientCode)      
--          select rt.Accession,ac.clientCode from  
-- tblResultedTests rt inner join tblAccessions ac on ac.Accession =rt.Accession   inner join  tblPatient p on ac.PatientID =p.PatientId  
-- inner join tblClients c on c.ClientCode =ac.ClientCode 
-- where (
-- (
-- rt.ResultTest in ('sars')  and rt.PerformedTest  ='LD074') or 
-- (rt.ResultTest in ('LD300')  and rt.PerformedTest  ='LD300') or
-- (rt.ResultTest in ('LD301')  and rt.PerformedTest  ='LD301') 
-- )
-- and ac.ClientCode not in ('demo','demo2') 
-- and rt.Result <> 'TNP' and (p.ptState ='GA' or c.State ='GA')
-- and rt.Status='Final'   
--and ac.PatientID not in (select PatientId  from tblPatient where ptLastName Like '%Test%' or ptFirstName  Like '%Test%'  and 
--PatientId not in ('P9927854','P9975323','P9990300'))   
--   end     
--END    

If ( (UPPER(@Interface)='FAX') and @ClientCode <> '601') or ( (UPPER(@Interface)='FAX') and @ClientCode = '601' and UPPER(@Status) = 'FINAL' )
BEGIN  
DECLARE @faxNumber varchar(50)  
DECLARE @faxName varchar(100)  
select @faxNumber = FaxNumber, @faxName = Description from tblClientsFaxNumbers where clientcode = @ClientCode  
  
 IF Exists(Select Accession from tblAutoFax where Accession =@Accession)   
    BEGIN  
    UPDATE tblAutoFax set   
    ClientCode = @ClientCode,  
    FaxNumber = @faxNumber,  
    FaxName = @faxName  
    where Accession=@Accession  
    END  
    ELSE  
    BEGIN  
    Insert into tblAutoFax values(@Accession, @faxName, @faxNumber, @ClientCode)  
    END  
      
      
END  
  
 IF Exists(Select Accession from tblProcessHFusionBilling where Accession =@Accession)   
    BEGIN  
    UPDATE tblProcessHFusionBilling set   
    Accession = @Accession  
    where Accession=@Accession  
    END  
    ELSE  
    BEGIN  
    Insert into tblProcessHFusionBilling values(@Accession,NULL, 0,@ReleasedBy,getdate(),@ReleasedBy,getdate())  
 END  
 
	IF @Interface = 'EmailAll' 
	BEGIN
		IF NOT EXISTS(SELECT Accession FROM tblAutoEmail WHERE Accession = @Accession) 
			INSERT INTO tblAutoEmail VALUES(@Accession, @ClientCode);
	END
	ELSE IF @Interface = 'EmailFinal' AND @Status = 'Final'
	BEGIN
		IF NOT EXISTS(SELECT Accession FROM tblAutoEmail WHERE Accession = @Accession) 
			INSERT INTO tblAutoEmail VALUES(@Accession, @ClientCode);
	END
	ELSE IF @Interface = 'EmailCritical' AND @Status = 'Final'
	BEGIN
		IF EXISTS(SELECT 1 FROM dbo.tblResultedTests WHERE Accession = @Accession AND Status = 'Final'
				AND ResultFlag in ('RL','RH','CLRL','CHRH','Critical High','Critical Low'))
		BEGIN
			IF NOT EXISTS(SELECT Accession FROM tblAutoEmail WHERE Accession = @Accession) 
				INSERT INTO tblAutoEmail VALUES(@Accession, @ClientCode);
		END
	END
      
  --Delete from tblReviewAccession where Accession =@Accession  
  END  
END  
  
GO
/****** Object:  StoredProcedure [dbo].[spStoreForInterfaceReq]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spStoreForInterfaceReq]  
 -- Add the parameters for the stored procedure here  
 @Accession varchar(100), 
 @ClientCode varchar(20)
 AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
     IF Exists(Select Accession from tblElectronicReq where Accession =@Accession) 
    BEGIN
    UPDATE tblElectronicReq set ClientCode = @ClientCode where Accession=@Accession
    END
    ELSE
    
    Insert into tblElectronicReq (Accession, ClientCode)
            values(@Accession, @ClientCode)

			  IF Exists(Select Accession from tblElectronicGeneratePDF where Accession =@Accession) 
    BEGIN
    UPDATE tblElectronicGeneratePDF set ClientCode = @ClientCode where Accession=@Accession
    END
    ELSE
    
    Insert into tblElectronicGeneratePDF (Accession, ClientCode)
            values(@Accession, @ClientCode)
    
END


GO
/****** Object:  StoredProcedure [dbo].[spUpdateBill]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spUpdateBill]
	@Accession varchar(100),  
	@CPTCode varchar(100),
	@OrderedTest varchar(100),
	@BillType as varchar(100) ,
	@Modifier as varchar(100),
	@Location as varchar(100),
	@Status as varchar (100),
	@QSSLastUpdatedID as varchar(20) 
	
AS
BEGIN
     Update dbo.tblBill
     SET Modifier =  @Modifier ,
         Location =  @Location ,
         [Status] =  @Status  ,
         QSSLastUpdateID = @QSSLastUpdatedID ,
         QSSVersion =  QSSVersion + 1
     WHERE Accession = @Accession 
     AND   BTcode    =  @BillType
     AND   CPTcode   = @CPTCode
     AND   OrderedTestCode = @OrderedTest
     
	
END
GO
/****** Object:  StoredProcedure [dbo].[spUpdateClientBillAccession]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spUpdateClientBillAccession] 
	-- Add the parameters for the stored procedure here
	@Accession varchar(100),
	@ClientBillAccession varchar(100),
	@ReturnCode int output
AS
BEGIN

	SET NOCOUNT ON	
	
	UPDATE tblBillAccessions
	SET ClientBillAccession = @ClientBillAccession
	WHERE Accession = @Accession
	Set @ReturnCode = @@Error
	
END

GO
/****** Object:  StoredProcedure [dbo].[spUpdateClientCaseNumber]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[spUpdateClientCaseNumber]
@CaseNumber As varchar(100),
@ClientCaseno as varchar(100)
as
begin
 update tblPathologyCases set ClientCaseNumber=@ClientCaseno where CaseNumber=@CaseNumber
end

GO
/****** Object:  StoredProcedure [dbo].[spUpdateConsistency]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spUpdateConsistency] 
@ID varchar(100),
	@Accession varchar(100),
	@Cosnistency varchar(1)
AS
BEGIN
UPDATE tblResultedTests
SET Outcome = @Cosnistency
    WHERE     Accession =  @Accession
	and ID = @ID

END
GO
/****** Object:  StoredProcedure [dbo].[spUpdateCopay]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Paul Antompietri
-- Create date: 6/8/2020
-- Description:	Incremental add to CoPayPostCash in tblBillAccessions
-- =============================================
CREATE PROCEDURE [dbo].[spUpdateCopay]
	-- Add the parameters for the stored procedure here
	@Accession as varchar(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--Step 1 get copay as CPT balance of all lines with ptRespFlag = 1
	 Declare @Copay Decimal(18,2) = 
	isnull((select Sum(dbo.B_GetCptbalance(b.Accession, b.CPTCode, b.OrderedTestCode, b.Modifier, 0))
	from tblBill b
	inner join tblPayment p
	on p.Accession = b.Accession
	and p.CPTCode = b.CPTCode
	and p.Modifier = b.Modifier
	and p.ptRespFlag = 1
	where b.Accession = @Accession), 0)
	+ 
	isnull((select Sum(dbo.B_GetCptbalance(b.Accession, b.CPTCode, b.OrderedTestCode, b.Modifier, 1))
	from tblBill b
	inner join tblPayment p
	on p.Accession = b.Accession
	and p.CPTCode = b.CPTCode
	and p.Modifier = b.Modifier
	and p.ptRespFlag = 1
	where b.Accession = @Accession and b.ptRespFlag = 1), 0)
	--Step 2 IF > 0 update with amount found, else set to 0: copay can't be < 0
	If @Copay > 0 Update tblBillAccessions set CoPayPostCash = @Copay where Accession = @Accession
	else Update tblBillAccessions set CoPayPostCash = 0 where Accession = @Accession
END


GO
/****** Object:  StoredProcedure [dbo].[spUpdateCOVIDPatientEmailPortalEmailSent]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
create PROCEDURE [dbo].[spUpdateCOVIDPatientEmailPortalEmailSent]    
 @Accession varchar(100)    
AS    
    
BEGIN    
    
    UPDATE tblCOVIDPatientEmailPortal    
     SET EmailSent  = 'True'    
         
    WHERE Accession = @Accession    
       
END    
    
GO
/****** Object:  StoredProcedure [dbo].[spUpdateCOVIDPatientEmailPortalPDFGenerated]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


    
CREATE PROCEDURE [dbo].[spUpdateCOVIDPatientEmailPortalPDFGenerated]    
 @Accession varchar(100) 
AS    
    
BEGIN    
    
    UPDATE tblCOVIDPatientEmailPortal    
     SET PDFGenerated  = 'True'    
  --   , NeedSync = 'True'    
  
    WHERE Accession = @Accession    
       
END

GO
/****** Object:  StoredProcedure [dbo].[spUpdateCytoClientCaseNumber]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[spUpdateCytoClientCaseNumber]    
@CaseNumber As varchar(100),    
@ClientCaseno as varchar(100)    
as    
begin    
 update tblCytologyCases set ClientCaseNumber=@ClientCaseno where CaseNumber=@CaseNumber    
end
GO
/****** Object:  StoredProcedure [dbo].[spUpdateHFusionBilling]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spUpdateHFusionBilling] 
	@Accession varchar(100)

AS
BEGIN
	UPDATE tblProcessHFusionBilling
		SET HasProcessed = 1,
			ProcessedDate = GETDATE(),
			QSSUpdateDate = GETDATE()

	WHERE     Accession =  @Accession


END
GO
/****** Object:  StoredProcedure [dbo].[spUpdateHLOrderStatus]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spUpdateHLOrderStatus] 

@MailOutLabCode varchar(20),
@MOAccession varchar (100), 
@Status as varchar(10)

AS
BEGIN
UPDATE tblMailoutOrders
SET  Status = @Status
WHERE  MailOutLabCode = @MailOutLabCode and MOAccession =  @MOAccession


exec spAccessionTransactionAudits @Accession = @MOAccession, @Action = 'HL7 Mailout Order File was created', @CreatedBy = @MailOutLabCode
END



GO
/****** Object:  StoredProcedure [dbo].[spUpdateMailoutBatchID]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spUpdateMailoutBatchID] 

@MailOutLabCode varchar(20),
@MOAccession varchar (100),
@SentBatchID varchar(20)

AS
BEGIN
UPDATE tblMailoutOrders
SET SentBatchID = @SentBatchID ,
Status = 'Waiting'
WHERE  MailOutLabCode = @MailOutLabCode and MOAccession =  @MOAccession

END
GO
/****** Object:  StoredProcedure [dbo].[spUpdateNextBillDate]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spUpdateNextBillDate] 
	-- Add the parameters for the stored procedure here
	@Accession varchar(100) 
AS
BEGIN

DECLARE @billCycle int

	SET NOCOUNT ON	
	
	SELECT @billCycle = BillCycle from tblBillTypeDefinitions
	WHERE BTcode in (Select CurrentBillType from tblBillAccessions where Accession = @Accession)
	
	UPDATE tblBill
	SET NextBillDate = DATEADD(d, @billCycle, getdate())
	WHERE Accession = @Accession
	and BTcode = (Select CurrentBillType from tblBillAccessions where Accession = @Accession)
	
END
GO
/****** Object:  StoredProcedure [dbo].[spUpdatePathologyTestsStatus]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[spUpdatePathologyTestsStatus]    
@Accession varchar(100),    
@TestCode varchar(100),    
@Status varchar(50)    
as    
    
begin    
    
  update tblPathologycases set Status=@Status where Accession=@Accession and TestCode=@TestCode    
    
end 

GO
/****** Object:  StoredProcedure [dbo].[spUpdatePaymentFromRemittanceFile]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spUpdatePaymentFromRemittanceFile]
	@Accession varchar(100),
	@CheckNumber varchar(100),
	@CheckDate datetime,
	@CPT_Code varchar(30),
	@Modifier varchar(100),
	@CPT_Paid [decimal](18, 2),
	@AdjustmentAmount [decimal](18, 2),
	@QSSLastUpdateID varchar(20)
	
	
AS
BEGIN
declare @BTCode varchar(20)
declare @OrderedTest varchar(100)
declare @GroupFlag bit
declare @CPTKey varchar(100)

	IF EXISTS (SELECT top 1 Accession from tblBill where Accession = Accession and CPTcode = @CPT_Code and Modifier = @Modifier)
	BEGIN
	
	--if patient check number has been processe then bypass:
	--if not ((select count(*) from tblPayment where Accession = @Accession and CPTcode = @CPT_Code and Upper(CheckNumber) = Upper(@CheckNumber)) > 0)
	if  ((select count(*) from tblBillingTempRemitArchive where Accession = @Accession and CPT_code = @CPT_Code and Modifier = @Modifier and Upper(CheckNumber) = Upper(@CheckNumber)) = 0)
		begin
		--if @CPT_Paid > 0
		--begin
	if not ((select count(*) from tblPayment where Accession = @Accession and CPTcode = @CPT_Code and Modifier = @Modifier and Upper(CheckNumber) = Upper(@CheckNumber) and PaymentAmt = @CPT_Paid) > 0)	
	begin
		select top 1 @BTCode = BTcode, @OrderedTest = OrderedTest, @GroupFlag = GroupFlag from tblPayment where Accession = @Accession and CPTcode = @CPT_Code order by QssUpdateDate desc
		--select @BTCode = BTcode, @OrderedTest = OrderedTestCode from tblBill where Accession = @Accession and CPTcode = @CPT_Code
		
			Insert into tblPayment
			(Accession,
			BTCode,
			OrderedTest,
			CPTcode,
			EntryDate,
			PaymentAmt,
			--AdjustmentAmt,
			CheckNumber,
			CheckDate,
			QSSCreatedByID,
			QSSCreatedDate, 
			QSSLastUpdateID, 
			QSSUpdateDate,
			QSSVersion,
			Modifier,
			GroupFlag
			)
			values
			(@Accession,
			@BTCode,
			@OrderedTest,
			@CPT_Code,
			GetDate(),
			@CPT_Paid,
			--@AdjustmentAmount,
			@CheckNumber,
			@CheckDate,
			@QSSLastUpdateID,
			GetDate(), 
			@QSSLastUpdateID,
			GetDate(), 
			0,
			@Modifier,
			@GroupFlag)

			Set @CPTKey = @CPT_Code
			if len(@Modifier) > 0 set @CPTKey += ':' + @Modifier
			--Set @CPTKey += ' Group flag '
			--if @GroupFlag = 1 Set @CPTKey += 'True' Else Set @CPTKey += 'False'
			
			--Add Audit trail here:
			declare @AdjustmentNote varchar(max)='An adjustment of $' + cast(@AdjustmentAmount as varchar) + ' was submitted to CPT ' + cast(@CPTKey as varchar) + ' from electronic remittance. Bill Type: ' + cast(@BTCode as varchar)
			declare @PaymentNote varchar(max) = 'A payment of $' + cast(@CPT_Paid as varchar) + ' was submitted to CPT ' + cast(@CPTKey as varchar) + ' from electronic remittance. Bill Type: ' + cast(@BTCode as varchar)
			
			--if @AdjustmentAmount>0
			--begin
			--	exec spSaveBillAuditDetails @Accession=@Accession, @NoteType = 'Remit', @Note = @AdjustmentNote, @UserID = @QSSLastUpdateID;
			--end
			--if @CPT_Paid>0
			--begin
				exec spSaveBillAuditDetails @Accession=@Accession, @NoteType = 'Remit', @Note = @PaymentNote, @UserID = @QSSLastUpdateID;
			--end
		end
	end	
--	end
  END
END
GO
/****** Object:  StoredProcedure [dbo].[spUpdatePlateInformation]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spUpdatePlateInformation]  
 @Accession varchar(100),
 @PlateID varchar(100),
 @WellPosition varchar(100) 
 

AS  
BEGIN  



  UPDATE dbo.tblAccessions
    SET 
		PlateID  		    = @PlateID,		
		WellPosition 	= @WellPosition
		
	WHERE Accession      = @Accession 

END
GO
/****** Object:  StoredProcedure [dbo].[spUpdateReceivingPool]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spUpdateReceivingPool] 

@PreAccession varchar (100),
@PatientID varchar(100)



AS
BEGIN
UPDATE tblreceivingpool
SET PatientID = @PatientID
 WHERE     PreAccession =  @PreAccession

	
END
GO
/****** Object:  StoredProcedure [dbo].[spUpdateReportOrderHeader]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spUpdateReportOrderHeader]
  @Header As Varchar(200),
  @OrderNumber int,
  @UserID varchar(10)
	
AS 
 
	BEGIN 
	IF EXISTS ( SELECT OrderNumber FROM  dbo.tblTestsReportOrder WHERE OrderNumber = @OrderNumber AND Header != @Header
	 ) 
	BEGIN 
	RAISERROR ('Order Number has been utilized', -- Message text.
               16, -- Severity.
               1 -- State.
               )

	END
	ELSE
	BEGIN
		UPDATE dbo.tblTestsReportOrder
		SET OrderNumber = @OrderNumber,
		    QSSLastUpdateID = @UserID,
		    QSSUpdateDate =  GETDATE()
		WHERE Header = @Header
    END
    EXEC spRebuildtblTestsReportOrderNew
END

GO
/****** Object:  StoredProcedure [dbo].[spUpdateReportOrderHeaderSection]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spUpdateReportOrderHeaderSection]

AS 
 
BEGIN 

		UPDATE
			tblTestsReportOrderNew
		SET
			tblTestsReportOrderNew.Section = RAN.Section
		FROM
			tblTestsReportOrderNew SI
		INNER JOIN
			tblTestsReportOrder RAN
		ON 
			SI.header = RAN.header

END

GO
/****** Object:  StoredProcedure [dbo].[spUpdateReportStatus]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  create procedure [dbo].[spUpdateReportStatus]    
 @dtList as dtNJList ReadOnly                      
 as     
 begin    
 update tblCOVIDNJDOH set Reported =1 where Accession in (select Accession from @dtList)    
 insert into tblArchiveCOVIDNJDOH(Accession,Reported,ReportedDate)-- values (@Accession,1,getdate())    
 select Accession,1,getdate() from @dtList where Accession not in (select Accession from tblArchiveCOVIDNJDOH)  
   
 end

GO
/****** Object:  StoredProcedure [dbo].[spUpdateResultComment]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[spUpdateResultComment]
	@Accession varchar(100),
	@ResultTest varchar(100),
	@ResultComment varchar(max)
AS
BEGIN
	IF exists(select 1 from tblResultedTests where Accession = @Accession and  ResultTest = @ResultTest)
	BEGIN
		UPDATE tblResultedTests 
		SET 	
				ResultComment = @ResultComment
		where Accession = @Accession and  ResultTest = @ResultTest
	END
	
END






GO
/****** Object:  StoredProcedure [dbo].[spUpdateResultCommentACCUREFERENCE]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create PROCEDURE [dbo].[spUpdateResultCommentACCUREFERENCE]
	@Accession varchar(100),
	@ResultTest varchar(100),
	@ResultComment varchar(max)
AS
BEGIN
	IF exists(select 1 from tblResultedTests where Accession = @Accession and  ResultTest = @ResultTest and QSSLastUpdateID = 'ACCUREFERENCE')
	BEGIN
		UPDATE tblResultedTests 
		SET 	
				ResultComment = @ResultComment
		where Accession = @Accession and  ResultTest = @ResultTest and QSSLastUpdateID = 'ACCUREFERENCE'
	END
	
END


GO
/****** Object:  StoredProcedure [dbo].[spUpdateResultedTests2Final]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[spUpdateResultedTests2Final]  

        @Accession varchar(100),
        @QSSLastUpdatedByID varchar(20)
       
AS  
BEGIN  
	UPDATE tblResultedTests
	SET	Status = 'Final'
	where Accession = @Accession 
   
   exec spAddToResultsReview @Accession = @Accession, @QSSLastUpdatedByID = @QSSLastUpdatedByID
END
GO
/****** Object:  StoredProcedure [dbo].[spUpdateResultedTestsStatus]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[spUpdateResultedTestsStatus]  
@Accession varchar(100),  
@TestCode varchar(100),  
@Status varchar(50)  
as  
  
begin  
  
 update [tblResultedTests] set Status=@Status where Accession=@Accession and PerformedTest=@TestCode  
  
end  
  
GO
/****** Object:  StoredProcedure [dbo].[spUpdateResultTestStatus]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spUpdateResultTestStatus]  
 @ID int,
 @Status varchar(20),
 @QSSLastUpdatedID varchar(20), 
 @ReturnCode int output
 

AS  
BEGIN  

SET @ReturnCode = 0

  UPDATE dbo.tblResultedTests
    SET 
		Status     		    = @Status,		
		QSSLastUpdateID 	= @QSSLastUpdatedID,
		QSSUpdateDate 		= getDate() ,
		QSSVersion  		= QSSVersion + 1			
	WHERE id      = @ID 

END
GO
/****** Object:  StoredProcedure [dbo].[spUpdateUserID]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spUpdateUserID] 

@UserID varchar (20),
--@Password varchar(20),
@UserName varchar(100),
@UserLastName varchar(100),
@RoleType varchar(50)  ,
@AdminFlag bit ,
@CanAddUsers bit ,
@BillType varchar(50),
@LastUpdatedBy varchar(20)


AS
BEGIN
UPDATE tblUsersID
SET UserName = @UserName ,
    UserLastName = @UserLastName ,
    RoleType = @RoleType,
    AdminFlag = @AdminFlag ,
    CanAddUsers = @CanAddUsers ,
	BillTypeDefault = @BillType,
    LastUpdatedBy = @LastUpdatedBy
    WHERE     UserID =  @UserID

  --log  the activity
	  --if @@ERROR = 0
	  --begin
		 -- exec spAddUserActivity 
		 -- @ClientCode = @ClientCode, 
		 -- @UserID  = @UserID, 
		 -- @Action = 'Updated User Information' , 
		 -- @UserName = @UserName ,
		 -- @LastName = @UserLastName ,
		 -- @ActiveClients = @ActiveClients ,
		 -- @CreatedBy = @LastUpdatedBy
	  --end

	
END
GO
/****** Object:  StoredProcedure [dbo].[spUpdateUserLogin]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Batch submitted through debugger: SQLQuery6.sql|35|0|C:\Documents and Settings\Administrator\Local Settings\Temp\~vs18C9.sql
-- =============================================
-- Author:		<Author,,HF>
-- Create date: <Create 11/12/2010>
-- Description:	<Description Procedure to log user activity>
-- =============================================
CREATE PROCEDURE [dbo].[spUpdateUserLogin] 
	-- Add the parameters for the stored procedure here
	@ID int ,
	@LogoutTimeStamp datetime
AS
BEGIN
	SET NOCOUNT ON	
	
	UPDATE tblUserLogins
	SET LogoutTimeStamp = @LogoutTimeStamp
	WHERE id = @ID
	
END
GO
/****** Object:  StoredProcedure [dbo].[spValidateAccession]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[spValidateAccession]
	@Accession varchar(100)
AS
BEGIN
	select top 1 Accession
	from tblAccessions  (nolock) 
	
	where Accession = @Accession
		
END


GO
/****** Object:  StoredProcedure [dbo].[spValidateCheckNumber]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spValidateCheckNumber]
 @CheckNumber varchar(100)  
AS  
BEGIN  
 SET NOCOUNT ON  
SELECT TOP 1 [CheckNumber]  FROM tblPayment with (NOLOCK) WHERE CheckNumber = @CheckNumber
END
GO
/****** Object:  StoredProcedure [dbo].[spValidateCPTCode]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create PROCEDURE [dbo].[spValidateCPTCode]
 @CPTcode varchar(100)  
AS  
BEGIN  
 SET NOCOUNT ON  
SELECT TOP 1 [Description]  FROM tblFeeDefinitions with (NOLOCK) WHERE CPTcode = @CPTcode
END



GO
/****** Object:  StoredProcedure [dbo].[spValidateElementCode]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spValidateElementCode] --'sd'  
 @ElementCode varchar(100)  
AS  
BEGIN  
 SET NOCOUNT ON  
Declare @Description varchar(100)='0'
SELECT  @Description=ExternalName  FROM tblResultedTestsDefinitions with (NOLOCK) WHERE TestCode = @ElementCode
Select @Description
END
GO
/****** Object:  StoredProcedure [dbo].[spValidateMailoutTranslationCode]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:      <Author,,Name>
-- Create date: <Create Date,,>
-- Description:    <Description,,>
-- =============================================
create PROCEDURE [dbo].[spValidateMailoutTranslationCode]
              @MailoutLabCode varchar(20),
			  @MailoutTestCode VARCHAR(100),
			  @TestCode varchar(100)
AS
BEGIN
--is there any another testcode using this mailout code?
              select *
	from tblMailoutTestCodes
	where MailoutLabCode = @MailoutLabCode
	AND MailoutTestCode = @MailoutTestCode
	AND TestCode <> @TestCode
	
END




GO
/****** Object:  StoredProcedure [dbo].[spValidateRack]    Script Date: 14.04.2021 13:43:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
CREATE PROCEDURE [dbo].[spValidateRack]  
	@RackValueTable RackType READONLY  
AS  
	SET NOCOUNT ON;  
	SELECT RowID, ColumnID, ColumnValue,   
	'Invalid accession ' + ColumnValue  + ' in position ' + CHAR(64 + ColumnID) +  CONVERT(VARCHAR(2), RowID)  [Message]   
	FROM @RackValueTable a  
	LEFT JOIN tblAccessions ON ColumnValue = Accession  
	WHERE ColumnValue != '' AND Accession IS NULL;
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vAbnormalValues'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vAbnormalValues'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[25] 4[23] 2[34] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "A_1"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 125
               Right = 198
            End
            DisplayFlags = 280
            TopColumn = 3
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vAccessionProgress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vAccessionProgress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vCriticalValues'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vCriticalValues'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "tblOrderedTests"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 126
               Right = 213
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "tblAccessions"
            Begin Extent = 
               Top = 6
               Left = 251
               Bottom = 126
               Right = 471
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "tblPatient"
            Begin Extent = 
               Top = 6
               Left = 509
               Bottom = 126
               Right = 729
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "tblClients"
            Begin Extent = 
               Top = 6
               Left = 767
               Bottom = 126
               Right = 942
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "tblPhysicians"
            Begin Extent = 
               Top = 6
               Left = 980
               Bottom = 126
               Right = 1155
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "tblOrderedTestsDefinitions"
            Begin Extent = 
               Top = 6
               Left = 1193
               Bottom = 126
               Right = 1378
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "tblInsuranceCompanies"
            Begin Extent = 
               Top = 126
               Left = 38
               Bottom = 246
               Right ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vPatientListReport'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane2', @value=N'= 215
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "tblReleasedForReview"
            Begin Extent = 
               Top = 126
               Left = 253
               Bottom = 246
               Right = 413
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vPatientListReport'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=2 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vPatientListReport'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vResultTestValueListing'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'vResultTestValueListing'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[29] 4[19] 2[33] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "a"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 125
               Right = 258
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "p"
            Begin Extent = 
               Top = 126
               Left = 38
               Bottom = 245
               Right = 258
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "i"
            Begin Extent = 
               Top = 6
               Left = 296
               Bottom = 125
               Right = 473
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "ii"
            Begin Extent = 
               Top = 126
               Left = 296
               Bottom = 245
               Right = 471
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "c"
            Begin Extent = 
               Top = 246
               Left = 38
               Bottom = 365
               Right = 213
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "phy"
            Begin Extent = 
               Top = 246
               Left = 251
               Bottom = 365
               Right = 426
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "b"
            Begin Extent = 
               Top = 366
               Left = 38
               Bottom = 485
               Right = 223
            End
            DisplayFlags = 280
            TopColumn = 0
         End' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'WorkFile_Report_View'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane2', @value=N'
         Begin Table = "r"
            Begin Extent = 
               Top = 6
               Left = 511
               Bottom = 125
               Right = 704
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'WorkFile_Report_View'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=2 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'WorkFile_Report_View'
GO
USE [master]
GO
ALTER DATABASE [LincolnDiagnosticsLIS] SET  READ_WRITE 
GO